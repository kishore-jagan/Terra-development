/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, markType } from "./type";
import { List$1 } from "./List$1";
import { VersionQueueAction } from "./VersionQueueAction";
/**
 * @hidden
 */
export let VersionQueueHelper = /*@__PURE__*/ (() => {
    class VersionQueueHelper extends Base {
        constructor() {
            super(...arguments);
            this.b = new List$1(VersionQueueAction.$, 0);
            this.c = 0;
        }
        e() {
            if (this.c >= 0x7FFFFFFF - 1) {
                this.c = 0;
            }
            else {
                this.c++;
            }
            let a = new List$1(VersionQueueAction.$, 0);
            for (let b = 0; b < this.b.count; b++) {
                if (this.a(this.b._inner[b].d)) {
                    a.add(this.b._inner[b]);
                }
            }
            for (let c = 0; c < a.count; c++) {
                this.b.remove(a._inner[c]);
            }
            for (let d = 0; d < a.count; d++) {
                a._inner[d].b();
            }
        }
        d() {
            return this.c;
        }
        f(a, b) {
            if (this.a(b)) {
                a();
                return;
            }
            this.b.add(new VersionQueueAction(a, b));
        }
        a(a) {
            if (this.c > a) {
                return true;
            }
            if (this.c >= 0x7FFFFFFF - 1 && a < 0x7FFFFFFF - 1) {
                return true;
            }
            return false;
        }
    }
    VersionQueueHelper.$t = markType(VersionQueueHelper, 'VersionQueueHelper');
    return VersionQueueHelper;
})();
