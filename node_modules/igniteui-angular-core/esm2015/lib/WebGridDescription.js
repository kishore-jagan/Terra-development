/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { WebGridBaseDirectiveDescription } from "./WebGridBaseDirectiveDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let WebGridDescription = /*@__PURE__*/ (() => {
    class WebGridDescription extends WebGridBaseDirectiveDescription {
        constructor() {
            super();
            this.gt = false;
            this.g5 = null;
            this.g3 = null;
            this.g9 = null;
            this.g2 = null;
            this.gz = 0;
            this.go = null;
            this.gn = null;
            this.gu = false;
            this.gr = null;
            this.g4 = null;
            this.g6 = null;
            this.g8 = null;
            this.gv = false;
            this.g1 = null;
            this.g7 = null;
        }
        get_type() {
            return "WebGrid";
        }
        get groupsExpanded() {
            return this.gt;
        }
        set groupsExpanded(a) {
            this.gt = a;
            this.g("GroupsExpanded");
        }
        get dropAreaTemplateRef() {
            return this.g5;
        }
        set dropAreaTemplateRef(a) {
            this.g5 = a;
            this.g("DropAreaTemplateRef");
        }
        get detailTemplateRef() {
            return this.g3;
        }
        set detailTemplateRef(a) {
            this.g3 = a;
            this.g("DetailTemplateRef");
        }
        get id() {
            return this.g9;
        }
        set id(a) {
            this.g9 = a;
            this.g("Id");
        }
        get dataRef() {
            return this.g2;
        }
        set dataRef(a) {
            this.g2 = a;
            this.g("DataRef");
        }
        get totalItemCount() {
            return this.gz;
        }
        set totalItemCount(a) {
            this.gz = a;
            this.g("TotalItemCount");
        }
        get groupingExpressions() {
            return this.go;
        }
        set groupingExpressions(a) {
            this.go = a;
            this.g("GroupingExpressions");
        }
        get groupingExpansionState() {
            return this.gn;
        }
        set groupingExpansionState(a) {
            this.gn = a;
            this.g("GroupingExpansionState");
        }
        get hideGroupedColumns() {
            return this.gu;
        }
        set hideGroupedColumns(a) {
            this.gu = a;
            this.g("HideGroupedColumns");
        }
        get groupStrategy() {
            return this.gr;
        }
        set groupStrategy(a) {
            this.gr = a;
            this.g("GroupStrategy");
        }
        get dropAreaMessage() {
            return this.g4;
        }
        set dropAreaMessage(a) {
            this.g4 = a;
            this.g("DropAreaMessage");
        }
        get groupByRowSelectorTemplateRef() {
            return this.g6;
        }
        set groupByRowSelectorTemplateRef(a) {
            this.g6 = a;
            this.g("GroupByRowSelectorTemplateRef");
        }
        get groupRowTemplateRef() {
            return this.g8;
        }
        set groupRowTemplateRef(a) {
            this.g8 = a;
            this.g("GroupRowTemplateRef");
        }
        get showGroupArea() {
            return this.gv;
        }
        set showGroupArea(a) {
            this.gv = a;
            this.g("ShowGroupArea");
        }
        get dataPreLoadRef() {
            return this.g1;
        }
        set dataPreLoadRef(a) {
            this.g1 = a;
            this.g("DataPreLoadRef");
        }
        get groupingDoneRef() {
            return this.g7;
        }
        set groupingDoneRef(a) {
            this.g7 = a;
            this.g("GroupingDoneRef");
        }
    }
    WebGridDescription.$t = markType(WebGridDescription, 'WebGridDescription', WebGridBaseDirectiveDescription.$);
    return WebGridDescription;
})();
