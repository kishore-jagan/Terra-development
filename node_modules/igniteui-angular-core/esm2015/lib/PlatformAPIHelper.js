/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, toNullable, Point_$type, markType, PointUtil } from "./type";
import { Brush } from "./Brush";
import { Color } from "./Color";
import { Size } from "./Size";
import { Rect } from "./Rect";
import { DoubleCollection } from "./DoubleCollection";
/**
 * @hidden
 */
export let PlatformAPIHelper = /*@__PURE__*/ (() => {
    class PlatformAPIHelper extends Base {
        static a(a) {
            if (a == null) {
                return null;
            }
            return a._fill;
        }
        static b(a) {
            if (Color.c(toNullable(Color.$, a), toNullable(Color.$, null))) {
                return null;
            }
            return a.colorString;
        }
        static d(a) {
            if (PointUtil.equals(a, null)) {
                return null;
            }
            let b = {};
            let c = b;
            c["x"] = a.x;
            c["y"] = a.y;
            return c;
        }
        static g(a) {
            if (Size.l_op_Equality_Lifted(toNullable(Size.$, a), toNullable(Size.$, null))) {
                return null;
            }
            let b = {};
            let c = b;
            c["width"] = a.width;
            c["height"] = a.height;
            return c;
        }
        static f(a) {
            if (Rect.l_op_Equality(a, null)) {
                return null;
            }
            let b = {};
            let c = b;
            c["left"] = a.left;
            c["top"] = a.top;
            c["width"] = a.width;
            c["height"] = a.height;
            return c;
        }
        static c(a) {
            if (a == null) {
                return null;
            }
            return a.toArray();
        }
        static h(a) {
            if (a == null) {
                return null;
            }
            return Brush.create(a);
        }
        static j(a) {
            if (a == null) {
                return null;
            }
            let b = a;
            return { $type: Point_$type, x: b["x"], y: b["y"] };
        }
        static m(a) {
            if (a == null) {
                return null;
            }
            let b = a;
            return new Size(1, b["width"], b["height"]);
        }
        static l(a) {
            if (a == null) {
                return null;
            }
            let b = a;
            return new Rect(0, b["left"], b["top"], b["width"], b["height"]);
        }
        static i(a) {
            if (a == null) {
                return null;
            }
            let b = a;
            let c = new DoubleCollection();
            for (let d = 0; d < b.length; d++) {
                c.add(b[d]);
            }
            return c;
        }
        static e(a, b) {
            if (a == Brush.$) {
                return PlatformAPIHelper.a(b);
            }
            if (a == Color.$) {
                return PlatformAPIHelper.b(b);
            }
            if (a == Point_$type) {
                return PlatformAPIHelper.d(b);
            }
            if (a == Size.$) {
                return PlatformAPIHelper.g(b);
            }
            if (a == Rect.$) {
                return PlatformAPIHelper.f(b);
            }
            if (a == DoubleCollection.$) {
                return PlatformAPIHelper.c(b);
            }
            return b;
        }
        static k(a, b) {
            if (a == Brush.$) {
                return PlatformAPIHelper.h(b);
            }
            if (a == Color.$) {
                let c = PlatformAPIHelper.h(b);
                if (c == null) {
                    return null;
                }
                return c._fill;
            }
            if (a == Point_$type) {
                return PlatformAPIHelper.j(b);
            }
            if (a == Size.$) {
                return PlatformAPIHelper.m(b);
            }
            if (a == Rect.$) {
                return PlatformAPIHelper.l(b);
            }
            if (a == DoubleCollection.$) {
                return PlatformAPIHelper.i(b);
            }
            return b;
        }
        static n(a) {
            if (a == null) {
                return null;
            }
            if (a.length == 1) {
                return a.toLowerCase();
            }
            return a.substr(0, 1).toLowerCase() + a.substr(1);
        }
        static o(a) {
            if (a == null) {
                return null;
            }
            if (a.length == 1) {
                return a.toUpperCase();
            }
            return a.substr(0, 1).toUpperCase() + a.substr(1);
        }
    }
    PlatformAPIHelper.$t = markType(PlatformAPIHelper, 'PlatformAPIHelper');
    return PlatformAPIHelper;
})();
