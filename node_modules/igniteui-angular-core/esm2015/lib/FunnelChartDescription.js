/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Description } from "./Description";
import { markType } from "./type";
/**
 * @hidden
 */
export let FunnelChartDescription = /*@__PURE__*/ (() => {
    class FunnelChartDescription extends Description {
        constructor() {
            super();
            this.aq = null;
            this.be = null;
            this.au = null;
            this.v = 0;
            this.x = 0;
            this.ap = null;
            this.av = null;
            this.h = null;
            this.i = null;
            this.w = 0;
            this.aw = null;
            this.a0 = null;
            this.ax = null;
            this.a3 = null;
            this.az = null;
            this.at = null;
            this.ar = null;
            this.as = null;
            this.an = 0;
            this.m = false;
            this.n = false;
            this.l = false;
            this.p = false;
            this.a4 = null;
            this.a5 = null;
            this.ab = 0;
            this.aa = 0;
            this.bc = null;
            this.bd = null;
            this.ad = 0;
            this.ac = 0;
            this.ay = null;
            this.o = false;
            this.bb = null;
            this.a2 = null;
            this.y = 0;
            this.z = 0;
            this.a1 = null;
            this.ba = null;
            this.a6 = null;
            this.a7 = null;
            this.a9 = null;
            this.a8 = null;
        }
        get_type() {
            return "FunnelChart";
        }
        get type() {
            return this.get_type();
        }
        get dataSourceRef() {
            return this.aq;
        }
        set dataSourceRef(a) {
            this.aq = a;
            this.g("DataSourceRef");
        }
        get valueMemberPath() {
            return this.be;
        }
        set valueMemberPath(a) {
            this.be = a;
            this.g("ValueMemberPath");
        }
        get highlightedValueMemberPath() {
            return this.au;
        }
        set highlightedValueMemberPath(a) {
            this.au = a;
            this.g("HighlightedValueMemberPath");
        }
        get actualHighlightValueOpacity() {
            return this.v;
        }
        set actualHighlightValueOpacity(a) {
            this.v = a;
            this.g("ActualHighlightValueOpacity");
        }
        get highlightValueOpacity() {
            return this.x;
        }
        set highlightValueOpacity(a) {
            this.x = a;
            this.g("HighlightValueOpacity");
        }
        get actualHighlightValueDisplayMode() {
            return this.ap;
        }
        set actualHighlightValueDisplayMode(a) {
            this.ap = a;
            this.g("ActualHighlightValueDisplayMode");
        }
        get highlightValueDisplayMode() {
            return this.av;
        }
        set highlightValueDisplayMode(a) {
            this.av = a;
            this.g("HighlightValueDisplayMode");
        }
        get brushes() {
            return this.h;
        }
        set brushes(a) {
            this.h = a;
            this.g("Brushes");
        }
        get outlines() {
            return this.i;
        }
        set outlines(a) {
            this.i = a;
            this.g("Outlines");
        }
        get bottomEdgeWidth() {
            return this.w;
        }
        set bottomEdgeWidth(a) {
            this.w = a;
            this.g("BottomEdgeWidth");
        }
        get innerLabelMemberPath() {
            return this.aw;
        }
        set innerLabelMemberPath(a) {
            this.aw = a;
            this.g("InnerLabelMemberPath");
        }
        get outerLabelMemberPath() {
            return this.a0;
        }
        set outerLabelMemberPath(a) {
            this.a0 = a;
            this.g("OuterLabelMemberPath");
        }
        get innerLabelVisibility() {
            return this.ax;
        }
        set innerLabelVisibility(a) {
            this.ax = a;
            this.g("InnerLabelVisibility");
        }
        get outerLabelVisibility() {
            return this.a3;
        }
        set outerLabelVisibility(a) {
            this.a3 = a;
            this.g("OuterLabelVisibility");
        }
        get outerLabelAlignment() {
            return this.az;
        }
        set outerLabelAlignment(a) {
            this.az = a;
            this.g("OuterLabelAlignment");
        }
        get funnelSliceDisplay() {
            return this.at;
        }
        set funnelSliceDisplay(a) {
            this.at = a;
            this.g("FunnelSliceDisplay");
        }
        get formatInnerLabelRef() {
            return this.ar;
        }
        set formatInnerLabelRef(a) {
            this.ar = a;
            this.g("FormatInnerLabelRef");
        }
        get formatOuterLabelRef() {
            return this.as;
        }
        set formatOuterLabelRef(a) {
            this.as = a;
            this.g("FormatOuterLabelRef");
        }
        get transitionDuration() {
            return this.an;
        }
        set transitionDuration(a) {
            this.an = a;
            this.g("TransitionDuration");
        }
        get isInverted() {
            return this.m;
        }
        set isInverted(a) {
            this.m = a;
            this.g("IsInverted");
        }
        get useBezierCurve() {
            return this.n;
        }
        set useBezierCurve(a) {
            this.n = a;
            this.g("UseBezierCurve");
        }
        get allowSliceSelection() {
            return this.l;
        }
        set allowSliceSelection(a) {
            this.l = a;
            this.g("AllowSliceSelection");
        }
        get useUnselectedStyle() {
            return this.p;
        }
        set useUnselectedStyle(a) {
            this.p = a;
            this.g("UseUnselectedStyle");
        }
        get selectedSliceFill() {
            return this.a4;
        }
        set selectedSliceFill(a) {
            this.a4 = a;
            this.g("SelectedSliceFill");
        }
        get selectedSliceStroke() {
            return this.a5;
        }
        set selectedSliceStroke(a) {
            this.a5 = a;
            this.g("SelectedSliceStroke");
        }
        get selectedSliceStrokeThickness() {
            return this.ab;
        }
        set selectedSliceStrokeThickness(a) {
            this.ab = a;
            this.g("SelectedSliceStrokeThickness");
        }
        get selectedSliceOpacity() {
            return this.aa;
        }
        set selectedSliceOpacity(a) {
            this.aa = a;
            this.g("SelectedSliceOpacity");
        }
        get unselectedSliceFill() {
            return this.bc;
        }
        set unselectedSliceFill(a) {
            this.bc = a;
            this.g("UnselectedSliceFill");
        }
        get unselectedSliceStroke() {
            return this.bd;
        }
        set unselectedSliceStroke(a) {
            this.bd = a;
            this.g("UnselectedSliceStroke");
        }
        get unselectedSliceStrokeThickness() {
            return this.ad;
        }
        set unselectedSliceStrokeThickness(a) {
            this.ad = a;
            this.g("UnselectedSliceStrokeThickness");
        }
        get unselectedSliceOpacity() {
            return this.ac;
        }
        set unselectedSliceOpacity(a) {
            this.ac = a;
            this.g("UnselectedSliceOpacity");
        }
        get legendItemBadgeTemplateRef() {
            return this.ay;
        }
        set legendItemBadgeTemplateRef(a) {
            this.ay = a;
            this.g("LegendItemBadgeTemplateRef");
        }
        get useOuterLabelsForLegend() {
            return this.o;
        }
        set useOuterLabelsForLegend(a) {
            this.o = a;
            this.g("UseOuterLabelsForLegend");
        }
        get textStyle() {
            return this.bb;
        }
        set textStyle(a) {
            this.bb = a;
            this.g("TextStyle");
        }
        get outerLabelTextStyle() {
            return this.a2;
        }
        set outerLabelTextStyle(a) {
            this.a2 = a;
            this.g("OuterLabelTextStyle");
        }
        get outlineThickness() {
            return this.y;
        }
        set outlineThickness(a) {
            this.y = a;
            this.g("OutlineThickness");
        }
        get pixelScalingRatio() {
            return this.z;
        }
        set pixelScalingRatio(a) {
            this.z = a;
            this.g("PixelScalingRatio");
        }
        get outerLabelTextColor() {
            return this.a1;
        }
        set outerLabelTextColor(a) {
            this.a1 = a;
            this.g("OuterLabelTextColor");
        }
        get textColor() {
            return this.ba;
        }
        set textColor(a) {
            this.ba = a;
            this.g("TextColor");
        }
        get sliceClickedRef() {
            return this.a6;
        }
        set sliceClickedRef(a) {
            this.a6 = a;
            this.g("SliceClickedRef");
        }
        get sliceEnterRef() {
            return this.a7;
        }
        set sliceEnterRef(a) {
            this.a7 = a;
            this.g("SliceEnterRef");
        }
        get sliceLeaveRef() {
            return this.a9;
        }
        set sliceLeaveRef(a) {
            this.a9 = a;
            this.g("SliceLeaveRef");
        }
        get sliceHoverRef() {
            return this.a8;
        }
        set sliceHoverRef(a) {
            this.a8 = a;
            this.g("SliceHoverRef");
        }
    }
    FunnelChartDescription.$t = markType(FunnelChartDescription, 'FunnelChartDescription', Description.$);
    return FunnelChartDescription;
})();
