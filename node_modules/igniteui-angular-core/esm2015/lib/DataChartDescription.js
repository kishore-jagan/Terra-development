/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        constructor() {
            super();
            this.h1 = false;
            this.it = 0;
            this.iu = 0;
            this.ik = 0;
            this.il = 0;
            this.h0 = false;
            this.h2 = false;
            this.je = null;
            this.hz = false;
            this.io = 0;
            this.im = 0;
            this.h5 = false;
            this.h3 = false;
            this.h4 = false;
            this.h6 = false;
            this.i9 = null;
            this.jd = null;
            this.jb = null;
            this.jc = null;
            this.hx = null;
            this.ih = 0;
            this.ij = 0;
            this.ii = 0;
            this.ig = 0;
            this.ja = null;
            this.jg = null;
            this.jh = null;
            this.iq = 0;
            this.is = 0;
            this.ir = 0;
            this.ip = 0;
            this.ji = null;
            this.jf = null;
        }
        get_type() {
            return "DataChart";
        }
        get isSquare() {
            return this.h1;
        }
        set isSquare(a) {
            this.h1 = a;
            this.g("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.it;
        }
        set windowScaleHorizontal(a) {
            this.it = a;
            this.g("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.iu;
        }
        set windowScaleVertical(a) {
            this.iu = a;
            this.g("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.ik;
        }
        set actualWindowScaleHorizontal(a) {
            this.ik = a;
            this.g("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.il;
        }
        set actualWindowScaleVertical(a) {
            this.il = a;
            this.g("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.h0;
        }
        set isHorizontalZoomEnabled(a) {
            this.h0 = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.h2;
        }
        set isVerticalZoomEnabled(a) {
            this.h2 = a;
            this.g("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.je;
        }
        set gridMode(a) {
            this.je = a;
            this.g("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.hz;
        }
        set alignsGridLinesToPixels(a) {
            this.hz = a;
            this.g("AlignsGridLinesToPixels");
        }
        get autoExpandMarginMaximumValue() {
            return this.io;
        }
        set autoExpandMarginMaximumValue(a) {
            this.io = a;
            this.g("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.im;
        }
        set autoExpandMarginExtraPadding(a) {
            this.im = a;
            this.g("AutoExpandMarginExtraPadding");
        }
        get shouldSuppressAxisLabelTruncation() {
            return this.h5;
        }
        set shouldSuppressAxisLabelTruncation(a) {
            this.h5 = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.h3;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.h3 = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.h4;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.h4 = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        }
        get suppressAutoMarginAndAngleRecalculation() {
            return this.h6;
        }
        set suppressAutoMarginAndAngleRecalculation(a) {
            this.h6 = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.i9;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.i9 = a;
            this.g("AutoMarginAndAngleUpdateMode");
        }
        get defaultAxisStroke() {
            return this.jd;
        }
        set defaultAxisStroke(a) {
            this.jd = a;
            this.g("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.jb;
        }
        set defaultAxisMajorStroke(a) {
            this.jb = a;
            this.g("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.jc;
        }
        set defaultAxisMinorStroke(a) {
            this.jc = a;
            this.g("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.hx;
        }
        set axes(a) {
            this.hx = a;
            this.g("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.ih;
        }
        set actualPlotAreaMarginLeft(a) {
            this.ih = a;
            this.g("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.ij;
        }
        set actualPlotAreaMarginTop(a) {
            this.ij = a;
            this.g("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.ii;
        }
        set actualPlotAreaMarginRight(a) {
            this.ii = a;
            this.g("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.ig;
        }
        set actualPlotAreaMarginBottom(a) {
            this.ig = a;
            this.g("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.ja;
        }
        set computedPlotAreaMarginMode(a) {
            this.ja = a;
            this.g("ComputedPlotAreaMarginMode");
        }
        get seriesPlotAreaMarginHorizontalMode() {
            return this.jg;
        }
        set seriesPlotAreaMarginHorizontalMode(a) {
            this.jg = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        }
        get seriesPlotAreaMarginVerticalMode() {
            return this.jh;
        }
        set seriesPlotAreaMarginVerticalMode(a) {
            this.jh = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        }
        get plotAreaMarginLeft() {
            return this.iq;
        }
        set plotAreaMarginLeft(a) {
            this.iq = a;
            this.g("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.is;
        }
        set plotAreaMarginTop(a) {
            this.is = a;
            this.g("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.ir;
        }
        set plotAreaMarginRight(a) {
            this.ir = a;
            this.g("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.ip;
        }
        set plotAreaMarginBottom(a) {
            this.ip = a;
            this.g("PlotAreaMarginBottom");
        }
        get width() {
            return this.ji;
        }
        set width(a) {
            this.ji = a;
            this.g("Width");
        }
        get height() {
            return this.jf;
        }
        set height(a) {
            this.jf = a;
            this.g("Height");
        }
    }
    DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
