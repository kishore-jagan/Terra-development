/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let CategoryChartDescription = /*@__PURE__*/ (() => {
    class CategoryChartDescription extends XYChartDescription {
        constructor() {
            super();
            this.x2 = null;
            this.x7 = null;
            this.x0 = null;
            this.xy = null;
            this.xr = 0;
            this.xs = 0;
            this.x3 = null;
            this.x6 = null;
            this.xz = null;
            this.x1 = null;
            this.v9 = false;
            this.wa = false;
            this.x4 = null;
            this.x5 = null;
            this.ww = 0;
            this.wz = 0;
            this.wv = 0;
            this.wy = 0;
            this.wx = 0;
            this.w0 = 0;
            this.w6 = 0;
            this.xx = null;
            this.wb = false;
            this.wc = false;
            this.wt = 0;
            this.wu = 0;
            this.wg = false;
            this.wd = false;
            this.wf = false;
            this.x8 = null;
            this.wh = false;
            this.xt = 0;
            this.w8 = 0;
            this.w7 = 0;
            this.w9 = 0;
            this.v3 = null;
            this.v4 = null;
            this.we = false;
            this.w1 = 0;
            this.w2 = 0;
            this.w3 = 0;
            this.w4 = 0;
            this.w5 = 0;
            this.v7 = false;
            this.v8 = false;
        }
        get tooltipTemplateRef() {
            return this.x2;
        }
        set tooltipTemplateRef(a) {
            this.x2 = a;
            this.g("TooltipTemplateRef");
        }
        get width() {
            return this.x7;
        }
        set width(a) {
            this.x7 = a;
            this.g("Width");
        }
        get height() {
            return this.x0;
        }
        set height(a) {
            this.x0 = a;
            this.g("Height");
        }
        get background() {
            return this.xy;
        }
        set background(a) {
            this.xy = a;
            this.g("Background");
        }
        get_type() {
            return "CategoryChart";
        }
        get transitionInDuration() {
            return this.xr;
        }
        set transitionInDuration(a) {
            this.xr = a;
            this.g("TransitionInDuration");
        }
        get transitionOutDuration() {
            return this.xs;
        }
        set transitionOutDuration(a) {
            this.xs = a;
            this.g("TransitionOutDuration");
        }
        get transitionInEasingFunctionRef() {
            return this.x3;
        }
        set transitionInEasingFunctionRef(a) {
            this.x3 = a;
            this.g("TransitionInEasingFunctionRef");
        }
        get transitionOutEasingFunctionRef() {
            return this.x6;
        }
        set transitionOutEasingFunctionRef(a) {
            this.x6 = a;
            this.g("TransitionOutEasingFunctionRef");
        }
        get chartType() {
            return this.xz;
        }
        set chartType(a) {
            this.xz = a;
            this.g("ChartType");
        }
        get markerCollisionAvoidance() {
            return this.x1;
        }
        set markerCollisionAvoidance(a) {
            this.x1 = a;
            this.g("MarkerCollisionAvoidance");
        }
        get isSplineShapePartOfRange() {
            return this.v9;
        }
        set isSplineShapePartOfRange(a) {
            this.v9 = a;
            this.g("IsSplineShapePartOfRange");
        }
        get isTransitionInEnabled() {
            return this.wa;
        }
        set isTransitionInEnabled(a) {
            this.wa = a;
            this.g("IsTransitionInEnabled");
        }
        get transitionInMode() {
            return this.x4;
        }
        set transitionInMode(a) {
            this.x4 = a;
            this.g("TransitionInMode");
        }
        get transitionInSpeedType() {
            return this.x5;
        }
        set transitionInSpeedType(a) {
            this.x5 = a;
            this.g("TransitionInSpeedType");
        }
        get xAxisInterval() {
            return this.ww;
        }
        set xAxisInterval(a) {
            this.ww = a;
            this.g("XAxisInterval");
        }
        get xAxisMinorInterval() {
            return this.wz;
        }
        set xAxisMinorInterval(a) {
            this.wz = a;
            this.g("XAxisMinorInterval");
        }
        get xAxisGap() {
            return this.wv;
        }
        set xAxisGap(a) {
            this.wv = a;
            this.g("XAxisGap");
        }
        get xAxisMinimumGapSize() {
            return this.wy;
        }
        set xAxisMinimumGapSize(a) {
            this.wy = a;
            this.g("XAxisMinimumGapSize");
        }
        get xAxisMaximumGap() {
            return this.wx;
        }
        set xAxisMaximumGap(a) {
            this.wx = a;
            this.g("XAxisMaximumGap");
        }
        get xAxisOverlap() {
            return this.w0;
        }
        set xAxisOverlap(a) {
            this.w0 = a;
            this.g("XAxisOverlap");
        }
        get yAxisInterval() {
            return this.w6;
        }
        set yAxisInterval(a) {
            this.w6 = a;
            this.g("YAxisInterval");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.xx;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.xx = a;
            this.g("AutoMarginAndAngleUpdateMode");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.wb;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.wb = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.wc;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.wc = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        }
        get autoExpandMarginExtraPadding() {
            return this.wt;
        }
        set autoExpandMarginExtraPadding(a) {
            this.wt = a;
            this.g("AutoExpandMarginExtraPadding");
        }
        get autoExpandMarginMaximumValue() {
            return this.wu;
        }
        set autoExpandMarginMaximumValue(a) {
            this.wu = a;
            this.g("AutoExpandMarginMaximumValue");
        }
        get yAxisFavorLabellingScaleEnd() {
            return this.wg;
        }
        set yAxisFavorLabellingScaleEnd(a) {
            this.wg = a;
            this.g("YAxisFavorLabellingScaleEnd");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.wd;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.wd = a;
            this.g("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.wf;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.wf = a;
            this.g("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisAutoRangeBufferMode() {
            return this.x8;
        }
        set yAxisAutoRangeBufferMode(a) {
            this.x8 = a;
            this.g("YAxisAutoRangeBufferMode");
        }
        get yAxisIsLogarithmic() {
            return this.wh;
        }
        set yAxisIsLogarithmic(a) {
            this.wh = a;
            this.g("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.xt;
        }
        set yAxisLogarithmBase(a) {
            this.xt = a;
            this.g("YAxisLogarithmBase");
        }
        get yAxisMinimumValue() {
            return this.w8;
        }
        set yAxisMinimumValue(a) {
            this.w8 = a;
            this.g("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.w7;
        }
        set yAxisMaximumValue(a) {
            this.w7 = a;
            this.g("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.w9;
        }
        set yAxisMinorInterval(a) {
            this.w9 = a;
            this.g("YAxisMinorInterval");
        }
        get negativeBrushes() {
            return this.v3;
        }
        set negativeBrushes(a) {
            this.v3 = a;
            this.g("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.v4;
        }
        set negativeOutlines(a) {
            this.v4 = a;
            this.g("NegativeOutlines");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.we;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.we = a;
            this.g("YAxisAbbreviateLargeNumbers");
        }
        get xAxisZoomMaximumCategoryRange() {
            return this.w1;
        }
        set xAxisZoomMaximumCategoryRange(a) {
            this.w1 = a;
            this.g("XAxisZoomMaximumCategoryRange");
        }
        get xAxisZoomMaximumItemSpan() {
            return this.w2;
        }
        set xAxisZoomMaximumItemSpan(a) {
            this.w2 = a;
            this.g("XAxisZoomMaximumItemSpan");
        }
        get xAxisZoomToCategoryRange() {
            return this.w3;
        }
        set xAxisZoomToCategoryRange(a) {
            this.w3 = a;
            this.g("XAxisZoomToCategoryRange");
        }
        get xAxisZoomToCategoryStart() {
            return this.w4;
        }
        set xAxisZoomToCategoryStart(a) {
            this.w4 = a;
            this.g("XAxisZoomToCategoryStart");
        }
        get xAxisZoomToItemSpan() {
            return this.w5;
        }
        set xAxisZoomToItemSpan(a) {
            this.w5 = a;
            this.g("XAxisZoomToItemSpan");
        }
        get isCategoryHighlightingEnabled() {
            return this.v7;
        }
        set isCategoryHighlightingEnabled(a) {
            this.v7 = a;
            this.g("IsCategoryHighlightingEnabled");
        }
        get isItemHighlightingEnabled() {
            return this.v8;
        }
        set isItemHighlightingEnabled(a) {
            this.v8 = a;
            this.g("IsItemHighlightingEnabled");
        }
    }
    CategoryChartDescription.$t = markType(CategoryChartDescription, 'CategoryChartDescription', XYChartDescription.$);
    return CategoryChartDescription;
})();
