/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { Base, EnumUtil, String_$type, fromEnum, markType } from "./type";
import { IDataSeriesAdapterRule_$type } from "./IDataSeriesAdapterRule";
import { HashSet$1 } from "./HashSet$1";
import { DataSeriesIntent_$type } from "./DataSeriesIntent";
import { DataSeries } from "./DataSeries";
import { DataSeriesMemberPathHint } from "./DataSeriesMemberPathHint";
/**
 * @hidden
 */
var SimpleCategorySeriesRule = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(SimpleCategorySeriesRule, _super);
    function SimpleCategorySeriesRule() {
        var _this = _super.call(this) || this;
        _this._priority = 0;
        _this._useColumnThreshold = 0;
        _this._distinctCheckThreshold = 0;
        _this.priority = 10;
        _this.distinctCheckThreshold = 50000;
        _this.useColumnThreshold = 30;
        return _this;
    }
    Object.defineProperty(SimpleCategorySeriesRule.prototype, "priority", {
        get: function () {
            return this._priority;
        },
        set: function (a) {
            this._priority = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SimpleCategorySeriesRule.prototype, "useColumnThreshold", {
        get: function () {
            return this._useColumnThreshold;
        },
        set: function (a) {
            this._useColumnThreshold = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SimpleCategorySeriesRule.prototype, "distinctCheckThreshold", {
        get: function () {
            return this._distinctCheckThreshold;
        },
        set: function (a) {
            this._distinctCheckThreshold = a;
        },
        enumerable: false,
        configurable: true
    });
    SimpleCategorySeriesRule.prototype.getPrimaryAxisLabelsString = function (a) {
        return SimpleCategorySeriesRule.d(a.analyzer, this.distinctCheckThreshold);
    };
    SimpleCategorySeriesRule.prototype.getPrimaryAxisLabelsStrings = function (a) {
        var e_1, _a;
        var b = a.analyzer;
        var c = b.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (16)));
        if (c.length > 0) {
            return c;
        }
        var d = b.getAllStringProperties();
        var e = b.getAllDateTimeProperties();
        var f = b.getAllDistinctMonotonicNumericProperties(this.distinctCheckThreshold);
        var g = new HashSet$1(String_$type, 0);
        for (var h = 0; h < d.length; h++) {
            var i = d[h];
            g.add_1(i);
        }
        for (var j = 0; j < e.length; j++) {
            var k = e[j];
            g.add_1(k);
        }
        for (var l = 0; l < f.length; l++) {
            var m = f[l];
            g.add_1(m);
        }
        d = b.getAllExcludedStringProperties();
        e = b.getAllExcludedDateTimeProperties();
        f = b.getAllExcludedDistinctMonotonicNumericProperties(this.distinctCheckThreshold);
        for (var n = 0; n < d.length; n++) {
            var o = d[n];
            g.add_1(o);
        }
        for (var p = 0; p < e.length; p++) {
            var q = e[p];
            g.add_1(q);
        }
        for (var r = 0; r < f.length; r++) {
            var s = f[r];
            g.add_1(s);
        }
        var t = new Array(g.count);
        var u = 0;
        try {
            for (var _b = __values(fromEnum(g)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                t[u] = v;
                u++;
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        return t;
    };
    SimpleCategorySeriesRule.d = function (a, b) {
        var c = a.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (16)));
        if (c.length > 0) {
            return c[0];
        }
        return ((function (d) { return d != null ? d : ((function (e) { return e != null ? e : ((function (f) { return f != null ? f : a.getFirstStringProperty(); })(a.getFirstDistinctMonotonicNumericProperty(b))); })(a.getFirstDistinctDateTimeProperty(b))); })(a.getFirstDistinctStringProperty(b)));
    };
    SimpleCategorySeriesRule.c = function (a, b) {
        return SimpleCategorySeriesRule.d(a.analyzer, b);
    };
    SimpleCategorySeriesRule.prototype.evaluate = function (a) {
        var b = SimpleCategorySeriesRule.c(a, this.distinctCheckThreshold);
        var c = null;
        var d = a.analyzer.getAllPropertiesWithIntent(EnumUtil.getName(DataSeriesIntent_$type, (0)));
        if (d.length > 0) {
            c = d;
        }
        if (c == null) {
            c = a.analyzer.getAllNumericProperties();
        }
        if (c == null || c.length == 0) {
            return;
        }
        var e = a.getCurrentDataSource().actualCount;
        for (var f = 0; f < c.length; f++) {
            if (c[f] == b && c.length > 1) {
                continue;
            }
            var g = new Array(1);
            g[0] = c[f];
            var h = a.analyzer.getTitleString(null, g);
            var i = new DataSeries();
            var j = new DataSeriesMemberPathHint();
            j.intent = 0;
            j.path = c[f];
            var k = new DataSeriesMemberPathHint();
            k.intent = 16;
            k.path = b;
            i.addMemberPathHint(j);
            i.addMemberPathHint(k);
            if (e > this.useColumnThreshold) {
                i.suggestedSeries = 0;
            }
            else {
                i.suggestedSeries = 1;
            }
            this.e(i, a);
            i.suggestedPrimaryAxis = 0;
            i.suggestedSecondaryAxis = 1;
            i.name = c[f];
            if (h != null) {
                i.title = h;
            }
            else {
                i.title = c[f];
                i.title = a.analyzer.expandCamelCasedWords(i.title);
            }
            a.addDataSeries(i, this);
        }
    };
    SimpleCategorySeriesRule.prototype.e = function (a, b) {
        if (!b.hasValidType(a)) {
            a.suggestedSeries = 0;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 1;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 2;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 6;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 7;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 4;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 5;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 10;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 8;
            if (b.hasValidType(a)) {
                return;
            }
            a.suggestedSeries = 0;
        }
    };
    SimpleCategorySeriesRule.$t = markType(SimpleCategorySeriesRule, 'SimpleCategorySeriesRule', Base.$, [IDataSeriesAdapterRule_$type]);
    return SimpleCategorySeriesRule;
}(Base));
export { SimpleCategorySeriesRule };
