/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var DataChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataChartDescription, _super);
    function DataChartDescription() {
        var _this = _super.call(this) || this;
        _this.h1 = false;
        _this.it = 0;
        _this.iu = 0;
        _this.ik = 0;
        _this.il = 0;
        _this.h0 = false;
        _this.h2 = false;
        _this.je = null;
        _this.hz = false;
        _this.io = 0;
        _this.im = 0;
        _this.h5 = false;
        _this.h3 = false;
        _this.h4 = false;
        _this.h6 = false;
        _this.i9 = null;
        _this.jd = null;
        _this.jb = null;
        _this.jc = null;
        _this.hx = null;
        _this.ih = 0;
        _this.ij = 0;
        _this.ii = 0;
        _this.ig = 0;
        _this.ja = null;
        _this.jg = null;
        _this.jh = null;
        _this.iq = 0;
        _this.is = 0;
        _this.ir = 0;
        _this.ip = 0;
        _this.ji = null;
        _this.jf = null;
        return _this;
    }
    DataChartDescription.prototype.get_type = function () {
        return "DataChart";
    };
    Object.defineProperty(DataChartDescription.prototype, "isSquare", {
        get: function () {
            return this.h1;
        },
        set: function (a) {
            this.h1 = a;
            this.g("IsSquare");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleHorizontal", {
        get: function () {
            return this.it;
        },
        set: function (a) {
            this.it = a;
            this.g("WindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleVertical", {
        get: function () {
            return this.iu;
        },
        set: function (a) {
            this.iu = a;
            this.g("WindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleHorizontal", {
        get: function () {
            return this.ik;
        },
        set: function (a) {
            this.ik = a;
            this.g("ActualWindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleVertical", {
        get: function () {
            return this.il;
        },
        set: function (a) {
            this.il = a;
            this.g("ActualWindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isHorizontalZoomEnabled", {
        get: function () {
            return this.h0;
        },
        set: function (a) {
            this.h0 = a;
            this.g("IsHorizontalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isVerticalZoomEnabled", {
        get: function () {
            return this.h2;
        },
        set: function (a) {
            this.h2 = a;
            this.g("IsVerticalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "gridMode", {
        get: function () {
            return this.je;
        },
        set: function (a) {
            this.je = a;
            this.g("GridMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "alignsGridLinesToPixels", {
        get: function () {
            return this.hz;
        },
        set: function (a) {
            this.hz = a;
            this.g("AlignsGridLinesToPixels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.io;
        },
        set: function (a) {
            this.io = a;
            this.g("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.im;
        },
        set: function (a) {
            this.im = a;
            this.g("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldSuppressAxisLabelTruncation", {
        get: function () {
            return this.h5;
        },
        set: function (a) {
            this.h5 = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.h3;
        },
        set: function (a) {
            this.h3 = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldConsiderAutoRotationForInitialLabels", {
        get: function () {
            return this.h4;
        },
        set: function (a) {
            this.h4 = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "suppressAutoMarginAndAngleRecalculation", {
        get: function () {
            return this.h6;
        },
        set: function (a) {
            this.h6 = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoMarginAndAngleUpdateMode", {
        get: function () {
            return this.i9;
        },
        set: function (a) {
            this.i9 = a;
            this.g("AutoMarginAndAngleUpdateMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisStroke", {
        get: function () {
            return this.jd;
        },
        set: function (a) {
            this.jd = a;
            this.g("DefaultAxisStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMajorStroke", {
        get: function () {
            return this.jb;
        },
        set: function (a) {
            this.jb = a;
            this.g("DefaultAxisMajorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMinorStroke", {
        get: function () {
            return this.jc;
        },
        set: function (a) {
            this.jc = a;
            this.g("DefaultAxisMinorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "axes", {
        get: function () {
            return this.hx;
        },
        set: function (a) {
            this.hx = a;
            this.g("Axes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginLeft", {
        get: function () {
            return this.ih;
        },
        set: function (a) {
            this.ih = a;
            this.g("ActualPlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginTop", {
        get: function () {
            return this.ij;
        },
        set: function (a) {
            this.ij = a;
            this.g("ActualPlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginRight", {
        get: function () {
            return this.ii;
        },
        set: function (a) {
            this.ii = a;
            this.g("ActualPlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginBottom", {
        get: function () {
            return this.ig;
        },
        set: function (a) {
            this.ig = a;
            this.g("ActualPlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "computedPlotAreaMarginMode", {
        get: function () {
            return this.ja;
        },
        set: function (a) {
            this.ja = a;
            this.g("ComputedPlotAreaMarginMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginHorizontalMode", {
        get: function () {
            return this.jg;
        },
        set: function (a) {
            this.jg = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginVerticalMode", {
        get: function () {
            return this.jh;
        },
        set: function (a) {
            this.jh = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginLeft", {
        get: function () {
            return this.iq;
        },
        set: function (a) {
            this.iq = a;
            this.g("PlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginTop", {
        get: function () {
            return this.is;
        },
        set: function (a) {
            this.is = a;
            this.g("PlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginRight", {
        get: function () {
            return this.ir;
        },
        set: function (a) {
            this.ir = a;
            this.g("PlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginBottom", {
        get: function () {
            return this.ip;
        },
        set: function (a) {
            this.ip = a;
            this.g("PlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "width", {
        get: function () {
            return this.ji;
        },
        set: function (a) {
            this.ji = a;
            this.g("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "height", {
        get: function () {
            return this.jf;
        },
        set: function (a) {
            this.jf = a;
            this.g("Height");
        },
        enumerable: false,
        configurable: true
    });
    DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
}(SeriesViewerDescription));
export { DataChartDescription };
