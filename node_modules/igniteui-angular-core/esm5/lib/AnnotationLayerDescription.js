/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesDescription } from "./SeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var AnnotationLayerDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnnotationLayerDescription, _super);
    function AnnotationLayerDescription() {
        var _this = _super.call(this) || this;
        _this.fd = false;
        _this.fe = false;
        _this.e9 = null;
        _this.fb = false;
        _this.fy = null;
        _this.fv = null;
        _this.fn = 0;
        _this.fk = 0;
        _this.fz = null;
        _this.fw = null;
        _this.f0 = null;
        _this.fx = null;
        _this.fm = 0;
        _this.fj = 0;
        _this.fo = 0;
        _this.fl = 0;
        _this.e3 = null;
        _this.e1 = null;
        _this.e4 = null;
        _this.e2 = null;
        _this.fc = false;
        return _this;
    }
    AnnotationLayerDescription.prototype.get_type = function () {
        return "AnnotationLayer";
    };
    Object.defineProperty(AnnotationLayerDescription.prototype, "useIndex", {
        get: function () {
            return this.fd;
        },
        set: function (a) {
            this.fd = a;
            this.g("UseIndex");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "useLegend", {
        get: function () {
            return this.fe;
        },
        set: function (a) {
            this.fe = a;
            this.g("UseLegend");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "cursorPosition", {
        get: function () {
            return this.e9;
        },
        set: function (a) {
            this.e9 = a;
            this.g("CursorPosition");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "isDefaultCrosshairDisabled", {
        get: function () {
            return this.fb;
        },
        set: function (a) {
            this.fb = a;
            this.g("IsDefaultCrosshairDisabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "appearanceMode", {
        get: function () {
            return this.fy;
        },
        set: function (a) {
            this.fy = a;
            this.g("AppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualAppearanceMode", {
        get: function () {
            return this.fv;
        },
        set: function (a) {
            this.fv = a;
            this.g("ActualAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "shiftAmount", {
        get: function () {
            return this.fn;
        },
        set: function (a) {
            this.fn = a;
            this.g("ShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualShiftAmount", {
        get: function () {
            return this.fk;
        },
        set: function (a) {
            this.fk = a;
            this.g("ActualShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalAppearanceMode", {
        get: function () {
            return this.fz;
        },
        set: function (a) {
            this.fz = a;
            this.g("HorizontalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalAppearanceMode", {
        get: function () {
            return this.fw;
        },
        set: function (a) {
            this.fw = a;
            this.g("ActualHorizontalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalAppearanceMode", {
        get: function () {
            return this.f0;
        },
        set: function (a) {
            this.f0 = a;
            this.g("VerticalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalAppearanceMode", {
        get: function () {
            return this.fx;
        },
        set: function (a) {
            this.fx = a;
            this.g("ActualVerticalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalShiftAmount", {
        get: function () {
            return this.fm;
        },
        set: function (a) {
            this.fm = a;
            this.g("HorizontalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalShiftAmount", {
        get: function () {
            return this.fj;
        },
        set: function (a) {
            this.fj = a;
            this.g("ActualHorizontalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalShiftAmount", {
        get: function () {
            return this.fo;
        },
        set: function (a) {
            this.fo = a;
            this.g("VerticalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalShiftAmount", {
        get: function () {
            return this.fl;
        },
        set: function (a) {
            this.fl = a;
            this.g("ActualVerticalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalDashArray", {
        get: function () {
            return this.e3;
        },
        set: function (a) {
            this.e3 = a;
            this.g("HorizontalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalDashArray", {
        get: function () {
            return this.e1;
        },
        set: function (a) {
            this.e1 = a;
            this.g("ActualHorizontalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalDashArray", {
        get: function () {
            return this.e4;
        },
        set: function (a) {
            this.e4 = a;
            this.g("VerticalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalDashArray", {
        get: function () {
            return this.e2;
        },
        set: function (a) {
            this.e2 = a;
            this.g("ActualVerticalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "shouldRenderAsOverlay", {
        get: function () {
            return this.fc;
        },
        set: function (a) {
            this.fc = a;
            this.g("ShouldRenderAsOverlay");
        },
        enumerable: false,
        configurable: true
    });
    AnnotationLayerDescription.$t = markType(AnnotationLayerDescription, 'AnnotationLayerDescription', SeriesDescription.$);
    return AnnotationLayerDescription;
}(SeriesDescription));
export { AnnotationLayerDescription };
