/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CollisionGeometry } from "./CollisionGeometry";
import { CollisionRect } from "./CollisionRect";
import { Point_$type, markType } from "./type";
import { GeometryUtil } from "./GeometryUtil";
/**
 * @hidden
 */
var PieSliceCollisionGeometry = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(PieSliceCollisionGeometry, _super);
    function PieSliceCollisionGeometry(a, b, c, d, e, f) {
        var _this = _super.call(this) || this;
        _this.h = 0;
        _this.i = 0;
        _this.l = 0;
        _this.m = 0;
        _this.j = 0;
        _this.g = CollisionRect.empty;
        _this.k = 0;
        _this.h = a;
        _this.i = b;
        _this.m = e;
        _this.j = f;
        _this.l = c;
        _this.k = d;
        return _this;
    }
    PieSliceCollisionGeometry.prototype.get_type = function () {
        return 2;
    };
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "type", {
        get: function () {
            return this.get_type();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "centerX", {
        get: function () {
            return this.h;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "centerY", {
        get: function () {
            return this.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "radius", {
        get: function () {
            return this.l;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "startAngle", {
        get: function () {
            return this.m;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "endAngle", {
        get: function () {
            return this.j;
        },
        enumerable: false,
        configurable: true
    });
    PieSliceCollisionGeometry.prototype.get_boundingBox = function () {
        if (this.g.isEmpty) {
            var a = GeometryUtil.u({ $type: Point_$type, x: this.h, y: this.i }, this.m, this.j, this.l);
            this.g = new CollisionRect(0, a);
        }
        return this.g;
    };
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "boundingBox", {
        get: function () {
            return this.get_boundingBox();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(PieSliceCollisionGeometry.prototype, "innerRadius", {
        get: function () {
            return this.k;
        },
        enumerable: false,
        configurable: true
    });
    PieSliceCollisionGeometry.prototype.d = function (a) {
        var b = { $type: Point_$type, x: a.left, y: a.top };
        var c = { $type: Point_$type, x: a.right, y: a.top };
        var d = { $type: Point_$type, x: a.right, y: a.bottom };
        var e = { $type: Point_$type, x: a.left, y: a.bottom };
        var f = { $type: Point_$type, x: this.h, y: this.i };
        var g = this.l;
        var h = this.k;
        if (GeometryUtil.e(b, f, this.m, this.j, g, h) || GeometryUtil.e(c, f, this.m, this.j, g, h) || GeometryUtil.e(d, f, this.m, this.j, g, h) || GeometryUtil.e(e, f, this.m, this.j, g, h)) {
            return true;
        }
        return false;
    };
    PieSliceCollisionGeometry.$t = markType(PieSliceCollisionGeometry, 'PieSliceCollisionGeometry', CollisionGeometry.$);
    return PieSliceCollisionGeometry;
}(CollisionGeometry));
export { PieSliceCollisionGeometry };
