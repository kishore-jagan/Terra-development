/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Component, ViewChild, ChangeDetectionStrategy, Input } from '@angular/core';
import { IgxTemplateContentComponent } from './igx-template-content-component';
import { TypeRegistrar } from './type';
import * as i0 from "@angular/core";
import * as i1 from "./igx-template-content-component";
import * as i2 from "@angular/common";
var IgxTooltipContainerComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgxTooltipContainerComponent(_changeDetectorRef) {
        this._changeDetectorRef = _changeDetectorRef;
        this._template = null;
        this._containerTemplate = null;
        this._context = null;
    }
    Object.defineProperty(IgxTooltipContainerComponent.prototype, "template", {
        get: function () {
            return this._template;
        },
        set: function (value) {
            this._template = value;
            if (this._context != null) {
                this._changeDetectorRef.detectChanges();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTooltipContainerComponent.prototype, "containerTemplate", {
        get: function () {
            return this._containerTemplate;
        },
        set: function (value) {
            this._containerTemplate = value;
            if (this._context != null) {
                this._changeDetectorRef.detectChanges();
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTooltipContainerComponent.prototype, "context", {
        get: function () {
            return this._context;
        },
        set: function (value) {
            this._context = value;
            this._changeDetectorRef.detectChanges();
            if (this._tooltipContent != null) {
                this._tooltipContent.markChanged();
            }
            //console.log("tool:" + this._tooltipContent != null);
        },
        enumerable: false,
        configurable: true
    });
    IgxTooltipContainerComponent.register = function () {
        TypeRegistrar.registerCons("IgxTooltipContainerComponent", IgxTooltipContainerComponent);
    };
    IgxTooltipContainerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxTooltipContainerComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
    IgxTooltipContainerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxTooltipContainerComponent, selector: "igx-tooltip-container", inputs: { template: "template", containerTemplate: "containerTemplate", context: "context" }, host: { classAttribute: "ig-tooltip-container igx-tooltip-container" }, viewQueries: [{ propertyName: "_tooltipContent", first: true, predicate: IgxTemplateContentComponent, descendants: true, static: true }], ngImport: i0, template: "\n    <ng-template #defaultContainer>\n        <div class='ig-tooltip-container-background' *ngIf=\"context !== null && context.item !== null\"\n            [style.border-color]=\"context && context.isSubContent ? 'transparent' : '#666'\">\n            <igx-template-content *ngIf=\"context !== null\" [template]=\"template\" [context]=\"context\"></igx-template-content>\n        </div>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"containerTemplate ? containerTemplate : defaultContainer; context: context\">\n    </ng-container>\n  ", isInline: true, styles: ["\n        .ig-tooltip-container-background {\n            padding: 5px; \n            padding: var(--tooltip-container-padding, 5px);\n            background-color: white; \n            background-color: var(--tooltip-container-background-color, white);\n            border-style: solid; \n            border-style: var(--tooltip-container-border-style, solid);\n            border-width: 1px; \n            border-width: var(--tooltip-container-border-width, 1px);\n            color: rgba(34,34,34,0.8);\n            color: var(--tooltip-container-text-color, rgba(34,34,34,0.8));\n            font: 13px \"Titillium Web\", Verdana, Arial, sans-serif;\n            font: var(--tooltip-container-font, 13px \"Titillium Web\", Verdana, Arial, sans-serif);\n            pointer-events: none;\n            white-space: nowrap;\n        }\n"], components: [{ type: i1.IgxTemplateContentComponent, selector: "igx-template-content", inputs: ["template", "context"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxTooltipContainerComponent;
}());
export { IgxTooltipContainerComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxTooltipContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-tooltip-container',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: { class: "ig-tooltip-container igx-tooltip-container" },
                    template: "\n    <ng-template #defaultContainer>\n        <div class='ig-tooltip-container-background' *ngIf=\"context !== null && context.item !== null\"\n            [style.border-color]=\"context && context.isSubContent ? 'transparent' : '#666'\">\n            <igx-template-content *ngIf=\"context !== null\" [template]=\"template\" [context]=\"context\"></igx-template-content>\n        </div>\n    </ng-template>\n    <ng-container *ngTemplateOutlet=\"containerTemplate ? containerTemplate : defaultContainer; context: context\">\n    </ng-container>\n  ",
                    styles: ["\n        .ig-tooltip-container-background {\n            padding: 5px; \n            padding: var(--tooltip-container-padding, 5px);\n            background-color: white; \n            background-color: var(--tooltip-container-background-color, white);\n            border-style: solid; \n            border-style: var(--tooltip-container-border-style, solid);\n            border-width: 1px; \n            border-width: var(--tooltip-container-border-width, 1px);\n            color: rgba(34,34,34,0.8);\n            color: var(--tooltip-container-text-color, rgba(34,34,34,0.8));\n            font: 13px \"Titillium Web\", Verdana, Arial, sans-serif;\n            font: var(--tooltip-container-font, 13px \"Titillium Web\", Verdana, Arial, sans-serif);\n            pointer-events: none;\n            white-space: nowrap;\n        }\n"]
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { _tooltipContent: [{
                type: ViewChild,
                args: [IgxTemplateContentComponent, { static: true }]
            }], template: [{
                type: Input
            }], containerTemplate: [{
                type: Input
            }], context: [{
                type: Input
            }] } });
