import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "./type";
import { Size } from "./Size";
import { DomRenderer, DomWrapper } from "./dom";
import { Brush } from "./Brush";
import { PopupPointerPosition } from "./PopupPointerPosition";
import { Popup_OuterAnimationInfo } from "./Popup_OuterAnimationInfo";
import { Popup_InnerAnimationInfo } from "./Popup_InnerAnimationInfo";
import { AnimationKeyFrameEffect } from "./AnimationKeyFrameEffect";
import { AnimationKeyFrameEffectTiming } from "./AnimationKeyFrameEffectTiming";
import { UIElementPropertyId } from "./UIElementPropertyId";
import { Rect } from "./Rect";
import { PopupDirection } from "./PopupDirection";
import { PopupAlignment } from "./PopupAlignment";
import { PopupAnimationType } from "./PopupAnimationType";
import { OnClosedEventArgs } from "./OnClosedEventArgs";
import { MouseEventArgs } from "./MouseEventArgs";
import { FocusEventArgs } from "./FocusEventArgs";
import { OnPopupEventArgs } from "./OnPopupEventArgs";
import { PopupVisualModelExport } from "./PopupVisualModelExport";
/**
 * @hidden
 */
export declare class PopupView extends Base {
    static $t: Type;
    private ag;
    private f;
    private ao;
    private an;
    private am;
    private aj;
    private al;
    private ak;
    private aq;
    private get af();
    private get ac();
    private get ab();
    private get aa();
    private get ad();
    private get ae();
    private v;
    private w;
    private u;
    private m;
    private x;
    private s;
    private t;
    private q;
    private r;
    protected get g(): Popup;
    protected get ah(): DomRenderer;
    protected a6(): void;
    bn(): void;
    bl(): void;
    bm(): void;
    bo(): void;
    private a7;
    private a8;
    private a4;
    private a5;
    private o;
    private l;
    at(): void;
    au(a: Popup_OuterAnimationInfo, b: Popup_InnerAnimationInfo): {
        p0?: Popup_OuterAnimationInfo;
        p1?: Popup_InnerAnimationInfo;
    };
    av(a: number): void;
    bc(): void;
    aw(a: any): void;
    private ai;
    private ap;
    private a3;
    j(a: any): boolean;
    bb(a: any): void;
    d(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    e(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    ay(): void;
    c(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    b(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    i(): UIElementPropertyId;
    h(): UIElementPropertyId;
    private n;
    private br;
    get bs(): Size;
    private y;
    private z;
    private static as;
    private static ar;
    private bj;
    private ax;
    bq(a: Rect, b: PopupDirection, c: PopupAlignment): Rect;
    bp(a: any, b: PopupDirection, c: PopupAlignment): Rect;
    private k;
    a1(): void;
    private bd;
    a9(a: DomRenderer): void;
    private p;
    private bk;
    private bi;
    protected az(a: DomWrapper): void;
    a0(a: Popup): void;
    a2(): void;
    ba(): void;
    bg(a: boolean): void;
    bf(a: boolean): void;
    be(a: boolean): void;
    bh(a: boolean): void;
}
/**
 * @hidden
 */
export declare class Popup extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private q;
    private i;
    private a1;
    private c5;
    private c3;
    private bb;
    get c6(): Rect;
    get c4(): Rect;
    get r(): PopupDirection;
    set r(a: PopupDirection);
    get j(): PopupAlignment;
    get a2(): number;
    get bd(): any;
    constructor();
    onClosed: (sender: any, args: OnClosedEventArgs) => void;
    onPopup: (sender: any, args: OnPopupEventArgs) => void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected cf(a: string, b: any, c: any): void;
    popupMouseEnter: (sender: any, args: MouseEventArgs) => void;
    popupMouseLeave: (sender: any, args: MouseEventArgs) => void;
    popupGotFocus: (sender: any, args: FocusEventArgs) => void;
    popupLostFocus: (sender: any, args: FocusEventArgs) => void;
    cd(): void;
    ce(): void;
    cb(): void;
    cc(a: any): void;
    w: PopupView;
    private af;
    get ar(): boolean;
    set ar(a: boolean);
    private a7;
    get a8(): number;
    set a8(a: number);
    private ak;
    get al(): boolean;
    set al(a: boolean);
    private o;
    get p(): PopupAnimationType;
    set p(a: PopupAnimationType);
    private a5;
    get ba(): number;
    set ba(a: number);
    static a9: number;
    private a4;
    get a6(): number;
    set a6(a: number);
    private av;
    get aw(): boolean;
    static c1: Brush;
    private cs;
    get cx(): Brush;
    set cx(a: Brush);
    static c0: Brush;
    private cr;
    get cw(): Brush;
    set cw(a: Brush);
    static cz: Brush;
    private cq;
    get cv(): Brush;
    set cv(a: Brush);
    private ct;
    get cy(): Brush;
    set cy(a: Brush);
    private ay;
    get a0(): number;
    set a0(a: number);
    private ag;
    get as(): boolean;
    set as(a: boolean);
    private ac;
    get an(): boolean;
    set an(a: boolean);
    private ah;
    get at(): boolean;
    set at(a: boolean);
    private s;
    get u(): PopupPointerPosition;
    set u(a: PopupPointerPosition);
    private cu;
    get c2(): Brush;
    set c2(a: Brush);
    private az;
    get a3(): number;
    set a3(a: number);
    private ai;
    get au(): boolean;
    set au(a: boolean);
    private ad;
    get ap(): boolean;
    set ap(a: boolean);
    private ae;
    get aq(): boolean;
    set aq(a: boolean);
    private aj;
    get ax(): boolean;
    set ax(a: boolean);
    protected v(): PopupView;
    protected ci(a: string, b: any, c: any): void;
    b2(): void;
    private z;
    private a;
    private b;
    private c;
    private b7;
    private g;
    private h;
    ao(): boolean;
    b8(): void;
    private ch;
    private cg;
    private cm;
    private cl;
    private cn;
    private k;
    private l;
    private n;
    private b4;
    private m;
    private b3;
    contains(a: any): boolean;
    appendPopupContent(a: any): void;
    removePopupContent(a: any): void;
    b5(): void;
    destroy(): void;
    showRelativeToExclusionRect(a: Rect, b: PopupDirection, c: PopupAlignment): void;
    cp(a: any, b: PopupDirection, c: PopupAlignment): void;
    b9(a: Rect): void;
    notifySizeChanged(): void;
    provideRenderer(a: DomRenderer): void;
    bc(): any;
    bp(): string;
    d(): PopupVisualModelExport;
    t(): PopupPointerPosition;
}
