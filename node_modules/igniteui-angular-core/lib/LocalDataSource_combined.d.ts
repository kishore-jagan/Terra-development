import { BaseDataSource } from "./BaseDataSource";
import { IDataSourceDataProvider } from "./IDataSourceDataProvider";
import { IDataSourceLocalDataProvider } from "./IDataSourceLocalDataProvider";
import { Base, Type } from "./type";
import { IExternalLocalDataSource } from "./IExternalLocalDataSource";
import { ISupportsDataChangeNotifications } from "./ISupportsDataChangeNotifications";
import { DataSourceRowType } from "./DataSourceRowType";
import { ISummaryResult } from "./ISummaryResult";
import { IDataSource } from "./IDataSource";
import { TransactionEvent } from "./TransactionEvent";
import { ISupportsExpansionChangeNotifications } from "./ISupportsExpansionChangeNotifications";
/**
 * @hidden
 */
export declare class LocalDataSource extends BaseDataSource {
    static $t: Type;
    protected get_actualBaseDataProvider(): IDataSourceDataProvider;
    protected get actualBaseDataProvider(): IDataSourceDataProvider;
    private cz;
    private dc;
    get dataProvider(): IDataSourceLocalDataProvider;
    set dataProvider(a: IDataSourceLocalDataProvider);
    private cy;
    get actualDataProvider(): IDataSourceLocalDataProvider;
    set actualDataProvider(a: IDataSourceLocalDataProvider);
    private d0;
    get dataSource(): any;
    set dataSource(a: any);
    protected canInitialize(): boolean;
    private c4;
    get c5(): IExternalLocalDataSource;
    set c5(a: IExternalLocalDataSource);
    constructor();
    protected resolveDataProvider(): IDataSourceLocalDataProvider;
    protected propertyUpdatedOverride(a: string, b: any, c: any): void;
    getItemAtIndex(a: number): any;
    getItemFromKey(a: any[]): any;
    getItemPropertyAtIndex(a: number, b: string): any;
    private c8;
    private da;
    private c3;
    private de;
    d4: string;
    protected refreshInternalOverride(): void;
    protected get_isItemIndexLookupSupported(): boolean;
    protected get_isKeyIndexLookupSupported(): boolean;
    indexOfItem(a: any): number;
    private dd;
    indexOfKey(a: any[]): number;
    protected onActualPrimaryKeyChangedOverrride(a: string[], b: string[]): void;
    private c6;
    private c7;
    private c9;
    private dk;
    private dj;
    private dg;
    private dh;
    private df;
    private di;
    onClearItemsOverride(): void;
    onSetItemOverride(a: number, b: any, c: any): void;
    onInsertItemOverride(a: number, b: any): void;
    onRemoveItemOverride(a: number, b: any): void;
    d6(): void;
    d9(a: number, b: any, c: any): void;
    d7(a: number, b: any): void;
    d8(a: number, b: any): void;
    private dl;
    pinRow(a: any[]): void;
    unpinRow(a: any[]): void;
    clearPinnedRows(): void;
    isRowPinned(a: number): boolean;
    private db;
    protected get_isSortingSupported(): boolean;
    protected get_isFilteringSupported(): boolean;
    protected get_isGroupingSupported(): boolean;
    getStickyRowPriority(a: number): number;
    private cx;
    private du;
    private dm;
    private dw;
    private dp;
    private dx;
    private dq;
    private dv;
    private dn;
    private dz;
    private dy;
    private ds;
    private dr;
    private dt;
    getStickyRowsInRange(a: number, b: number): number[];
    isExclusivelySticky(a: number): boolean;
    getRowType(a: number): DataSourceRowType;
    setIsRowExpandedAtIndex(a: number, b: boolean): void;
    getIsRowExpandedAtIndex(a: number): boolean;
    getRowLevel(a: number): number;
    getRootSummaryRowCount(): number;
    getRootSummaryResults(): ISummaryResult[];
    getSectionSummaryResults(a: number): ISummaryResult[][];
    clone(): IDataSource;
    protected ar(): boolean;
    protected cq(a: TransactionEvent, b: any): void;
}
/**
 * @hidden
 */
export declare class LocalDataSourceViewUpdateNotifier extends Base implements ISupportsDataChangeNotifications {
    static $t: Type;
    private a;
    notifyClearItems(): void;
    notifyInsertItem(a: number, b: any): void;
    notifyRemoveItem(a: number, b: any): void;
    notifySetItem(a: number, b: any, c: any): void;
    constructor(a: LocalDataSource);
}
/**
 * @hidden
 */
export declare class LocalDataSourceViewExpansionNotifier extends Base implements ISupportsExpansionChangeNotifications {
    static $t: Type;
    private a;
    notifyRowExpansionChanged(a: number, b: boolean, c: boolean): void;
    constructor(a: LocalDataSource);
}
