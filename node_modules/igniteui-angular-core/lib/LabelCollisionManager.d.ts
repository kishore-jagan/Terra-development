import { Base, Point, Type } from "./type";
import { List$1 } from "./List$1";
import { LabelCollisionPlacementPositions } from "./LabelCollisionPlacementPositions";
import { LabelCollisionManagerCollisionMode } from "./LabelCollisionManagerCollisionMode";
import { IExecutionContext } from "./IExecutionContext";
import { Rect } from "./Rect";
import { LabelCollisionInfo } from "./LabelCollisionInfo";
import { QuadTreeBoundingBox } from "./QuadTreeBoundingBox";
import { PieSliceCollisionGeometry } from "./PieSliceCollisionGeometry";
/**
 * @hidden
 */
export declare class LabelCollisionManager extends Base {
    static $t: Type;
    private o;
    private a;
    constructor(a: number, b: number, c: Rect, d: IExecutionContext, e: number, f: LabelCollisionManagerCollisionMode, g: LabelCollisionPlacementPositions[], h: number, i: number, j: boolean, k: LabelCollisionPlacementPositions[]);
    l(a: LabelCollisionInfo, b: LabelCollisionPlacementPositions, c: number, d: number, e: boolean): QuadTreeBoundingBox;
    private x;
    aj: List$1<LabelCollisionPlacementPositions>;
    labelsMoved: (movedLabels: List$1<LabelCollisionInfo>) => void;
    m: () => void;
    private h;
    g: LabelCollisionManagerCollisionMode;
    private e;
    ai: List$1<LabelCollisionPlacementPositions>;
    au: number;
    a2: number;
    a1: number;
    bu: Rect;
    aw: number;
    at: number;
    private ag;
    private ay;
    a8(a: LabelCollisionInfo): void;
    bl(a: LabelCollisionInfo): void;
    bi(a: LabelCollisionInfo): void;
    bh(a: LabelCollisionInfo): void;
    bp(): void;
    private ah;
    private q;
    private p;
    ba(): void;
    a9(): void;
    private be;
    private bc;
    private static a6;
    private a0;
    private ax;
    private ak;
    private al;
    private bd;
    private az;
    private r;
    private n;
    private b;
    private v;
    private w;
    private as;
    private s;
    get a3(): number;
    a7: string;
    a5: any;
    private am;
    private an;
    bm(a: number, b: number, c: Rect): void;
    ab(): boolean;
    t(): boolean;
    a4(): number;
    private bj;
    private bk;
    private bq;
    private bb;
    private k;
    private bg;
    private bf;
    private j;
    private i;
    private static ap;
    private static br;
    private static aq;
    private static bs;
    private static ao;
    bo(a: List$1<LabelCollisionInfo>): void;
    bn(a: List$1<LabelCollisionInfo>): void;
    private ar;
    static av(a: number): number;
    private ac;
    aa(a: PieSliceCollisionGeometry, b: Rect, c: LabelCollisionInfo, d: Point): boolean;
    bt(a: PieSliceCollisionGeometry): Point;
    private ad;
    z(a: LabelCollisionInfo, b: boolean): boolean;
    private af;
    private ae;
    private u;
    private c;
    f(a: Point, b: boolean): LabelCollisionInfo;
    y(): boolean;
}
