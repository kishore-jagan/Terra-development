import { HighlightingState } from "./HighlightingState";
import { HighlightingInfo as HighlightingInfo_internal } from "./HighlightingInfo";
/**
 * Contains contextual information about a highlighting.
*/
export declare class IgxHighlightingInfo {
    protected createImplementation(): HighlightingInfo_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): HighlightingInfo_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * The index of the first highlighted item.
    *
    * You can use `StartIndex` to get or set the first highlighted item for the series.
    *
    * ```html
    * <igx-column-series
    *         #series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         isHighlightingEnabled="true" isCustomCategoryStyleAllowed="true" (assigningCategoryStyle)="assigningSeries($event)"   >
    * </igx-column-series>
    * ```
    */
    get startIndex(): number;
    set startIndex(v: number);
    static ngAcceptInputType_startIndex: number | string;
    /**
     * The index of the last highlighted item.
    *
    * You can use the `EndIndex` to get or set the last highlighted item for the series.
    *
    * ```html
    * <igx-column-series
    *         #series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         isHighlightingEnabled="true" isCustomCategoryStyleAllowed="true"  (assigningCategoryStyle)="assigningSeries($event)"   >
    *       </igx-column-series>
    * ```
    */
    get endIndex(): number;
    set endIndex(v: number);
    static ngAcceptInputType_endIndex: number | string;
    /**
     * The state of the highlighting.
    *
    * You can use the `State` to get or set the transitioning state of the highlighting, between In, Out, or Static.
    */
    get state(): HighlightingState;
    set state(v: HighlightingState);
    static ngAcceptInputType_state: HighlightingState | string;
    /**
     * A number between 0 and 1 representing the progress of the highlighting.
    *
    * You can use the `Progress` property to set a number between 0 and 1 representing the progress of the highlighting.
    *
    * ```html
    * <igx-column-series
    *         #series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         isHighlightingEnabled="true" isCustomCategoryStyleAllowed="true"  (assigningCategoryStyle)="assigningSeries($event)"   >
    *       </igx-column-series>
    * ```
    */
    get progress(): number;
    set progress(v: number);
    static ngAcceptInputType_progress: number | string;
    /**
     * True if this HighlightingInfo represents a marker highlighting.
    *
    * You can set the `IsMarker` to True if the HighlightingInfo represents a marker highlighting. Otherwise set to false.
    *
    * ```html
    * <igx-column-series
    *         #series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         isHighlightingEnabled="true" isCustomCategoryStyleAllowed="true"  (assigningCategoryStyle)="assigningSeries($event)"   >
    *       </igx-column-series>
    * ```
    */
    get isMarker(): boolean;
    set isMarker(v: boolean);
    static ngAcceptInputType_isMarker: boolean | string;
    /**
     * True if this HighlightingInfo represents a full selection of the data.
    */
    get isFullRange(): boolean;
    set isFullRange(v: boolean);
    static ngAcceptInputType_isFullRange: boolean | string;
    /**
     * TODO
    */
    get isExclusive(): boolean;
    set isExclusive(v: boolean);
    static ngAcceptInputType_isExclusive: boolean | string;
    /**
     * The context for the highlight.
    */
    get context(): any;
    set context(v: any);
    findByName(name: string): any;
}
