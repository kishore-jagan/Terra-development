import { Description } from "./Description";
import { SeriesLayerPropertyOverlayDescription } from "./SeriesLayerPropertyOverlayDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { SeriesLayerDescription } from "./SeriesLayerDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class SeriesDescription extends Description {
    static $t: Type;
    protected get_type(): string;
    get type(): string;
    constructor();
    private co;
    get dataLegendGroup(): string;
    set dataLegendGroup(a: string);
    private cv;
    get highlightedValuesDataLegendGroup(): string;
    set highlightedValuesDataLegendGroup(a: string);
    private l;
    get highlightedValuesExtraPropertyOverlays(): SeriesLayerPropertyOverlayDescription[];
    set highlightedValuesExtraPropertyOverlays(a: SeriesLayerPropertyOverlayDescription[]);
    private cp;
    get dataSourceRef(): string;
    set dataSourceRef(a: string);
    private cs;
    get highlightedDataSourceRef(): string;
    set highlightedDataSourceRef(a: string);
    private c3;
    get legendRef(): string;
    set legendRef(a: string);
    private c2;
    get legendItemVisibility(): string;
    set legendItemVisibility(a: string);
    private c0;
    get legendItemBadgeTemplateRef(): string;
    set legendItemBadgeTemplateRef(a: string);
    private cg;
    get actualLegendItemBadgeTemplateRef(): string;
    set actualLegendItemBadgeTemplateRef(a: string);
    private cf;
    get actualLegendItemBadgeOutline(): string;
    set actualLegendItemBadgeOutline(a: string);
    private ce;
    get actualLegendItemBadgeBrush(): string;
    set actualLegendItemBadgeBrush(a: string);
    private cz;
    get legendItemBadgeShape(): string;
    set legendItemBadgeShape(a: string);
    private cy;
    get legendItemBadgeMode(): string;
    set legendItemBadgeMode(a: string);
    private c1;
    get legendItemTemplateRef(): string;
    set legendItemTemplateRef(a: string);
    private cq;
    get discreteLegendItemTemplateRef(): string;
    set discreteLegendItemTemplateRef(a: string);
    private de;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private df;
    get transitionInEasingFunctionRef(): string;
    set transitionInEasingFunctionRef(a: string);
    private di;
    get transitionOutEasingFunctionRef(): string;
    set transitionOutEasingFunctionRef(a: string);
    private b3;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private az;
    get actualResolution(): number;
    set actualResolution(a: number);
    private a8;
    get resolution(): number;
    set resolution(a: number);
    private bg;
    get visibleRangeMarginTop(): number;
    set visibleRangeMarginTop(a: number);
    private bd;
    get visibleRangeMarginBottom(): number;
    set visibleRangeMarginBottom(a: number);
    private be;
    get visibleRangeMarginLeft(): number;
    set visibleRangeMarginLeft(a: number);
    private bf;
    get visibleRangeMarginRight(): number;
    set visibleRangeMarginRight(a: number);
    private cu;
    get highlightedTitleSuffix(): string;
    set highlightedTitleSuffix(a: string);
    private ct;
    get highlightedLegendItemVisibility(): string;
    set highlightedLegendItemVisibility(a: string);
    private cm;
    get brush(): string;
    set brush(a: string);
    private b9;
    get actualBrush(): string;
    set actualBrush(a: string);
    private da;
    get selectionBrush(): string;
    set selectionBrush(a: string);
    private cr;
    get focusBrush(): string;
    set focusBrush(a: string);
    private ci;
    get actualSelectionBrush(): string;
    set actualSelectionBrush(a: string);
    private ca;
    get actualFocusBrush(): string;
    set actualFocusBrush(a: string);
    private c9;
    get safeActualBrush(): string;
    set safeActualBrush(a: string);
    private c6;
    get outline(): string;
    set outline(a: string);
    private ch;
    get actualOutline(): string;
    set actualOutline(a: string);
    private c5;
    get lineJoin(): string;
    set lineJoin(a: string);
    private cw;
    get highlightedValuesDisplayMode(): string;
    set highlightedValuesDisplayMode(a: string);
    private aa;
    get shouldAnimateOnDataSourceSwap(): boolean;
    set shouldAnimateOnDataSourceSwap(a: boolean);
    private bc;
    get thickness(): number;
    set thickness(a: number);
    private a0;
    get actualThickness(): number;
    set actualThickness(a: number);
    private k;
    get dashArray(): number[];
    set dashArray(a: number[]);
    private cc;
    get actualHighlightingMode(): string;
    set actualHighlightingMode(a: string);
    private cj;
    get actualSelectionMode(): string;
    set actualSelectionMode(a: string);
    private cb;
    get actualFocusMode(): string;
    set actualFocusMode(a: string);
    private aw;
    get actualHighlightedValuesFadeOpacity(): number;
    set actualHighlightedValuesFadeOpacity(a: number);
    private a3;
    get highlightedValuesFadeOpacity(): number;
    set highlightedValuesFadeOpacity(a: number);
    private ax;
    get actualHighlightingFadeOpacity(): number;
    set actualHighlightingFadeOpacity(a: number);
    private a4;
    get highlightingFadeOpacity(): number;
    set highlightingFadeOpacity(a: number);
    private u;
    get isActualLegendFinancial(): boolean;
    set isActualLegendFinancial(a: boolean);
    private v;
    get isComponentHighlightingModeIgnored(): boolean;
    set isComponentHighlightingModeIgnored(a: boolean);
    private y;
    get isHighlightingEnabled(): boolean;
    set isHighlightingEnabled(a: boolean);
    private af;
    get useItemWiseColors(): boolean;
    set useItemWiseColors(a: boolean);
    private ad;
    get shouldShiftOpacityForSafeActualBrush(): boolean;
    set shouldShiftOpacityForSafeActualBrush(a: boolean);
    private ac;
    get shouldRemoveHighlightedDataOnLayerHidden(): boolean;
    set shouldRemoveHighlightedDataOnLayerHidden(a: boolean);
    private ab;
    get shouldHideAutoCallouts(): boolean;
    set shouldHideAutoCallouts(a: boolean);
    private x;
    get isDropShadowEnabled(): boolean;
    set isDropShadowEnabled(a: boolean);
    private a9;
    get shadowBlur(): number;
    set shadowBlur(a: number);
    private db;
    get shadowColor(): string;
    set shadowColor(a: string);
    private ag;
    get useSingleShadow(): boolean;
    set useSingleShadow(a: boolean);
    private ba;
    get shadowOffsetX(): number;
    set shadowOffsetX(a: number);
    private bb;
    get shadowOffsetY(): number;
    set shadowOffsetY(a: number);
    private a1;
    get areaFillOpacity(): number;
    set areaFillOpacity(a: number);
    private av;
    get actualAreaFillOpacity(): number;
    set actualAreaFillOpacity(a: number);
    private a5;
    get markerFillOpacity(): number;
    set markerFillOpacity(a: number);
    private ay;
    get actualMarkerFillOpacity(): number;
    set actualMarkerFillOpacity(a: number);
    private w;
    get isDefaultToolTipSelected(): boolean;
    set isDefaultToolTipSelected(a: boolean);
    private ae;
    get showDefaultTooltip(): boolean;
    set showDefaultTooltip(a: boolean);
    private dl;
    get visibleRangeMode(): string;
    set visibleRangeMode(a: string);
    private c7;
    get outlineMode(): string;
    set outlineMode(a: string);
    private b4;
    get transitionInDuration(): number;
    set transitionInDuration(a: number);
    private b5;
    get transitionOutDuration(): number;
    set transitionOutDuration(a: number);
    private dg;
    get transitionInSpeedType(): string;
    set transitionInSpeedType(a: string);
    private dj;
    get transitionOutSpeedType(): string;
    set transitionOutSpeedType(a: string);
    private c4;
    get lineCap(): string;
    set lineCap(a: string);
    private ck;
    get autoCalloutLabelFormat(): string;
    set autoCalloutLabelFormat(a: string);
    private i;
    get autoCalloutLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set autoCalloutLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private cl;
    get autoCalloutValueLabelFormat(): string;
    set autoCalloutValueLabelFormat(a: string);
    private j;
    get autoCalloutValueLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set autoCalloutValueLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private z;
    get mouseOverEnabled(): boolean;
    set mouseOverEnabled(a: boolean);
    private cn;
    get coercionMethodsRef(): string;
    set coercionMethodsRef(a: string);
    private t;
    get expectFunctions(): boolean;
    set expectFunctions(a: boolean);
    private cx;
    get hitTestMode(): string;
    set hitTestMode(a: string);
    private cd;
    get actualHitTestMode(): string;
    set actualHitTestMode(a: string);
    private a2;
    get finalValue(): number;
    set finalValue(a: number);
    private a7;
    get percentChange(): number;
    set percentChange(a: number);
    private m;
    get layers(): SeriesLayerDescription[];
    set layers(a: SeriesLayerDescription[]);
    private h;
    get actualLayers(): SeriesLayerDescription[];
    set actualLayers(a: SeriesLayerDescription[]);
    private a6;
    get opacity(): number;
    set opacity(a: number);
    private dk;
    get visibility(): string;
    set visibility(a: string);
    private dh;
    get transitionOutCompletedRef(): string;
    set transitionOutCompletedRef(a: string);
    private c8;
    get renderRequestedRef(): string;
    set renderRequestedRef(a: string);
    private dd;
    get tooltipTemplateRef(): string;
    set tooltipTemplateRef(a: string);
    private dc;
    get title(): string;
    set title(a: string);
}
