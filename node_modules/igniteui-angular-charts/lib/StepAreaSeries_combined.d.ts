import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { Type, IList$1 } from "igniteui-angular-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryFrame } from "./CategoryFrame";
import { List$1 } from "igniteui-angular-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { CategorySeriesView } from "./CategorySeriesView";
import { Path } from "igniteui-angular-core";
import { PointCollection } from "igniteui-angular-core";
import { UnknownValuePlotting } from "igniteui-angular-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Clipper } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class StepAreaSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected bi(): Series;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    ace: StepAreaSeriesView;
    protected get_et(): boolean;
    protected get_es(): boolean;
    protected get_fz(): boolean;
    protected get_fj(): boolean;
    cw(): SeriesVisibleRangeMode;
    constructor();
    acd: CategoryLineRasterizer;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    o3(a: boolean, b: SeriesView): void;
    private acf;
    protected yv(): CategoryTransitionInMode;
    it(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    protected b0(): SeriesHitTestMode;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class StepAreaSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    protected df: StepAreaSeries;
    constructor(a: StepAreaSeries);
    au(): void;
    private dn;
    private dq;
    private dp;
    private dr;
    get ds(): Path;
    get du(): Path;
    get dt(): Path;
    get dv(): Path;
    dg(): void;
    dh(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting): void;
    di(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting, h: Clipper): void;
    private dj;
    private dl;
    private dk;
    private dm;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
}
