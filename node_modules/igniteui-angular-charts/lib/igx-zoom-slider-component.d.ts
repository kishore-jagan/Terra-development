import { EventEmitter, ViewContainerRef, Injector, ComponentFactoryResolver, AfterContentInit, Renderer2, NgZone } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { ZoomSliderOrientation } from './ZoomSliderOrientation';
import { IgxZoomSliderResolvingAxisValueEventArgs } from './igx-zoom-slider-resolving-axis-value-event-args';
import { IgxRectChangedEventArgs } from "igniteui-angular-core";
import { ZoomSlider } from "./ZoomSlider";
import * as i0 from "@angular/core";
export declare class IgxZoomSliderComponent implements AfterContentInit {
    private renderer;
    private _elRef;
    private ngZone;
    private injector;
    private componentFactoryResolver;
    container: Element;
    private _height;
    private _width;
    set height(value: string);
    get height(): string;
    set width(value: string);
    get width(): string;
    _dynamicContent: ViewContainerRef;
    private _wrapper;
    private _root;
    constructor(renderer: Renderer2, _elRef: ViewContainerRef, ngZone: NgZone, injector: Injector, componentFactoryResolver: ComponentFactoryResolver);
    updateStyle(): void;
    ngOnDestroy(): void;
    private _implementation;
    ngAfterContentInit(): void;
    protected createImplementation(): ZoomSlider;
    get i(): ZoomSlider;
    private _zoomSlider;
    protected static _staticStyling(container: any, component: any, parent?: any): void;
    get panTransitionDuration(): number;
    set panTransitionDuration(v: number);
    static ngAcceptInputType_panTransitionDuration: number | string;
    get maxZoomWidth(): number;
    set maxZoomWidth(v: number);
    static ngAcceptInputType_maxZoomWidth: number | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio(): number;
    set pixelScalingRatio(v: number);
    static ngAcceptInputType_pixelScalingRatio: number | string;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(v: number);
    static ngAcceptInputType_actualPixelScalingRatio: number | string;
    get windowRect(): IgRect;
    set windowRect(v: IgRect);
    static ngAcceptInputType_windowRect: IgRect | string;
    get minZoomWidth(): number;
    set minZoomWidth(v: number);
    static ngAcceptInputType_minZoomWidth: number | string;
    get startInset(): number;
    set startInset(v: number);
    static ngAcceptInputType_startInset: number | string;
    get endInset(): number;
    set endInset(v: number);
    static ngAcceptInputType_endInset: number | string;
    get trackStartInset(): number;
    set trackStartInset(v: number);
    static ngAcceptInputType_trackStartInset: number | string;
    get trackEndInset(): number;
    set trackEndInset(v: number);
    static ngAcceptInputType_trackEndInset: number | string;
    get barExtent(): number;
    set barExtent(v: number);
    static ngAcceptInputType_barExtent: number | string;
    get orientation(): ZoomSliderOrientation;
    set orientation(v: ZoomSliderOrientation);
    static ngAcceptInputType_orientation: ZoomSliderOrientation | string;
    get lowerThumbBrush(): string;
    set lowerThumbBrush(v: string);
    get lowerThumbStrokeThickness(): number;
    set lowerThumbStrokeThickness(v: number);
    static ngAcceptInputType_lowerThumbStrokeThickness: number | string;
    get higherThumbStrokeThickness(): number;
    set higherThumbStrokeThickness(v: number);
    static ngAcceptInputType_higherThumbStrokeThickness: number | string;
    get higherThumbBrush(): string;
    set higherThumbBrush(v: string);
    get lowerThumbOutline(): string;
    set lowerThumbOutline(v: string);
    get higherThumbOutline(): string;
    set higherThumbOutline(v: string);
    get lowerThumbRidgesBrush(): string;
    set lowerThumbRidgesBrush(v: string);
    get higherThumbRidgesBrush(): string;
    set higherThumbRidgesBrush(v: string);
    get lowerThumbWidth(): number;
    set lowerThumbWidth(v: number);
    static ngAcceptInputType_lowerThumbWidth: number | string;
    get higherThumbWidth(): number;
    set higherThumbWidth(v: number);
    static ngAcceptInputType_higherThumbWidth: number | string;
    get lowerThumbHeight(): number;
    set lowerThumbHeight(v: number);
    static ngAcceptInputType_lowerThumbHeight: number | string;
    get higherThumbHeight(): number;
    set higherThumbHeight(v: number);
    static ngAcceptInputType_higherThumbHeight: number | string;
    get lowerShadeBrush(): string;
    set lowerShadeBrush(v: string);
    get lowerShadeOutline(): string;
    set lowerShadeOutline(v: string);
    get lowerShadeStrokeThickness(): number;
    set lowerShadeStrokeThickness(v: number);
    static ngAcceptInputType_lowerShadeStrokeThickness: number | string;
    get higherShadeBrush(): string;
    set higherShadeBrush(v: string);
    get higherShadeOutline(): string;
    set higherShadeOutline(v: string);
    get higherShadeStrokeThickness(): number;
    set higherShadeStrokeThickness(v: number);
    static ngAcceptInputType_higherShadeStrokeThickness: number | string;
    get barBrush(): string;
    set barBrush(v: string);
    get barOutline(): string;
    set barOutline(v: string);
    get barStrokeThickness(): number;
    set barStrokeThickness(v: number);
    static ngAcceptInputType_barStrokeThickness: number | string;
    get rangeThumbBrush(): string;
    set rangeThumbBrush(v: string);
    get rangeThumbOutline(): string;
    set rangeThumbOutline(v: string);
    get rangeThumbStrokeThickness(): number;
    set rangeThumbStrokeThickness(v: number);
    static ngAcceptInputType_rangeThumbStrokeThickness: number | string;
    get rangeThumbRidgesBrush(): string;
    set rangeThumbRidgesBrush(v: string);
    get lowerCalloutBrush(): string;
    set lowerCalloutBrush(v: string);
    get lowerCalloutTextColor(): string;
    set lowerCalloutTextColor(v: string);
    get lowerCalloutOutline(): string;
    set lowerCalloutOutline(v: string);
    get lowerCalloutStrokeThickness(): number;
    set lowerCalloutStrokeThickness(v: number);
    static ngAcceptInputType_lowerCalloutStrokeThickness: number | string;
    get higherCalloutBrush(): string;
    set higherCalloutBrush(v: string);
    get higherCalloutTextColor(): string;
    set higherCalloutTextColor(v: string);
    get higherCalloutOutline(): string;
    set higherCalloutOutline(v: string);
    get higherCalloutStrokeThickness(): number;
    set higherCalloutStrokeThickness(v: number);
    static ngAcceptInputType_higherCalloutStrokeThickness: number | string;
    get isCustomThumbProvided(): boolean;
    static ngAcceptInputType_isCustomThumbProvided: boolean | string;
    get isCustomRangeThumbProvided(): boolean;
    static ngAcceptInputType_isCustomRangeThumbProvided: boolean | string;
    get isCustomBarProvided(): boolean;
    static ngAcceptInputType_isCustomBarProvided: boolean | string;
    get isCustomShadeProvided(): boolean;
    static ngAcceptInputType_isCustomShadeProvided: boolean | string;
    get areThumbCalloutsEnabled(): boolean;
    set areThumbCalloutsEnabled(v: boolean);
    static ngAcceptInputType_areThumbCalloutsEnabled: boolean | string;
    get thumbCalloutTextStyle(): string;
    set thumbCalloutTextStyle(v: string);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    provideContainer(container: any): void;
    flush(): void;
    trackDirty(): void;
    /**
     * Shows the ZoomSlider.
    
    */
    show(): void;
    /**
     * Hides the ZoomSlider.
    
    */
    hide(): void;
    private _resolvingAxisValue;
    get resolvingAxisValue(): EventEmitter<{
        sender: any;
        args: IgxZoomSliderResolvingAxisValueEventArgs;
    }>;
    private _windowRectChanged;
    /**
     * Occurs just after the current ZoomSlider's window rectangle is changed.
    */
    get windowRectChanged(): EventEmitter<{
        sender: any;
        args: IgxRectChangedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxZoomSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxZoomSliderComponent, "igx-zoom-slider", never, { "height": "height"; "width": "width"; "panTransitionDuration": "panTransitionDuration"; "maxZoomWidth": "maxZoomWidth"; "pixelScalingRatio": "pixelScalingRatio"; "actualPixelScalingRatio": "actualPixelScalingRatio"; "windowRect": "windowRect"; "minZoomWidth": "minZoomWidth"; "startInset": "startInset"; "endInset": "endInset"; "trackStartInset": "trackStartInset"; "trackEndInset": "trackEndInset"; "barExtent": "barExtent"; "orientation": "orientation"; "lowerThumbBrush": "lowerThumbBrush"; "lowerThumbStrokeThickness": "lowerThumbStrokeThickness"; "higherThumbStrokeThickness": "higherThumbStrokeThickness"; "higherThumbBrush": "higherThumbBrush"; "lowerThumbOutline": "lowerThumbOutline"; "higherThumbOutline": "higherThumbOutline"; "lowerThumbRidgesBrush": "lowerThumbRidgesBrush"; "higherThumbRidgesBrush": "higherThumbRidgesBrush"; "lowerThumbWidth": "lowerThumbWidth"; "higherThumbWidth": "higherThumbWidth"; "lowerThumbHeight": "lowerThumbHeight"; "higherThumbHeight": "higherThumbHeight"; "lowerShadeBrush": "lowerShadeBrush"; "lowerShadeOutline": "lowerShadeOutline"; "lowerShadeStrokeThickness": "lowerShadeStrokeThickness"; "higherShadeBrush": "higherShadeBrush"; "higherShadeOutline": "higherShadeOutline"; "higherShadeStrokeThickness": "higherShadeStrokeThickness"; "barBrush": "barBrush"; "barOutline": "barOutline"; "barStrokeThickness": "barStrokeThickness"; "rangeThumbBrush": "rangeThumbBrush"; "rangeThumbOutline": "rangeThumbOutline"; "rangeThumbStrokeThickness": "rangeThumbStrokeThickness"; "rangeThumbRidgesBrush": "rangeThumbRidgesBrush"; "lowerCalloutBrush": "lowerCalloutBrush"; "lowerCalloutTextColor": "lowerCalloutTextColor"; "lowerCalloutOutline": "lowerCalloutOutline"; "lowerCalloutStrokeThickness": "lowerCalloutStrokeThickness"; "higherCalloutBrush": "higherCalloutBrush"; "higherCalloutTextColor": "higherCalloutTextColor"; "higherCalloutOutline": "higherCalloutOutline"; "higherCalloutStrokeThickness": "higherCalloutStrokeThickness"; "areThumbCalloutsEnabled": "areThumbCalloutsEnabled"; "thumbCalloutTextStyle": "thumbCalloutTextStyle"; }, { "resolvingAxisValue": "resolvingAxisValue"; "windowRectChanged": "windowRectChanged"; }, never, never>;
}
