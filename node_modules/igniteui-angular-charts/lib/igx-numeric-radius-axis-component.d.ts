import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent radius axis for polar and radial series.
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*
* ```ts
* this.series1.angleAxisName = "AngleAxis";
* this.series1.valueAxisName = "numericYAxis";
* ```
*/
export declare class IgxNumericRadiusAxisComponent extends IgxNumericAxisBaseComponent {
    protected createImplementation(): NumericRadiusAxis;
    /**
                                 * @hidden
                                 */
    get i(): NumericRadiusAxis;
    constructor();
    /**
     * Checks if the axis is of radial axis type
    *
    * ```ts
    * let isRadial: boolean = this.series.isRadial;
    * ```
    */
    get isRadial(): boolean;
    static ngAcceptInputType_isRadial: boolean | string;
    /**
     * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
     * a value between 0.0 and 1.0.
    */
    get radiusExtentScale(): number;
    set radiusExtentScale(v: number);
    static ngAcceptInputType_radiusExtentScale: number | string;
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get innerRadiusExtentScale(): number;
    set innerRadiusExtentScale(v: number);
    static ngAcceptInputType_innerRadiusExtentScale: number | string;
    /**
     * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
    
    * @param unscaledValue  * The raw axis value.
    */
    getScaledValue(unscaledValue: number): number;
    /**
     * Returns a raw axis value from the world coordinates radius length provided.
    
    * @param scaledValue  * The scaled world coordinates radius length.
    *
    * Class containing several properties which are used as parameters passed to scaling operations in a `SeriesViewer`.
    */
    getUnscaledValue(scaledValue: number): number;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxNumericRadiusAxisComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxNumericRadiusAxisComponent, "igx-numeric-radius-axis", never, { "radiusExtentScale": "radiusExtentScale"; "innerRadiusExtentScale": "innerRadiusExtentScale"; }, {}, never, never>;
}
