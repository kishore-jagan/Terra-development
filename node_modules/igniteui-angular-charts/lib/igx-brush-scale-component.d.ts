import { EventEmitter, OnInit } from '@angular/core';
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { IgxSeriesComponent } from "./igx-series-component";
import { BrushScale } from "./BrushScale";
import * as i0 from "@angular/core";
/**
 * Represents a base class for brush scales.
*/
export declare class IgxBrushScaleComponent implements OnInit {
    protected createImplementation(): BrushScale;
    ngOnInit(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): BrushScale; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgxBrushScaleComponent;
    private onImplementationCreated;
    constructor();
    /**
     * Gets the brushes collection used by this scale.
    */
    get brushes(): string[];
    set brushes(v: string[]);
    static ngAcceptInputType_brushes: string[] | string;
    /**
     * Gets the status of the scale
    */
    get isReady(): boolean;
    static ngAcceptInputType_isReady: boolean | string;
    /**
     * Checks if this item is a BrushScale
    */
    get isBrushScale(): boolean;
    static ngAcceptInputType_isBrushScale: boolean | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Registers a series with the scale. Under normal circumstances you should not need to call this manually.
    
    * @param series  * The series to register with the scale.
    */
    registerSeries(series: IgxSeriesComponent): void;
    /**
     * Unregisters a series with the scale. Under normal circumstances you should not need to call this manually.
    
    * @param series  * The series to unregister from the scale.
    */
    unregisterSeries(series: IgxSeriesComponent): void;
    /**
     * Gets a brush from the brushes collection by index.
    
    */
    getBrush(index: number): string;
    /**
     * Notify attached series about changes to this scale
    
    */
    notifySeries(): void;
    private _propertyUpdated;
    /**
     * Event raised when a property (including "effective" and non-dependency property) value changes.
    */
    get propertyUpdated(): EventEmitter<{
        sender: any;
        args: IgxPropertyUpdatedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxBrushScaleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxBrushScaleComponent, "igx-brush-scale", never, { "brushes": "brushes"; }, { "propertyUpdated": "propertyUpdated"; }, never, never>;
}
