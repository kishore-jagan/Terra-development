import { IgPoint } from "igniteui-angular-core";
import { AnnotationAppearanceMode } from "./AnnotationAppearanceMode";
import { IgxSeriesComponent } from "./igx-series-component";
import { AnnotationLayer } from "./AnnotationLayer";
import * as i0 from "@angular/core";
/**
 * Represents the base class for annotation layer types. Annotations will usually disable some of the default hover/touch behaviors of the chart when they are introduced to the series collection.
 * In return they provide some valuable information as the cursor is moved by hovering over the chart, or performing a press-hold-drag interaction in touch mode.
*/
export declare abstract class IgxAnnotationLayerComponent extends IgxSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): AnnotationLayer;
    constructor();
    /**
     * Gets or sets whether this series should take up an index for auto brush coloring.
    */
    get useIndex(): boolean;
    set useIndex(v: boolean);
    static ngAcceptInputType_useIndex: boolean | string;
    /**
     * Gets or sets whether this series interacts with the chart legend.
    */
    get useLegend(): boolean;
    set useLegend(v: boolean);
    static ngAcceptInputType_useLegend: boolean | string;
    /**
     * Gets or sets the world position to use instead of the pointer position for this annotation layer. If you set this value, rather than responding to the pointer, this layer will be fixed on the provided world position.
     * A world position has x and y values that range from 0 to 1 that represent the global position of the cursor relative to the entire ranges of the axes. The default of (NaN, NaN) means that the layer should react to pointer movement.
    */
    get cursorPosition(): IgPoint;
    set cursorPosition(v: IgPoint);
    static ngAcceptInputType_cursorPosition: IgPoint | string;
    /**
     * Gets or sets whether the series viewer's default crosshair should be disabled by the presence of this layer.
    */
    get isDefaultCrosshairDisabled(): boolean;
    set isDefaultCrosshairDisabled(v: boolean);
    static ngAcceptInputType_isDefaultCrosshairDisabled: boolean | string;
    /**
     * Gets whether or not the default crosshair behavior is disabled.
    */
    get isDefaultCrosshairBehaviorDisabled(): boolean;
    static ngAcceptInputType_isDefaultCrosshairBehaviorDisabled: boolean | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get appearanceMode(): AnnotationAppearanceMode;
    set appearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_appearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get actualAppearanceMode(): AnnotationAppearanceMode;
    set actualAppearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_actualAppearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get shiftAmount(): number;
    set shiftAmount(v: number);
    static ngAcceptInputType_shiftAmount: number | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get actualShiftAmount(): number;
    set actualShiftAmount(v: number);
    static ngAcceptInputType_actualShiftAmount: number | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get horizontalAppearanceMode(): AnnotationAppearanceMode;
    set horizontalAppearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_horizontalAppearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get actualHorizontalAppearanceMode(): AnnotationAppearanceMode;
    set actualHorizontalAppearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_actualHorizontalAppearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get verticalAppearanceMode(): AnnotationAppearanceMode;
    set verticalAppearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_verticalAppearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get actualVerticalAppearanceMode(): AnnotationAppearanceMode;
    set actualVerticalAppearanceMode(v: AnnotationAppearanceMode);
    static ngAcceptInputType_actualVerticalAppearanceMode: AnnotationAppearanceMode | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get horizontalShiftAmount(): number;
    set horizontalShiftAmount(v: number);
    static ngAcceptInputType_horizontalShiftAmount: number | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get actualHorizontalShiftAmount(): number;
    set actualHorizontalShiftAmount(v: number);
    static ngAcceptInputType_actualHorizontalShiftAmount: number | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get verticalShiftAmount(): number;
    set verticalShiftAmount(v: number);
    static ngAcceptInputType_verticalShiftAmount: number | string;
    /**
     * Gets or sets the percentage amount to shift the appearance mode by. Value must range between -1.0 to 1.0.
    */
    get actualVerticalShiftAmount(): number;
    set actualVerticalShiftAmount(v: number);
    static ngAcceptInputType_actualVerticalShiftAmount: number | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get horizontalDashArray(): number[];
    set horizontalDashArray(v: number[]);
    static ngAcceptInputType_horizontalDashArray: number[] | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get actualHorizontalDashArray(): number[];
    set actualHorizontalDashArray(v: number[]);
    static ngAcceptInputType_actualHorizontalDashArray: number[] | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get verticalDashArray(): number[];
    set verticalDashArray(v: number[]);
    static ngAcceptInputType_verticalDashArray: number[] | string;
    /**
     * Gets or sets the mode used for shifting the annotation layer color based on the target series.
    */
    get actualVerticalDashArray(): number[];
    set actualVerticalDashArray(v: number[]);
    static ngAcceptInputType_actualVerticalDashArray: number[] | string;
    /**
     * Gets if the series uses an index, which can be used to auto-assign it a color.
    */
    get isIndexed(): boolean;
    static ngAcceptInputType_isIndexed: boolean | string;
    /**
     * Gets if the series should appear in any legends.
    */
    get isUsableInLegend(): boolean;
    static ngAcceptInputType_isUsableInLegend: boolean | string;
    /**
     * Gets whether this series is an annotation layer.
    */
    get isAnnotationLayer(): boolean;
    static ngAcceptInputType_isAnnotationLayer: boolean | string;
    /**
     * Gets or sets whether this layer renders as an overlay or not.
    */
    get shouldRenderAsOverlay(): boolean;
    set shouldRenderAsOverlay(v: boolean);
    static ngAcceptInputType_shouldRenderAsOverlay: boolean | string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxAnnotationLayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxAnnotationLayerComponent, "ng-component", never, { "useIndex": "useIndex"; "useLegend": "useLegend"; "cursorPosition": "cursorPosition"; "isDefaultCrosshairDisabled": "isDefaultCrosshairDisabled"; "appearanceMode": "appearanceMode"; "actualAppearanceMode": "actualAppearanceMode"; "shiftAmount": "shiftAmount"; "actualShiftAmount": "actualShiftAmount"; "horizontalAppearanceMode": "horizontalAppearanceMode"; "actualHorizontalAppearanceMode": "actualHorizontalAppearanceMode"; "verticalAppearanceMode": "verticalAppearanceMode"; "actualVerticalAppearanceMode": "actualVerticalAppearanceMode"; "horizontalShiftAmount": "horizontalShiftAmount"; "actualHorizontalShiftAmount": "actualHorizontalShiftAmount"; "verticalShiftAmount": "verticalShiftAmount"; "actualVerticalShiftAmount": "actualVerticalShiftAmount"; "horizontalDashArray": "horizontalDashArray"; "actualHorizontalDashArray": "actualHorizontalDashArray"; "verticalDashArray": "verticalDashArray"; "actualVerticalDashArray": "actualVerticalDashArray"; "shouldRenderAsOverlay": "shouldRenderAsOverlay"; }, {}, never, never>;
}
