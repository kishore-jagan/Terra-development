import { OnInit } from "@angular/core";
import { TimeAxisLabelFormat } from "./TimeAxisLabelFormat";
import * as i0 from "@angular/core";
export declare class IgxTimeAxisLabelFormatComponent implements OnInit {
    protected _implementation: any;
    get i(): TimeAxisLabelFormat;
    private onImplementationCreated;
    constructor();
    protected createImplementation(): TimeAxisLabelFormat;
    ngOnInit(): void;
    private _renderer;
    private _provideRenderer;
    static _createFromInternal(internal: any): IgxTimeAxisLabelFormatComponent;
    /**
 * The visible axis range at which to apply this label format.
*
* The `Range` property provide the visible axis range at which to apply this label format.
*
* ```ts
* let labelFormat = new TimeAxisLabelFormat();
* labelFormat.format = "hh:mm:ss";
* labelFormat.range = 1000;
* this.xAxis.labelFormats.add(labelFormat);
* labelFormat = new TimeAxisLabelFormat();
* labelFormat.format = "hh:mm";
* labelFormat.range = 60 * 1000;
* this.xAxis.labelFormats.add(labelFormat);
* labelFormat = new TimeAxisLabelFormat();
* labelFormat.format = "MMM-dd-yy";
* labelFormat.range = 24 * 60 * 60 * 1000;
* this.xAxis.labelFormats.add(labelFormat);
* ```
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
* 	<igx-time-x-axis
* 		[labelFormats]="labelFormats"
* 		dateTimeMemberPath="time"
* 		#xAxis>
*     </igx-time-x-axis>
* </igx-data-chart>
* ```
*/
    get range(): number;
    set range(v: number);
    static ngAcceptInputType_range: number | string;
    /**
     * The DateTime format string to apply.
     * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
    *
    * The `Format` property provide the DateTime format string to apply.
    *
    * ```ts
    * let labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "hh:mm:ss";
    * labelFormat.range = 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "hh:mm";
    * labelFormat.range = 60 * 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "MMM-dd-yy";
    * labelFormat.range = 24 * 60 * 60 * 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    * 	<igx-time-x-axis
    * 		[labelFormats]="labelFormats"
    * 		dateTimeMemberPath="time"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    */
    get format(): string;
    set format(v: string);
    /**
     * The DateTime format string to apply, if the year is repeated from the prior date.
     * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
    */
    get repeatedYearFormat(): string;
    set repeatedYearFormat(v: string);
    /**
     * The DateTime format string to apply, if the month is repeated from the prior date.
     * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
    */
    get repeatedMonthFormat(): string;
    set repeatedMonthFormat(v: string);
    /**
     * The DateTime format string to apply, if the day is repeated from the prior date.
     * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
    */
    get repeatedDayFormat(): string;
    set repeatedDayFormat(v: string);
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxTimeAxisLabelFormatComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxTimeAxisLabelFormatComponent, "igx-time-axis-label-format", never, { "range": "range"; "format": "format"; "repeatedYearFormat": "repeatedYearFormat"; "repeatedMonthFormat": "repeatedMonthFormat"; "repeatedDayFormat": "repeatedDayFormat"; }, {}, never, never>;
}
