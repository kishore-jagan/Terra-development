import { EventEmitter } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgPoint } from "igniteui-angular-core";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { CategoryYAxis } from "./CategoryYAxis";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent category Y axis.
*/
export declare class IgxCategoryYAxisComponent extends IgxCategoryAxisBaseComponent {
    protected createImplementation(): CategoryYAxis;
    /**
                                 * @hidden
                                 */
    get i(): CategoryYAxis;
    constructor();
    /**
     * Gets if the current axis is a vertical axis.
    */
    get isVertical(): boolean;
    static ngAcceptInputType_isVertical: boolean | string;
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    */
    get interval(): number;
    set interval(v: number);
    static ngAcceptInputType_interval: number | string;
    /**
     * Gets the effective value for the current Interval.
    */
    get actualInterval(): number;
    set actualInterval(v: number);
    static ngAcceptInputType_actualInterval: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval(): number;
    set minorInterval(v: number);
    static ngAcceptInputType_minorInterval: number | string;
    /**
     * Gets the effective value for the current MinorInterval.
    */
    get actualMinorInterval(): number;
    set actualMinorInterval(v: number);
    static ngAcceptInputType_actualMinorInterval: number | string;
    /**
     * Gets or sets number of visible categories at maximum zooming level
     * This property is overridden by chart's WindowRectMinWidth property
    */
    get zoomMaximumCategoryRange(): number;
    set zoomMaximumCategoryRange(v: number);
    static ngAcceptInputType_zoomMaximumCategoryRange: number | string;
    /**
     * Gets or sets maximum pixel span of series item that will be visible at maximum zooming level
     * This property ensures that series item does not get stretch above specified value.
     * This property is overridden by chart's WindowRectMinWidth property
    */
    get zoomMaximumItemSpan(): number;
    set zoomMaximumItemSpan(v: number);
    static ngAcceptInputType_zoomMaximumItemSpan: number | string;
    /**
     * Gets or sets range of categories that the chart will zoom in and fill plot area
     * This property is overridden by chart's WindowRect or WindowScaleHorizontal properties
    */
    get zoomToCategoryRange(): number;
    set zoomToCategoryRange(v: number);
    static ngAcceptInputType_zoomToCategoryRange: number | string;
    /**
     * Gets or sets starting category that chart will move its zoom window. Acceptable value is between 0 and number of data items
     * This property is overridden by chart's WindowRect or WindowScaleHorizontal properties
    */
    get zoomToCategoryStart(): number;
    set zoomToCategoryStart(v: number);
    static ngAcceptInputType_zoomToCategoryStart: number | string;
    /**
     * Gets or sets pixel span of series item that will be used to zoom chart such that the item has desired span
     * Chart will automatically zoom in until series item has specified pixel span.
     * This property is overridden by chart's WindowRect or WindowScaleHorizontal properties
    */
    get zoomToItemSpan(): number;
    set zoomToItemSpan(v: number);
    static ngAcceptInputType_zoomToItemSpan: number | string;
    getCategoryBoundingBox(point: IgPoint, useInterpolation: boolean, singularWidth: number): IgRect;
    scrollRangeIntoView(minimum: number, maximum: number): void;
    /**
     * Scrolls the specified item into view.
    
    * @param item  * Data item to scroll into view
    */
    scrollIntoView(item: any): void;
    /**
     * Gets window zoom scale required to zoom to specified number of categories
    
    */
    getWindowZoomFromCategories(categoriesCount: number): number;
    /**
     * Gets window zoom scale required to zoom to specified span of series item
    
    */
    getWindowZoomFromItemSpan(pixels: number): number;
    private _actualIntervalChange;
    get actualIntervalChange(): EventEmitter<number>;
    private _actualMinorIntervalChange;
    get actualMinorIntervalChange(): EventEmitter<number>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCategoryYAxisComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCategoryYAxisComponent, "igx-category-y-axis", never, { "interval": "interval"; "actualInterval": "actualInterval"; "minorInterval": "minorInterval"; "actualMinorInterval": "actualMinorInterval"; "zoomMaximumCategoryRange": "zoomMaximumCategoryRange"; "zoomMaximumItemSpan": "zoomMaximumItemSpan"; "zoomToCategoryRange": "zoomToCategoryRange"; "zoomToCategoryStart": "zoomToCategoryStart"; "zoomToItemSpan": "zoomToItemSpan"; }, { "actualIntervalChange": "actualIntervalChange"; "actualMinorIntervalChange": "actualMinorIntervalChange"; }, never, never>;
}
