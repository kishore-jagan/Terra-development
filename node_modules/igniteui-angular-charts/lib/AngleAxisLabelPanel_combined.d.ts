import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
import { Point, Type, IList$1 } from "igniteui-angular-core";
import { AxisLabelPanelBaseView } from "./AxisLabelPanelBaseView";
import { Rect } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { List$1 } from "igniteui-angular-core";
import { AxisAngleLabelMode } from "./AxisAngleLabelMode";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IAngleScaler } from "./IAngleScaler";
import { CategoryAxisRenderer } from "./CategoryAxisRenderer";
import { DependencyProperty } from "igniteui-angular-core";
import { AxisOrientation } from "./AxisOrientation";
import { AxisView } from "./AxisView";
import { PolarAxisRenderingManager } from "./PolarAxisRenderingManager";
import { AxisRenderingParametersBase } from "./AxisRenderingParametersBase";
import { ScalerParams } from "./ScalerParams";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { Geometry } from "igniteui-angular-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { NumericAxisRenderer } from "./NumericAxisRenderer";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { GeometryGroup } from "igniteui-angular-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { NumericAxisBaseView } from "./NumericAxisBaseView";
/**
 * @hidden
 */
export declare class AngleAxisLabelPanel extends AxisLabelPanelBase {
    static $t: Type;
    ae(): AxisLabelPanelBaseView;
    ch(a: AxisLabelPanelBaseView): void;
    c9: AngleAxisLabelPanelView;
    constructor();
    da: boolean;
    di: (arg1: number, arg2: number, arg3: number) => Point;
    at(a: number, b: Rect): boolean;
    df: number;
    dc: number;
    de: number;
    dd: number;
    db: number;
    a5(): List$1<Rect>;
    private dk;
    private dj;
    private dh;
    private dg;
    ai(): AxisLabelsLocation;
    ay(a: AxisLabelsLocation): boolean;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxis extends CategoryAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    ht(a: AxisView): void;
    ml: CategoryAngleAxisView;
    protected get_b9(): boolean;
    private mq;
    constructor();
    av(): AxisLabelPanelBase;
    mn: CategoryAxisRenderer;
    private mr;
    protected mu(a: number): boolean;
    protected ng(): string;
    private na;
    private my;
    private mm;
    protected mv(a: number): boolean;
    private nt;
    private ns;
    m2(): number;
    mk(a: Rect, b: Rect, c: Rect, d: Rect): AxisRenderingParametersBase;
    getMinMaxAngle(a: Rect, b: Rect, c: Rect, d: number, e: number): {
        p3: number;
        p4: number;
    };
    ac(): void;
    private mo;
    get mp(): NumericRadiusAxis;
    set mp(a: NumericRadiusAxis);
    ak(): Axis;
    nb: number;
    protected mz: number;
    mi: AxisAngleLabelMode;
    mj(): AxisAngleLabelMode;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    protected get_ms(): boolean;
    get ms(): boolean;
    m4(a: number, b: Rect, c: Rect, d: Rect): number;
    k5(a: Rect, b: Rect, c: Rect): number;
    m3(a: number, b: number, c: Rect, d: Rect, e: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    m7(a: number): number;
    protected ia(a: boolean): void;
    m6(a: Rect, b: Rect, c: Rect): number;
    m5(a: Rect, b: Rect, c: Rect): number;
    getScaledAngle(a: number): number;
    getUnscaledAngle(a: number): number;
    ek(a: number, b: ScalerParams): number;
    en(a: number, b: ScalerParams): number;
    d4(a: Point): number;
    protected hx(a: any, b: string, c: any, d: any): void;
    private nl;
    nn(a: NumericRadiusAxis): void;
    static readonly no: DependencyProperty;
    get m8(): number;
    set m8(a: number);
    private mw;
    get m0(): number;
    set m0(a: number);
    ew(): number;
    static readonly nq: DependencyProperty;
    get m9(): number;
    set m9(a: number);
    private mx;
    get m1(): number;
    set m1(a: number);
    protected mt(): boolean;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    c3(): boolean;
    private nc;
    get nd(): number;
    set nd(a: number);
    j6(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericAngleAxis extends NumericAxisBase implements IAngleScaler {
    static $t: Type;
    a4(): AxisView;
    ht(a: AxisView): void;
    nk: NumericAngleAxisView;
    nn: PolarAxisRenderingManager;
    protected get_b9(): boolean;
    constructor();
    av(): AxisLabelPanelBase;
    nr(): number;
    private nt;
    private no;
    private np;
    kz(): NumericAxisRenderer;
    private n2;
    ek(a: number, b: ScalerParams): number;
    getScaledAngle1(a: number, b: boolean, c: boolean): number;
    getScaledAngle(a: number): number;
    en(a: number, b: ScalerParams): number;
    getUnscaledAngle(a: number): number;
    nu: number;
    private nq;
    ni: AxisAngleLabelMode;
    nj(): AxisAngleLabelMode;
    protected hx(a: any, b: string, c: any, d: any): void;
    private nx;
    k3(): NumericAxisRenderingParameters;
    k2(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    getMinMaxAngle(a: Rect, b: Rect, c: Rect, d: number, e: number): {
        p3: number;
        p4: number;
    };
    protected ia(a: boolean): void;
    private nl;
    get nm(): NumericRadiusAxis;
    set nm(a: NumericRadiusAxis);
    ak(): Axis;
    nz(a: NumericRadiusAxis): void;
    protected iq(a: Rect, b: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j6(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class NumericRadiusAxis extends NumericAxisBase {
    static $t: Type;
    a4(): AxisView;
    ht(a: AxisView): void;
    nk: NumericRadiusAxisView;
    protected get_cm(): boolean;
    ej(): number;
    private nt;
    private ns;
    private nl;
    constructor();
    av(): AxisLabelPanelBase;
    nm: boolean;
    private nq;
    private nn;
    kz(): NumericAxisRenderer;
    ek(a: number, b: ScalerParams): number;
    nw(a: number, b: boolean, c: boolean, d: number, e: number): number;
    nv(a: number): number;
    nx(a: number): number;
    en(a: number, b: ScalerParams): number;
    nz: number;
    np: number;
    ny: number;
    no: number;
    protected hx(a: any, b: string, c: any, d: any): void;
    protected nr: number;
    n4(a: Axis): void;
    private ni;
    get nj(): Axis;
    set nj(a: Axis);
    ak(): Axis;
    k3(): NumericAxisRenderingParameters;
    k2(a: Rect, b: Rect, c: Rect, d: Rect): NumericAxisRenderingParameters;
    private n5;
    private n0;
    nu(): number;
    m3(a: AxisRangeChangedEventArgs): void;
    protected ia(a: boolean): void;
    protected iq(a: Rect, b: Rect): void;
    n3(a: GeometryGroup, b: Rect, c: Rect, d: Rect, e: Rect): void;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    j6(a: number, b: Rect, c: Rect, d: Rect, e: Rect): Geometry;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AngleAxisLabelPanelView extends AxisLabelPanelBaseView {
    static $t: Type;
    protected az: AngleAxisLabelPanel;
    constructor(a: AngleAxisLabelPanel);
    an(): void;
    a1(a: List$1<Rect>, b: List$1<boolean>): void;
    a0(a: List$1<Rect>, b: List$1<boolean>): void;
    o(): number;
    p(): number;
    q(): number;
    r(): number;
}
/**
 * @hidden
 */
export declare class CategoryAngleAxisView extends CategoryAxisBaseView {
    static $t: Type;
    protected bm: CategoryAngleAxis;
    constructor(a: CategoryAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericAngleAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericAngleAxis;
    constructor(a: NumericAngleAxis);
    al(): void;
}
/**
 * @hidden
 */
export declare class NumericRadiusAxisView extends NumericAxisBaseView {
    static $t: Type;
    protected bm: NumericRadiusAxis;
    constructor(a: NumericRadiusAxis);
    al(): void;
}
