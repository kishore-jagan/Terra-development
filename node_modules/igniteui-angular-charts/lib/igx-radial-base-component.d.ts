import { EventEmitter } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { RadialLabelMode } from "igniteui-angular-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { IgxCategoryAngleAxisComponent } from "./igx-category-angle-axis-component";
import { IgxNumericRadiusAxisComponent } from "./igx-numeric-radius-axis-component";
import { IgxAssigningRadialStyleEventArgs } from "./igx-assigning-radial-style-event-args";
import { IgxAssigningRadialMarkerStyleEventArgs } from "./igx-assigning-radial-marker-style-event-args";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { RadialBase } from "./RadialBase";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent radial series
*/
export declare abstract class IgxRadialBaseComponent extends IgxMarkerSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): RadialBase;
    constructor();
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get autoCalloutLabelPrecision(): number;
    set autoCalloutLabelPrecision(v: number);
    static ngAcceptInputType_autoCalloutLabelPrecision: number | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get autoCalloutPercentagePrecision(): number;
    set autoCalloutPercentagePrecision(v: number);
    static ngAcceptInputType_autoCalloutPercentagePrecision: number | string;
    /**
     * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
    */
    get autoCalloutLabelValueSeparator(): string;
    set autoCalloutLabelValueSeparator(v: string);
    /**
     * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
    */
    get legendRadialLabelMode(): RadialLabelMode;
    set legendRadialLabelMode(v: RadialLabelMode);
    static ngAcceptInputType_legendRadialLabelMode: RadialLabelMode | string;
    /**
     * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
    */
    get autoCalloutRadialLabelMode(): RadialLabelMode;
    set autoCalloutRadialLabelMode(v: RadialLabelMode);
    static ngAcceptInputType_autoCalloutRadialLabelMode: RadialLabelMode | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get autoCalloutOthersLabelFormat(): string;
    set autoCalloutOthersLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the auto callouts for the others category.
    */
    get autoCalloutOthersLabelFormatSpecifiers(): any[];
    set autoCalloutOthersLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_autoCalloutOthersLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get proportionalRadialLabelFormat(): string;
    set proportionalRadialLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the auto callouts for the others category.
    */
    get proportionalRadialLabelFormatSpecifiers(): any[];
    set proportionalRadialLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_proportionalRadialLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get legendProportionalRadialLabelFormat(): string;
    set legendProportionalRadialLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the auto callouts for the others category.
    */
    get legendProportionalRadialLabelFormatSpecifiers(): any[];
    set legendProportionalRadialLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_legendProportionalRadialLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get othersProportionalRadialLabelFormat(): string;
    set othersProportionalRadialLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the auto callouts for the others category.
    */
    get othersProportionalRadialLabelFormatSpecifiers(): any[];
    set othersProportionalRadialLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_othersProportionalRadialLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the format string to use for the auto callout labels for the others category.
    */
    get othersLegendProportionalRadialLabelFormat(): string;
    set othersLegendProportionalRadialLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the auto callouts for the others category.
    */
    get othersLegendProportionalRadialLabelFormatSpecifiers(): any[];
    set othersLegendProportionalRadialLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_othersLegendProportionalRadialLabelFormatSpecifiers: any[] | string;
    /**
     * Checks if this series is a radial series
    */
    get isRadial(): boolean;
    static ngAcceptInputType_isRadial: boolean | string;
    /**
     * Gets or sets whether this Radial series should allow custom style overrides of its individual visuals.
    */
    get isCustomRadialStyleAllowed(): boolean;
    set isCustomRadialStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomRadialStyleAllowed: boolean | string;
    /**
     * Gets or sets whether this Radial series should allow custom style overrides of its individual marker visuals.
    */
    get isCustomRadialMarkerStyleAllowed(): boolean;
    set isCustomRadialMarkerStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomRadialMarkerStyleAllowed: boolean | string;
    /**
     * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
     * Note: Transitions are not currently supported for stacked series.
    */
    get transitionInMode(): CategoryTransitionInMode;
    set transitionInMode(v: CategoryTransitionInMode);
    static ngAcceptInputType_transitionInMode: CategoryTransitionInMode | string;
    /**
     * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
     * Note: Transitions are not currently supported for stacked series.
    */
    get isTransitionInEnabled(): boolean;
    set isTransitionInEnabled(v: boolean);
    static ngAcceptInputType_isTransitionInEnabled: boolean | string;
    /**
     * Gets the effective angle axis for the current series object.
    */
    get angleAxis(): IgxCategoryAngleAxisComponent;
    set angleAxis(v: IgxCategoryAngleAxisComponent);
    /**
     * Gets the effective value axis for the current series object.
    */
    get valueAxis(): IgxNumericRadiusAxisComponent;
    set valueAxis(v: IgxNumericRadiusAxisComponent);
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this property to true will decrease chart performance.
    */
    get clipSeriesToBounds(): boolean;
    set clipSeriesToBounds(v: boolean);
    static ngAcceptInputType_clipSeriesToBounds: boolean | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Determine if object can be used as ValueAxis
    
    * @param axis  * The object to check
    */
    canUseAsValueAxis(axis: any): boolean;
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    canUseAsAngleAxis(axis: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the angle to the provided world position from the center of the radial series.
    
    * @param world  * The world position to get the angle for
    */
    getAngleFromWorld(world: IgPoint): number;
    /**
     * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.
    
    * @param world  * The world position for which to return the index.
    */
    getExactItemIndex(world: IgPoint): number;
    /**
     * Get the index of the item near the provided world coordinates.
    
    * @param world  * The world coordinates for which to getch the item index.
    */
    getItemIndex(world: IgPoint): number;
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth(): number;
    private _assigningRadialStyle;
    /**
     * Event raised when Assigning Category Style
    */
    get assigningRadialStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningRadialStyleEventArgs;
    }>;
    private _assigningRadialMarkerStyle;
    /**
     * Event raised when Assigning Radial Marker Style
    */
    get assigningRadialMarkerStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningRadialMarkerStyleEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxRadialBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxRadialBaseComponent, "ng-component", never, { "autoCalloutLabelPrecision": "autoCalloutLabelPrecision"; "autoCalloutPercentagePrecision": "autoCalloutPercentagePrecision"; "autoCalloutLabelValueSeparator": "autoCalloutLabelValueSeparator"; "legendRadialLabelMode": "legendRadialLabelMode"; "autoCalloutRadialLabelMode": "autoCalloutRadialLabelMode"; "autoCalloutOthersLabelFormat": "autoCalloutOthersLabelFormat"; "autoCalloutOthersLabelFormatSpecifiers": "autoCalloutOthersLabelFormatSpecifiers"; "proportionalRadialLabelFormat": "proportionalRadialLabelFormat"; "proportionalRadialLabelFormatSpecifiers": "proportionalRadialLabelFormatSpecifiers"; "legendProportionalRadialLabelFormat": "legendProportionalRadialLabelFormat"; "legendProportionalRadialLabelFormatSpecifiers": "legendProportionalRadialLabelFormatSpecifiers"; "othersProportionalRadialLabelFormat": "othersProportionalRadialLabelFormat"; "othersProportionalRadialLabelFormatSpecifiers": "othersProportionalRadialLabelFormatSpecifiers"; "othersLegendProportionalRadialLabelFormat": "othersLegendProportionalRadialLabelFormat"; "othersLegendProportionalRadialLabelFormatSpecifiers": "othersLegendProportionalRadialLabelFormatSpecifiers"; "isCustomRadialStyleAllowed": "isCustomRadialStyleAllowed"; "isCustomRadialMarkerStyleAllowed": "isCustomRadialMarkerStyleAllowed"; "transitionInMode": "transitionInMode"; "isTransitionInEnabled": "isTransitionInEnabled"; "angleAxis": "angleAxis"; "valueAxis": "valueAxis"; "clipSeriesToBounds": "clipSeriesToBounds"; }, { "assigningRadialStyle": "assigningRadialStyle"; "assigningRadialMarkerStyle": "assigningRadialMarkerStyle"; }, never, never>;
}
