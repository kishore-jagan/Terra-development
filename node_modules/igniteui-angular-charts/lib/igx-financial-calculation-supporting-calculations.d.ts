import { IgxColumnSupportingCalculation } from "./igx-column-supporting-calculation";
import { IgxDataSourceSupportingCalculation } from "./igx-data-source-supporting-calculation";
import { FinancialCalculationSupportingCalculations as FinancialCalculationSupportingCalculations_internal } from "./FinancialCalculationSupportingCalculations";
/**
 * Represents a contract between the financial series and the calculation strategies
 * detailing the supporting calculation strategies that the financial series will
 * provide in order for the indicator calculations to be performed.
*/
export declare class IgxFinancialCalculationSupportingCalculations {
    protected createImplementation(): FinancialCalculationSupportingCalculations_internal;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): FinancialCalculationSupportingCalculations_internal;
    private onImplementationCreated;
    constructor();
    protected _provideImplementation(i: any): void;
    /**
     * The strategy provided to calculate an exponential moving average for a collection.
    */
    get eMA(): IgxColumnSupportingCalculation;
    set eMA(v: IgxColumnSupportingCalculation);
    /**
     * The strategy provided to calculate a simple moving average for a collection.
    */
    get sMA(): IgxColumnSupportingCalculation;
    set sMA(v: IgxColumnSupportingCalculation);
    /**
     * The strategy provided to calculate a standard deviation for a collection.
    */
    get sTDEV(): IgxColumnSupportingCalculation;
    set sTDEV(v: IgxColumnSupportingCalculation);
    /**
     * The strategy provided to calculate a moving sum for a collection.
    */
    get movingSum(): IgxColumnSupportingCalculation;
    set movingSum(v: IgxColumnSupportingCalculation);
    /**
     * The strategy provided to calculate the short period moving average for volume oscillator indicators.
    */
    get shortVolumeOscillatorAverage(): IgxDataSourceSupportingCalculation;
    set shortVolumeOscillatorAverage(v: IgxDataSourceSupportingCalculation);
    /**
     * The strategy provided to calculate the long period moving average for volume oscillator indicators.
    */
    get longVolumeOscillatorAverage(): IgxDataSourceSupportingCalculation;
    set longVolumeOscillatorAverage(v: IgxDataSourceSupportingCalculation);
    /**
     * The strategy provided to calculate the short period moving average for price oscillator indicators.
    */
    get shortPriceOscillatorAverage(): IgxDataSourceSupportingCalculation;
    set shortPriceOscillatorAverage(v: IgxDataSourceSupportingCalculation);
    /**
     * The strategy provided to calculate the long period moving average for price oscillator indicators.
    */
    get longPriceOscillatorAverage(): IgxDataSourceSupportingCalculation;
    set longPriceOscillatorAverage(v: IgxDataSourceSupportingCalculation);
    /**
     * The strategy provided to make doubles safe for plotting, by default will just make zero if the value
     * is invalid.
    */
    get makeSafe(): (arg1: number) => number;
    set makeSafe(v: (arg1: number) => number);
    findByName(name: string): any;
}
