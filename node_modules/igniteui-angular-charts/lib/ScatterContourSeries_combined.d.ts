import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Type, Point } from "igniteui-angular-core";
import { Series } from "./Series";
import { ValueBrushScale } from "./ValueBrushScale";
import { ContourValueResolver } from "./ContourValueResolver";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { RenderSurface } from "./RenderSurface";
import { DataContext } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class ScatterContourSeries extends ScatterTriangulationSeries {
    static $t: Type;
    protected bi(): Series;
    protected get_fh(): boolean;
    constructor();
    ko(a: any, b: string): any;
    mb(a: string): string;
    private yl;
    protected cq(): SeriesView;
    yx: string;
    private yo;
    get yp(): IFastItemColumn$1<number>;
    set yp(a: IFastItemColumn$1<number>);
    yt: string;
    yv: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    protected q5(a: any, b: string, c: any, d: any): void;
    o3(a: boolean, b: SeriesView): void;
    ro(a: boolean): void;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected y0(a: SeriesView): void;
    yn: ValueBrushScale;
    ym: ValueBrushScale;
    protected sb(): void;
    private y1;
    private yj;
    get yk(): ContourValueResolver;
    set yk(a: ContourValueResolver);
    private y2;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    a1(a: Point, b: boolean): DataContext;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterContourSeriesView extends SeriesView {
    static $t: Type;
    private b2;
    private b1;
    constructor(a: ScatterContourSeries);
    protected b4: List$1<Path>;
    private cb;
    private b7;
    private b8;
    private b9;
    private b3;
    private b0;
    b5(a: List$1<List$1<List$1<Point>>>, b: number[]): void;
    protected bg(a: any, b: number): void;
    protected bh(a: any, b: number): void;
    protected a8(a: RenderingContext, b: boolean): void;
    b6(a: boolean): void;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
    ca(a: Point, b: boolean): Path;
}
