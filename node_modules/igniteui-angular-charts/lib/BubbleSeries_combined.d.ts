import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries } from "igniteui-angular-core";
import { ISupportsSizeScale } from "./ISupportsSizeScale";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { Rect } from "igniteui-angular-core";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Type } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { UIElement } from "igniteui-angular-core";
import { ActualRange } from "./ActualRange";
import { Series } from "./Series";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { SeriesView } from "./SeriesView";
import { MarkerFillMode } from "./MarkerFillMode";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { Marker } from "./Marker";
import { BrushSelectionMode } from "./BrushSelectionMode";
import { MarkerManagerBase } from "./MarkerManagerBase";
/**
 * @hidden
 */
export declare class BubbleSeries extends ScatterBase implements IScaleLegendSeries, ISupportsSizeScale, ISupportsFillScale {
    static $t: Type;
    protected bi(): Series;
    protected get_eg(): boolean;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    ach: BubbleSeriesView;
    protected jj(): number;
    wt(): MarkerFillMode;
    constructor();
    private ad7;
    private ad6;
    isAttachedTo(a: IChartLegend): boolean;
    protected ef(): boolean;
    protected py(a: (arg1: any) => void): void;
    get aco(): IFastItemColumn$1<number>;
    protected get_isColoredItemwise(): boolean;
    acu: List$1<UIElement>;
    private ad5;
    get legendReady(): boolean;
    get minScaleText(): string;
    get maxScaleText(): string;
    forScaleColors(a: (arg1: Brush, arg2: number) => void): boolean;
    adj: string;
    ko(a: any, b: string): any;
    mb(a: string): string;
    get acq(): IFastItemColumn$1<number>;
    set acq(a: IFastItemColumn$1<number>);
    private acm;
    acj: SizeScale;
    ac9: string;
    private acl;
    get acp(): IFastItemColumn$1<any>;
    set acp(a: IFastItemColumn$1<any>);
    ac4: string;
    acg: BrushScale;
    private ack;
    get acn(): IFastItemColumn$1<number>;
    set acn(a: IFastItemColumn$1<number>);
    acr: boolean;
    acs: boolean;
    acy: number;
    acx: number;
    act: boolean;
    aaw(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    aa6(a: ScatterFrame, b: ScatterBaseView): void;
    private ado;
    static acv(a: number, b: number, c: number, d: number, e: number): number;
    static acw(a: number, b: number, c: number, d: number, logBase_: number, e: number): number;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    protected zj(a: string, b: FastItemsSourceEventAction): boolean;
    private adn;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    p9(): void;
    qg(): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    updateSizeScaleGlobals(): void;
    updateFillScaleGlobals(): void;
    acf(a: SizeScale): ActualRange;
    ace(): ActualRange;
    aci: SizeScale;
    adq(a: List$1<Marker>, b: List$1<number>, c: Rect, d: boolean): void;
    adp(a: List$1<Marker>): void;
    adf: string;
    ac0: string;
    adh: string;
    ac2: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    get actualMarkerBrush(): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CustomPaletteBrushScale extends BrushScale {
    static $t: Type;
    constructor();
    brushSelectionMode: BrushSelectionMode;
    getBrush1(a: number, b: number): Brush;
    protected get_isReady(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BubbleSeriesView extends ScatterBaseView {
    static $t: Type;
    protected dk: BubbleSeries;
    constructor(a: BubbleSeries);
    au(): void;
    protected cz(): MarkerManagerBase;
    dm(): void;
    dn(): void;
    dl(): void;
    getDefaultTooltipTemplate(): string;
}
