import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DataToolTipLayerGroupingMode } from "igniteui-angular-core";
import { Series } from "./Series";
import { Rect } from "igniteui-angular-core";
import { Point, Type } from "igniteui-angular-core";
import { Size } from "igniteui-angular-core";
import { SeriesView } from "./SeriesView";
import { DataTooltipGroupedPositionX } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY } from "igniteui-angular-core";
import { DataAbbreviationMode } from "igniteui-angular-core";
import { DataLegendValueMode } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { FontInfo } from "igniteui-angular-core";
import { DataLegendHeaderDateMode } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode } from "igniteui-angular-core";
import { DataLegendSummaryType } from "igniteui-angular-core";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { DataLegendLayoutMode } from "igniteui-angular-core";
import { DataLegendUnitsMode } from "igniteui-angular-core";
import { DataLegendLabelMode } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { IDataLegend } from "igniteui-angular-core";
import { Frame } from "./Frame";
import { Pool$1 } from "igniteui-angular-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class DataToolTipLayer extends AnnotationLayer {
    static $t: Type;
    protected bi(): Series;
    protected get_ep(): boolean;
    constructor();
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    protected aaj: DataToolTipLayerView;
    protected get_e0(): boolean;
    zy: Axis;
    abg: boolean;
    aah: DataToolTipLayerGroupingMode;
    private aaf;
    get aag(): DataToolTipLayerGroupingMode;
    set aag(a: DataToolTipLayerGroupingMode);
    private aai;
    protected q5(a: any, b: string, c: any, d: any): void;
    private abk;
    private abl;
    private ae8;
    afc(a: string, b: any): void;
    private ae9;
    protected yg(a: Axis, b: boolean): void;
    protected yh(a: Series, b: boolean): void;
    protected yj(a: Frame, b: SeriesView): void;
    private abm;
    private zx;
    private aak;
    p2(): void;
    p3(): void;
    get ahi(): Rect;
    get ahh(): Rect;
    get ahg(): Rect;
    get ahk(): Rect;
    private ahj;
    private abc;
    private aa9;
    private aba;
    private abb;
    private acf;
    private acd;
    private ace;
    private aco;
    private acm;
    private acn;
    private aci;
    private acg;
    private ach;
    private aby;
    private ab0;
    private abz;
    private ab7;
    private ab9;
    private ab8;
    private ab4;
    private ab6;
    private ab5;
    private abu;
    private ab1;
    private ab2;
    private ab3;
    private abv;
    private abw;
    private abx;
    private acc;
    private acb;
    private aca;
    private acl;
    private ack;
    private acj;
    private abt;
    private ahf;
    private abs;
    private abr;
    private zs;
    private zr;
    private abd;
    private abe;
    private ae7;
    private aa6;
    private afb;
    private afa;
    private acr;
    protected ym(a: Frame, b: SeriesView): void;
    protected f8(): boolean;
    abp: number;
    abq: number;
    abn: number;
    abo: number;
    z9: DataTooltipGroupedPositionX;
    private z7;
    get z8(): DataTooltipGroupedPositionX;
    set z8(a: DataTooltipGroupedPositionX);
    private aaa;
    aad: DataTooltipGroupedPositionY;
    private aab;
    get aac(): DataTooltipGroupedPositionY;
    set aac(a: DataTooltipGroupedPositionY);
    private aae;
    abf: boolean;
    zv: string[];
    zq: string[];
    zu: string[];
    zp: string[];
    zz: DataAbbreviationMode;
    acp: number;
    acq: number;
    z6: DataLegendValueMode;
    aeq: string;
    abh: boolean;
    aew: string;
    zw: any[];
    ahv: Thickness;
    abi: boolean;
    ae5: string;
    abj: boolean;
    ahw: Thickness;
    ahe: Brush;
    private aav;
    get aa5(): FontInfo;
    set aa5(a: FontInfo);
    add: string;
    zt: any[];
    ac9: string;
    z0: DataLegendHeaderDateMode;
    z1: DataLegendHeaderTimeMode;
    adi: string;
    ag6: Brush;
    ahp: Thickness;
    aho: Thickness;
    aa8: boolean;
    private aan;
    get aax(): FontInfo;
    set aax(a: FontInfo);
    aa7: boolean;
    ag5: Brush;
    ahn: Thickness;
    ahm: Thickness;
    private aam;
    get aaw(): FontInfo;
    set aaw(a: FontInfo);
    ag9: Brush;
    private aaq;
    get aa0(): FontInfo;
    set aa0(a: FontInfo);
    z4: DataLegendSummaryType;
    ad2: string;
    ahs: Thickness;
    ahr: Thickness;
    ahb: Brush;
    private aas;
    get aa2(): FontInfo;
    set aa2(a: FontInfo);
    adx: string;
    ag8: Brush;
    private aap;
    get aaz(): FontInfo;
    set aaz(a: FontInfo);
    ad8: string;
    aha: Brush;
    private aar;
    get aa1(): FontInfo;
    set aa1(a: FontInfo);
    ahl: Thickness;
    aal: LegendItemBadgeShape;
    z3: DataLegendLayoutMode;
    z5: DataLegendUnitsMode;
    aej: string;
    ahd: Brush;
    ahu: Thickness;
    private aau;
    get aa4(): FontInfo;
    set aa4(a: FontInfo);
    aht: Thickness;
    ahc: Brush;
    private aat;
    get aa3(): FontInfo;
    set aa3(a: FontInfo);
    z2: DataLegendLabelMode;
    ag7: Brush;
    ahq: Thickness;
    private aao;
    get aay(): FontInfo;
    set aay(a: FontInfo);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class DataToolTipLayerView extends AnnotationLayerView {
    static $t: Type;
    constructor(a: DataToolTipLayer);
    b9: Pool$1<any>;
    ak(): void;
    protected cc: List$1<PointerTooltip>;
    private cd;
    private cf;
    private ch;
    private cg;
    protected b7: DataToolTipLayer;
    private ca;
    au(): void;
    private _htmlTest;
    protected get htmlTest(): any;
    protected set htmlTest(a: any);
    cb(a: any, b: Series): boolean;
    cq(a: any): Size;
    cp(): Rect;
    co(): Rect;
    cn(): Rect;
    cm(a: Point): Point;
    ck(a: any, b: number, c: number, d: number, e: number): void;
    cr(): Size;
    ci(a: any): void;
    cl(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    b8(a: any): IDataLegend;
    cj(a: boolean): void;
}
