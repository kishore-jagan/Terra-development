import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IndicatorDisplayType } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-angular-core";
import { TrendLineType } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { SeriesView } from "./SeriesView";
import { CategoryFrame } from "./CategoryFrame";
import { Axis } from "./Axis";
import { Point, IList$1, Type } from "igniteui-angular-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { Rect } from "igniteui-angular-core";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { ITrendLineManager } from "./ITrendLineManager";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Clipper } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare abstract class FinancialIndicator extends FinancialSeries implements ITrendLineSeries {
    static $t: Type;
    protected get_e5(): boolean;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    aat: FinancialIndicatorView;
    constructor();
    aa6(a: boolean): void;
    protected aay(a: Point, b: Point, c: boolean): boolean;
    protected b0(): SeriesHitTestMode;
    wh(a: Point): Rect;
    gu(a: Point, b: boolean): boolean;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    aav: IndicatorDisplayType;
    protected get_aau(): IndicatorDisplayType;
    get aau(): IndicatorDisplayType;
    aa1: number;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get abj(): Brush;
    set abj(a: Brush);
    static readonly aa9: DependencyProperty;
    trendLineThickness: number;
    abl: PenLineCap;
    abk: DoubleCollection;
    trendLinePeriod: number;
    protected aa3(): number;
    aa2: number;
    private _indicatorColumn;
    get indicatorColumn(): List$1<number>;
    set indicatorColumn(a: List$1<number>);
    protected aas: AxisRange;
    protected abstract aaw(a: number, b: number): boolean;
    protected abstract aaz(a: number, b: number): IList$1<string>;
    protected q5(a: any, b: string, c: any, d: any): void;
    i3(a: Point, b: boolean, c: boolean): number;
    j8(a: Point, b: boolean): number;
    j6(a: Point, b: boolean): number;
    protected get_hb(): boolean;
    private aax;
    private aa8;
    ax(a: Axis): AxisRange;
    gb(a: any): boolean;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    z4(a: CategoryFrame, b: FinancialSeriesView): void;
    o3(a: boolean, b: SeriesView): void;
    protected w8(): CategoryTransitionInMode;
    z6(a: CategoryFrame, b: FinancialSeriesView): void;
    protected sb(): void;
    protected aa7(): void;
    protected pv(a: any): void;
    protected bd(a: LegendItemBadgeShape): LegendItemBadgeShape;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: FinancialIndicatorView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class FinancialIndicatorView extends FinancialSeriesView {
    static $t: Type;
    b6: FinancialIndicator;
    constructor(a: FinancialIndicator);
    protected b1(): FinancialBucketCalculator;
    au(): void;
    private readonly b9;
    private cj;
    private cc;
    cx: Path;
    ct: Path;
    cy: Path;
    cu: Path;
    cz: Path;
    cv: Path;
    cw: Path;
    cs: Path;
    private b7;
    get b8(): ITrendLineManager;
    set b8(a: ITrendLineManager);
    get ca(): boolean;
    cb(a: boolean): void;
    ch(): void;
    cf(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: Clipper): void;
    cd(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number, f: Clipper): void;
    ce(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: boolean, e: number): void;
    ci(): void;
    private cp;
    private cr;
    private cq;
    private co;
    private cl;
    private cn;
    private cm;
    private ck;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected a7(a: RenderingContext, b: boolean): void;
    an(a: any): void;
    cg(): void;
}
