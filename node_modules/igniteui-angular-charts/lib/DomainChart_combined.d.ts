import { Base, INotifyPropertyChanged, Type, IEnumerable, PropertyChangedEventArgs, Point } from "igniteui-angular-core";
import { IDataLegendTarget } from "igniteui-angular-core";
import { IToolbarTarget } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-angular-core";
import { DataSeriesType } from "igniteui-angular-core";
import { IDataSeriesAdapterRule } from "igniteui-angular-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-angular-core";
import { ToolCommandStateChanged } from "igniteui-angular-core";
import { ToolCommand } from "igniteui-angular-core";
import { DataToolTipLayerGroupingMode } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY } from "igniteui-angular-core";
import { DataAbbreviationMode } from "igniteui-angular-core";
import { DataLegendValueMode } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { FontInfo } from "igniteui-angular-core";
import { DataLegendHeaderDateMode } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode } from "igniteui-angular-core";
import { DataLegendSummaryType } from "igniteui-angular-core";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { DataLegendUnitsMode } from "igniteui-angular-core";
import { DataLegendLabelMode } from "igniteui-angular-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-angular-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { BrushCollection } from "igniteui-angular-core";
import { IChartLegend } from "igniteui-angular-core";
import { SeriesHighlightedValuesDisplayMode } from "./SeriesHighlightedValuesDisplayMode";
import { Visibility } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { HorizontalAlignment } from "igniteui-angular-core";
import { UnknownValuePlotting } from "igniteui-angular-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-angular-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-angular-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutCollisionMode } from "igniteui-angular-core";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { ValueModeCollection } from "./ValueModeCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { DataSeries } from "igniteui-angular-core";
import { IDataLegend } from "igniteui-angular-core";
import { ICommandStateChangedListener } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-angular-core";
import { DataSeriesMarker } from "igniteui-angular-core";
import { IDataLegendSeries } from "igniteui-angular-core";
import { ToolActionInfo } from "igniteui-angular-core";
import { ToolCommandExecutionState } from "igniteui-angular-core";
import { ICommandAvailabilityListener } from "igniteui-angular-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { DomainChartPlotAreaPointerEventArgs } from "./DomainChartPlotAreaPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
import { SeriesViewerSelectedSeriesItemsChangedEventArgs } from "./SeriesViewerSelectedSeriesItemsChangedEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget, IToolbarTarget {
    static $t: Type;
    protected lu: any;
    provideContainer(a: any): void;
    destroy(): void;
    private uw;
    protected ux(): void;
    protected ut(a: XamDataChart): void;
    protected uq(): void;
    protected uz(a: Series, b: number): void;
    protected vo(a: string, b: any, c: any): void;
    private lr;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private hs;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private ip;
    get j1(): number;
    set j1(a: number);
    private lq;
    private get toolTip();
    private set toolTip(value);
    private i2;
    get ke(): number;
    set ke(a: number);
    private i3;
    get kf(): number;
    set kf(a: number);
    private i4;
    get kg(): number;
    set kg(a: number);
    private i1;
    get kd(): number;
    set kd(a: number);
    private ix;
    get j9(): number;
    set j9(a: number);
    private iz;
    get kb(): number;
    set kb(a: number);
    private iy;
    get ka(): number;
    set ka(a: number);
    private iw;
    get j8(): number;
    set j8(a: number);
    private xm;
    get yi(): Brush;
    set yi(a: Brush);
    private xn;
    get yj(): Brush;
    set yj(a: Brush);
    private il;
    protected get_jy(): number;
    protected set_jy(a: number): void;
    get jy(): number;
    set jy(a: number);
    private i5;
    get kh(): number;
    set kh(a: number);
    private iv;
    get j7(): number;
    set j7(a: number);
    private h6;
    get jk(): number;
    set jk(a: number);
    private k8;
    get lk(): number;
    set lk(a: number);
    private ew;
    get ex(): (time: number) => number;
    set ex(a: (time: number) => number);
    private k4;
    get lh(): number;
    set lh(a: number);
    private k6;
    get lj(): number;
    set lj(a: number);
    private k3;
    get lg(): number;
    set lg(a: number);
    protected uu(a: XamDataChart): void;
    protected u0(a: Series, b: number): void;
    protected ur(): void;
    private u1;
    kv: (arg1: HTMLElement) => any[];
    private wq;
    private lw;
    private hf;
    private kw;
    protected vp(a: string, b: any, c: any): void;
    private co;
    get cp(): IDomainChartWidget;
    set cp(a: IDomainChartWidget);
    private ms;
    get sp(): string;
    set sp(a: string);
    private mu;
    get s0(): string;
    set s0(a: string);
    private ek;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    bj: DataSeriesAdapterImplementation;
    bk: DataSeriesAdapterImplementation;
    private f4;
    private f3;
    get isDetached(): boolean;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected uv(): void;
    private wo;
    private wn;
    private wp;
    bl(a: boolean): DataSeriesAdapterImplementation;
    protected abstract get hy(): List$1<DataSeriesType>;
    protected abstract get hx(): List$1<IDataSeriesAdapterRule>;
    protected hw: List$1<MarkerType>;
    protected ha(a: DataSeriesType): boolean;
    notifyResized(): void;
    va(): void;
    ug(): void;
    uo(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected v2(a: string): void;
    protected abstract uh(a: (arg1: Axis) => void, b: boolean): void;
    protected ui(a: (arg1: Series) => void): void;
    protected uj(a: (arg1: Series, arg2: number) => void): void;
    protected um(a: (arg1: Series) => void): void;
    protected un(a: (arg1: Series, arg2: number) => void): void;
    protected uk(a: (arg1: Series) => void): void;
    protected ul(a: (arg1: Series, arg2: number) => void): void;
    wd(): void;
    protected vc(a: (arg1: XamDataChart) => void): void;
    protected vd(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected ve(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected hc(a: DataSeries): boolean;
    protected g2(): boolean;
    private static readonly l6;
    private k7;
    protected qk(a: DataSeries): string;
    private static l5;
    protected ql(a: DataSeries, b: DataSeriesType): string;
    protected abstract bi(a: DataSeries): DataSeriesType;
    protected abstract dg(a: DataSeries, b: DataSeriesType): Series;
    qj(): string;
    private g8;
    private g7;
    protected vr(): void;
    protected t7(): void;
    private wr;
    private t6;
    private ho;
    protected h2(a: DataSeries): IEnumerable;
    protected h3(a: DataSeries): IEnumerable;
    private uf;
    private gy;
    protected wg(): void;
    protected di(seriesType_: DataSeriesType): Series;
    private da;
    private dc;
    private de;
    private df;
    private db;
    private dd;
    private dh;
    private ch;
    protected get ci(): IAnnotationLayerProxy;
    private get gx();
    protected g0(a: Series): boolean;
    private ws;
    protected g3(): boolean;
    protected g4(): boolean;
    protected get_g1(): boolean;
    protected get g1(): boolean;
    protected hu(a: string, b: boolean): List$1<Series>;
    protected t8(a: Series, b: boolean): void;
    protected wm(a: Series, b: Series, c: DataSeries): void;
    protected abstract wf(a: DataSeries): void;
    protected abstract we(a: DataSeries): void;
    protected wi(): void;
    private wj;
    protected wk(a: Series): void;
    protected abstract wh(): void;
    private vf;
    private vi;
    protected uc(): void;
    protected ud(): void;
    protected ya(a: number): Brush;
    protected yd(a: number): Brush;
    protected yb(a: number): Brush;
    protected yc(a: number): Brush;
    protected ym(a: number): Color;
    protected fi(a: Color): ObservableColorCollection;
    protected ac(a: Color): BrushCollection;
    protected hr: List$1<Color>;
    protected get ht(): List$1<Color>;
    protected get_hj(): boolean;
    protected get hj(): boolean;
    lv(): any;
    u3(a: string, b: string): void;
    u4(a: string, b: string, c: Series): void;
    c4(a: DataSeriesMarker): MarkerType;
    private cl;
    private f6;
    attachDataLegend(a: IDataLegend): void;
    protected t5(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected ub(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    wt(a: number): void;
    wu(a: number): void;
    wl(): void;
    protected get_hb(): boolean;
    get hb(): boolean;
    private cm;
    get cn(): IDomainChartToolbarProvider;
    private vm;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: ToolCommand): ToolCommandExecutionState;
    private _commandCompleted;
    get commandCompleted(): (arg1: ToolCommand) => void;
    set commandCompleted(a: (arg1: ToolCommand) => void);
    private _invalidateActions;
    get invalidateActions(): () => void;
    set invalidateActions(a: () => void);
    private u2;
    addCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    private hp;
    addCommandStateChangedListener(a: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(a: ICommandStateChangedListener): void;
    u9(source_: any, a: number, b: any, c: any): void;
    u5(source_: any): void;
    u6(source_: any, a: number, b: any): void;
    u7(source_: any, a: number, b: any): void;
    private b2;
    get b3(): DataToolTipLayerGroupingMode;
    set b3(a: DataToolTipLayerGroupingMode);
    private ib;
    get jp(): number;
    set jp(a: number);
    private ic;
    get jq(): number;
    set jq(a: number);
    private h9;
    get jn(): number;
    set jn(a: number);
    private ia;
    get jo(): number;
    set jo(a: number);
    private by;
    get bz(): DataTooltipGroupedPositionX;
    set bz(a: DataTooltipGroupedPositionX);
    private b0;
    get b1(): DataTooltipGroupedPositionY;
    set b1(a: DataTooltipGroupedPositionY);
    private fx;
    get gs(): boolean;
    set gs(a: boolean);
    static readonly o2: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get bh(): DataAbbreviationMode;
    set bh(a: DataAbbreviationMode);
    private bg;
    get ld(): number;
    set ld(a: number);
    private k0;
    get le(): number;
    set le(a: number);
    private k1;
    get bx(): DataLegendValueMode;
    set bx(a: DataLegendValueMode);
    private bw;
    get pu(): string;
    set pu(a: string);
    private mi;
    get gt(): boolean;
    set gt(a: boolean);
    private fy;
    get p0(): string;
    set p0(a: string);
    private mj;
    get n(): any[];
    set n(a: any[]);
    private f;
    get zc(): Thickness;
    set zc(a: Thickness);
    private y0;
    get gu(): boolean;
    set gu(a: boolean);
    private fz;
    get p9(): string;
    set p9(a: string);
    private mk;
    get gv(): boolean;
    set gv(a: boolean);
    private f0;
    get zd(): Thickness;
    set zd(a: Thickness);
    private y1;
    get x6(): Brush;
    set x6(a: Brush);
    private xf;
    private e7;
    get fh(): FontInfo;
    set fh(a: FontInfo);
    get ok(): string;
    set ok(a: string);
    private mc;
    get k(): any[];
    set k(a: any[]);
    private c;
    get og(): string;
    set og(a: string);
    private mb;
    get bn(): DataLegendHeaderDateMode;
    set bn(a: DataLegendHeaderDateMode);
    private bm;
    get bp(): DataLegendHeaderTimeMode;
    set bp(a: DataLegendHeaderTimeMode);
    private bo;
    get op(): string;
    set op(a: string);
    private md;
    get xy(): Brush;
    set xy(a: Brush);
    private w7;
    get y6(): Thickness;
    set y6(a: Thickness);
    private yu;
    get y5(): Thickness;
    set y5(a: Thickness);
    private yt;
    get gr(): boolean;
    set gr(a: boolean);
    private fw;
    private ez;
    get e9(): FontInfo;
    set e9(a: FontInfo);
    get xx(): Brush;
    set xx(a: Brush);
    private w6;
    get y4(): Thickness;
    set y4(a: Thickness);
    private ys;
    get y3(): Thickness;
    set y3(a: Thickness);
    private yr;
    get gq(): boolean;
    set gq(a: boolean);
    private fv;
    private ey;
    get e8(): FontInfo;
    set e8(a: FontInfo);
    get x1(): Brush;
    set x1(a: Brush);
    private xa;
    private e2;
    get fc(): FontInfo;
    set fc(a: FontInfo);
    get bt(): DataLegendSummaryType;
    set bt(a: DataLegendSummaryType);
    private bs;
    get o8(): string;
    set o8(a: string);
    private mf;
    get y9(): Thickness;
    set y9(a: Thickness);
    private yx;
    get y8(): Thickness;
    set y8(a: Thickness);
    private yw;
    get x3(): Brush;
    set x3(a: Brush);
    private xc;
    private e4;
    get fe(): FontInfo;
    set fe(a: FontInfo);
    get o3(): string;
    set o3(a: string);
    private me;
    get x0(): Brush;
    set x0(a: Brush);
    private w9;
    private e1;
    get fb(): FontInfo;
    set fb(a: FontInfo);
    get pe(): string;
    set pe(a: string);
    private mg;
    get x2(): Brush;
    set x2(a: Brush);
    private xb;
    private e3;
    get fd(): FontInfo;
    set fd(a: FontInfo);
    get y2(): Thickness;
    set y2(a: Thickness);
    private yq;
    get cw(): LegendItemBadgeShape;
    set cw(a: LegendItemBadgeShape);
    private cu;
    get bv(): DataLegendUnitsMode;
    set bv(a: DataLegendUnitsMode);
    private bu;
    get po(): string;
    set po(a: string);
    private mh;
    get x5(): Brush;
    set x5(a: Brush);
    private xe;
    get zb(): Thickness;
    set zb(a: Thickness);
    private yz;
    private e6;
    get fg(): FontInfo;
    set fg(a: FontInfo);
    get za(): Thickness;
    set za(a: Thickness);
    private yy;
    get x4(): Brush;
    set x4(a: Brush);
    private xd;
    private e5;
    get ff(): FontInfo;
    set ff(a: FontInfo);
    get br(): DataLegendLabelMode;
    set br(a: DataLegendLabelMode);
    private bq;
    get xz(): Brush;
    set xz(a: Brush);
    private w8;
    get y7(): Thickness;
    set y7(a: Thickness);
    private yv;
    private e0;
    get fa(): FontInfo;
    set fa(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    v4(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    wb(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    v7(a: Series, b: any, c: Point): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    v8(a: Series, b: any, c: Point): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    v9(a: Series, b: any, c: Point): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    v6(a: Series, b: any, c: Point): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    wa(a: Series, b: any, c: Point): void;
    seriesClick: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    v5(a: Series, b: any, c: Point): void;
    plotAreaPointerEnter: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    vy(a: Point): void;
    plotAreaPointerLeave: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    vz(a: Point): void;
    plotAreaPointerMove: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v0(a: Point): void;
    plotAreaPointerDown: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    vx(a: Point): void;
    plotAreaPointerUp: (sender: any, args: DomainChartPlotAreaPointerEventArgs) => void;
    v1(a: Point): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    vv(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    vu(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    selectedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    v3(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    focusedSeriesItemsChanged: (sender: any, e: SeriesViewerSelectedSeriesItemsChangedEventArgs) => void;
    vw(a: any, b: SeriesViewerSelectedSeriesItemsChangedEventArgs): void;
    private hv;
    vs(a: () => void): void;
    private fj;
    vt(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_hd(): boolean;
    protected get hd(): boolean;
    protected us(a: XamDataChart, b: any): void;
    protected ag(a: BrushCollection): BrushCollection;
    protected yg(a: Brush): Brush;
    protected uy(a: Series, b: number): void;
    protected abstract t9(): void;
    protected get gh(): boolean;
    private fm;
    protected ue(): void;
    protected up(): void;
    protected wc(a: XamDataChart): void;
    protected t4(a: Series, b: number): void;
    protected abstract t3(a: Series, b: number): void;
    protected c6(a: Series, b: number): MarkerType;
    protected c5(a: Series): MarkerType;
    protected c7(a: Series): MarkerType;
    protected l1(): any;
    protected l0(): any;
    protected get_g5(): boolean;
    protected get g5(): boolean;
    protected h4(): IEnumerable;
    protected vl(a: string, b: any, c: any): void;
    private hn;
    private hq;
    private vg;
    private t2;
    private t1;
    private vj;
    private vn;
    abstract get cf(): DomainType;
    private a0;
    private aw;
    private av;
    private em;
    private en;
    private a8;
    private eu;
    private ev;
    private az;
    private ay;
    private ax;
    private ep;
    private eo;
    private a7;
    get a6(): ChartSortDescriptionCollection;
    get a2(): ChartSortDescriptionCollection;
    get a1(): ChartSortDescriptionCollection;
    get eq(): FilterExpressionCollection;
    get er(): FilterExpressionCollection;
    get ba(): ChartSummaryDescriptionCollection;
    private dz;
    get d1(): SeriesSelectionMode;
    set d1(a: SeriesSelectionMode);
    private dy;
    get d0(): SeriesSelectionMode;
    set d0(a: SeriesSelectionMode);
    private xl;
    get yh(): Brush;
    set yh(a: Brush);
    private xi;
    get x9(): Brush;
    set x9(a: Brush);
    private dw;
    get dx(): SeriesSelectionBehavior;
    set dx(a: SeriesSelectionBehavior);
    private aq;
    get selectedSeriesItems(): ChartSelectedItemCollection;
    private ap;
    get focusedSeriesItems(): ChartSelectedItemCollection;
    get a5(): ChartSortDescriptionCollection;
    get a4(): ChartSortDescriptionCollection;
    get a3(): ChartSortDescriptionCollection;
    get es(): FilterExpressionCollection;
    get et(): FilterExpressionCollection;
    get a9(): ChartSummaryDescriptionCollection;
    private mp;
    get rd(): string;
    set rd(a: string);
    private ml;
    get qm(): string;
    set qm(a: string);
    private mn;
    get q9(): string;
    set q9(a: string);
    private mm;
    get q7(): string;
    set q7(a: string);
    private mo;
    get rb(): string;
    set rb(a: string);
    filterStringErrorsParsing: (sender: any, args: FilterStringErrorsParsingEventArgs) => void;
    private mq;
    get rf(): string;
    set rf(a: string);
    private lp;
    get itemsSource(): any;
    set itemsSource(a: any);
    private ln;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private lo;
    get highlightedItemsSource(): any;
    set highlightedItemsSource(a: any);
    private lm;
    get actualHighlightedItemsSource(): any;
    set actualHighlightedItemsSource(a: any);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get ab(): BrushCollection;
    set ab(a: BrushCollection);
    private w;
    get af(): BrushCollection;
    set af(a: BrushCollection);
    private r;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private s;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private cj;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private f5;
    protected get_g6(): boolean;
    protected set_g6(a: boolean): void;
    get g6(): boolean;
    set g6(a: boolean);
    private f8;
    protected get_he(): boolean;
    protected set_he(a: boolean): void;
    get he(): boolean;
    set he(a: boolean);
    private ga;
    protected get_hh(): boolean;
    protected set_hh(a: boolean): void;
    get hh(): boolean;
    set hh(a: boolean);
    private gc;
    protected get_hk(): boolean;
    protected set_hk(a: boolean): void;
    get hk(): boolean;
    set hk(a: boolean);
    private dj;
    protected get_dk(): SeriesHighlightedValuesDisplayMode;
    protected set_dk(a: SeriesHighlightedValuesDisplayMode): void;
    get dk(): SeriesHighlightedValuesDisplayMode;
    set dk(a: SeriesHighlightedValuesDisplayMode);
    private f7;
    protected get_g9(): boolean;
    protected set_g9(a: boolean): void;
    get g9(): boolean;
    set g9(a: boolean);
    private ze;
    protected get_zf(): Visibility;
    protected set_zf(a: Visibility): void;
    get zf(): Visibility;
    set zf(a: Visibility);
    private yn;
    get yp(): Rect;
    set yp(a: Rect);
    get yo(): Rect;
    private mt;
    get st(): string;
    set st(a: string);
    private mr;
    get si(): string;
    set si(a: string);
    private ww;
    get wy(): HorizontalAlignment;
    set wy(a: HorizontalAlignment);
    private wv;
    get wx(): HorizontalAlignment;
    set wx(a: HorizontalAlignment);
    private eg;
    get eh(): UnknownValuePlotting;
    set eh(a: UnknownValuePlotting);
    private iu;
    protected get_j6(): number;
    protected set_j6(a: number): void;
    get j6(): number;
    set j6(a: number);
    private i0;
    get kc(): number;
    set kc(a: number);
    private dq;
    get dr(): SeriesOutlineMode;
    set dr(a: SeriesOutlineMode);
    private c2;
    get c3(): MarkerOutlineMode;
    set c3(a: MarkerOutlineMode);
    private c0;
    get c1(): MarkerFillMode;
    set c1(a: MarkerFillMode);
    private im;
    get jz(): number;
    set jz(a: number);
    private io;
    get j0(): number;
    set j0(a: number);
    private c8;
    get c9(): MarkerTypeCollection;
    set c9(a: MarkerTypeCollection);
    private cy;
    get cz(): MarkerAutomaticBehavior;
    set cz(a: MarkerAutomaticBehavior);
    private u;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private v;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private k5;
    get li(): number;
    set li(a: number);
    private h5;
    get jj(): number;
    set jj(a: number);
    private fl;
    get gg(): boolean;
    set gg(a: boolean);
    private x;
    get ah(): BrushCollection;
    set ah(a: BrushCollection);
    private ee;
    get ef(): TrendLineType;
    set ef(a: TrendLineType);
    private i6;
    get ki(): number;
    set ki(a: number);
    private fk;
    get gf(): boolean;
    set gf(a: boolean);
    private ir;
    get j3(): number;
    set j3(a: number);
    private it;
    get j5(): number;
    set j5(a: number);
    private is;
    get j4(): number;
    set j4(a: number);
    private iq;
    get j2(): number;
    set j2(a: number);
    protected vk(): void;
    private bb;
    get bc(): ComputedPlotAreaMarginMode;
    set bc(a: ComputedPlotAreaMarginMode);
    protected bd(): ComputedPlotAreaMarginMode;
    private ds;
    get dt(): SeriesPlotAreaMarginHorizontalMode;
    set dt(a: SeriesPlotAreaMarginHorizontalMode);
    private du;
    get dv(): SeriesPlotAreaMarginVerticalMode;
    set dv(a: SeriesPlotAreaMarginVerticalMode);
    private dn;
    get dp(): SeriesHighlightingMode;
    set dp(a: SeriesHighlightingMode);
    private dl;
    get dm(): SeriesHighlightingBehavior;
    set dm(a: SeriesHighlightingBehavior);
    private cq;
    get cr(): LegendHighlightingMode;
    set cr(a: LegendHighlightingMode);
    private cv;
    get cx(): LegendItemBadgeShape;
    set cx(a: LegendItemBadgeShape);
    private cs;
    get ct(): LegendItemBadgeMode;
    set ct(a: LegendItemBadgeMode);
    private k9;
    get ll(): number;
    set ll(a: number);
    private ec;
    get ed(): ToolTipType;
    set ed(a: ToolTipType);
    private be;
    get bf(): CrosshairsDisplayMode;
    set bf(a: CrosshairsDisplayMode);
    private fu;
    get gp(): boolean;
    set gp(a: boolean);
    private w5;
    get xw(): Brush;
    set xw(a: Brush);
    private h8;
    get jm(): number;
    set jm(a: number);
    private w4;
    get xv(): Brush;
    set xv(a: Brush);
    private ft;
    get go(): boolean;
    set go(a: boolean);
    private w0;
    get xr(): Brush;
    set xr(a: Brush);
    private w2;
    get xt(): Brush;
    set xt(a: Brush);
    private w1;
    get xs(): Brush;
    set xs(a: Brush);
    private w3;
    get xu(): Brush;
    set xu(a: Brush);
    private ky;
    get lb(): number;
    set lb(a: number);
    private kz;
    get lc(): number;
    set lc(a: number);
    private f9;
    get hg(): boolean;
    set hg(a: boolean);
    private gb;
    get hi(): boolean;
    set hi(a: boolean);
    private f1;
    get gw(): boolean;
    set gw(a: boolean);
    private xg;
    get x7(): Brush;
    set x7(a: Brush);
    private xh;
    get x8(): Brush;
    set x8(a: Brush);
    private k2;
    get lf(): number;
    set lf(a: number);
    private fn;
    get gi(): boolean;
    set gi(a: boolean);
    private fs;
    get gn(): boolean;
    set gn(a: boolean);
    private fo;
    get gj(): boolean;
    set gj(a: boolean);
    private gd;
    get hl(): boolean;
    set hl(a: boolean);
    private aj;
    get ak(): CalloutCollisionMode;
    set ak(a: CalloutCollisionMode);
    private fq;
    get gl(): boolean;
    set gl(a: boolean);
    private fr;
    get gm(): boolean;
    set gm(a: boolean);
    private fp;
    get gk(): boolean;
    set gk(a: boolean);
    private h7;
    get jl(): number;
    set jl(a: number);
    private wz;
    get xq(): Brush;
    set xq(a: Brush);
    private kx;
    get la(): number;
    set la(a: number);
    private h0;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private al;
    get am(): CalloutPlacementPositionsCollection;
    set am(a: CalloutPlacementPositionsCollection);
    private l9;
    get nk(): string;
    set nk(a: string);
    private ma;
    get nm(): string;
    set nm(a: string);
    private l8;
    get nc(): string;
    set nc(a: string);
    private l7;
    get m9(): string;
    set m9(a: string);
    private ei;
    get ej(): ValueModeCollection;
    set ej(a: ValueModeCollection);
    private y;
    get ai(): BrushCollection;
    set ai(a: BrushCollection);
    private i7;
    get kj(): number;
    set kj(a: number);
    get d6(): SeriesViewerScrollbarMode;
    set d6(a: SeriesViewerScrollbarMode);
    private d4;
    get d7(): SeriesViewerScrollbarMode;
    set d7(a: SeriesViewerScrollbarMode);
    private d5;
    get d3(): SeriesViewerHorizontalScrollbarPosition;
    set d3(a: SeriesViewerHorizontalScrollbarPosition);
    private d2;
    get eb(): SeriesViewerVerticalScrollbarPosition;
    set eb(a: SeriesViewerVerticalScrollbarPosition);
    private ea;
    get ye(): Brush;
    set ye(a: Brush);
    private xj;
    get yf(): Brush;
    set yf(a: Brush);
    private xk;
    get jv(): number;
    set jv(a: number);
    private ii;
    get ju(): number;
    set ju(a: number);
    private ih;
    get jr(): number;
    set jr(a: number);
    private id;
    get js(): number;
    set js(a: number);
    private ie;
    get jt(): number;
    set jt(a: number);
    private ig;
    get jx(): number;
    set jx(a: number);
    private ik;
    get jw(): number;
    set jw(a: number);
    private ij;
    get gz(): boolean;
    set gz(a: boolean);
    private f2;
    static readonly q2: string;
    get yk(): Brush;
    set yk(a: Brush);
    private xo;
    get yl(): Brush;
    set yl(a: Brush);
    private xp;
    get kn(): number;
    set kn(a: number);
    private jb;
    get km(): number;
    set km(a: number);
    private ja;
    get kk(): number;
    set kk(a: number);
    private i8;
    get kq(): number;
    set kq(a: number);
    private je;
    get kl(): number;
    set kl(a: number);
    private i9;
    get kp(): number;
    set kp(a: number);
    private jd;
    get ko(): number;
    set ko(a: number);
    private jc;
    get hm(): boolean;
    set hm(a: boolean);
    private ge;
    static readonly tq: string;
    get ks(): number;
    set ks(a: number);
    private jg;
    get kr(): number;
    set kr(a: number);
    private jf;
    get ku(): number;
    set ku(a: number);
    private ji;
    get kt(): number;
    set kt(a: number);
    private jh;
}
/**
 * @hidden
 */
export interface IDomainChartToolbarProvider {
    container: any;
    commandChanged: (arg1: ToolCommandStateChanged) => void;
    getDesiredToolbarActions(a: DomainChart, b: ToolActionInfo[]): ToolActionInfo[];
    onToolCommandExecuting(a: DomainChart, b: ToolCommand): ToolCommandExecutionState;
    onTargetPropertyChanged(a: DomainChart, b: string, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare let IDomainChartToolbarProvider_$type: Type;
