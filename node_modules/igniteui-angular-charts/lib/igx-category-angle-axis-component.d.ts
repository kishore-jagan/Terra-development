import { EventEmitter } from '@angular/core';
import { AxisAngleLabelMode } from "./AxisAngleLabelMode";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*
* `CategoryAngleAxis` represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*/
export declare class IgxCategoryAngleAxisComponent extends IgxCategoryAxisBaseComponent {
    protected createImplementation(): CategoryAngleAxis;
    /**
                                 * @hidden
                                 */
    get i(): CategoryAngleAxis;
    constructor();
    /**
     * Checks if the axis is of angular type
    */
    get isAngular(): boolean;
    static ngAcceptInputType_isAngular: boolean | string;
    /**
     * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * Indicates the angle in degress that the chart's 0th angle should be offset.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="dataSource"   >
    *     <igx-category-angle-axis name="angleAxis" startAngleOffset=30/>
    *     <igx-numeric-radius-axis name="radiusAxis" />
    *  </igx-data-chart>
    * ```
    */
    get startAngleOffset(): number;
    set startAngleOffset(v: number);
    static ngAcceptInputType_startAngleOffset: number | string;
    /**
     * Indicates the mode axis labels will operate in.
    */
    get labelMode(): AxisAngleLabelMode;
    set labelMode(v: AxisAngleLabelMode);
    static ngAcceptInputType_labelMode: AxisAngleLabelMode | string;
    get areGroupSizesUneven(): boolean;
    static ngAcceptInputType_areGroupSizesUneven: boolean | string;
    /**
     * Gets or sets the frequency of displayed labels.
     * The set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    *
    * Gets or sets the frequency of displayed labels.The set value is a factor that determines which labels will be hidden.
    * For example, an interval of 2 will display every other label.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="dataSource"   >
    *     <igx-category-angle-axis name="angleAxis" interval =2 />
    *     <igx-numeric-radius-axis name="radiusAxis" />
    *  </igx-data-chart>
    * ```
    */
    get interval(): number;
    set interval(v: number);
    static ngAcceptInputType_interval: number | string;
    /**
     * Gets the effective value for the current Interval.
    *
    * Gets the effective value for the current Interval.
    */
    get actualInterval(): number;
    set actualInterval(v: number);
    static ngAcceptInputType_actualInterval: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines.
     * The set value is a factor that determines how the minor lines will be displayed.
    *
    * Gets or sets the frequency of displayed minor lines. The set value is a factor that determines how the minor lines will be displayed.
    */
    get minorInterval(): number;
    set minorInterval(v: number);
    static ngAcceptInputType_minorInterval: number | string;
    /**
     * Gets the effective value for the current MinorInterval.
    *
    * Get the effective value for the current minorInterval.
    */
    get actualMinorInterval(): number;
    set actualMinorInterval(v: number);
    static ngAcceptInputType_actualMinorInterval: number | string;
    /**
     * Gets the scaled angle in radians from the raw axis value.
    
    * @param unscaledAngle  * The raw axis value.
    */
    getScaledAngle(unscaledAngle: number): number;
    /**
     * Gets the raw axis value from the scaled angle in radians.
    
    */
    getUnscaledAngle(scaledAngle: number): number;
    private _actualIntervalChange;
    get actualIntervalChange(): EventEmitter<number>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCategoryAngleAxisComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCategoryAngleAxisComponent, "igx-category-angle-axis", never, { "startAngleOffset": "startAngleOffset"; "labelMode": "labelMode"; "interval": "interval"; "actualInterval": "actualInterval"; "minorInterval": "minorInterval"; "actualMinorInterval": "actualMinorInterval"; }, { "actualIntervalChange": "actualIntervalChange"; }, never, never>;
}
