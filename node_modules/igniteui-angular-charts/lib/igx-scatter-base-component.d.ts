import { EventEmitter } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgPoint } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { TrendLineType } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { IgxAssigningScatterStyleEventArgs } from "./igx-assigning-scatter-style-event-args";
import { IgxAssigningScatterMarkerStyleEventArgs } from "./igx-assigning-scatter-marker-style-event-args";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { ScatterBase } from "./ScatterBase";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent scatter series
*/
export declare abstract class IgxScatterBaseComponent extends IgxMarkerSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): ScatterBase;
    constructor();
    /**
     * Checks if this series is a scatter series
    */
    get isScatter(): boolean;
    static ngAcceptInputType_isScatter: boolean | string;
    /**
     * Gets or sets the effective x-axis for the current object.
    */
    get xAxis(): IgxNumericXAxisComponent;
    set xAxis(v: IgxNumericXAxisComponent);
    /**
     * Gets or sets the effective y-axis for the current object.
    */
    get yAxis(): IgxNumericYAxisComponent;
    set yAxis(v: IgxNumericYAxisComponent);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get xMemberPath(): string;
    set xMemberPath(v: string);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get yMemberPath(): string;
    set yMemberPath(v: string);
    /**
     * Gets or sets the highlighted X value mapping property for the current series object.
    */
    get highlightedXMemberPath(): string;
    set highlightedXMemberPath(v: string);
    /**
     * Gets or sets the highlighted Y value mapping property for the current series object.
    */
    get highlightedYMemberPath(): string;
    set highlightedYMemberPath(v: string);
    /**
     * Gets or sets the label displayed before series X value in the Data Legend.
    */
    get xMemberAsLegendLabel(): string;
    set xMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series Y value in the Data Legend.
    */
    get yMemberAsLegendLabel(): string;
    set yMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit after displayed after series X value in the Data Legend.
    */
    get xMemberAsLegendUnit(): string;
    set xMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit after displayed after series Y value in the Data Legend.
    */
    get yMemberAsLegendUnit(): string;
    set yMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the trend type for the current scatter series.
    */
    get trendLineType(): TrendLineType;
    set trendLineType(v: TrendLineType);
    static ngAcceptInputType_trendLineType: TrendLineType | string;
    /**
     * Gets or sets the brush to use to draw the trend line.
    */
    get trendLineBrush(): string;
    set trendLineBrush(v: string);
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush(): string;
    set actualTrendLineBrush(v: string);
    /**
     * Gets or sets the thickness of the current scatter series object's trend line.
    */
    get trendLineThickness(): number;
    set trendLineThickness(v: number);
    static ngAcceptInputType_trendLineThickness: number | string;
    /**
     * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
     * is used to draw the trend line for the current scatter series object.
    */
    get trendLineDashArray(): number[];
    set trendLineDashArray(v: number[]);
    static ngAcceptInputType_trendLineDashArray: number[] | string;
    /**
     * Gets or sets the moving average period for the current scatter series object.
     * The typical, and initial, value for trend line period is 7.
    */
    get trendLinePeriod(): number;
    set trendLinePeriod(v: number);
    static ngAcceptInputType_trendLinePeriod: number | string;
    /**
     * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
    */
    get markerCollisionAvoidance(): CollisionAvoidanceType;
    set markerCollisionAvoidance(v: CollisionAvoidanceType);
    static ngAcceptInputType_markerCollisionAvoidance: CollisionAvoidanceType | string;
    /**
     * Gets or sets the Z-Index of the trend line.  Values greater than 1000 will result in the trend line being rendered in front of the series data.
    */
    get trendLineZIndex(): number;
    set trendLineZIndex(v: number);
    static ngAcceptInputType_trendLineZIndex: number | string;
    /**
     * Gets or sets the maximum number of markerItems displayed by the current series.
     * If more than the specified number of markerItems are visible, the series will automatically
     * choose a representative set.
    */
    get maximumMarkers(): number;
    set maximumMarkers(v: number);
    static ngAcceptInputType_maximumMarkers: number | string;
    /**
     * Gets or sets the mode the series will use to find the closest point to the cursor.
    */
    get itemSearchMode(): ScatterItemSearchMode;
    set itemSearchMode(v: ScatterItemSearchMode);
    static ngAcceptInputType_itemSearchMode: ScatterItemSearchMode | string;
    /**
     * Gets or sets the threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchThreshold(): number;
    set itemSearchThreshold(v: number);
    static ngAcceptInputType_itemSearchThreshold: number | string;
    get actualItemSearchMode(): ScatterItemSearchMode;
    set actualItemSearchMode(v: ScatterItemSearchMode);
    static ngAcceptInputType_actualItemSearchMode: ScatterItemSearchMode | string;
    /**
     * Gets or sets whether this Scatter series should allow custom style overrides of its individual visuals.
    */
    get isCustomScatterStyleAllowed(): boolean;
    set isCustomScatterStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomScatterStyleAllowed: boolean | string;
    /**
     * Gets or sets whether this Scatter series should allow custom style overrides of its individual marker visuals.
    */
    get isCustomScatterMarkerStyleAllowed(): boolean;
    set isCustomScatterMarkerStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomScatterMarkerStyleAllowed: boolean | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    */
    getSeriesValueMarkerBoundingBox(world: IgPoint): IgRect;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world: IgPoint): number;
    getExactItemIndex(world: IgPoint): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the numeric values from the X and Y axis associated with this scatter series that matches the desired
     * value mode.
    
    * @param mode  * The type of value desired from the series numeric axis.
    */
    getSeriesValueType(mode: ValueLayerValueMode): number[];
    getSeriesValueTypePositionFromValue(values: number[]): IgPoint;
    getSeriesValueTypePosition(mode: ValueLayerValueMode): IgPoint;
    private _assigningScatterStyle;
    /**
     * Event raised when Assigning Category Style
    */
    get assigningScatterStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningScatterStyleEventArgs;
    }>;
    private _assigningScatterMarkerStyle;
    /**
     * Event raised when Assigning Scatter Marker Style
    */
    get assigningScatterMarkerStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningScatterMarkerStyleEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxScatterBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxScatterBaseComponent, "ng-component", never, { "xAxis": "xAxis"; "yAxis": "yAxis"; "xMemberPath": "xMemberPath"; "yMemberPath": "yMemberPath"; "highlightedXMemberPath": "highlightedXMemberPath"; "highlightedYMemberPath": "highlightedYMemberPath"; "xMemberAsLegendLabel": "xMemberAsLegendLabel"; "yMemberAsLegendLabel": "yMemberAsLegendLabel"; "xMemberAsLegendUnit": "xMemberAsLegendUnit"; "yMemberAsLegendUnit": "yMemberAsLegendUnit"; "trendLineType": "trendLineType"; "trendLineBrush": "trendLineBrush"; "actualTrendLineBrush": "actualTrendLineBrush"; "trendLineThickness": "trendLineThickness"; "trendLineDashArray": "trendLineDashArray"; "trendLinePeriod": "trendLinePeriod"; "markerCollisionAvoidance": "markerCollisionAvoidance"; "trendLineZIndex": "trendLineZIndex"; "maximumMarkers": "maximumMarkers"; "itemSearchMode": "itemSearchMode"; "itemSearchThreshold": "itemSearchThreshold"; "actualItemSearchMode": "actualItemSearchMode"; "isCustomScatterStyleAllowed": "isCustomScatterStyleAllowed"; "isCustomScatterMarkerStyleAllowed": "isCustomScatterMarkerStyleAllowed"; }, { "assigningScatterStyle": "assigningScatterStyle"; "assigningScatterMarkerStyle": "assigningScatterMarkerStyle"; }, never, never>;
}
