import { OnInit } from '@angular/core';
import { HorizontalAlignment } from "igniteui-angular-core";
import { VerticalAlignment } from "igniteui-angular-core";
import { TreemapNodeStyle } from "./TreemapNodeStyle";
import * as i0 from "@angular/core";
/**
 * Represents a style to apply to a treemap node.
*/
export declare class IgxTreemapNodeStyleComponent implements OnInit {
    protected createImplementation(): TreemapNodeStyle;
    ngOnInit(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): TreemapNodeStyle; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgxTreemapNodeStyleComponent;
    private onImplementationCreated;
    constructor();
    /**
     * Gets or sets the background to use for the header when it is hovered.
    */
    get headerHoverBackground(): string;
    set headerHoverBackground(v: string);
    /**
     * Gets or sets the background to use for the header.
    */
    get headerBackground(): string;
    set headerBackground(v: string);
    /**
     * Gets or sets the text color to use for the header.
    */
    get headerTextColor(): string;
    set headerTextColor(v: string);
    /**
     * Gets or sets the label to use for the node.
    */
    get label(): string;
    set label(v: string);
    /**
     * Gets or sets the text color to use for the nodes.
    */
    get textColor(): string;
    set textColor(v: string);
    /**
     * Gets or sets the text color to use for the header.
    */
    get headerHoverTextColor(): string;
    set headerHoverTextColor(v: string);
    /**
     * Gets or sets the left margin to use for the header.
    */
    get headerLabelLeftMargin(): number;
    set headerLabelLeftMargin(v: number);
    static ngAcceptInputType_headerLabelLeftMargin: number | string;
    /**
     * Gets or sets the top margin to use for the header.
    */
    get headerLabelTopMargin(): number;
    set headerLabelTopMargin(v: number);
    static ngAcceptInputType_headerLabelTopMargin: number | string;
    /**
     * Gets or sets the right margin to use for the header.
    */
    get headerLabelRightMargin(): number;
    set headerLabelRightMargin(v: number);
    static ngAcceptInputType_headerLabelRightMargin: number | string;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    get headerLabelBottomMargin(): number;
    set headerLabelBottomMargin(v: number);
    static ngAcceptInputType_headerLabelBottomMargin: number | string;
    /**
     * Gets or sets the left margin to use for the labels.
    */
    get labelLeftMargin(): number;
    set labelLeftMargin(v: number);
    static ngAcceptInputType_labelLeftMargin: number | string;
    /**
     * Gets or sets the top margin to use for the labels.
    */
    get labelTopMargin(): number;
    set labelTopMargin(v: number);
    static ngAcceptInputType_labelTopMargin: number | string;
    /**
     * Gets or sets the right margin to use for the labels.
    */
    get labelRightMargin(): number;
    set labelRightMargin(v: number);
    static ngAcceptInputType_labelRightMargin: number | string;
    /**
     * Gets or sets the bottom margin to use for the labels.
    */
    get labelBottomMargin(): number;
    set labelBottomMargin(v: number);
    static ngAcceptInputType_labelBottomMargin: number | string;
    /**
     * Gets or sets the height to use for the header.
    */
    get headerHeight(): number;
    set headerHeight(v: number);
    static ngAcceptInputType_headerHeight: number | string;
    /**
     * Gets or sets the horizontal alignment to use for the node labels.
    */
    get labelHorizontalAlignment(): HorizontalAlignment;
    set labelHorizontalAlignment(v: HorizontalAlignment);
    static ngAcceptInputType_labelHorizontalAlignment: HorizontalAlignment | string;
    /**
     * Gets or sets the vertical alignment to use for the node labels.
    */
    get labelVerticalAlignment(): VerticalAlignment;
    set labelVerticalAlignment(v: VerticalAlignment);
    static ngAcceptInputType_labelVerticalAlignment: VerticalAlignment | string;
    /**
     * Gets or sets the fill color to use for the nodes.
    */
    get fill(): string;
    set fill(v: string);
    /**
     * Gets or sets the outline to use for the nodes.
    */
    get outline(): string;
    set outline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the node outline.
    */
    get strokeThickness(): number;
    set strokeThickness(v: number);
    static ngAcceptInputType_strokeThickness: number | string;
    /**
     * Gets or sets the opacity to use for the node.
    */
    get opacity(): number;
    set opacity(v: number);
    static ngAcceptInputType_opacity: number | string;
    /**
     * Gets or sets the fade opacity that should be used when highlighting.
    */
    get fadeOpacity(): number;
    set fadeOpacity(v: number);
    static ngAcceptInputType_fadeOpacity: number | string;
    /**
     * Gets or sets if highlighting was handled, and whether internal highlighting logic should be skipped.
    */
    get highlightingHandled(): boolean;
    set highlightingHandled(v: boolean);
    static ngAcceptInputType_highlightingHandled: boolean | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxTreemapNodeStyleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxTreemapNodeStyleComponent, "igx-treemap-node-style", never, { "headerHoverBackground": "headerHoverBackground"; "headerBackground": "headerBackground"; "headerTextColor": "headerTextColor"; "label": "label"; "textColor": "textColor"; "headerHoverTextColor": "headerHoverTextColor"; "headerLabelLeftMargin": "headerLabelLeftMargin"; "headerLabelTopMargin": "headerLabelTopMargin"; "headerLabelRightMargin": "headerLabelRightMargin"; "headerLabelBottomMargin": "headerLabelBottomMargin"; "labelLeftMargin": "labelLeftMargin"; "labelTopMargin": "labelTopMargin"; "labelRightMargin": "labelRightMargin"; "labelBottomMargin": "labelBottomMargin"; "headerHeight": "headerHeight"; "labelHorizontalAlignment": "labelHorizontalAlignment"; "labelVerticalAlignment": "labelVerticalAlignment"; "fill": "fill"; "outline": "outline"; "strokeThickness": "strokeThickness"; "opacity": "opacity"; "fadeOpacity": "fadeOpacity"; "highlightingHandled": "highlightingHandled"; }, {}, never, never>;
}
