import { ColorScaleInterpolationMode } from "./ColorScaleInterpolationMode";
import { IgxColorScaleComponent } from "./igx-color-scale-component";
import { CustomPaletteColorScale } from "./CustomPaletteColorScale";
import * as i0 from "@angular/core";
/**
 * ColorScale class for selecting a color from a given palette, or interpolating between adjacent colors in that palette.
*/
export declare class IgxCustomPaletteColorScaleComponent extends IgxColorScaleComponent {
    protected createImplementation(): CustomPaletteColorScale;
    /**
                                 * @hidden
                                 */
    get i(): CustomPaletteColorScale;
    constructor();
    /**
     * The lowest value to assign a color.  Any given value less than this value will be made Transparent.
    */
    get minimumValue(): number;
    set minimumValue(v: number);
    static ngAcceptInputType_minimumValue: number | string;
    /**
     * The highest value to assign a color.  Any given value greater than this value will be made Transparent.
    */
    get maximumValue(): number;
    set maximumValue(v: number);
    static ngAcceptInputType_maximumValue: number | string;
    /**
     * A list of colors to select from or interpolate between.
    */
    get palette(): string[];
    set palette(v: string[]);
    static ngAcceptInputType_palette: string[] | string;
    /**
     * The approach to use when getting a color from the palette.
    */
    get interpolationMode(): ColorScaleInterpolationMode;
    set interpolationMode(v: ColorScaleInterpolationMode);
    static ngAcceptInputType_interpolationMode: ColorScaleInterpolationMode | string;
    providePalette(colors: string[]): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCustomPaletteColorScaleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCustomPaletteColorScaleComponent, "igx-custom-palette-color-scale", never, { "minimumValue": "minimumValue"; "maximumValue": "maximumValue"; "palette": "palette"; "interpolationMode": "interpolationMode"; }, {}, never, never>;
}
