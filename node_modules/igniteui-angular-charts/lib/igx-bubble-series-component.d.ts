import { IgxSizeScaleComponent } from "./igx-size-scale-component";
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { IgxScatterBaseComponent } from "./igx-scatter-base-component";
import { BubbleSeries } from "./BubbleSeries";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent bubble series.
*/
export declare class IgxBubbleSeriesComponent extends IgxScatterBaseComponent {
    protected createImplementation(): BubbleSeries;
    /**
                                 * @hidden
                                 */
    get i(): BubbleSeries;
    constructor();
    /**
     * Gets whether the series has only marker as visuals
    */
    get hasOnlyMarkers(): boolean;
    static ngAcceptInputType_hasOnlyMarkers: boolean | string;
    get isColoredItemwise(): boolean;
    static ngAcceptInputType_isColoredItemwise: boolean | string;
    /**
     * Gets or sets the radius mapping property for the current series object.
    */
    get radiusMemberPath(): string;
    set radiusMemberPath(v: string);
    /**
     * Gets or sets the radius size scale for the bubbles.
    */
    get radiusScale(): IgxSizeScaleComponent;
    set radiusScale(v: IgxSizeScaleComponent);
    /**
     * Gets or sets the Label mapping property for the current series object.
    */
    get labelMemberPath(): string;
    set labelMemberPath(v: string);
    /**
     * Gets or sets the fill mapping property for the current series object.
    */
    get fillMemberPath(): string;
    set fillMemberPath(v: string);
    /**
     * Gets or sets the brush scale for the fill brush of markers.
    */
    get fillScale(): IgxBrushScaleComponent;
    set fillScale(v: IgxBrushScaleComponent);
    /**
     * Gets or sets whether or not the FillScale uses global min/max values of FillMemberPath from multiple series.
     * This setting applies only if multiple series are using the same FillScale.
    */
    get fillScaleUseGlobalValues(): boolean;
    set fillScaleUseGlobalValues(v: boolean);
    static ngAcceptInputType_fillScaleUseGlobalValues: boolean | string;
    /**
     * Gets or sets whether or not the marker outline should use FillScale like the marker fill does.
     * This setting applies only if the current series has a FillScale set and it overrides MarkerOutline setting.
    */
    get markerOutlineUsesFillScale(): boolean;
    set markerOutlineUsesFillScale(v: boolean);
    static ngAcceptInputType_markerOutlineUsesFillScale: boolean | string;
    /**
     * Gets or sets brightness of the marker outline. Using negative value will change marker outline to darker color and positive value will change marker outline to brighter color
     * Note you can use any values between minimum value of -1 (darkest outline) and maximum value of 1 (brightest outline)
    */
    get markerOutlineBrightness(): number;
    set markerOutlineBrightness(v: number);
    static ngAcceptInputType_markerOutlineBrightness: number | string;
    /**
     * Gets or sets brightness of the marker fill. Using negative value will change marker fill to darker color and positive value will change marker fill to brighter color
     * Note you can use any values between minimum value of -1 (darkest fill) and maximum value of 1 (brightest fill)
    */
    get markerBrushBrightness(): number;
    set markerBrushBrightness(v: number);
    static ngAcceptInputType_markerBrushBrightness: number | string;
    /**
     * Gets or sets the whether or not the RadiusScale uses global values of RadiusMemberPath from multiple series.
     * This setting applies only if multiple series are using the same RadiusScale.
    */
    get radiusScaleUseGlobalValues(): boolean;
    set radiusScaleUseGlobalValues(v: boolean);
    static ngAcceptInputType_radiusScaleUseGlobalValues: boolean | string;
    /**
     * Gets or sets the label displayed before series' radius value in the Data Legend.
    */
    get radiusMemberAsLegendLabel(): string;
    set radiusMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series' fill value in the Data Legend.
    */
    get fillMemberAsLegendLabel(): string;
    set fillMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit displayed after series' radius value in the Data Legend.
    */
    get radiusMemberAsLegendUnit(): string;
    set radiusMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit displayed after series' fill value in the Data Legend.
    */
    get fillMemberAsLegendUnit(): string;
    set fillMemberAsLegendUnit(v: string);
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxBubbleSeriesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxBubbleSeriesComponent, "igx-bubble-series", never, { "radiusMemberPath": "radiusMemberPath"; "radiusScale": "radiusScale"; "labelMemberPath": "labelMemberPath"; "fillMemberPath": "fillMemberPath"; "fillScale": "fillScale"; "fillScaleUseGlobalValues": "fillScaleUseGlobalValues"; "markerOutlineUsesFillScale": "markerOutlineUsesFillScale"; "markerOutlineBrightness": "markerOutlineBrightness"; "markerBrushBrightness": "markerBrushBrightness"; "radiusScaleUseGlobalValues": "radiusScaleUseGlobalValues"; "radiusMemberAsLegendLabel": "radiusMemberAsLegendLabel"; "fillMemberAsLegendLabel": "fillMemberAsLegendLabel"; "radiusMemberAsLegendUnit": "radiusMemberAsLegendUnit"; "fillMemberAsLegendUnit": "fillMemberAsLegendUnit"; }, {}, never, never>;
}
