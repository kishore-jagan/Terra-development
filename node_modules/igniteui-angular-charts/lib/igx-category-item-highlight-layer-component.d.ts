import { IgDataTemplate } from "igniteui-angular-core";
import { IgxSeriesComponent } from "./igx-series-component";
import { CategoryItemHighlightType } from "./CategoryItemHighlightType";
import { MarkerType } from "./MarkerType";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { CategoryItemHighlightLayer } from "./CategoryItemHighlightLayer";
import * as i0 from "@angular/core";
/**
 * Represents an annotation layer that highlights items in a series that use a category axis
 * either by drawing a banded shape at their position, or by rendering a marker at their position.
 * Depending on the type of series, the default highlight will be affected. To override
 * the type of highlight used, you can set the HighlightType property.
*/
export declare class IgxCategoryItemHighlightLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): CategoryItemHighlightLayer;
    /**
                                 * @hidden
                                 */
    get i(): CategoryItemHighlightLayer;
    constructor();
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer(): boolean;
    static ngAcceptInputType_isAnnotationHoverLayer: boolean | string;
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeries(): IgxSeriesComponent;
    set targetSeries(v: IgxSeriesComponent);
    /**
     * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeriesName(): string;
    set targetSeriesName(v: string);
    /**
     * Gets or sets whether to use value interpolation when drawing a line through the best value for the pointer position.
    */
    get useInterpolation(): boolean;
    set useInterpolation(v: boolean);
    static ngAcceptInputType_useInterpolation: boolean | string;
    /**
     * Gets or sets which type of highlight shape to use when highlighting items.
    */
    get highlightType(): CategoryItemHighlightType;
    set highlightType(v: CategoryItemHighlightType);
    static ngAcceptInputType_highlightType: CategoryItemHighlightType | string;
    /**
     * Gets or sets which type of marker to use when highlighting items, if appropriate.
    */
    get markerType(): MarkerType;
    set markerType(v: MarkerType);
    static ngAcceptInputType_markerType: MarkerType | string;
    /**
     * Gets or sets which color to use for the marker when highlighting items, if appropriate.
    */
    get markerBrush(): string;
    set markerBrush(v: string);
    /**
     * Gets or sets which outline color to use for the marker when highlighting items, if appropriate.
    */
    get markerOutline(): string;
    set markerOutline(v: string);
    /**
     * Gets or sets the template to use for marker visuals for the current series object.
    */
    get markerTemplate(): IgDataTemplate;
    set markerTemplate(v: IgDataTemplate);
    /**
     * Gets or sets the width to use for the highlight region if highlighting items in a grid aligned series (line, spline, etc), with a banded shape.
    */
    get bandHighlightWidth(): number;
    set bandHighlightWidth(v: number);
    static ngAcceptInputType_bandHighlightWidth: number | string;
    /**
     * Gets or sets whether to skip unknown values when searching for series values.
    */
    get skipUnknownValues(): boolean;
    set skipUnknownValues(v: boolean);
    static ngAcceptInputType_skipUnknownValues: boolean | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCategoryItemHighlightLayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCategoryItemHighlightLayerComponent, "igx-category-item-highlight-layer", never, { "targetSeries": "targetSeries"; "targetSeriesName": "targetSeriesName"; "useInterpolation": "useInterpolation"; "highlightType": "highlightType"; "markerType": "markerType"; "markerBrush": "markerBrush"; "markerOutline": "markerOutline"; "markerTemplate": "markerTemplate"; "bandHighlightWidth": "bandHighlightWidth"; "skipUnknownValues": "skipUnknownValues"; }, {}, never, never>;
}
