import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { FinancialOverlay } from "./FinancialOverlay";
import * as i0 from "@angular/core";
/**
 * Represents the base functionality for a IgxDataChartComponent financial overlay series.
 * The difference between a FinancialIndicator and a FinancialOverlay is small.
 * Overlays are usually drawn against the same axes as the price, but they don't
 * have to be. Overlays mostly display multiple values, but not all of them, and so
 * so some indicators.
*
* The `FinancialOverlay` class represents the base functionality for a IgxDataChartComponent financial overlay series.
*
* ```html
* <igx-data-chart
* #chart
* [dataSource]="data" >
* <igx-ordinal-time-x-axis
* dateTimeMemberPath="TimeStamp"
* #xAxis
* >
* </igx-ordinal-time-x-axis>
* <igx-numeric-y-axis
*     minimumValue="0"
*     #yAxis>
* </igx-numeric-y-axis>
* <igx-bollinger-bands-overlay
* [xAxis]="xAxis"
*     [yAxis]="yAxis"
*     openMemberPath="open"
*     highMemberPath="high"
*     lowMemberPath="low"
*     closeMemberPath="close"
*     volumeMemberPath="volume">
* </igx-bollinger-bands-overlay>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxBollingerBandsOverlayComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.openMemberPath = "open";
* series.highMemberPath = "high";
* series.lowMemberPath = "low";
* series.closeMemberPath = "close";
* series.volumeMemberPath="volume";
* this.chart.series.add(series);
* ```
*/
export declare abstract class IgxFinancialOverlayComponent extends IgxFinancialSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): FinancialOverlay;
    constructor();
    /**
     * Gets whether the series is financial overlay
    */
    get isFinancialOverlay(): boolean;
    static ngAcceptInputType_isFinancialOverlay: boolean | string;
    /**
     * Gets or sets the number of values to hide at the beginning of the indicator.
    *
    * Use the `IgnoreFirst` property to sets the number of values to hide at the beginning of the indicator.
    *
    * ```ts
    *  series.ignoreFirst=2;
    * ```
    *
    * ```html
    *    <igx-data-chart
    *    #chart
    *        [dataSource]="data" >
    *  <igx-category-x-axis
    *        label="label"
    *        #xAxis>
    *        </igx-category-x-axis>
    * <igx-numeric-y-axis
    *        minimumValue="0"
    *        #yAxis>
    * </igx-numeric-y-axis>
    * <igx-bollinger-bands-overlay
    *    [xAxis]="xAxis"
    *      [yAxis]="yAxis"
    *      openMemberPath="open"
    *      highMemberPath="high"
    *      lowMemberPath="low"
    *      closeMemberPath="close"
    *      volumeMemberPath="volume"
    * 	  ignoreFirst="2">
    * </igx-bollinger-bands-overlay>
    *  </igx-data-chart>
    * ```
    */
    get ignoreFirst(): number;
    set ignoreFirst(v: number);
    static ngAcceptInputType_ignoreFirst: number | string;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * Use the `ScrollIntoView` method to scrolls the series to display the item for the specified data item.
    */
    scrollIntoView(item: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxFinancialOverlayComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxFinancialOverlayComponent, "ng-component", never, { "ignoreFirst": "ignoreFirst"; }, {}, never, never>;
}
