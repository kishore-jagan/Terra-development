import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-angular-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "igniteui-angular-core";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-angular-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { Clipper } from "igniteui-angular-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-angular-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-angular-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-angular-core";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected cq(): SeriesView;
    o0(): void;
    qx(a: SeriesView): void;
    yp: ScatterBaseView;
    protected get_fu(): boolean;
    ai(): Axis[];
    ko(a: any, b: string): any;
    mb(a: string): string;
    d9(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected b0(): SeriesHitTestMode;
    wj(a: Point): Rect;
    gu(a: Point, b: boolean): boolean;
    constructor();
    yo: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    aal: string;
    get y9(): IFastItemColumn$1<number>;
    set y9(a: IFastItemColumn$1<number>);
    private y7;
    aat: string;
    get za(): IFastItemColumn$1<number>;
    set za(a: IFastItemColumn$1<number>);
    private y8;
    z5: string;
    z7: string;
    protected f9(): boolean;
    protected zo(): boolean;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    private aaz;
    private aa0;
    aah: string;
    aap: string;
    aaj: string;
    aar: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get ab9(): Brush;
    set ab9(a: Brush);
    static readonly abk: DependencyProperty;
    trendLineThickness: number;
    acb: PenLineCap;
    aca: DoubleCollection;
    trendLinePeriod: number;
    yl: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    z2: number;
    z1: number;
    y0: ScatterItemSearchMode;
    z0: number;
    p6(): void;
    yq: ScatterErrorBarSettings;
    protected q5(a: any, b: string, c: any, d: any): void;
    protected zl(): boolean;
    protected zk(): boolean;
    zf(a: any): boolean;
    ze(a: any): boolean;
    private abi;
    private acc;
    private acd;
    private aav;
    protected zj(a: string, b: FastItemsSourceEventAction): boolean;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    aa9(a: ScatterFrame): void;
    aba(a: ScatterFrame, b: Clipper): void;
    ax(a: Axis): AxisRange;
    kl(a: Point): any;
    private yx;
    get yy(): ScatterItemSearchMode;
    set yy(a: ScatterItemSearchMode);
    protected yz(): ScatterItemSearchMode;
    j1(a: Point): number;
    ip(a: Point): number;
    protected zw(a: Point): number;
    private ye;
    private yf;
    protected zv(a: Point): number;
    private aay;
    protected get_zi(): boolean;
    protected get zi(): boolean;
    private zz;
    protected zy(a: Point): number;
    protected zu(a: Point): number;
    protected zx(a: Point): number;
    v6(a: Point, b: boolean, c: boolean): Point;
    gb(a: any): boolean;
    protected sk(a: Rect, b: Rect): void;
    protected sl(a: Rect, b: Rect): void;
    yu: ScatterFrame;
    yw: ScatterFrame;
    ys: ScatterFrame;
    yt(): ScatterFrame;
    aaw(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    aa6(a: ScatterFrame, b: ScatterBaseView): void;
    o3(a: boolean, b: SeriesView): void;
    zh: boolean;
    zg: boolean;
    protected zd: boolean;
    protected zc: boolean;
    protected get_fc(): boolean;
    private y5;
    private y6;
    protected y3(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected y4(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    wn(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected y2(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    de(a: any, b: Point, c: boolean): HighlightingInfo;
    df(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected zn(): boolean;
    protected zm(): boolean;
    abh(a: ScatterFrame, b: ScatterBaseView): void;
    yh(a: number, b: number): any[];
    protected yi(a: number, b: number): any[];
    protected y1: ScatterSeriesRenderManager;
    aax(a: ScatterBaseView, b: ScatterFrame): void;
    protected aa2(a: number, b: number, c: boolean): void;
    protected aa1(a: number, b: number, c: boolean): void;
    protected abc(a: AssigningScatterStyleEventArgs): void;
    protected abb(a: AssigningScatterMarkerStyleEventArgs): void;
    aa4(a: ScatterFrame, b: ScatterBaseView): void;
    aa7(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    aa5(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    aa3(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    aa8(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    abe(a: ScatterFrame, b: ScatterBaseView): void;
    private abf;
    private abg;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    ro(a: boolean): void;
    protected sb(): void;
    yv: ScatterFrame;
    rp(a: Rect, b: RenderSurface): void;
    private yr;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    abd(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    yg(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    zp(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected pv(a: any): void;
    iw(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    private zb;
    private zq;
    private zr;
    zs: number;
    zt: number;
    private abj;
    i6(a: ValueLayerValueMode, b: Axis): number;
    ap(a: ValueLayerValueMode): number[];
    wa(a: number[]): Point;
    v9(a: ValueLayerValueMode): Point;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningScatterMarkerStyleEventArgs;
    ax: AssigningScatterStyleEventArgs;
    ay(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    c0: MarkerManagerBase;
    protected cy: Point[];
    protected c1: ScatterBase;
    protected c6: List$1<number>;
    constructor(a: ScatterBase);
    private dh;
    private di;
    c2: ScatterTrendLineManager;
    au(): void;
    private dg;
    dj(a: Marker): Size;
    protected cz(): MarkerManagerBase;
    protected de(a: IDictionary$2<any, OwnedPoint>): void;
    c5(): List$1<Marker>;
    cx(): Point[];
    protected cw(): Point[];
    protected c4(): List$1<number>;
    c7(): void;
    dc(a: PathGeometry): void;
    c8(): void;
    dd(a: PathGeometry): void;
    df(): void;
    c3: HashPool$2<any, Marker>;
    cj(a: (arg1: Marker) => void): void;
    da(a: (arg1: Marker) => void): void;
    db(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    c9(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
