import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { ICoalescingModerator } from "./ICoalescingModerator";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { OthersCategoryType } from "igniteui-angular-core";
import { IList$1, Type } from "igniteui-angular-core";
import { FastItemsSourceEventArgs } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
/**
 * @hidden
 */
export declare class ProportionalCategoryAngleAxis extends CategoryAngleAxis implements ICoalescingModerator {
    static $t: Type;
    private n9;
    get og(): string;
    set og(a: string);
    fy(a: any, b: string): any;
    get normalizationMayContainUnknowns(): boolean;
    private nv;
    private get nx();
    private set nx(value);
    n7: number;
    nu: OthersCategoryType;
    oa: string;
    nw(a: string): IFastItemColumn$1<number>;
    protected hx(a: any, b: string, c: any, d: any): void;
    protected l4(a: FastItemsSourceEventArgs): void;
    private nz;
    private n4;
    getScaledAngle(a: number): number;
    protected get_cl(): boolean;
    m3(a: number, b: number, c: Rect, d: Rect, e: Rect): number;
    n5(a: number, b: Rect, c: Rect, d: Rect): number;
    m4(a: number, b: Rect, c: Rect, d: Rect): number;
    private n2;
    private n1;
    private n0;
    private ny;
    protected lj(): number;
    protected mu(a: number): boolean;
    protected ng(): string;
    protected mv(a: number): boolean;
    protected ia(a: boolean): void;
    ensureSum(): void;
    private oi;
    private n3;
    private n8;
    get othersValue(): number;
    get othersIndex(): number;
    get hasOthersCategory(): boolean;
    ho(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    getUnscaledAngle(a: number): number;
    isOthersValue(a: number): boolean;
    ge(a: number): string;
    oe(): string;
    getNormalizingValueAtIndex(a: number, b: number): number;
    n6(a: number): number;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    get itemsCount(): number;
    static $$p: string[];
}
