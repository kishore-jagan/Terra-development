import { RadialBaseChart } from "./RadialBaseChart";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { PropertyChangedEventArgs, Type } from "igniteui-angular-core";
import { PieChartSweepDirection } from "./PieChartSweepDirection";
import { CalloutCollisionMode } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { OthersCategoryType } from "igniteui-angular-core";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { RadialLabelMode } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { RadialBase } from "./RadialBase";
import { Series } from "./Series";
import { RadialPieSeries } from "./RadialPieSeries";
import { DataSeries } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeriesType } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare abstract class DataPieBaseChart extends RadialBaseChart {
    static $t: Type;
    constructor();
    protected ajs(a: (arg1: RadialBase) => void): void;
    protected ajt(a: (arg1: RadialBase, arg2: number) => void): void;
    protected ajq(a: (arg1: RadialPieSeries) => void): void;
    protected ajr(a: (arg1: RadialPieSeries, arg2: number) => void): void;
    protected wg(): void;
    protected c6(a: Series, b: number): MarkerType;
    protected we(a: DataSeries): void;
    protected hc(a: DataSeries): boolean;
    protected wh(): void;
    private ag1;
    get angleAxis(): ProportionalCategoryAngleAxis;
    set angleAxis(a: ProportionalCategoryAngleAxis);
    private agv;
    get valueAxis(): NumericRadiusAxis;
    set valueAxis(a: NumericRadiusAxis);
    protected get_ahd(): boolean;
    protected get ahd(): boolean;
    protected dg(a: DataSeries, b: DataSeriesType): Series;
    protected uy(a: Series, b: number): void;
    private ag7;
    protected zm(): Axis;
    protected zn(): Axis;
    protected t9(): void;
    protected aju(a: any, b: PropertyChangedEventArgs): void;
    protected ajv(a: any, b: PropertyChangedEventArgs): void;
    protected t3(a: Series, b: number): void;
    protected aet(a: Axis): void;
    protected aer(a: Axis): void;
    protected vl(a: string, b: any, c: any): void;
    private aic;
    get ai7(): string;
    set ai7(a: string);
    private agk;
    get ago(): any[];
    set ago(a: any[]);
    private ah8;
    get air(): string;
    set air(a: string);
    private agi;
    get agm(): any[];
    set agm(a: any[]);
    private aia;
    get ai0(): string;
    set ai0(a: string);
    private agj;
    get agn(): any[];
    set agn(a: any[]);
    private ah7;
    get ain(): string;
    set ain(a: string);
    private agh;
    get agl(): any[];
    set agl(a: any[]);
    private ahj;
    get aht(): number;
    set aht(a: number);
    private agz;
    get ag0(): PieChartSweepDirection;
    set ag0(a: PieChartSweepDirection);
    private agr;
    get ags(): CalloutCollisionMode;
    set ags(a: CalloutCollisionMode);
    private ajx;
    get ajz(): Brush;
    set ajz(a: Brush);
    private ajw;
    get ajy(): Brush;
    set ajy(a: Brush);
    private aid;
    get ajn(): string;
    set ajn(a: string);
    private ah6;
    get ail(): string;
    set ail(a: string);
    private agx;
    get agy(): OthersCategoryType;
    set agy(a: OthersCategoryType);
    private ahk;
    get ahu(): number;
    set ahu(a: number);
    private ah9;
    get aiw(): string;
    set aiw(a: string);
    private ah5;
    get aij(): string;
    set aij(a: string);
    private aha;
    get ahf(): boolean;
    set ahf(a: boolean);
    private agp;
    get agq(): AxisRangeBufferMode;
    set agq(a: AxisRangeBufferMode);
    private ahh;
    get ahr(): number;
    set ahr(a: number);
    private ahi;
    get ahs(): number;
    set ahs(a: number);
    private ahn;
    get ahz(): number;
    set ahz(a: number);
    private ahb;
    get ahg(): boolean;
    set ahg(a: boolean);
    private ah3;
    get ah4(): number;
    set ah4(a: number);
    private ahp;
    get ah1(): number;
    set ah1(a: number);
    private aho;
    get ah0(): number;
    set ah0(a: number);
    private ahq;
    get ah2(): number;
    set ah2(a: number);
    get ahy(): number;
    get ahx(): number;
    private ahl;
    get ahv(): number;
    set ahv(a: number);
    private ahm;
    get ahw(): number;
    set ahw(a: number);
    private aib;
    get ai5(): string;
    set ai5(a: string);
    private ag4;
    get ag6(): RadialLabelMode;
    set ag6(a: RadialLabelMode);
    private ag3;
    get ag5(): RadialLabelMode;
    set ag5(a: RadialLabelMode);
    private ag8;
    get ahc(): boolean;
    set ahc(a: boolean);
    private ag9;
    get ahe(): boolean;
    set ahe(a: boolean);
    private agt;
    get agu(): CollisionAvoidanceType;
    set agu(a: CollisionAvoidanceType);
}
