import { EventEmitter } from '@angular/core';
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxTriangulationStatusEventArgs } from "igniteui-angular-core";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import * as i0 from "@angular/core";
/**
 * Base class for series which triangulate XY data prior to rendering.
*/
export declare abstract class IgxScatterTriangulationSeriesComponent extends IgxSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): ScatterTriangulationSeries;
    constructor();
    /**
     * The name of the property from which to extract the X-coordinate for each item in the ItemsSource.
    */
    get xMemberPath(): string;
    set xMemberPath(v: string);
    /**
     * The name of the property from which to extract the Y-coordinate for each item in the ItemsSource.
    */
    get yMemberPath(): string;
    set yMemberPath(v: string);
    /**
     * The X-Axis for this series.
    */
    get xAxis(): IgxNumericXAxisComponent;
    set xAxis(v: IgxNumericXAxisComponent);
    /**
     * The Y-Axis for this series.
    */
    get yAxis(): IgxNumericYAxisComponent;
    set yAxis(v: IgxNumericYAxisComponent);
    /**
     * The source of triangulation data.
     * This property is optional.  If it is left as null, the triangulation will be created based on the items in the ItemsSource.  Triangulation is a demanding operation, so the runtime performance will be better when specifying a TriangulationSource, especially when a large number of data items are present.
    */
    get trianglesSource(): any[];
    set trianglesSource(v: any[]);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the first vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath1(): string;
    set triangleVertexMemberPath1(v: string);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the second vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath2(): string;
    set triangleVertexMemberPath2(v: string);
    /**
     * The name of the property of the TrianglesSource items which, for each triangle, contains the index of the third vertex point in the ItemsSource.
    */
    get triangleVertexMemberPath3(): string;
    set triangleVertexMemberPath3(v: string);
    /**
     * Gets whether or not this series is a shape series
    */
    get isShape(): boolean;
    static ngAcceptInputType_isShape: boolean | string;
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred(): boolean;
    static ngAcceptInputType_isMarkerlessDisplayPreferred: boolean | string;
    /**
     * Gets or sets the label displayed before series X value in the Data Legend.
    */
    get xMemberAsLegendLabel(): string;
    set xMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series Y value in the Data Legend.
    */
    get yMemberAsLegendLabel(): string;
    set yMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit after displayed after series X value in the Data Legend.
    */
    get xMemberAsLegendUnit(): string;
    set xMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit after displayed after series Y value in the Data Legend.
    */
    get yMemberAsLegendUnit(): string;
    set yMemberAsLegendUnit(v: string);
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    private _triangulationStatusChanged;
    /**
     * Raised when the status of an ongoing Triangulation has changed.
    */
    get triangulationStatusChanged(): EventEmitter<{
        sender: any;
        args: IgxTriangulationStatusEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxScatterTriangulationSeriesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxScatterTriangulationSeriesComponent, "ng-component", never, { "xMemberPath": "xMemberPath"; "yMemberPath": "yMemberPath"; "xAxis": "xAxis"; "yAxis": "yAxis"; "trianglesSource": "trianglesSource"; "triangleVertexMemberPath1": "triangleVertexMemberPath1"; "triangleVertexMemberPath2": "triangleVertexMemberPath2"; "triangleVertexMemberPath3": "triangleVertexMemberPath3"; "xMemberAsLegendLabel": "xMemberAsLegendLabel"; "yMemberAsLegendLabel": "yMemberAsLegendLabel"; "xMemberAsLegendUnit": "xMemberAsLegendUnit"; "yMemberAsLegendUnit": "yMemberAsLegendUnit"; }, { "triangulationStatusChanged": "triangulationStatusChanged"; }, never, never>;
}
