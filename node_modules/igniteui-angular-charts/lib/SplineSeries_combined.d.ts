import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { Type } from "igniteui-angular-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryFrame } from "./CategoryFrame";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { UnknownValuePlotting } from "igniteui-angular-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Clipper } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class SplineSeries extends SplineSeriesBase {
    static $t: Type;
    protected bi(): Series;
    protected get_fy(): boolean;
    protected cq(): SeriesView;
    protected zf(): boolean;
    qx(a: SeriesView): void;
    acy: SplineSeriesView;
    constructor();
    acx: CategoryLineRasterizer;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    o3(a: boolean, b: SeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineSeriesView extends SplineSeriesBaseView {
    static $t: Type;
    protected dh: SplineSeries;
    constructor(a: SplineSeries);
    au(): void;
    private ds;
    private dr;
    private dt;
    get dp(): Path;
    get dq(): Path;
    get dn(): Path;
    di(): void;
    dj(a: number, b: List$1<number[]>, c: boolean, d: UnknownValuePlotting, e: Clipper, f: number, g: number): void;
    private dm;
    private dl;
    private dk;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
}
