import { EventEmitter } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxProgressiveLoadStatusEventArgs } from "./igx-progressive-load-status-event-args";
import { IgxSeriesComponent } from "./igx-series-component";
import { HighDensityScatterSeries } from "./HighDensityScatterSeries";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent series where a high volume of scatter points can be displayed.
*/
export declare class IgxHighDensityScatterSeriesComponent extends IgxSeriesComponent {
    protected createImplementation(): HighDensityScatterSeries;
    /**
                                 * @hidden
                                 */
    get i(): HighDensityScatterSeries;
    constructor();
    /**
     * Gets whether the current series shows pixels.
    */
    get isPixel(): boolean;
    static ngAcceptInputType_isPixel: boolean | string;
    /**
     * Checks if this series is a scatter series
    */
    get isScatter(): boolean;
    static ngAcceptInputType_isScatter: boolean | string;
    /**
     * Gets or sets the effective x-axis for the current object.
    */
    get xAxis(): IgxNumericXAxisComponent;
    set xAxis(v: IgxNumericXAxisComponent);
    /**
     * Gets or sets the effective y-axis for the current object.
    */
    get yAxis(): IgxNumericYAxisComponent;
    set yAxis(v: IgxNumericYAxisComponent);
    /**
     * Gets or sets the x value mapping property for the current series object.
    */
    get xMemberPath(): string;
    set xMemberPath(v: string);
    /**
     * Gets or sets the label displayed before series X value in the Data Legend.
    */
    get xMemberAsLegendLabel(): string;
    set xMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series Y value in the Data Legend.
    */
    get yMemberAsLegendLabel(): string;
    set yMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit after displayed after series X value in the Data Legend.
    */
    get xMemberAsLegendUnit(): string;
    set xMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit after displayed after series Y value in the Data Legend.
    */
    get yMemberAsLegendUnit(): string;
    set yMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the y value mapping property for the current series object.
    */
    get yMemberPath(): string;
    set yMemberPath(v: string);
    /**
     * Gets or sets the whether to use use brute force mode.
    */
    get useBruteForce(): boolean;
    set useBruteForce(v: boolean);
    static ngAcceptInputType_useBruteForce: boolean | string;
    /**
     * Gets or sets the whether to progressively load the data into the chart.
    */
    get progressiveLoad(): boolean;
    set progressiveLoad(v: boolean);
    static ngAcceptInputType_progressiveLoad: boolean | string;
    /**
     * Gets or sets the density value that maps to the minimum heat color.
    */
    get heatMinimum(): number;
    set heatMinimum(v: number);
    static ngAcceptInputType_heatMinimum: number | string;
    /**
     * Gets or sets the value that maps to the maximum heat color.
    */
    get heatMaximum(): number;
    set heatMaximum(v: number);
    static ngAcceptInputType_heatMaximum: number | string;
    /**
     * Gets or sets the color to use for the minimum end of the scale.
    */
    get heatMinimumColor(): string;
    set heatMinimumColor(v: string);
    /**
     * Gets or sets the color to use for the maximum end of the scale.
    */
    get heatMaximumColor(): string;
    set heatMaximumColor(v: string);
    /**
     * Gets or sets the the pixel extent of the square data points that are rendered.
    */
    get pointExtent(): number;
    set pointExtent(v: number);
    static ngAcceptInputType_pointExtent: number | string;
    /**
     * Represents the current status of the progressive load of the series. It will range from 0 to 100, where 100 is fully loaded.
    */
    get progressiveStatus(): number;
    set progressiveStatus(v: number);
    static ngAcceptInputType_progressiveStatus: number | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    /**
     * Scrolls the series to display the item for the specified data item.
     * The series is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    private _progressiveLoadStatusChanged;
    /**
     * Raised when the progressive loading state of the series has changed.
    */
    get progressiveLoadStatusChanged(): EventEmitter<{
        sender: any;
        args: IgxProgressiveLoadStatusEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxHighDensityScatterSeriesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxHighDensityScatterSeriesComponent, "igx-high-density-scatter-series", never, { "xAxis": "xAxis"; "yAxis": "yAxis"; "xMemberPath": "xMemberPath"; "xMemberAsLegendLabel": "xMemberAsLegendLabel"; "yMemberAsLegendLabel": "yMemberAsLegendLabel"; "xMemberAsLegendUnit": "xMemberAsLegendUnit"; "yMemberAsLegendUnit": "yMemberAsLegendUnit"; "yMemberPath": "yMemberPath"; "useBruteForce": "useBruteForce"; "progressiveLoad": "progressiveLoad"; "heatMinimum": "heatMinimum"; "heatMaximum": "heatMaximum"; "heatMinimumColor": "heatMinimumColor"; "heatMaximumColor": "heatMaximumColor"; "pointExtent": "pointExtent"; "progressiveStatus": "progressiveStatus"; }, { "progressiveLoadStatusChanged": "progressiveLoadStatusChanged"; }, never, never>;
}
