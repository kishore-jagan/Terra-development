import { FinancialOverlay } from "./FinancialOverlay";
import { Series } from "./Series";
import { List$1 } from "igniteui-angular-core";
import { Type, Point } from "igniteui-angular-core";
import { CategoryFrame } from "./CategoryFrame";
import { AxisRange } from "./AxisRange";
import { Axis } from "./Axis";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { Rect } from "igniteui-angular-core";
import { SeriesView } from "./SeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-angular-core";
import { Polygon } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class BollingerBandsOverlay extends FinancialOverlay {
    static $t: Type;
    protected bi(): Series;
    constructor();
    aa3: number;
    aa2: number;
    protected q5(a: any, b: string, c: any, d: any): void;
    private aa0;
    private aa1;
    protected aat(): boolean;
    ax(a: Axis): AxisRange;
    aay: List$1<number>;
    aaz: List$1<number>;
    z4(a: CategoryFrame, b: FinancialSeriesView): void;
    o3(a: boolean, b: SeriesView): void;
    i3(a: Point, b: boolean, c: boolean): number;
    j8(a: Point, b: boolean): number;
    j6(a: Point, b: boolean): number;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    z6(a: CategoryFrame, b: FinancialSeriesView): void;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    private aax;
    protected yy(): number;
    iw(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BollingerBandsBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: BollingerBandsOverlayView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class BollingerBandsOverlayView extends FinancialSeriesView {
    static $t: Type;
    b6: BollingerBandsOverlay;
    constructor(a: BollingerBandsOverlay);
    au(): void;
    protected b1(): FinancialBucketCalculator;
    b8(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: (arg1: number) => number, e: (arg1: number) => number, f: (arg1: number) => number): void;
    b7(): void;
    get ca(): Polygon;
    get cf(): Polyline;
    get cg(): Polyline;
    get ch(): Polyline;
    private cb;
    private ci;
    private cj;
    private ck;
    private b9;
    private cc;
    private cd;
    private ce;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
}
