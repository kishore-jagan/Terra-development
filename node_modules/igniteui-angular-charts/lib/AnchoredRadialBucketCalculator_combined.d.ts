import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Type, Point } from "igniteui-angular-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-angular-core";
import { TrendLineType } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AxisRange } from "./AxisRange";
import { IFastItemsSource } from "igniteui-angular-core";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-angular-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-angular-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected cq(): SeriesView;
    o0(): void;
    mc(): string;
    ko(a: any, b: string): any;
    mb(a: string): string;
    ja(a: any): number;
    protected kr(a: number): any;
    qx(a: SeriesView): void;
    abr: AnchoredRadialSeriesView;
    constructor();
    abs: CategoryLineRasterizer;
    j8(a: Point, b: boolean): number;
    j6(a: Point, b: boolean): number;
    im(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    protected ab2: boolean;
    i3(a: Point, b: boolean, c: boolean): number;
    v6(a: Point, b: boolean, c: boolean): Point;
    ab6: boolean;
    acm: string;
    ace: string;
    protected f9(): boolean;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    private acr;
    get abx(): IFastItemColumn$1<number>;
    set abx(a: IFastItemColumn$1<number>);
    private abw;
    aci: string;
    ack: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    abv: TrendLineType;
    ac9: Brush;
    get ac8(): Brush;
    set ac8(a: Brush);
    static readonly acv: DependencyProperty;
    acb: number;
    adb: PenLineCap;
    ada: DoubleCollection;
    acc: number;
    acd: number;
    ax(a: Axis): AxisRange;
    protected z0(a: number, b: any): any;
    protected di(a: string): IFastItemColumn$1<number>;
    protected acq(a: IFastItemsSource, b: IFastItemColumn$1<number>): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_ab3(): boolean;
    protected get ab3(): boolean;
    protected get_ei(): boolean;
    protected get_f3(): boolean;
    protected ab8(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    protected ab7(a: number, b: CategoryAngleAxis, c: Rect, d: Rect, e: Rect): number;
    protected get_ab5(): boolean;
    protected get ab5(): boolean;
    protected get_abz(): boolean;
    protected get abz(): boolean;
    aaz(a: RadialFrame, b: RadialBaseView): void;
    private ab9;
    private aca;
    private ab4;
    abq(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected adc: Point;
    acu(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private ab1;
    private ab0;
    o3(a: boolean, b: SeriesView): void;
    aa2(a: RadialFrame, b: RadialBaseView): void;
    protected abp(a: number, b: number, c: Axis): any[];
    protected acs(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected act(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    acp(a: RadialBaseView, b: RadialFrame): void;
    private aco;
    protected sb(): void;
    kv(a: any, b: Point): any;
    gb(a: any): boolean;
    abu: RadialFrame;
    rp(a: Rect, b: RenderSurface): void;
    private abt;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected pv(a: any): void;
    private aby;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    c1: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    c2: RadialTrendLineManager;
    c3(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c4(): void;
    protected a7(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
