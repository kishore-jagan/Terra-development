import { IgxAxisComponent } from "./igx-axis-component";
import { DataToolTipLayerGroupingMode } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY } from "igniteui-angular-core";
import { DataAbbreviationMode } from "igniteui-angular-core";
import { DataLegendValueMode } from "igniteui-angular-core";
import { DataLegendHeaderDateMode } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode } from "igniteui-angular-core";
import { DataLegendSummaryType } from "igniteui-angular-core";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { DataLegendLayoutMode } from "igniteui-angular-core";
import { DataLegendUnitsMode } from "igniteui-angular-core";
import { DataLegendLabelMode } from "igniteui-angular-core";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { DataToolTipLayer } from "./DataToolTipLayer";
import * as i0 from "@angular/core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
*/
export declare class IgxDataToolTipLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): DataToolTipLayer;
    /**
                                 * @hidden
                                 */
    get i(): DataToolTipLayer;
    constructor();
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer(): boolean;
    static ngAcceptInputType_isAnnotationHoverLayer: boolean | string;
    /**
     * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
    */
    get isDefaultTooltipBehaviorDisabled(): boolean;
    static ngAcceptInputType_isDefaultTooltipBehaviorDisabled: boolean | string;
    /**
     * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
    */
    get targetAxis(): IgxAxisComponent;
    set targetAxis(v: IgxAxisComponent);
    /**
     * Gets or sets whether to use value interpolation when drawing the tooltips.
    */
    get useInterpolation(): boolean;
    set useInterpolation(v: boolean);
    static ngAcceptInputType_useInterpolation: boolean | string;
    /**
     * Gets or sets the grouping mode to apply to use for the tooltip layer.
    */
    get groupingMode(): DataToolTipLayerGroupingMode;
    set groupingMode(v: DataToolTipLayerGroupingMode);
    static ngAcceptInputType_groupingMode: DataToolTipLayerGroupingMode | string;
    /**
     * Gets the actual resolved tooltip layer grouping mode.
    */
    get actualGroupingMode(): DataToolTipLayerGroupingMode;
    set actualGroupingMode(v: DataToolTipLayerGroupingMode);
    static ngAcceptInputType_actualGroupingMode: DataToolTipLayerGroupingMode | string;
    /**
     * Gets or sets the offset of the tooltip layer on the X axis.
    */
    get positionOffsetX(): number;
    set positionOffsetX(v: number);
    static ngAcceptInputType_positionOffsetX: number | string;
    /**
     * Gets or sets the offset of the tooltip layer on the Y axis.
    */
    get positionOffsetY(): number;
    set positionOffsetY(v: number);
    static ngAcceptInputType_positionOffsetY: number | string;
    /**
     * Gets or sets the default offset of the tooltip layer on the X axis.
    */
    get defaultPositionOffsetX(): number;
    set defaultPositionOffsetX(v: number);
    static ngAcceptInputType_defaultPositionOffsetX: number | string;
    /**
     * Gets or sets the default offset of the tooltip layer on the Y axis.
    */
    get defaultPositionOffsetY(): number;
    set defaultPositionOffsetY(v: number);
    static ngAcceptInputType_defaultPositionOffsetY: number | string;
    /**
     * Gets or sets the tooltip position mode on the X axis for grouped series.
    */
    get groupedPositionModeX(): DataTooltipGroupedPositionX;
    set groupedPositionModeX(v: DataTooltipGroupedPositionX);
    static ngAcceptInputType_groupedPositionModeX: DataTooltipGroupedPositionX | string;
    /**
     * Gets the actual resolved tooltip position mode on the X axis for grouped series.
    */
    get actualGroupedPositionModeX(): DataTooltipGroupedPositionX;
    set actualGroupedPositionModeX(v: DataTooltipGroupedPositionX);
    static ngAcceptInputType_actualGroupedPositionModeX: DataTooltipGroupedPositionX | string;
    /**
     * Gets or sets the tooltip position mode on the Y axis for grouped series.
    */
    get groupedPositionModeY(): DataTooltipGroupedPositionY;
    set groupedPositionModeY(v: DataTooltipGroupedPositionY);
    static ngAcceptInputType_groupedPositionModeY: DataTooltipGroupedPositionY | string;
    /**
     * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
    */
    get actualGroupedPositionModeY(): DataTooltipGroupedPositionY;
    set actualGroupedPositionModeY(v: DataTooltipGroupedPositionY);
    static ngAcceptInputType_actualGroupedPositionModeY: DataTooltipGroupedPositionY | string;
    /**
     * Gets or sets whether the data legend should update when the series data is mutated.
    */
    get shouldUpdateWhenSeriesDataChanges(): boolean;
    set shouldUpdateWhenSeriesDataChanges(v: boolean);
    static ngAcceptInputType_shouldUpdateWhenSeriesDataChanges: boolean | string;
    /**
     * Gets or sets indexes, titles, or names of series to include in displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get includedSeries(): string[];
    set includedSeries(v: string[]);
    static ngAcceptInputType_includedSeries: string[] | string;
    /**
     * Gets or sets indexes, titles, or names of series to exclude from displaying in the data legend, e.g. "0, 1" or "Series1 Title, Series2 Title"
     * The ExcludedSeries property takes precedence over values of IncludedSeries property
    */
    get excludedSeries(): string[];
    set excludedSeries(v: string[]);
    static ngAcceptInputType_excludedSeries: string[] | string;
    /**
     * Gets or sets names of data columns or their labels to include in displaying in the data tooltip, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get includedColumns(): string[];
    set includedColumns(v: string[]);
    static ngAcceptInputType_includedColumns: string[] | string;
    /**
     * Gets or sets names of data columns or their labels to exclude from displaying in the data tooltip, e.g. "High, Low" or "H, L"
     * The ExcludedColumns property takes precedence over values of IncludedColumns property
    */
    get excludedColumns(): string[];
    set excludedColumns(v: string[]);
    static ngAcceptInputType_excludedColumns: string[] | string;
    /**
     * Gets or sets mode for abbreviating large numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatAbbreviation(): DataAbbreviationMode;
    set valueFormatAbbreviation(v: DataAbbreviationMode);
    static ngAcceptInputType_valueFormatAbbreviation: DataAbbreviationMode | string;
    /**
     * Gets or sets maximum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMaxFractions(): number;
    set valueFormatMaxFractions(v: number);
    static ngAcceptInputType_valueFormatMaxFractions: number | string;
    /**
     * Gets or sets minimum digits for formatting numbers displayed in the legend
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatMinFractions(): number;
    set valueFormatMinFractions(v: number);
    static ngAcceptInputType_valueFormatMinFractions: number | string;
    /**
     * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
    */
    get valueFormatMode(): DataLegendValueMode;
    set valueFormatMode(v: DataLegendValueMode);
    static ngAcceptInputType_valueFormatMode: DataLegendValueMode | string;
    /**
     * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatCulture(): string;
    set valueFormatCulture(v: string);
    /**
     * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
     * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
    */
    get valueFormatUseGrouping(): boolean;
    set valueFormatUseGrouping(v: boolean);
    static ngAcceptInputType_valueFormatUseGrouping: boolean | string;
    /**
     * Gets or sets the format string for values displayed in the data legend.
    */
    get valueFormatString(): string;
    set valueFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the ValueFormatString string.
    */
    get valueFormatSpecifiers(): any[];
    set valueFormatSpecifiers(v: any[]);
    static ngAcceptInputType_valueFormatSpecifiers: any[] | string;
    get valueRowMarginBottom(): number;
    set valueRowMarginBottom(v: number);
    static ngAcceptInputType_valueRowMarginBottom: number | string;
    get valueRowMarginLeft(): number;
    set valueRowMarginLeft(v: number);
    static ngAcceptInputType_valueRowMarginLeft: number | string;
    get valueRowMarginRight(): number;
    set valueRowMarginRight(v: number);
    static ngAcceptInputType_valueRowMarginRight: number | string;
    get valueRowMarginTop(): number;
    set valueRowMarginTop(v: number);
    static ngAcceptInputType_valueRowMarginTop: number | string;
    ensureValueRowMargin(): void;
    /**
     * Gets or sets whether to show series rows.
    */
    get valueRowVisible(): boolean;
    set valueRowVisible(v: boolean);
    static ngAcceptInputType_valueRowVisible: boolean | string;
    /**
     * Gets or sets text displayed when data column is missing a value, e.g. "no data"
    */
    get valueTextWhenMissingData(): string;
    set valueTextWhenMissingData(v: string);
    /**
     * Gets or sets whether to use series colors when displaying values in the legend
    */
    get valueTextUseSeriesColors(): boolean;
    set valueTextUseSeriesColors(v: boolean);
    static ngAcceptInputType_valueTextUseSeriesColors: boolean | string;
    get valueTextMarginBottom(): number;
    set valueTextMarginBottom(v: number);
    static ngAcceptInputType_valueTextMarginBottom: number | string;
    get valueTextMarginLeft(): number;
    set valueTextMarginLeft(v: number);
    static ngAcceptInputType_valueTextMarginLeft: number | string;
    get valueTextMarginRight(): number;
    set valueTextMarginRight(v: number);
    static ngAcceptInputType_valueTextMarginRight: number | string;
    get valueTextMarginTop(): number;
    set valueTextMarginTop(v: number);
    static ngAcceptInputType_valueTextMarginTop: number | string;
    ensureValueTextMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get valueTextColor(): string;
    set valueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get valueTextStyle(): string;
    set valueTextStyle(v: string);
    /**
     * Gets or sets the format string for header text displayed in the data legend.
    */
    get headerFormatString(): string;
    set headerFormatString(v: string);
    /**
     * Gets or sets the format specifiers to use with the HeaderFormatString string.
    */
    get headerFormatSpecifiers(): any[];
    set headerFormatSpecifiers(v: any[]);
    static ngAcceptInputType_headerFormatSpecifiers: any[] | string;
    /**
     * Gets or sets globalization culture when displaying header as date time
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatCulture(): string;
    set headerFormatCulture(v: string);
    /**
     * Gets or sets date format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatDate(): DataLegendHeaderDateMode;
    set headerFormatDate(v: DataLegendHeaderDateMode);
    static ngAcceptInputType_headerFormatDate: DataLegendHeaderDateMode | string;
    /**
     * Gets or sets time format for the header
     * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
    */
    get headerFormatTime(): DataLegendHeaderTimeMode;
    set headerFormatTime(v: DataLegendHeaderTimeMode);
    static ngAcceptInputType_headerFormatTime: DataLegendHeaderTimeMode | string;
    /**
     * Gets or sets the HeaderText for the data legend.
    */
    get headerText(): string;
    set headerText(v: string);
    /**
     * Gets or sets the header text color.
    */
    get headerTextColor(): string;
    set headerTextColor(v: string);
    get headerTextMarginBottom(): number;
    set headerTextMarginBottom(v: number);
    static ngAcceptInputType_headerTextMarginBottom: number | string;
    get headerTextMarginLeft(): number;
    set headerTextMarginLeft(v: number);
    static ngAcceptInputType_headerTextMarginLeft: number | string;
    get headerTextMarginRight(): number;
    set headerTextMarginRight(v: number);
    static ngAcceptInputType_headerTextMarginRight: number | string;
    get headerTextMarginTop(): number;
    set headerTextMarginTop(v: number);
    static ngAcceptInputType_headerTextMarginTop: number | string;
    ensureHeaderTextMargin(): void;
    get headerRowMarginBottom(): number;
    set headerRowMarginBottom(v: number);
    static ngAcceptInputType_headerRowMarginBottom: number | string;
    get headerRowMarginLeft(): number;
    set headerRowMarginLeft(v: number);
    static ngAcceptInputType_headerRowMarginLeft: number | string;
    get headerRowMarginRight(): number;
    set headerRowMarginRight(v: number);
    static ngAcceptInputType_headerRowMarginRight: number | string;
    get headerRowMarginTop(): number;
    set headerRowMarginTop(v: number);
    static ngAcceptInputType_headerRowMarginTop: number | string;
    ensureHeaderRowMargin(): void;
    /**
     * Gets or sets whether to show Header row.
    */
    get headerRowVisible(): boolean;
    set headerRowVisible(v: boolean);
    static ngAcceptInputType_headerRowVisible: boolean | string;
    /**
     * Gets or Sets the style to use for the header text.
    */
    get headerTextStyle(): string;
    set headerTextStyle(v: string);
    /**
     * Gets or sets whether to show Header row.
    */
    get groupRowVisible(): boolean;
    set groupRowVisible(v: boolean);
    static ngAcceptInputType_groupRowVisible: boolean | string;
    /**
     * Gets or sets the Group text color.
    */
    get groupTextColor(): string;
    set groupTextColor(v: string);
    get groupTextMarginBottom(): number;
    set groupTextMarginBottom(v: number);
    static ngAcceptInputType_groupTextMarginBottom: number | string;
    get groupTextMarginLeft(): number;
    set groupTextMarginLeft(v: number);
    static ngAcceptInputType_groupTextMarginLeft: number | string;
    get groupTextMarginRight(): number;
    set groupTextMarginRight(v: number);
    static ngAcceptInputType_groupTextMarginRight: number | string;
    get groupTextMarginTop(): number;
    set groupTextMarginTop(v: number);
    static ngAcceptInputType_groupTextMarginTop: number | string;
    ensureGroupTextMargin(): void;
    get groupRowMarginBottom(): number;
    set groupRowMarginBottom(v: number);
    static ngAcceptInputType_groupRowMarginBottom: number | string;
    get groupRowMarginLeft(): number;
    set groupRowMarginLeft(v: number);
    static ngAcceptInputType_groupRowMarginLeft: number | string;
    get groupRowMarginRight(): number;
    set groupRowMarginRight(v: number);
    static ngAcceptInputType_groupRowMarginRight: number | string;
    get groupRowMarginTop(): number;
    set groupRowMarginTop(v: number);
    static ngAcceptInputType_groupRowMarginTop: number | string;
    ensureGroupRowMargin(): void;
    /**
     * Gets or Sets the style to use for the Group text.
    */
    get groupTextStyle(): string;
    set groupTextStyle(v: string);
    /**
     * Gets or sets the summary text color.
    */
    get summaryTitleTextColor(): string;
    set summaryTitleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the summary text.
    */
    get summaryTitleTextStyle(): string;
    set summaryTitleTextStyle(v: string);
    /**
     * Gets or sets the SummaryType for the data legend.
    */
    get summaryType(): DataLegendSummaryType;
    set summaryType(v: DataLegendSummaryType);
    static ngAcceptInputType_summaryType: DataLegendSummaryType | string;
    /**
     * Gets or sets the SummaryTitleText for the data legend.
    */
    get summaryTitleText(): string;
    set summaryTitleText(v: string);
    get summaryTitleTextMarginBottom(): number;
    set summaryTitleTextMarginBottom(v: number);
    static ngAcceptInputType_summaryTitleTextMarginBottom: number | string;
    get summaryTitleTextMarginLeft(): number;
    set summaryTitleTextMarginLeft(v: number);
    static ngAcceptInputType_summaryTitleTextMarginLeft: number | string;
    get summaryTitleTextMarginRight(): number;
    set summaryTitleTextMarginRight(v: number);
    static ngAcceptInputType_summaryTitleTextMarginRight: number | string;
    get summaryTitleTextMarginTop(): number;
    set summaryTitleTextMarginTop(v: number);
    static ngAcceptInputType_summaryTitleTextMarginTop: number | string;
    ensureSummaryTitleTextMargin(): void;
    get summaryRowMarginBottom(): number;
    set summaryRowMarginBottom(v: number);
    static ngAcceptInputType_summaryRowMarginBottom: number | string;
    get summaryRowMarginLeft(): number;
    set summaryRowMarginLeft(v: number);
    static ngAcceptInputType_summaryRowMarginLeft: number | string;
    get summaryRowMarginRight(): number;
    set summaryRowMarginRight(v: number);
    static ngAcceptInputType_summaryRowMarginRight: number | string;
    get summaryRowMarginTop(): number;
    set summaryRowMarginTop(v: number);
    static ngAcceptInputType_summaryRowMarginTop: number | string;
    ensureSummaryRowMargin(): void;
    /**
     * Gets or sets the units text color.
    */
    get summaryValueTextColor(): string;
    set summaryValueTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryValueTextStyle(): string;
    set summaryValueTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryLabelText(): string;
    set summaryLabelText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get summaryLabelTextColor(): string;
    set summaryLabelTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryLabelTextStyle(): string;
    set summaryLabelTextStyle(v: string);
    /**
     * Gets or sets the units text for the data legend.
    */
    get summaryUnitsText(): string;
    set summaryUnitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get summaryUnitsTextColor(): string;
    set summaryUnitsTextColor(v: string);
    /**
     * Gets or Sets the style to use for the units text.
    */
    get summaryUnitsTextStyle(): string;
    set summaryUnitsTextStyle(v: string);
    get badgeMarginBottom(): number;
    set badgeMarginBottom(v: number);
    static ngAcceptInputType_badgeMarginBottom: number | string;
    get badgeMarginLeft(): number;
    set badgeMarginLeft(v: number);
    static ngAcceptInputType_badgeMarginLeft: number | string;
    get badgeMarginRight(): number;
    set badgeMarginRight(v: number);
    static ngAcceptInputType_badgeMarginRight: number | string;
    get badgeMarginTop(): number;
    set badgeMarginTop(v: number);
    static ngAcceptInputType_badgeMarginTop: number | string;
    ensureBadgeMargin(): void;
    /**
     * Gets or sets the BadgeShape for the data legend.
    */
    get badgeShape(): LegendItemBadgeShape;
    set badgeShape(v: LegendItemBadgeShape);
    static ngAcceptInputType_badgeShape: LegendItemBadgeShape | string;
    /**
     * Gets or sets the layout of content in the data legend
    */
    get layoutMode(): DataLegendLayoutMode;
    set layoutMode(v: DataLegendLayoutMode);
    static ngAcceptInputType_layoutMode: DataLegendLayoutMode | string;
    /**
     * Gets or sets the UnitsMode for the data legend.
    */
    get unitsDisplayMode(): DataLegendUnitsMode;
    set unitsDisplayMode(v: DataLegendUnitsMode);
    static ngAcceptInputType_unitsDisplayMode: DataLegendUnitsMode | string;
    /**
     * Gets or sets the units text for the data legend.
    */
    get unitsText(): string;
    set unitsText(v: string);
    /**
     * Gets or sets the units text color.
    */
    get unitsTextColor(): string;
    set unitsTextColor(v: string);
    get unitsTextMarginBottom(): number;
    set unitsTextMarginBottom(v: number);
    static ngAcceptInputType_unitsTextMarginBottom: number | string;
    get unitsTextMarginLeft(): number;
    set unitsTextMarginLeft(v: number);
    static ngAcceptInputType_unitsTextMarginLeft: number | string;
    get unitsTextMarginRight(): number;
    set unitsTextMarginRight(v: number);
    static ngAcceptInputType_unitsTextMarginRight: number | string;
    get unitsTextMarginTop(): number;
    set unitsTextMarginTop(v: number);
    static ngAcceptInputType_unitsTextMarginTop: number | string;
    ensureUnitsTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get unitsTextStyle(): string;
    set unitsTextStyle(v: string);
    get titleTextMarginBottom(): number;
    set titleTextMarginBottom(v: number);
    static ngAcceptInputType_titleTextMarginBottom: number | string;
    get titleTextMarginLeft(): number;
    set titleTextMarginLeft(v: number);
    static ngAcceptInputType_titleTextMarginLeft: number | string;
    get titleTextMarginRight(): number;
    set titleTextMarginRight(v: number);
    static ngAcceptInputType_titleTextMarginRight: number | string;
    get titleTextMarginTop(): number;
    set titleTextMarginTop(v: number);
    static ngAcceptInputType_titleTextMarginTop: number | string;
    ensureTitleTextMargin(): void;
    /**
     * Gets or sets the display text color.
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or Sets the style to use for the display text.
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    /**
     * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
    */
    get labelDisplayMode(): DataLegendLabelMode;
    set labelDisplayMode(v: DataLegendLabelMode);
    static ngAcceptInputType_labelDisplayMode: DataLegendLabelMode | string;
    /**
     * Gets or sets the units text color.
    */
    get labelTextColor(): string;
    set labelTextColor(v: string);
    get labelTextMarginBottom(): number;
    set labelTextMarginBottom(v: number);
    static ngAcceptInputType_labelTextMarginBottom: number | string;
    get labelTextMarginLeft(): number;
    set labelTextMarginLeft(v: number);
    static ngAcceptInputType_labelTextMarginLeft: number | string;
    get labelTextMarginRight(): number;
    set labelTextMarginRight(v: number);
    static ngAcceptInputType_labelTextMarginRight: number | string;
    get labelTextMarginTop(): number;
    set labelTextMarginTop(v: number);
    static ngAcceptInputType_labelTextMarginTop: number | string;
    ensureLabelTextMargin(): void;
    /**
     * Gets or Sets the style to use for the units text.
    */
    get labelTextStyle(): string;
    set labelTextStyle(v: string);
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTips(): void;
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    hideToolTipsImmediate(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxDataToolTipLayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxDataToolTipLayerComponent, "igx-data-tool-tip-layer", never, { "targetAxis": "targetAxis"; "useInterpolation": "useInterpolation"; "groupingMode": "groupingMode"; "actualGroupingMode": "actualGroupingMode"; "positionOffsetX": "positionOffsetX"; "positionOffsetY": "positionOffsetY"; "defaultPositionOffsetX": "defaultPositionOffsetX"; "defaultPositionOffsetY": "defaultPositionOffsetY"; "groupedPositionModeX": "groupedPositionModeX"; "actualGroupedPositionModeX": "actualGroupedPositionModeX"; "groupedPositionModeY": "groupedPositionModeY"; "actualGroupedPositionModeY": "actualGroupedPositionModeY"; "shouldUpdateWhenSeriesDataChanges": "shouldUpdateWhenSeriesDataChanges"; "includedSeries": "includedSeries"; "excludedSeries": "excludedSeries"; "includedColumns": "includedColumns"; "excludedColumns": "excludedColumns"; "valueFormatAbbreviation": "valueFormatAbbreviation"; "valueFormatMaxFractions": "valueFormatMaxFractions"; "valueFormatMinFractions": "valueFormatMinFractions"; "valueFormatMode": "valueFormatMode"; "valueFormatCulture": "valueFormatCulture"; "valueFormatUseGrouping": "valueFormatUseGrouping"; "valueFormatString": "valueFormatString"; "valueFormatSpecifiers": "valueFormatSpecifiers"; "valueRowMarginBottom": "valueRowMarginBottom"; "valueRowMarginLeft": "valueRowMarginLeft"; "valueRowMarginRight": "valueRowMarginRight"; "valueRowMarginTop": "valueRowMarginTop"; "valueRowVisible": "valueRowVisible"; "valueTextWhenMissingData": "valueTextWhenMissingData"; "valueTextUseSeriesColors": "valueTextUseSeriesColors"; "valueTextMarginBottom": "valueTextMarginBottom"; "valueTextMarginLeft": "valueTextMarginLeft"; "valueTextMarginRight": "valueTextMarginRight"; "valueTextMarginTop": "valueTextMarginTop"; "valueTextColor": "valueTextColor"; "valueTextStyle": "valueTextStyle"; "headerFormatString": "headerFormatString"; "headerFormatSpecifiers": "headerFormatSpecifiers"; "headerFormatCulture": "headerFormatCulture"; "headerFormatDate": "headerFormatDate"; "headerFormatTime": "headerFormatTime"; "headerText": "headerText"; "headerTextColor": "headerTextColor"; "headerTextMarginBottom": "headerTextMarginBottom"; "headerTextMarginLeft": "headerTextMarginLeft"; "headerTextMarginRight": "headerTextMarginRight"; "headerTextMarginTop": "headerTextMarginTop"; "headerRowMarginBottom": "headerRowMarginBottom"; "headerRowMarginLeft": "headerRowMarginLeft"; "headerRowMarginRight": "headerRowMarginRight"; "headerRowMarginTop": "headerRowMarginTop"; "headerRowVisible": "headerRowVisible"; "headerTextStyle": "headerTextStyle"; "groupRowVisible": "groupRowVisible"; "groupTextColor": "groupTextColor"; "groupTextMarginBottom": "groupTextMarginBottom"; "groupTextMarginLeft": "groupTextMarginLeft"; "groupTextMarginRight": "groupTextMarginRight"; "groupTextMarginTop": "groupTextMarginTop"; "groupRowMarginBottom": "groupRowMarginBottom"; "groupRowMarginLeft": "groupRowMarginLeft"; "groupRowMarginRight": "groupRowMarginRight"; "groupRowMarginTop": "groupRowMarginTop"; "groupTextStyle": "groupTextStyle"; "summaryTitleTextColor": "summaryTitleTextColor"; "summaryTitleTextStyle": "summaryTitleTextStyle"; "summaryType": "summaryType"; "summaryTitleText": "summaryTitleText"; "summaryTitleTextMarginBottom": "summaryTitleTextMarginBottom"; "summaryTitleTextMarginLeft": "summaryTitleTextMarginLeft"; "summaryTitleTextMarginRight": "summaryTitleTextMarginRight"; "summaryTitleTextMarginTop": "summaryTitleTextMarginTop"; "summaryRowMarginBottom": "summaryRowMarginBottom"; "summaryRowMarginLeft": "summaryRowMarginLeft"; "summaryRowMarginRight": "summaryRowMarginRight"; "summaryRowMarginTop": "summaryRowMarginTop"; "summaryValueTextColor": "summaryValueTextColor"; "summaryValueTextStyle": "summaryValueTextStyle"; "summaryLabelText": "summaryLabelText"; "summaryLabelTextColor": "summaryLabelTextColor"; "summaryLabelTextStyle": "summaryLabelTextStyle"; "summaryUnitsText": "summaryUnitsText"; "summaryUnitsTextColor": "summaryUnitsTextColor"; "summaryUnitsTextStyle": "summaryUnitsTextStyle"; "badgeMarginBottom": "badgeMarginBottom"; "badgeMarginLeft": "badgeMarginLeft"; "badgeMarginRight": "badgeMarginRight"; "badgeMarginTop": "badgeMarginTop"; "badgeShape": "badgeShape"; "layoutMode": "layoutMode"; "unitsDisplayMode": "unitsDisplayMode"; "unitsText": "unitsText"; "unitsTextColor": "unitsTextColor"; "unitsTextMarginBottom": "unitsTextMarginBottom"; "unitsTextMarginLeft": "unitsTextMarginLeft"; "unitsTextMarginRight": "unitsTextMarginRight"; "unitsTextMarginTop": "unitsTextMarginTop"; "unitsTextStyle": "unitsTextStyle"; "titleTextMarginBottom": "titleTextMarginBottom"; "titleTextMarginLeft": "titleTextMarginLeft"; "titleTextMarginRight": "titleTextMarginRight"; "titleTextMarginTop": "titleTextMarginTop"; "titleTextColor": "titleTextColor"; "titleTextStyle": "titleTextStyle"; "labelDisplayMode": "labelDisplayMode"; "labelTextColor": "labelTextColor"; "labelTextMarginBottom": "labelTextMarginBottom"; "labelTextMarginLeft": "labelTextMarginLeft"; "labelTextMarginRight": "labelTextMarginRight"; "labelTextMarginTop": "labelTextMarginTop"; "labelTextStyle": "labelTextStyle"; }, {}, never, never>;
}
