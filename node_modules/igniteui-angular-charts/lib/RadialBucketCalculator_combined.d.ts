import { Base, Type, Point } from "igniteui-angular-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { RadialLabelMode } from "igniteui-angular-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "igniteui-angular-core";
import { OthersCategoryContext } from "./OthersCategoryContext";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { RadialFrame } from "./RadialFrame";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-angular-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { RadialAxes } from "./RadialAxes";
import { Pool$1 } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    qx(a: SeriesView): void;
    y0: RadialBaseView;
    constructor();
    private aay;
    get categoryAxis(): CategoryAxisBase;
    az(): CategoryAxisBase;
    yf(a: number, b: number): any[];
    zv: number;
    zw: number;
    z4: string;
    y6: RadialLabelMode;
    y5: RadialLabelMode;
    z6: string;
    ye: any[];
    aas: string;
    yj: any[];
    aai: string;
    yg: any[];
    aap: string;
    yi: any[];
    aam: string;
    yh: any[];
    protected y7: RadialSeriesRenderManager;
    pp(a: any): void;
    ec(a: any): boolean;
    pn(a: any): void;
    d9(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected kq(a: number, b: boolean): any;
    private aav;
    private aac;
    private aad;
    private zs;
    private aae;
    private zt;
    protected z0(a: number, b: any): any;
    private z2;
    protected get_fr(): boolean;
    zj: boolean;
    zi: boolean;
    yu: CategoryTransitionInMode;
    zk: boolean;
    protected ze: boolean;
    protected zd: boolean;
    protected get_fc(): boolean;
    private zb;
    private zc;
    protected y8(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected zp(): boolean;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    kt(): any;
    protected y9(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected za(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    de(a: any, b: Point, c: boolean): HighlightingInfo;
    df(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningRadialStyle: (sender: any, args: AssigningRadialStyleEventArgs) => void;
    assigningRadialMarkerStyle: (sender: any, args: AssigningRadialMarkerStyleEventArgs) => void;
    protected zo(): boolean;
    protected zn(): boolean;
    protected aa1(a: AssigningRadialStyleEventArgs): void;
    protected aa0(a: AssigningRadialMarkerStyleEventArgs): void;
    zx(a: SeriesView): number;
    zy(a: SeriesView): number;
    yr: CategoryAngleAxis;
    yw: NumericRadiusAxis;
    ai(): Axis[];
    zh: boolean;
    protected sl(a: Rect, b: Rect): void;
    protected sk(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private yk;
    private yo;
    private yl;
    private yn;
    private ym;
    protected q5(a: any, b: string, c: any, d: any): void;
    protected zm(): boolean;
    protected zl(): boolean;
    zg(a: any): boolean;
    zf(a: any): boolean;
    private yx;
    protected get_yy(): OthersCategoryContext;
    get yy(): OthersCategoryContext;
    kl(a: Point): any;
    zq(a: Point): number;
    ip(a: Point): number;
    zr(a: number, b: Rect, c: Rect, d: Rect): number;
    j1(a: Point): number;
    gb(a: any): boolean;
    y3: RadialFrame;
    y4: RadialFrame;
    y1: RadialFrame;
    y2(): RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract aaz(a: RadialFrame, b: RadialBaseView): void;
    abstract aa2(a: RadialFrame, b: RadialBaseView): void;
    yz: RadialAxes;
    p6(): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    yv: CategoryTransitionSourceFramePreparer;
    protected yt(): CategoryTransitionInMode;
    protected zu(): number;
    protected gl(): boolean;
    protected gm(): boolean;
    ro(a: boolean): void;
    zz(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    cx: RadialBucketCalculator;
    cw: RadialBase;
    constructor(a: RadialBase);
    cy: Pool$1<Marker>;
    cj(a: (arg1: Marker) => void): void;
    cz: number;
    c0: Point;
}
