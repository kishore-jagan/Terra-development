import { EventEmitter, OnInit } from '@angular/core';
import { IgRect } from "igniteui-angular-core";
import { IgPoint } from "igniteui-angular-core";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesSelectionMode } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior } from "./SeriesSelectionBehavior";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { LegendItemBadgeMode } from "igniteui-angular-core";
import { ChartHitTestMode } from "./ChartHitTestMode";
import { WindowResponse } from "./WindowResponse";
import { Visibility } from "igniteui-angular-core";
import { ZoomCoercionMode } from "./ZoomCoercionMode";
import { InteractionState } from "igniteui-angular-core";
import { ModifierKeys } from "igniteui-angular-core";
import { SeriesHighlightedValuesDisplayMode } from "./SeriesHighlightedValuesDisplayMode";
import { IgxChartSelectedItemCollection } from "./igx-chart-selected-item-collection";
import { HorizontalAlignment } from "igniteui-angular-core";
import { IgxPlotAreaMouseButtonEventArgs } from "./igx-plot-area-mouse-button-event-args";
import { IgxPlotAreaMouseEventArgs } from "./igx-plot-area-mouse-event-args";
import { IgxChartCursorEventArgs } from "./igx-chart-cursor-event-args";
import { IgxDataChartMouseButtonEventArgs } from "./igx-data-chart-mouse-button-event-args";
import { IgxChartMouseEventArgs } from "./igx-chart-mouse-event-args";
import { IgxSeriesViewerManipulationEventArgs } from "./igx-series-viewer-manipulation-event-args";
import { IgxRectChangedEventArgs } from "igniteui-angular-core";
import { IgxSeriesViewerSelectedSeriesItemsChangedEventArgs } from "./igx-series-viewer-selected-series-items-changed-event-args";
import { IgxRefreshCompletedEventArgs } from "./igx-refresh-completed-event-args";
import { IgxImageCapturedEventArgs } from "igniteui-angular-core";
import { IgxSeriesComponent } from "./igx-series-component";
import { IgxCaptureImageSettings } from "igniteui-angular-core";
import { SeriesViewer } from "./SeriesViewer";
import { ToolActionInfo } from "igniteui-angular-core";
import { ICommandAvailabilityListener } from "igniteui-angular-core";
import { ICommandStateChangedListener } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a control for viewing series objects.
*/
export declare abstract class IgxSeriesViewerComponent implements OnInit {
    protected createImplementation(): SeriesViewer;
    ngOnInit(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): SeriesViewer; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgxSeriesViewerComponent;
    private onImplementationCreated;
    constructor();
    /**
     * Gets or sets the palette of brushes used for fill of plotted series.
     * These brushes are automatically assigned to series based on the index of series.
    */
    get brushes(): string[];
    set brushes(v: string[]);
    static ngAcceptInputType_brushes: string[] | string;
    /**
     * Gets or sets the palette of brushes used for outlines of plotted series.
     * These outlines are automatically assigned to series based on the index of series.
    */
    get outlines(): string[];
    set outlines(v: string[]);
    static ngAcceptInputType_outlines: string[] | string;
    /**
     * Gets or sets the palette of brushes used for fill of marker series.
     * These brushes are automatically assigned to markers based on the index of series.
    */
    get markerBrushes(): string[];
    set markerBrushes(v: string[]);
    static ngAcceptInputType_markerBrushes: string[] | string;
    /**
     * Gets or sets the palette of brushes used for outlines of plotted markers.
     * These outlines are automatically assigned to markers based on the index of series.
    */
    get markerOutlines(): string[];
    set markerOutlines(v: string[]);
    static ngAcceptInputType_markerOutlines: string[] | string;
    /**
     * Gets or sets the marker mode used for assigning a marker type to series when the marker type is automatic.
    */
    get markerAutomaticBehavior(): MarkerAutomaticBehavior;
    set markerAutomaticBehavior(v: MarkerAutomaticBehavior);
    static ngAcceptInputType_markerAutomaticBehavior: MarkerAutomaticBehavior | string;
    /**
     * Gets or sets the cross hair point (in world coordinates)
     * Either or both of the crosshair point's X and Y may be set to double.NaN, in which
     * case the relevant crosshair line is hidden.
    *
    * The `CrosshairPoint` property is used to gets/sets the cross hair point (in world coordinates).
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     crosshairVisibility="visible"
    *     crosshairPoint={x:.8,y:.2}>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.crosshairPoint = {x:.8,y:.2};
    * ```
    */
    get crosshairPoint(): IgPoint;
    set crosshairPoint(v: IgPoint);
    static ngAcceptInputType_crosshairPoint: IgPoint | string;
    /**
     * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
    *
    * `AnimateSeriesWhenAxisRangeChanges` is a Boolean property to override the default behavior in which series do not animate if an axis range changes.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     animateSeriesWhenAxisRangeChanges=true>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         transitionInMode="accordionFromBottom"
    *         isTransitionInEnabled=true
    *         transitionInSpeedType="indexScaled"
    *         transitionDuration=1000>
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.animateSeriesWhenAxisRangeChanges = true;
    * ```
    */
    get animateSeriesWhenAxisRangeChanges(): boolean;
    set animateSeriesWhenAxisRangeChanges(v: boolean);
    static ngAcceptInputType_animateSeriesWhenAxisRangeChanges: boolean | string;
    /**
     * Gets or sets whether to sync the vertical aspect of the window with the contained series content. This is only supported for a subset of the available series.
    */
    get isWindowSyncedToVisibleRange(): boolean;
    set isWindowSyncedToVisibleRange(v: boolean);
    static ngAcceptInputType_isWindowSyncedToVisibleRange: boolean | string;
    /**
     * Gets or sets whether calling SimulateHover should shift the crosshair point.
    */
    get shouldSimulateHoverMoveCrosshairPoint(): boolean;
    set shouldSimulateHoverMoveCrosshairPoint(v: boolean);
    static ngAcceptInputType_shouldSimulateHoverMoveCrosshairPoint: boolean | string;
    /**
     * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingMode(): SeriesHighlightingMode;
    set highlightingMode(v: SeriesHighlightingMode);
    static ngAcceptInputType_highlightingMode: SeriesHighlightingMode | string;
    /**
     * Gets or sets the selection mode to use for the series in the component, when supported.
    */
    get selectionMode(): SeriesSelectionMode;
    set selectionMode(v: SeriesSelectionMode);
    static ngAcceptInputType_selectionMode: SeriesSelectionMode | string;
    /**
     * Gets or sets the selection behavior to use for the series in the component, when supported.
    */
    get selectionBehavior(): SeriesSelectionBehavior;
    set selectionBehavior(v: SeriesSelectionBehavior);
    static ngAcceptInputType_selectionBehavior: SeriesSelectionBehavior | string;
    /**
     * Gets or sets the focus mode to use for the series in the component, when supported.
    */
    get focusMode(): SeriesSelectionMode;
    set focusMode(v: SeriesSelectionMode);
    static ngAcceptInputType_focusMode: SeriesSelectionMode | string;
    /**
     * Gets or sets the horizontal scrollbar mode to use for the series viewer.
    */
    get horizontalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set horizontalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    static ngAcceptInputType_horizontalViewScrollbarMode: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the vertical scrollbar mode to use for the series viewer.
    */
    get verticalViewScrollbarMode(): SeriesViewerScrollbarMode;
    set verticalViewScrollbarMode(v: SeriesViewerScrollbarMode);
    static ngAcceptInputType_verticalViewScrollbarMode: SeriesViewerScrollbarMode | string;
    /**
     * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarPosition(): SeriesViewerHorizontalScrollbarPosition;
    set horizontalViewScrollbarPosition(v: SeriesViewerHorizontalScrollbarPosition);
    static ngAcceptInputType_horizontalViewScrollbarPosition: SeriesViewerHorizontalScrollbarPosition | string;
    /**
     * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarPosition(): SeriesViewerVerticalScrollbarPosition;
    set verticalViewScrollbarPosition(v: SeriesViewerVerticalScrollbarPosition);
    static ngAcceptInputType_verticalViewScrollbarPosition: SeriesViewerVerticalScrollbarPosition | string;
    /**
     * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarFill(): string;
    set horizontalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarOutline(): string;
    set horizontalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarStrokeThickness(): number;
    set horizontalViewScrollbarStrokeThickness(v: number);
    static ngAcceptInputType_horizontalViewScrollbarStrokeThickness: number | string;
    /**
     * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarMaxOpacity(): number;
    set horizontalViewScrollbarMaxOpacity(v: number);
    static ngAcceptInputType_horizontalViewScrollbarMaxOpacity: number | string;
    /**
     * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarCornerRadius(): number;
    set horizontalViewScrollbarCornerRadius(v: number);
    static ngAcceptInputType_horizontalViewScrollbarCornerRadius: number | string;
    /**
     * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarHeight(): number;
    set horizontalViewScrollbarHeight(v: number);
    static ngAcceptInputType_horizontalViewScrollbarHeight: number | string;
    /**
     * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarInset(): number;
    set horizontalViewScrollbarInset(v: number);
    static ngAcceptInputType_horizontalViewScrollbarInset: number | string;
    /**
     * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackStartInset(): number;
    set horizontalViewScrollbarTrackStartInset(v: number);
    static ngAcceptInputType_horizontalViewScrollbarTrackStartInset: number | string;
    /**
     * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarTrackEndInset(): number;
    set horizontalViewScrollbarTrackEndInset(v: number);
    static ngAcceptInputType_horizontalViewScrollbarTrackEndInset: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
    */
    get horizontalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set horizontalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    static ngAcceptInputType_horizontalViewScrollbarShouldAddAutoTrackInsets: boolean | string;
    /**
     * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarFill(): string;
    set verticalViewScrollbarFill(v: string);
    /**
     * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarOutline(): string;
    set verticalViewScrollbarOutline(v: string);
    /**
     * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarStrokeThickness(): number;
    set verticalViewScrollbarStrokeThickness(v: number);
    static ngAcceptInputType_verticalViewScrollbarStrokeThickness: number | string;
    /**
     * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarMaxOpacity(): number;
    set verticalViewScrollbarMaxOpacity(v: number);
    static ngAcceptInputType_verticalViewScrollbarMaxOpacity: number | string;
    /**
     * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarCornerRadius(): number;
    set verticalViewScrollbarCornerRadius(v: number);
    static ngAcceptInputType_verticalViewScrollbarCornerRadius: number | string;
    /**
     * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarWidth(): number;
    set verticalViewScrollbarWidth(v: number);
    static ngAcceptInputType_verticalViewScrollbarWidth: number | string;
    /**
     * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarInset(): number;
    set verticalViewScrollbarInset(v: number);
    static ngAcceptInputType_verticalViewScrollbarInset: number | string;
    /**
     * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackStartInset(): number;
    set verticalViewScrollbarTrackStartInset(v: number);
    static ngAcceptInputType_verticalViewScrollbarTrackStartInset: number | string;
    /**
     * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarTrackEndInset(): number;
    set verticalViewScrollbarTrackEndInset(v: number);
    static ngAcceptInputType_verticalViewScrollbarTrackEndInset: number | string;
    /**
     * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
    */
    get verticalViewScrollbarShouldAddAutoTrackInsets(): boolean;
    set verticalViewScrollbarShouldAddAutoTrackInsets(v: boolean);
    static ngAcceptInputType_verticalViewScrollbarShouldAddAutoTrackInsets: boolean | string;
    /**
     * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
    */
    get highlightingBehavior(): SeriesHighlightingBehavior;
    set highlightingBehavior(v: SeriesHighlightingBehavior);
    static ngAcceptInputType_highlightingBehavior: SeriesHighlightingBehavior | string;
    /**
     * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
    */
    get legendHighlightingMode(): LegendHighlightingMode;
    set legendHighlightingMode(v: LegendHighlightingMode);
    static ngAcceptInputType_legendHighlightingMode: LegendHighlightingMode | string;
    /**
     * Gets or sets type of legend badges representing all series displayed in a legend linked to this component
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeShape(): LegendItemBadgeShape;
    set legendItemBadgeShape(v: LegendItemBadgeShape);
    static ngAcceptInputType_legendItemBadgeShape: LegendItemBadgeShape | string;
    /**
     * Gets or sets the mode of legend badges representing all series in this chart.
     * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
    */
    get legendItemBadgeMode(): LegendItemBadgeMode;
    set legendItemBadgeMode(v: LegendItemBadgeMode);
    static ngAcceptInputType_legendItemBadgeMode: LegendItemBadgeMode | string;
    /**
     * Gets the viewport rectangle associated with the SeriesViewer, the physical dimensions of the plot area.
    *
    * ```ts
    * let viewPortRect: IgxRect = this.chart.viewportRect;
    * ```
    */
    get viewportRect(): IgRect;
    static ngAcceptInputType_viewportRect: IgRect | string;
    /**
     * Gets the EffectiveViewport rectangle, representing the effective viewport area after margins have been subtracted.
    *
    *  ``ts
    * let viewport: IgxRect = this.chart.effectiveViewport;
    *
    * ```
    *
    * ```
    */
    get effectiveViewport(): IgRect;
    set effectiveViewport(v: IgRect);
    static ngAcceptInputType_effectiveViewport: IgRect | string;
    /**
     * Represents the subset area within the viewport into which content should be mapped.
     * This is the projection of the current EffectiveViewport into the viewport at current zoom level.
    *
    * ```ts
    * let contentViewport: IgxRect = this.chart.contentViewport;
    * ```
    */
    get contentViewport(): IgRect;
    static ngAcceptInputType_contentViewport: IgRect | string;
    /**
     * A rectangle representing the portion of the SeriesViewer currently in view.
     * A rectangle at X=0, Y=0 with a Height and Width of 1 implies the entire plotting area is in view.  A Height and Width of .5 would imply that the view is halfway zoomed in.
    *
    * You can set the `WindowRect` to zoom in on an area of interest in the chart.
    *
    * ```ts
    * this.chart.windowRect = {left:0, top:1, width: .5, height: .5};
    * ```
    */
    get windowRect(): IgRect;
    set windowRect(v: IgRect);
    static ngAcceptInputType_windowRect: IgRect | string;
    /**
     * Gets or sets whether the series viewer should use cached tiles during zooms rather than the default live content.
    */
    get useTiledZooming(): boolean;
    set useTiledZooming(v: boolean);
    static ngAcceptInputType_useTiledZooming: boolean | string;
    /**
     * Gets or sets whether the series viewer should prefer selecting higher resolution tiles over lower resolution tiles when performing tile zooming. Setting this to true will lower performance but increase quality.
    */
    get preferHigherResolutionTiles(): boolean;
    set preferHigherResolutionTiles(v: boolean);
    static ngAcceptInputType_preferHigherResolutionTiles: boolean | string;
    /**
     * Gets or sets the maximum number of zoom tiles that the series viewer should cache while in tiled zooming mode.
    */
    get zoomTileCacheSize(): number;
    set zoomTileCacheSize(v: number);
    static ngAcceptInputType_zoomTileCacheSize: number | string;
    /**
     * Gets or sets the duration the highlighting/de-highlighting effects.
    *
    * The `HighlightingTransitionDuration` property is used to set the time for highlighting transition in milliseconds .
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    * 	HighlightingTransitionDuration=500 >
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value" >
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * chart.HighlightingTransitionDuration=500;
    * ```
    */
    get highlightingTransitionDuration(): number;
    set highlightingTransitionDuration(v: number);
    static ngAcceptInputType_highlightingTransitionDuration: number | string;
    /**
     * Gets or sets the duration the selection/de-Selection effects.
    */
    get selectionTransitionDuration(): number;
    set selectionTransitionDuration(v: number);
    static ngAcceptInputType_selectionTransitionDuration: number | string;
    /**
     * Gets or sets the duration the Focus/de-Focus effects.
    */
    get focusTransitionDuration(): number;
    set focusTransitionDuration(v: number);
    static ngAcceptInputType_focusTransitionDuration: number | string;
    /**
     * Gets or sets the duration of the scrollbar effects.
    */
    get scrollbarsAnimationDuration(): number;
    set scrollbarsAnimationDuration(v: number);
    static ngAcceptInputType_scrollbarsAnimationDuration: number | string;
    /**
     * Gets or sets the whether the series viewer can allow the page to pan if a control pan is not possible in the requested direction.
    */
    get isPagePanningAllowed(): boolean;
    set isPagePanningAllowed(v: boolean);
    static ngAcceptInputType_isPagePanningAllowed: boolean | string;
    /**
     * Determines the method of hit testing used when mousing over elements in the chart.
    *
    * ```ts
    * this.chart.contentHitTestMode = ChartHitTestMode.Computational;
    * ```
    */
    get contentHitTestMode(): ChartHitTestMode;
    set contentHitTestMode(v: ChartHitTestMode);
    static ngAcceptInputType_contentHitTestMode: ChartHitTestMode | string;
    /**
     * Resolved method of hit testing used when the pointer is over elements in the chart.
    *
    * ```ts
    * let actualContentHitTestMode: ChartHitTestMode  =this.chart.actualContentHitTestMode;
    * ```
    */
    get actualContentHitTestMode(): ChartHitTestMode;
    set actualContentHitTestMode(v: ChartHitTestMode);
    static ngAcceptInputType_actualContentHitTestMode: ChartHitTestMode | string;
    /**
     * Gets or sets whether all surface interactions with the plot area should be disabled.
    *
    * The `IsSurfaceInteractionDisabled` property is used to enable/disable interactions with the plot surface.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isSurfaceInteractionDisabled=true>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * chart.isSurfaceInteractionDisabled=true;
    * ```
    */
    get isSurfaceInteractionDisabled(): boolean;
    set isSurfaceInteractionDisabled(v: boolean);
    static ngAcceptInputType_isSurfaceInteractionDisabled: boolean | string;
    /**
     * Indicates if this SeriesViewer is a map.
    */
    get isMap(): boolean;
    static ngAcceptInputType_isMap: boolean | string;
    /**
     * The response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.  The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * The `WindowResponse` property is used to set the response to user panning and zooming: whether to update the view immediately while the user action is happening, or to defer the update to after the user action is complete.
    * The user action will be an action such as a mouse drag which causes panning and/or zooming to occur.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     windowResponse="deferred">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.windowResponse="deferred";
    * ```
    */
    get windowResponse(): WindowResponse;
    set windowResponse(v: WindowResponse);
    static ngAcceptInputType_windowResponse: WindowResponse | string;
    /**
     * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    *
    * The `WindowRectMinWidth` property is used to set or get the minimum width that the window rect is allowed to reach before being clamped.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     windowRectMinWidth=.2>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.WindowRectMinWidth=".2";
    * ```
    */
    get windowRectMinWidth(): number;
    set windowRectMinWidth(v: number);
    static ngAcceptInputType_windowRectMinWidth: number | string;
    /**
     * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
    */
    get windowRectMinHeight(): number;
    set windowRectMinHeight(v: number);
    static ngAcceptInputType_windowRectMinHeight: number | string;
    /**
     * Gets the actual minimum width that the window rect is allowed to reach before being clamped.
    */
    get actualWindowRectMinWidth(): number;
    set actualWindowRectMinWidth(v: number);
    static ngAcceptInputType_actualWindowRectMinWidth: number | string;
    /**
     * Gets the actual minimum height that the window rect is allowed to reach before being clamped.
    */
    get actualWindowRectMinHeight(): number;
    set actualWindowRectMinHeight(v: number);
    static ngAcceptInputType_actualWindowRectMinHeight: number | string;
    /**
     * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinWidth property
    */
    get windowSizeMinWidth(): number;
    set windowSizeMinWidth(v: number);
    static ngAcceptInputType_windowSizeMinWidth: number | string;
    /**
     * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
     * Decrease this value if you want to allow for further zooming into the viewer.
     * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
     * This property is overridden by the WindowRectMinHeight property
    */
    get windowSizeMinHeight(): number;
    set windowSizeMinHeight(v: number);
    static ngAcceptInputType_windowSizeMinHeight: number | string;
    /**
     * Gets or sets the current SeriesViewer's crosshair visibility override.
    *
    * The `CrosshairVisibility` property is used to gets or sets the current Chart's crosshair visibility override. Note: setting this property does not affect the mobile browser version of the chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     crosshairVisibility="visible">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.crosshairVisibility = Visibility.Visible;
    * ```
    */
    get crosshairVisibility(): Visibility;
    set crosshairVisibility(v: Visibility);
    static ngAcceptInputType_crosshairVisibility: Visibility | string;
    /**
     * Gets or sets the current SeriesViewer's crosshair horizontal brush override.
    */
    get horizontalCrosshairBrush(): string;
    set horizontalCrosshairBrush(v: string);
    /**
     * Gets or sets the current SeriesViewer's crosshair vertical brush override.
    */
    get verticalCrosshairBrush(): string;
    set verticalCrosshairBrush(v: string);
    /**
     * Gets or sets zoom is constrained to within the axes. Setting this to false is a preview feature at the present time.
    */
    get zoomCoercionMode(): ZoomCoercionMode;
    set zoomCoercionMode(v: ZoomCoercionMode);
    static ngAcceptInputType_zoomCoercionMode: ZoomCoercionMode | string;
    /**
     * Gets or sets the brush used as the background for the current SeriesViewer object's plot area.
    *
    * `PlotAreaBackground` property set the background brush to the current Chart object's plot area.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     plotAreaBackground="#F0F8FF">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.plotAreaBackground="#F0F8FF";
    * ```
    */
    get plotAreaBackground(): string;
    set plotAreaBackground(v: string);
    /**
     * Gets or sets the DefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to mouse events.
    *
    * The default interaction state defines the chart's response to mouse events.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     defaultInteraction="dragPan">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.defaultInteraction = InteractionState.DragPan;
    * ```
    */
    get defaultInteraction(): InteractionState;
    set defaultInteraction(v: InteractionState);
    static ngAcceptInputType_defaultInteraction: InteractionState | string;
    /**
     * Gets or sets the RightButtonDefaultInteraction property.
     * The default interaction state defines the SeriesViewer's response to right button mouse events.
    */
    get rightButtonDefaultInteraction(): InteractionState;
    set rightButtonDefaultInteraction(v: InteractionState);
    static ngAcceptInputType_rightButtonDefaultInteraction: InteractionState | string;
    /**
     * Gets or sets the current SeriesViewer's DragModifier property.
    *
    * `DragModifier` is useful to enable zooming when zooming is not the default interaction.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     defaultInteraction="dragPan"
    *     dragModifier="alt">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.dragModifier = ModifierKeys.Alt;
    * ```
    */
    get dragModifier(): ModifierKeys;
    set dragModifier(v: ModifierKeys);
    static ngAcceptInputType_dragModifier: ModifierKeys | string;
    /**
     * Gets or sets the current SeriesViewer's PanModifier property.
    *
    * `PanModifier` is useful to enable panning when panning is not the default interaction.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     defaultInteraction="dragZoom"
    *     panModifier="alt">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.panModifier = ModifierKeys.Alt;
    * ```
    */
    get panModifier(): ModifierKeys;
    set panModifier(v: ModifierKeys);
    static ngAcceptInputType_panModifier: ModifierKeys | string;
    /**
     * Gets or sets the preview rectangle.
     * The preview rectangle may be set to Rect.Empty, in which case the visible preview
     * strokePath is hidden.
    *
    * `PreviewRect` can be used to highlight an area of importance.
    *
    * ```ts
    * this.chart.previewRect = {left:0,top:0,height:.5,width:.5};
    * ```
    */
    get previewRect(): IgRect;
    set previewRect(v: IgRect);
    static ngAcceptInputType_previewRect: IgRect | string;
    /**
     * Gets or sets whether and how to display highlighted values for the series by default. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
    */
    get highlightedValuesDisplayMode(): SeriesHighlightedValuesDisplayMode;
    set highlightedValuesDisplayMode(v: SeriesHighlightedValuesDisplayMode);
    static ngAcceptInputType_highlightedValuesDisplayMode: SeriesHighlightedValuesDisplayMode | string;
    private _selectedSeriesItems;
    /**
     * Gets the currently selected data items.  Adding or removing data items from this collection will
     * select or deselect the visuals associated with those items.
    */
    get selectedSeriesItems(): IgxChartSelectedItemCollection;
    set selectedSeriesItems(v: IgxChartSelectedItemCollection);
    static ngAcceptInputType_selectedSeriesItems: IgxChartSelectedItemCollection | string;
    private _focusedSeriesItems;
    /**
     * Gets the currently focused data items.  Adding or removing data items from this collection will
     * focus or blur the visuals associated with those items.
    */
    get focusedSeriesItems(): IgxChartSelectedItemCollection;
    set focusedSeriesItems(v: IgxChartSelectedItemCollection);
    static ngAcceptInputType_focusedSeriesItems: IgxChartSelectedItemCollection | string;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the X position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionHorizontal = .2;
    * ```
    */
    get windowPositionHorizontal(): number;
    set windowPositionHorizontal(v: number);
    static ngAcceptInputType_windowPositionHorizontal: number | string;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Y position of the WindowRect property.
    *
    * ```ts
    * this.chart.windowPositionVertical = .2;
    * ```
    */
    get windowPositionVertical(): number;
    set windowPositionVertical(v: number);
    static ngAcceptInputType_windowPositionVertical: number | string;
    /**
     * Gets or sets the selection brush to use for the series.
    */
    get selectionBrush(): string;
    set selectionBrush(v: string);
    /**
     * Gets or sets the Focus brush to use for the series.
    */
    get focusBrush(): string;
    set focusBrush(v: string);
    /**
     * Text to display above the plot area.
    *
    * The `Title` property is used to set the title to display for the component.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.title="Items Sold";
    * ```
    */
    get chartTitle(): string;
    set chartTitle(v: string);
    /**
     * Gets or sets the TitleHorizontalAlignment property.
    *
    * The `subtitleHorizontalAlignment` property is used to set horizontal alignment for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     titleHorizontalAlignment="left"
    *     subtitleHorizontalAlignment="left">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleHorizontalAlignment="left";
    * ```
    */
    get titleHorizontalAlignment(): HorizontalAlignment;
    set titleHorizontalAlignment(v: HorizontalAlignment);
    static ngAcceptInputType_titleHorizontalAlignment: HorizontalAlignment | string;
    /**
     * Gets or sets the SubtitleHorizontalAlignment property.
    *
    * The `subtitleBottomMargin` property is used to set the horizontal alignment for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="Date of Sale: 1/1/2018"
    *     titleHorizontalAlignment="left"
    *     subtitleHorizontalAlignment="left">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleHorizontalAlignment="left";
    * ```
    */
    get subtitleHorizontalAlignment(): HorizontalAlignment;
    set subtitleHorizontalAlignment(v: HorizontalAlignment);
    static ngAcceptInputType_subtitleHorizontalAlignment: HorizontalAlignment | string;
    /**
     * Font settings for the title.
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    /**
     * Font settings for the subtitle.
    */
    get subtitleTextStyle(): string;
    set subtitleTextStyle(v: string);
    /**
     * Gets or sets the Color used for the Title Text.
    *
    * The `titleTextColor` property is used to set the title brush.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     titleTextColor="blue">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleTextColor="blue" ;
    * ```
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or sets the Color used for the Subtitle Text.
    *
    * The `subtitleTextColor` property is used to set the color for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="Date of Sale: 1/1/2018"
    *     subtitleTextColor="blue">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleTextColor="blue";
    * ```
    */
    get subtitleTextColor(): string;
    set subtitleTextColor(v: string);
    /**
     * Margin applied above the title.
    *
    * The `titleTopMargin` property is used to set the top margin for the title.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     titleLeftMarging=10
    *     titleTopMargin=10
    *     titleRightMargin=10
    *     titleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleTopMargin=10;
    * ```
    */
    get titleTopMargin(): number;
    set titleTopMargin(v: number);
    static ngAcceptInputType_titleTopMargin: number | string;
    /**
     * Margin applied to the left of the title.
    *
    * The `titleLeftMarging` property is used to set the left margin for the title.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     titleLeftMarging=10
    *     titleTopMargin=10
    *     titleRightMargin=10
    *     titleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleLeftMarging=10;
    * ```
    */
    get titleLeftMargin(): number;
    set titleLeftMargin(v: number);
    static ngAcceptInputType_titleLeftMargin: number | string;
    /**
     * Margin applied to the right of the title.
    *
    * The `titleRightMargin` property is used to set the right margin for the title.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     titleLeftMarging=10
    *     titleTopMargin=10
    *     titleRightMargin=10
    *     titleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleRightMargin=10;
    * ```
    */
    get titleRightMargin(): number;
    set titleRightMargin(v: number);
    static ngAcceptInputType_titleRightMargin: number | string;
    /**
     * Margin applied below the title.
    *
    * The `titleBottomMargin` property is used to set the bottom margin for the title.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     titleLeftMarging=10
    *     titleTopMargin=10
    *     titleRightMargin=10
    *     titleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.titleBottomMargin=20;
    * ```
    */
    get titleBottomMargin(): number;
    set titleBottomMargin(v: number);
    static ngAcceptInputType_titleBottomMargin: number | string;
    /**
     * Margin applied above the subtitle.
    *
    * The `subtitleTopMargin` property is used to set the top margin for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     subtitleLeftMarging=10
    *     subtitleTopMargin=10
    *     subtitleRightMargin=10
    *     subtitleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleTopMargin =10;
    * ```
    */
    get subtitleTopMargin(): number;
    set subtitleTopMargin(v: number);
    static ngAcceptInputType_subtitleTopMargin: number | string;
    /**
     * Margin applied to the left of the subtitle.
    *
    * The `subtitleLeftMarging` property is used to set the left margin for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     subtitleLeftMarging=10
    *     subtitleTopMargin=10
    *     subtitleRightMargin=10
    *     subtitleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    */
    get subtitleLeftMargin(): number;
    set subtitleLeftMargin(v: number);
    static ngAcceptInputType_subtitleLeftMargin: number | string;
    /**
     * Margin applied to the right of the subtitle.
    *
    * The `subTitleRightMargin` property is used to set the right margin for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     subtitleLeftMarging=10
    *     subtitleTopMargin=10
    *     subTitleRightMargin=10
    *     subtitleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleLeftMarging=10;
    * ```
    */
    get subtitleRightMargin(): number;
    set subtitleRightMargin(v: number);
    static ngAcceptInputType_subtitleRightMargin: number | string;
    /**
     * Margin applied below the subtitle.
    *
    * The `subtitleBottomMargin` property is used to set the bottom margin for the subtitle.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="date of sale: 1/1/2018"
    *     subtitleLeftMarging=10
    *     subtitleTopMargin=10
    *     subtitleRightMargin=10
    *     subtitleBottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitleBottomMargin = 20;
    * ```
    */
    get subtitleBottomMargin(): number;
    set subtitleBottomMargin(v: number);
    static ngAcceptInputType_subtitleBottomMargin: number | string;
    /**
     * Gets or sets the Subtitle property.
     * The Title property defines the Subtitle of the chart
    *
    * The `Subtitle` property is used to display subtitle for the component.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     title="Items Sold"
    *     subtitle="Date of Sale: 1/1/2018">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.subtitle="Date of Sale: 1/1/2018";
    * ```
    */
    get subtitle(): string;
    set subtitle(v: string);
    /**
     * Sets or gets the top margin to use around the chart content.
    *
    * The `topMargin` property is used to set the top margin.
    *
    * ```html
    *  <igx-data-chart
    *     [dataSource]="data"
    *     leftMargin=20
    *     rightMargin=20
    *     topMargin=30
    *     bottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.topMargin=30;
    * ```
    */
    get topMargin(): number;
    set topMargin(v: number);
    static ngAcceptInputType_topMargin: number | string;
    /**
     * Sets or gets the left margin to use around the chart content.
    *
    * The `LeftMargin` property is used to set the left margin.
    *
    * ```html
    *  <igx-data-chart
    *     [dataSource]="data"
    *     leftMargin=20
    *     rightMargin=20
    *     topMargin=30
    *     bottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    *  this.chart.leftMargin = 20;
    * ```
    */
    get leftMargin(): number;
    set leftMargin(v: number);
    static ngAcceptInputType_leftMargin: number | string;
    /**
     * Sets or gets the right margin to use around the chart content.
    *
    * The `RightMargin` property is used to set the left margin around the chart content in the canvas.
    *
    * ```html
    *  <igx-data-chart
    *     [dataSource]="data"
    *     leftMargin=20
    *     rightMargin=20
    *     topMargin=30
    *     bottomMargin=20>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.rightMargin=20;
    * ```
    */
    get rightMargin(): number;
    set rightMargin(v: number);
    static ngAcceptInputType_rightMargin: number | string;
    /**
     * Sets or gets the bottom margin to use around the chart content.
    *
    * The `bottomMargin` property is used to gets/set the bottom margin around the chart content in the canvas.
    *
    * ```ts
    * this.chart.bottomMargin = 50;
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     bottomMargin=50>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get bottomMargin(): number;
    set bottomMargin(v: number);
    static ngAcceptInputType_bottomMargin: number | string;
    /**
     * Sets or gets the automatic width to add when automatically adding margins to the chart.
    *
    * The `autoMarginWidth` propertry is used find the automatic width to add when automatically adding margins to the chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     autoMarginWidth=50>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * this.chart.autoMarginWidth = 50;
    * ```
    */
    get autoMarginWidth(): number;
    set autoMarginWidth(v: number);
    static ngAcceptInputType_autoMarginWidth: number | string;
    /**
     * Sets or gets the automatic height to add when automatically adding margins to the chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     autoMarginHeight=50>
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    *  this.chart.autoMarginHeight = 50;
    * ```
    */
    get autoMarginHeight(): number;
    set autoMarginHeight(v: number);
    static ngAcceptInputType_autoMarginHeight: number | string;
    /**
     * Gets or sets the IsAntiAliasingEnabledDuringInteraction property.
    */
    get isAntiAliasingEnabledDuringInteraction(): boolean;
    set isAntiAliasingEnabledDuringInteraction(v: boolean);
    static ngAcceptInputType_isAntiAliasingEnabledDuringInteraction: boolean | string;
    /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
    get pixelScalingRatio(): number;
    set pixelScalingRatio(v: number);
    static ngAcceptInputType_pixelScalingRatio: number | string;
    /**
     * Method of pixel scaling to use during end user interaction with the chart.
    */
    get interactionPixelScalingRatio(): number;
    set interactionPixelScalingRatio(v: number);
    static ngAcceptInputType_interactionPixelScalingRatio: number | string;
    /**
     * Gets the resolved pixel scaling ratio.
    *
    * A higher scaling ratio will produce crisper visuals at the expense of memory. Lower values will cause the control to appear blurry
    *
    * ```ts
    * let actualPixelScalingRatio: number = this.chart.actualPixelScalingRatio;
    * ```
    */
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(v: number);
    static ngAcceptInputType_actualPixelScalingRatio: number | string;
    /**
     * Resolved method of pixel scaling to use during end user interaction with the chart.
    *
    * ```ts
    * let actualInteractionPixelScalingRatio: number = this.chart.actualInteractionPixelScalingRatio;
    * ```
    */
    get actualInteractionPixelScalingRatio(): number;
    set actualInteractionPixelScalingRatio(v: number);
    static ngAcceptInputType_actualInteractionPixelScalingRatio: number | string;
    /**
     * Gets or sets a whether the chart should pan its content when zooming in passed max zoom level.
    */
    get shouldPanOnMaximumZoom(): boolean;
    set shouldPanOnMaximumZoom(v: boolean);
    static ngAcceptInputType_shouldPanOnMaximumZoom: boolean | string;
    /**
     * Gets the actual value of the window rectangle, which represents the current zoom level.
    *
    * ```ts
    * let actualWindowRect: IgxRect = this.chart.actualWindowRect;
    * ``
    * ```
    */
    get actualWindowRect(): IgRect;
    set actualWindowRect(v: IgRect);
    static ngAcceptInputType_actualWindowRect: IgRect | string;
    /**
     * A number between 0 and 1 determining the position of the horizontal scroll.
     * This property is effectively a shortcut to the Left of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionHorizontal: number = this.chart.actualWindowPositionHorizontal;
    * ```
    */
    get actualWindowPositionHorizontal(): number;
    set actualWindowPositionHorizontal(v: number);
    static ngAcceptInputType_actualWindowPositionHorizontal: number | string;
    /**
     * A number between 0 and 1 determining the position of the vertical scroll.
     * This property is effectively a shortcut to the Top of the ActualWindowRect property.
    *
    * ```ts
    * let actualWindowPositionVertical: number = this.chart.actualWindowPositionVertical;
    * ``
    * ```
    */
    get actualWindowPositionVertical(): number;
    set actualWindowPositionVertical(v: number);
    static ngAcceptInputType_actualWindowPositionVertical: number | string;
    get isDetached(): boolean;
    static ngAcceptInputType_isDetached: boolean | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    getDesiredToolbarActions(): ToolActionInfo[];
    addCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(listener: ICommandAvailabilityListener): void;
    addCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(listener: ICommandStateChangedListener): void;
    /**
     * Hides the active main tooltip, if displayed.
    
    *
    * ```ts
    * this.chart.hideToolTip();
    * ```
    */
    hideToolTip(): void;
    simulateHover(point: IgPoint): void;
    queueForAnimationIdle(action: () => void, version: number): void;
    getAnimationIdleVersionNumber(): number;
    isAnimationActive(): boolean;
    /**
     * Manually starts a tiled zoom if one isn't already running.
    
    */
    startTiledZoomingIfNecessary(): void;
    /**
     * Manually ends a tiled zoom if one is running.
    
    */
    endTiledZoomingIfRunning(): void;
    /**
     * Clears the tile zoom tile cache so that new tiles will be generated. Only applies if the viewer is using a tile based zoom.
    
    */
    clearTileZoomCache(): void;
    /**
     * Performs zoom in action on the chart by specified percentage of current window rect
    
    */
    zoomIn(percentage: number): void;
    /**
     * Performs zoom out action on the chart by specified percentage of current window rect
    
    */
    zoomOut(percentage: number): void;
    /**
     * Resets the zoom level to default.
    
    */
    resetZoom(): void;
    cancelManipulation(): void;
    /**
     * Gets actual window scale for horizontal dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleHorizontal: number = chart.getActualWindowScaleHorizontal();
    * ```
    */
    getActualWindowScaleHorizontal(): number;
    /**
     * Gets actual window scale for vertical dimension of the control
    
    *
    * ```ts
    * let actualWindowScaleVertical: number = chart.getActualWindowScaleVertical();
    * ```
    */
    getActualWindowScaleVertical(): number;
    /**
     * Notification from the containing object that the container has been resized.
    
    */
    notifyContainerResized(): void;
    /**
     * Attaches the given series to the chart.
    
    * @param s  * The series to attach to the chart.
    */
    attachSeries(s: IgxSeriesComponent): void;
    notifySetItem(source_: any, index: number, oldItem: any, newItem: any): void;
    /**
     * Used to manually notify the SeriesViewer that the data source has reset or cleared its items.  Invoking this method is only necessary if that datasource is not observable.
    
    * @param source_  * The data source which was cleared or reset.
    *
    * ```ts
    * this.chart.notifyClearItems(this.data);
    * ```
    */
    notifyClearItems(source_: any): void;
    notifyInsertItem(source_: any, index: number, newItem: any): void;
    notifyRemoveItem(source_: any, index: number, oldItem: any): void;
    /**
     * Release any resources held by the control.
    
    */
    destroy(): void;
    getCurrentActualWindowRect(): IgRect;
    renderToImage(width: number, height: number): any;
    /**
     * Use to force the SeriesViewer to finish any deferred work before printing or evaluating its visual.
     * This should only be called if the visual of the SeriesViewer needs to be synchronously saved or evaluated.
     * Calling this method too often will hinder the performance of the SeriesViewer.
    
    *
    * ```ts
    * this.chart.flush();
    * ```
    */
    flush(): void;
    captureImage(settings: IgxCaptureImageSettings): void;
    private _plotAreaMouseLeftButtonDown;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    get plotAreaMouseLeftButtonDown(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseButtonEventArgs;
    }>;
    private _plotAreaMouseLeftButtonUp;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over the plot area.
    */
    get plotAreaMouseLeftButtonUp(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseButtonEventArgs;
    }>;
    private _plotAreaClicked;
    /**
     * Occurs when the left mouse button is clicked while the mouse pointer is over the plot area.
    */
    get plotAreaClicked(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseButtonEventArgs;
    }>;
    private _plotAreaMouseEnter;
    /**
     * Occurs when the pointer enters the plot area.
    */
    get plotAreaMouseEnter(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseEventArgs;
    }>;
    private _plotAreaMouseLeave;
    /**
     * Occurs when the pointer exits the plot area.
    */
    get plotAreaMouseLeave(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseEventArgs;
    }>;
    private _plotAreaMouseOver;
    /**
     * Occurs when the pointer if over the plot area.
    */
    get plotAreaMouseOver(): EventEmitter<{
        sender: any;
        args: IgxPlotAreaMouseEventArgs;
    }>;
    private _seriesCursorMouseMove;
    /**
     * Occurs when the cursors are moved over a series in this SeriesViewer.
    */
    get seriesCursorMouseMove(): EventEmitter<{
        sender: any;
        args: IgxChartCursorEventArgs;
    }>;
    private _seriesMouseLeftButtonDown;
    /**
     * Occurs when the left mouse button is pressed while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonDown` event occurs when the left mouse button is pressed while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (seriesMouseLeftButtonDown)="onSeriesMouseLeftButtonDown($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         thickness=5>
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * public onSeriesMouseLeftButtonDown(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    */
    get seriesMouseLeftButtonDown(): EventEmitter<{
        sender: any;
        args: IgxDataChartMouseButtonEventArgs;
    }>;
    private _seriesMouseLeftButtonUp;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    *
    * The `SeriesMouseLeftButtonUp` event occurs when the left mouse button is released while the mouse pointer is over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (seriesMouseLeftButtonUp)="onSeriesMouseLeftButtonUp($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         thickness=5>
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp(event: {sender: any, args: DataChartMouseButtonEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    * public onSeriesMouseLeftButtonUp =(event: any, args: DataChartMouseButtonEventArgs )
    * {
    *
    * }
    * ```
    */
    get seriesMouseLeftButtonUp(): EventEmitter<{
        sender: any;
        args: IgxDataChartMouseButtonEventArgs;
    }>;
    private _seriesClick;
    /**
     * Occurs when the left mouse button is released while the mouse pointer is over a Series.
    */
    get seriesClick(): EventEmitter<{
        sender: any;
        args: IgxDataChartMouseButtonEventArgs;
    }>;
    private _seriesMouseMove;
    /**
     * Occurs when the mouse pointer moves while over a Series.
    *
    * The `SeriesMouseMove` event occurs when the left mouse pointer moves while over an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (seriesMouseMove)="onSeriesMouseMove($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         thickness=5>
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSeriesMouseMove(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    *
    * ```ts
    * public onSeriesMouseMove =( event: any, args: ChartMouseEventArgs) => {
    *                  }
    * ```
    */
    get seriesMouseMove(): EventEmitter<{
        sender: any;
        args: IgxChartMouseEventArgs;
    }>;
    private _seriesMouseEnter;
    /**
     * Occurs when the mouse pointer enters a Series.
    *
    * The `SeriesMouseEnter` event occurs when the left mouse pointer enters an element of this chart.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (seriesMouseEnter)="onSeriesMouseEnter($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         thickness=5>
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * public onSeriesMouseEnter(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    */
    get seriesMouseEnter(): EventEmitter<{
        sender: any;
        args: IgxChartMouseEventArgs;
    }>;
    private _seriesMouseLeave;
    /**
     * Occurs when the mouse pointer leaves a Series.
    *
    * The `SeriesMouseLeave` event occurs when the left mouse pointer leaves an element of this chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (seriesMouseLeave)="onSeriesMouseLeave($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value"
    *         thickness=5>
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * public onSeriesMouseLeave(event: {sender: any, args: ChartMouseEventArgs})
    * {
    *     var item = event.args.item;
    * }
    * ```
    */
    get seriesMouseLeave(): EventEmitter<{
        sender: any;
        args: IgxChartMouseEventArgs;
    }>;
    private _viewerManipulationStarting;
    /**
     * Raised when an ongoing manipulation of the series viewer is started.
    */
    get viewerManipulationStarting(): EventEmitter<{
        sender: any;
        args: IgxSeriesViewerManipulationEventArgs;
    }>;
    private _viewerManipulationEnding;
    /**
     * Raised when an ongoing manipulation of the series viewer is ended.
    */
    get viewerManipulationEnding(): EventEmitter<{
        sender: any;
        args: IgxSeriesViewerManipulationEventArgs;
    }>;
    private _windowRectChanged;
    /**
     * Occurs just after the current SeriesViewer's window rectangle is changed.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     isHorizontalZoomEnabled=true
    *     (windowRectChanged)="onWindowRectChanged($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onWindowRectChanged(event: {sender: any, args: RectChangedEventArgs})
    * {
    *     let newRect: IgxRect = event.args.newRect;
    * }
    * ```
    *
    * ```ts
    * public onWindowRectChanged =( s:any, e: RectChangedEventArgs) => {
    *
    *        }
    * ```
    */
    get windowRectChanged(): EventEmitter<{
        sender: any;
        args: IgxRectChangedEventArgs;
    }>;
    private _sizeChanged;
    /**
     * Occurs after the size of the series viewer changes.
    *
    * &lt;-- position: content member-->
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data"
    *     (sizeChanged)="onSizeChanged($event)">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    *
    * &lt;-- position: content member-->
    *
    * ```ts
    * public onSizeChanged(event: {sender: any, args: RectChangedEventArgs})
    * {
    *     let newRect: IgxRect = event.args.newRect;
    * }
    * ```
    *
    * ```ts
    * public onSizeChanged =(event: any, args: RectChangedEventArgs}){
    *
    * }
    * ```
    */
    get sizeChanged(): EventEmitter<{
        sender: any;
        args: IgxRectChangedEventArgs;
    }>;
    private _actualWindowRectChanged;
    /**
     * Raised when the actual window rectangle of the SeriesViewer changes.
    */
    get actualWindowRectChanged(): EventEmitter<{
        sender: any;
        args: IgxRectChangedEventArgs;
    }>;
    private _gridAreaRectChanged;
    /**
     * Occurs just after the current SeriesViewer's grid area rectangle is changed.
     * The grid area may change as the result of the SeriesViewer being resized, or
     * of an axis being added or changing size, possibly in another SeriesViewer.
    */
    get gridAreaRectChanged(): EventEmitter<{
        sender: any;
        args: IgxRectChangedEventArgs;
    }>;
    private _selectedSeriesItemsChanged;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    get selectedSeriesItemsChanged(): EventEmitter<{
        sender: any;
        args: IgxSeriesViewerSelectedSeriesItemsChangedEventArgs;
    }>;
    private _focusedSeriesItemsChanged;
    /**
     * Raised when the SelectedItems collection has changed.
    */
    get focusedSeriesItemsChanged(): EventEmitter<{
        sender: any;
        args: IgxSeriesViewerSelectedSeriesItemsChangedEventArgs;
    }>;
    private _refreshCompleted;
    /**
     * Raised when the SeriesViewer's processing for an update has completed.
    */
    get refreshCompleted(): EventEmitter<{
        sender: any;
        args: IgxRefreshCompletedEventArgs;
    }>;
    private _imageCaptured;
    /**
     * Event raised when an image of the component is saved
    */
    get imageCaptured(): EventEmitter<{
        sender: any;
        args: IgxImageCapturedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxSeriesViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxSeriesViewerComponent, "ng-component", never, { "brushes": "brushes"; "outlines": "outlines"; "markerBrushes": "markerBrushes"; "markerOutlines": "markerOutlines"; "markerAutomaticBehavior": "markerAutomaticBehavior"; "crosshairPoint": "crosshairPoint"; "animateSeriesWhenAxisRangeChanges": "animateSeriesWhenAxisRangeChanges"; "isWindowSyncedToVisibleRange": "isWindowSyncedToVisibleRange"; "shouldSimulateHoverMoveCrosshairPoint": "shouldSimulateHoverMoveCrosshairPoint"; "highlightingMode": "highlightingMode"; "selectionMode": "selectionMode"; "selectionBehavior": "selectionBehavior"; "focusMode": "focusMode"; "horizontalViewScrollbarMode": "horizontalViewScrollbarMode"; "verticalViewScrollbarMode": "verticalViewScrollbarMode"; "horizontalViewScrollbarPosition": "horizontalViewScrollbarPosition"; "verticalViewScrollbarPosition": "verticalViewScrollbarPosition"; "horizontalViewScrollbarFill": "horizontalViewScrollbarFill"; "horizontalViewScrollbarOutline": "horizontalViewScrollbarOutline"; "horizontalViewScrollbarStrokeThickness": "horizontalViewScrollbarStrokeThickness"; "horizontalViewScrollbarMaxOpacity": "horizontalViewScrollbarMaxOpacity"; "horizontalViewScrollbarCornerRadius": "horizontalViewScrollbarCornerRadius"; "horizontalViewScrollbarHeight": "horizontalViewScrollbarHeight"; "horizontalViewScrollbarInset": "horizontalViewScrollbarInset"; "horizontalViewScrollbarTrackStartInset": "horizontalViewScrollbarTrackStartInset"; "horizontalViewScrollbarTrackEndInset": "horizontalViewScrollbarTrackEndInset"; "horizontalViewScrollbarShouldAddAutoTrackInsets": "horizontalViewScrollbarShouldAddAutoTrackInsets"; "verticalViewScrollbarFill": "verticalViewScrollbarFill"; "verticalViewScrollbarOutline": "verticalViewScrollbarOutline"; "verticalViewScrollbarStrokeThickness": "verticalViewScrollbarStrokeThickness"; "verticalViewScrollbarMaxOpacity": "verticalViewScrollbarMaxOpacity"; "verticalViewScrollbarCornerRadius": "verticalViewScrollbarCornerRadius"; "verticalViewScrollbarWidth": "verticalViewScrollbarWidth"; "verticalViewScrollbarInset": "verticalViewScrollbarInset"; "verticalViewScrollbarTrackStartInset": "verticalViewScrollbarTrackStartInset"; "verticalViewScrollbarTrackEndInset": "verticalViewScrollbarTrackEndInset"; "verticalViewScrollbarShouldAddAutoTrackInsets": "verticalViewScrollbarShouldAddAutoTrackInsets"; "highlightingBehavior": "highlightingBehavior"; "legendHighlightingMode": "legendHighlightingMode"; "legendItemBadgeShape": "legendItemBadgeShape"; "legendItemBadgeMode": "legendItemBadgeMode"; "effectiveViewport": "effectiveViewport"; "windowRect": "windowRect"; "useTiledZooming": "useTiledZooming"; "preferHigherResolutionTiles": "preferHigherResolutionTiles"; "zoomTileCacheSize": "zoomTileCacheSize"; "highlightingTransitionDuration": "highlightingTransitionDuration"; "selectionTransitionDuration": "selectionTransitionDuration"; "focusTransitionDuration": "focusTransitionDuration"; "scrollbarsAnimationDuration": "scrollbarsAnimationDuration"; "isPagePanningAllowed": "isPagePanningAllowed"; "contentHitTestMode": "contentHitTestMode"; "actualContentHitTestMode": "actualContentHitTestMode"; "isSurfaceInteractionDisabled": "isSurfaceInteractionDisabled"; "windowResponse": "windowResponse"; "windowRectMinWidth": "windowRectMinWidth"; "windowRectMinHeight": "windowRectMinHeight"; "actualWindowRectMinWidth": "actualWindowRectMinWidth"; "actualWindowRectMinHeight": "actualWindowRectMinHeight"; "windowSizeMinWidth": "windowSizeMinWidth"; "windowSizeMinHeight": "windowSizeMinHeight"; "crosshairVisibility": "crosshairVisibility"; "horizontalCrosshairBrush": "horizontalCrosshairBrush"; "verticalCrosshairBrush": "verticalCrosshairBrush"; "zoomCoercionMode": "zoomCoercionMode"; "plotAreaBackground": "plotAreaBackground"; "defaultInteraction": "defaultInteraction"; "rightButtonDefaultInteraction": "rightButtonDefaultInteraction"; "dragModifier": "dragModifier"; "panModifier": "panModifier"; "previewRect": "previewRect"; "highlightedValuesDisplayMode": "highlightedValuesDisplayMode"; "selectedSeriesItems": "selectedSeriesItems"; "focusedSeriesItems": "focusedSeriesItems"; "windowPositionHorizontal": "windowPositionHorizontal"; "windowPositionVertical": "windowPositionVertical"; "selectionBrush": "selectionBrush"; "focusBrush": "focusBrush"; "chartTitle": "chartTitle"; "titleHorizontalAlignment": "titleHorizontalAlignment"; "subtitleHorizontalAlignment": "subtitleHorizontalAlignment"; "titleTextStyle": "titleTextStyle"; "subtitleTextStyle": "subtitleTextStyle"; "titleTextColor": "titleTextColor"; "subtitleTextColor": "subtitleTextColor"; "titleTopMargin": "titleTopMargin"; "titleLeftMargin": "titleLeftMargin"; "titleRightMargin": "titleRightMargin"; "titleBottomMargin": "titleBottomMargin"; "subtitleTopMargin": "subtitleTopMargin"; "subtitleLeftMargin": "subtitleLeftMargin"; "subtitleRightMargin": "subtitleRightMargin"; "subtitleBottomMargin": "subtitleBottomMargin"; "subtitle": "subtitle"; "topMargin": "topMargin"; "leftMargin": "leftMargin"; "rightMargin": "rightMargin"; "bottomMargin": "bottomMargin"; "autoMarginWidth": "autoMarginWidth"; "autoMarginHeight": "autoMarginHeight"; "isAntiAliasingEnabledDuringInteraction": "isAntiAliasingEnabledDuringInteraction"; "pixelScalingRatio": "pixelScalingRatio"; "interactionPixelScalingRatio": "interactionPixelScalingRatio"; "actualPixelScalingRatio": "actualPixelScalingRatio"; "actualInteractionPixelScalingRatio": "actualInteractionPixelScalingRatio"; "shouldPanOnMaximumZoom": "shouldPanOnMaximumZoom"; "actualWindowRect": "actualWindowRect"; "actualWindowPositionHorizontal": "actualWindowPositionHorizontal"; "actualWindowPositionVertical": "actualWindowPositionVertical"; }, { "plotAreaMouseLeftButtonDown": "plotAreaMouseLeftButtonDown"; "plotAreaMouseLeftButtonUp": "plotAreaMouseLeftButtonUp"; "plotAreaClicked": "plotAreaClicked"; "plotAreaMouseEnter": "plotAreaMouseEnter"; "plotAreaMouseLeave": "plotAreaMouseLeave"; "plotAreaMouseOver": "plotAreaMouseOver"; "seriesCursorMouseMove": "seriesCursorMouseMove"; "seriesMouseLeftButtonDown": "seriesMouseLeftButtonDown"; "seriesMouseLeftButtonUp": "seriesMouseLeftButtonUp"; "seriesClick": "seriesClick"; "seriesMouseMove": "seriesMouseMove"; "seriesMouseEnter": "seriesMouseEnter"; "seriesMouseLeave": "seriesMouseLeave"; "viewerManipulationStarting": "viewerManipulationStarting"; "viewerManipulationEnding": "viewerManipulationEnding"; "windowRectChanged": "windowRectChanged"; "sizeChanged": "sizeChanged"; "actualWindowRectChanged": "actualWindowRectChanged"; "gridAreaRectChanged": "gridAreaRectChanged"; "selectedSeriesItemsChanged": "selectedSeriesItemsChanged"; "focusedSeriesItemsChanged": "focusedSeriesItemsChanged"; "refreshCompleted": "refreshCompleted"; "imageCaptured": "imageCaptured"; }, never, never>;
}
