import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-angular-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { DataSeriesType } from "igniteui-angular-core";
import { IDataSeriesAdapterRule } from "igniteui-angular-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-angular-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected ux(): void;
    protected uz(a: Series, b: number): void;
    protected vo(a: string, b: any, c: any): void;
    private ai2;
    get ai5(): number;
    set ai5(a: number);
    private ai3;
    get ai6(): number;
    set ai6(a: number);
    private ag5;
    get ag7(): (time: number) => number;
    set ag7(a: (time: number) => number);
    private ag6;
    get ag8(): (time: number) => number;
    set ag8(a: (time: number) => number);
    ajc(): string;
    protected us(a: XamDataChart, b: any): void;
    protected uy(a: Series, b: number): void;
    private agv;
    private agz;
    protected t9(): void;
    protected aet(a: Axis): void;
    protected aer(a: Axis): void;
    protected get_cf(): DomainType;
    get cf(): DomainType;
    private agp;
    get agq(): CategoryChartType;
    set agq(a: CategoryChartType);
    private agr;
    get ags(): CategorySeriesMarkerCollisionAvoidance;
    set ags(a: CategorySeriesMarkerCollisionAvoidance);
    private ahb;
    get ahm(): boolean;
    set ahm(a: boolean);
    private ahc;
    get ahn(): boolean;
    set ahn(a: boolean);
    private agt;
    get agu(): CategoryTransitionInMode;
    set agu(a: CategoryTransitionInMode);
    private ag3;
    get ag4(): TransitionInSpeedType;
    set ag4(a: TransitionInSpeedType);
    private ahz;
    get aim(): number;
    set aim(a: number);
    private ah2;
    get aip(): number;
    set aip(a: number);
    private ahy;
    get ail(): number;
    set ail(a: number);
    private ah1;
    get aio(): number;
    set aio(a: number);
    private ah0;
    get ain(): number;
    set ain(a: number);
    private ah3;
    get aiq(): number;
    set aiq(a: number);
    private ah9;
    get aiy(): number;
    set aiy(a: number);
    private agl;
    get agm(): AutoMarginsAndAngleUpdateMode;
    set agm(a: AutoMarginsAndAngleUpdateMode);
    private ahd;
    aki(): void;
    get aho(): boolean;
    set aho(a: boolean);
    protected static readonly ajl: string;
    private ahe;
    get ahp(): boolean;
    set ahp(a: boolean);
    private ahw;
    get aid(): number;
    set aid(a: number);
    private ahx;
    get aie(): number;
    set aie(a: number);
    private ahi;
    get aht(): boolean;
    set aht(a: boolean);
    private static readonly ajs;
    private ahf;
    get ahq(): boolean;
    set ahq(a: boolean);
    private static readonly aj6;
    private ahh;
    get ahs(): boolean;
    set ahs(a: boolean);
    private agn;
    get ago(): AxisRangeBufferMode;
    set ago(a: AxisRangeBufferMode);
    private ahj;
    get ahu(): boolean;
    set ahu(a: boolean);
    private ai4;
    get ai7(): number;
    set ai7(a: number);
    private aib;
    get ai0(): number;
    set ai0(a: number);
    private aia;
    get aiz(): number;
    set aiz(a: number);
    private aic;
    get ai1(): number;
    set ai1(a: number);
    get aik(): number;
    get aij(): number;
    aig(): number;
    aii(): number;
    aif(): number;
    aih(): number;
    get aix(): number;
    get aiw(): number;
    private agh;
    get agj(): BrushCollection;
    set agj(a: BrushCollection);
    private agi;
    get agk(): BrushCollection;
    set agk(a: BrushCollection);
    private ahg;
    get ahr(): boolean;
    set ahr(a: boolean);
    private ah4;
    get air(): number;
    set air(a: number);
    private ah5;
    get ais(): number;
    set ais(a: number);
    private ah6;
    get ait(): number;
    set ait(a: number);
    private ah7;
    get aiu(): number;
    set aiu(a: number);
    private ah8;
    get aiv(): number;
    set aiv(a: number);
    private ag9;
    get ahk(): boolean;
    set ahk(a: boolean);
    private aha;
    get ahl(): boolean;
    set ahl(a: boolean);
    constructor();
    protected get_hy(): List$1<DataSeriesType>;
    protected get hy(): List$1<DataSeriesType>;
    private ahv;
    protected h4(): IEnumerable;
    protected c5(a: Series): MarkerType;
    protected c7(a: Series): MarkerType;
    protected get_hj(): boolean;
    private akg;
    private akh;
    protected wg(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private agy;
    private agx;
    protected bi(a: DataSeries): DataSeriesType;
    protected dg(a: DataSeries, b: DataSeriesType): Series;
    protected we(a: DataSeries): void;
    protected wh(): void;
    protected get_hx(): List$1<IDataSeriesAdapterRule>;
    protected get hx(): List$1<IDataSeriesAdapterRule>;
    protected t3(a: Series, b: number): void;
    private ake;
    private akf;
    protected zk(): Axis;
    protected zl(): Axis;
    private ag1;
    private ag2;
    protected hu(a: string, b: boolean): List$1<Series>;
    protected bd(): ComputedPlotAreaMarginMode;
    protected wm(a: Series, b: Series, c: DataSeries): void;
    protected g4(): boolean;
    protected get_hb(): boolean;
    protected vl(a: string, b: any, c: any): void;
}
