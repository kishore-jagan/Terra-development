import { IgxSeriesComponent } from "./igx-series-component";
import { FinalValueSelectionMode } from "./FinalValueSelectionMode";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { FinalValueLayer } from "./FinalValueLayer";
import * as i0 from "@angular/core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export declare class IgxFinalValueLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): FinalValueLayer;
    /**
                                 * @hidden
                                 */
    get i(): FinalValueLayer;
    constructor();
    /**
     * Gets whether the series is final value annotation layer.
    */
    get isAnnotationFinalValue(): boolean;
    static ngAcceptInputType_isAnnotationFinalValue: boolean | string;
    /**
     * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeriesName(): string;
    set targetSeriesName(v: string);
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeries(): IgxSeriesComponent;
    set targetSeries(v: IgxSeriesComponent);
    /**
     * Gets or sets how to select the final value to annotate.
    */
    get finalValueSelectionMode(): FinalValueSelectionMode;
    set finalValueSelectionMode(v: FinalValueSelectionMode);
    static ngAcceptInputType_finalValueSelectionMode: FinalValueSelectionMode | string;
    /**
     * Gets or sets the color to use for the axis annotation text. Leave unset for an automatic value.
    */
    get axisAnnotationTextColor(): string;
    set axisAnnotationTextColor(v: string);
    /**
     * Gets or sets the color to use for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationBackground(): string;
    set axisAnnotationBackground(v: string);
    /**
     * Gets or sets the corner radius to use for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationBackgroundCornerRadius(): number;
    set axisAnnotationBackgroundCornerRadius(v: number);
    static ngAcceptInputType_axisAnnotationBackgroundCornerRadius: number | string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get axisAnnotationInterpolatedValuePrecision(): number;
    set axisAnnotationInterpolatedValuePrecision(v: number);
    static ngAcceptInputType_axisAnnotationInterpolatedValuePrecision: number | string;
    /**
     * Gets or sets the color to use for the axis annotation outline. Leave unset for an automatic value.
    */
    get axisAnnotationOutline(): string;
    set axisAnnotationOutline(v: string);
    /**
     * Gets or sets the left padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingLeft(): number;
    set axisAnnotationPaddingLeft(v: number);
    static ngAcceptInputType_axisAnnotationPaddingLeft: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingTop(): number;
    set axisAnnotationPaddingTop(v: number);
    static ngAcceptInputType_axisAnnotationPaddingTop: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingRight(): number;
    set axisAnnotationPaddingRight(v: number);
    static ngAcceptInputType_axisAnnotationPaddingRight: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get axisAnnotationPaddingBottom(): number;
    set axisAnnotationPaddingBottom(v: number);
    static ngAcceptInputType_axisAnnotationPaddingBottom: number | string;
    /**
     * Gets or sets the stroke thickness for the axis annotation backing. Leave unset for an automatic value.
    */
    get axisAnnotationStrokeThickness(): number;
    set axisAnnotationStrokeThickness(v: number);
    static ngAcceptInputType_axisAnnotationStrokeThickness: number | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxFinalValueLayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxFinalValueLayerComponent, "igx-final-value-layer", never, { "targetSeriesName": "targetSeriesName"; "targetSeries": "targetSeries"; "finalValueSelectionMode": "finalValueSelectionMode"; "axisAnnotationTextColor": "axisAnnotationTextColor"; "axisAnnotationBackground": "axisAnnotationBackground"; "axisAnnotationBackgroundCornerRadius": "axisAnnotationBackgroundCornerRadius"; "axisAnnotationInterpolatedValuePrecision": "axisAnnotationInterpolatedValuePrecision"; "axisAnnotationOutline": "axisAnnotationOutline"; "axisAnnotationPaddingLeft": "axisAnnotationPaddingLeft"; "axisAnnotationPaddingTop": "axisAnnotationPaddingTop"; "axisAnnotationPaddingRight": "axisAnnotationPaddingRight"; "axisAnnotationPaddingBottom": "axisAnnotationPaddingBottom"; "axisAnnotationStrokeThickness": "axisAnnotationStrokeThickness"; }, {}, never, never>;
}
