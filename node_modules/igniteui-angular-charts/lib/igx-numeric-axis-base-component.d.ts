import { EventEmitter } from '@angular/core';
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericAxisBase } from "./NumericAxisBase";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent numeric axes.
*/
export declare abstract class IgxNumericAxisBaseComponent extends IgxAxisComponent {
    /**
                                 * @hidden
                                 */
    get i(): NumericAxisBase;
    constructor();
    /**
     * Gets or sets if the current axis is of numeric axis type
    */
    get isNumeric(): boolean;
    static ngAcceptInputType_isNumeric: boolean | string;
    /**
     * Gets or sets how the numeric axis will adjust its range buffer to less closely fix the data from the series.
    */
    get autoRangeBufferMode(): AxisRangeBufferMode;
    set autoRangeBufferMode(v: AxisRangeBufferMode);
    static ngAcceptInputType_autoRangeBufferMode: AxisRangeBufferMode | string;
    /**
     * Gets or sets the MinimumValue property.
    *
    * Used to set the minimum value of a numeric axis. To get the minimum value in effect on a numeric axis use `ActualMinimumValue`.
    *
    * ```ts
    * this.yAxis.minimumValue = 0;
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         minimumValue=0
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get minimumValue(): number;
    set minimumValue(v: number);
    static ngAcceptInputType_minimumValue: number | string;
    /**
     * Gets the effective minimum value for the current numeric axis object.
    *
    * ```ts
    * let effectiveMinValue: number = yAxis.actualMinimumValue;
    * ```
    */
    get actualMinimumValue(): number;
    set actualMinimumValue(v: number);
    static ngAcceptInputType_actualMinimumValue: number | string;
    /**
     * Gets the effective minimum value for the current numeric axis object.
    *
    * The `actualVisibleMinimumValue` is used to get the current visible maximum value for the a numeric axis. Note, at times the `actualVisibleMinimumValue` may differ from the `actualMinimumValue`, for example when the chart is zoomed.
    *
    * ```ts
    * let effectiveVisibleMinValue: number = yAxis.actualVisibleMinimumValue;
    * ```
    */
    get actualVisibleMinimumValue(): number;
    set actualVisibleMinimumValue(v: number);
    static ngAcceptInputType_actualVisibleMinimumValue: number | string;
    /**
     * Gets or sets the MaximumValue property.
    *
    * Used to set the maximum value of a numeric axis. To get the maximum value in effect on a numeric axis use `ActualMaximumValue`.
    *
    * ```ts
    * this.yAxis.maximumValue = 80;
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         maximumValue=80
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-line-series>
    * </igx-data-chart>
    * ```
    */
    get maximumValue(): number;
    set maximumValue(v: number);
    static ngAcceptInputType_maximumValue: number | string;
    /**
     * Gets the effective maximum value for the current numeric axis object.
    *
    * ```ts
    * let effectiveMaxValue: number = yAxis.actualMaximumValue;
    * ```
    */
    get actualMaximumValue(): number;
    set actualMaximumValue(v: number);
    static ngAcceptInputType_actualMaximumValue: number | string;
    /**
     * Gets the effective visible maximum value for the current numeric axis object.
    *
    * The `ActualVisibleMaximumValue` is used to get the current visible maximum value for the a numeric axis. Note, at times the `ActualVisibleMaximumValue` may differ from the `ActualMaximumValue`, for example when the chart is zoomed.
    *
    * ```ts
    * let effectiveVisibleMaxValue: number = yAxis.actualVisibleMaximumValue;
    * ```
    */
    get actualVisibleMaximumValue(): number;
    set actualVisibleMaximumValue(v: number);
    static ngAcceptInputType_actualVisibleMaximumValue: number | string;
    /**
     * Gets or sets the Interval property.
    *
    * The `Interval` is used to get or set the numeric axis major interval which specifies how frequent major gridlines and axis labels are rendered on an axis.
    *
    * ```ts
    * this.yAxis.interval = 20;
    * ```
    *
    * ```html
    * <igx-data-chart
    *       [dataSource]="data">
    *       <igx-category-x-axis
    *         label="label"
    *         #xAxis
    *         >
    *       </igx-category-x-axis>
    *       <igx-numeric-y-axis
    *         interval="20"
    *         #yAxis>
    *       </igx-numeric-y-axis>
    *
    *       <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *       </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get interval(): number;
    set interval(v: number);
    static ngAcceptInputType_interval: number | string;
    /**
     * Gets the effective value for the current Interval.
    *
    * ```ts
    * let effectiveInterval: number = yAxis.actualInterval;
    * ```
    */
    get actualInterval(): number;
    set actualInterval(v: number);
    static ngAcceptInputType_actualInterval: number | string;
    /**
     * Gets or sets the MinorInterval property.
    *
    * The `MinorInterval` is used to get or set the numeric axis minor interval which specifies how frequent minor gridlines are rendered on an axis. Please note, in order for minor gridlines to be displayed the following may also need to be set: `MinorStroke`, `MinorStrokeThickness`.
    *
    * ```ts
    * this.yAxis.minorInterval = 2.5;
    * this.yAxis.minorStroke = 'blue';
    * this.yAxis.minorStrokeThickness = 1;
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         minorInterval= 2.5
    *         minorStroke="blue"
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get minorInterval(): number;
    set minorInterval(v: number);
    static ngAcceptInputType_minorInterval: number | string;
    /**
     * Gets the effective value for the current MinorInterval.
    *
    * ```ts
    * let effectiveMinorInterval: number = yAxis.actualMinorInterval;
    * ```
    */
    get actualMinorInterval(): number;
    set actualMinorInterval(v: number);
    static ngAcceptInputType_actualMinorInterval: number | string;
    /**
     * Gets or sets the ReferenceValue property.
    *
    * Used to get or set a reference value on a numeric axis which when used with an area, bar, or column series will result in the series shapes being drawn above or below the specified value.
    *
    * ```ts
    * this.yAxis.referenceValue = 30;
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    *         referenceValue=30
    *         #yAxis>
    *     </igx-numeric-y-axis>
    *     <igx-column-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *     </igx-column-series>
    * </igx-data-chart>
    * ```
    */
    get referenceValue(): number;
    set referenceValue(v: number);
    static ngAcceptInputType_referenceValue: number | string;
    /**
     * Gets or sets the IsLogarithmic property.
    *
    * `IsLogarithmic` is used to get or set whether the numeric axis scaler is in linear or logarithmic mode. For logarithmic scaling, this can be used in conjunction with `LogarithmBase` to further define the logarithmic scale.
    *
    * ```ts
    * this.yAxis.isLogarithmic= true;
    * this.yAxis.logarithmBase = 2;
    * ```
    *
    * ```html
    * <igx-data-chart
    *       [dataSource]="data">
    *       <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *       </igx-category-x-axis>
    *       <igx-numeric-y-axis
    *         isLogarithmic=true
    *         logarithmBase=2
    *         #yAxis>
    *       </igx-numeric-y-axis>
    *       <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *       </igx-line-series>
    * </igx-data-chart>
    * ```
    */
    get isLogarithmic(): boolean;
    set isLogarithmic(v: boolean);
    static ngAcceptInputType_isLogarithmic: boolean | string;
    /**
     * Determines if the axis has a valid logarithmic scale.
    *
    * ```ts
    * let effectiveLogarithmic: boolean = this.yAxis.actualIsLogarithmic
    * ```
    */
    get actualIsLogarithmic(): boolean;
    set actualIsLogarithmic(v: boolean);
    static ngAcceptInputType_actualIsLogarithmic: boolean | string;
    /**
     * Gets or sets whether the axis should favor emitting a label at the end of the scale.
    */
    get favorLabellingScaleEnd(): boolean;
    set favorLabellingScaleEnd(v: boolean);
    static ngAcceptInputType_favorLabellingScaleEnd: boolean | string;
    /**
     * Gets or sets the LogarithmBase property.
    *
    * `LogarithmBase` is used to get or set logarithm base when a numeric axis is in Logarithmic scale mode. For logarithmic scaling, this is used in conjunction with `IsLogarithmic` or `ScaleMode` to set logarithmic scaling.
    *
    * ```ts
    * this.yAxis.scaleMode = NumericScaleMode.Logarithmic;
    * this.yAxis.logarithmBase = 2;
    * ```
    *
    * ```html
    * <igx-data-chart
    *       [dataSource]="data">
    *       <igx-category-x-axis
    *         label="label"
    *         #xAxis>
    *       </igx-category-x-axis>
    *       <igx-numeric-y-axis
    *         scaleMode="Logarithmic"
    *         logarithmBase=2
    *         #yAxis>
    *       </igx-numeric-y-axis>
    *       <igx-line-series
    *         [xAxis]="xAxis"
    *         [yAxis]="yAxis"
    *         valueMemberPath="value">
    *       </igx-line-series>
    * </igx-data-chart>
    * ```
    */
    get logarithmBase(): number;
    set logarithmBase(v: number);
    static ngAcceptInputType_logarithmBase: number | string;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
    */
    get formatAbbreviatedLabel(): (item: any) => string;
    set formatAbbreviatedLabel(v: (item: any) => string);
    /**
     * Gets or sets the label format string to use for the label.
    */
    get abbreviatedLabelFormat(): string;
    set abbreviatedLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the AbbreviatedLabelFormat string.
    */
    get abbreviatedLabelFormatSpecifiers(): any[];
    set abbreviatedLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_abbreviatedLabelFormatSpecifiers: any[] | string;
    get isFormattingAbbreviatedLargeNumber(): boolean;
    set isFormattingAbbreviatedLargeNumber(v: boolean);
    static ngAcceptInputType_isFormattingAbbreviatedLargeNumber: boolean | string;
    /**
     * Determines if the axis has a user-defined minimum.
    *
    *  `HasUserMaximum` is used to determine if a numeric axis has a user definied maximum value.
    *
    * ```ts
    * let hasSetMaximum: boolean = this.yAxis.hasUserMaximum;
    * ```
    */
    get hasUserMinimum(): boolean;
    static ngAcceptInputType_hasUserMinimum: boolean | string;
    /**
     * Determines if the axis has a user-defined maximum.
    *
    *  `HasUserMinimum` is used to determine if a numeric axis has a user definied minium value.
    *
    * ```ts
    * let hasSetMinimum: boolean = this.yAxis.hasUserMinimum;
    * ```
    */
    get hasUserMaximum(): boolean;
    static ngAcceptInputType_hasUserMaximum: boolean | string;
    /**
     * A boolean indicating whether or not to abbreviate large numbers.
    */
    get abbreviateLargeNumbers(): boolean;
    set abbreviateLargeNumbers(v: boolean);
    static ngAcceptInputType_abbreviateLargeNumbers: boolean | string;
    findByName(name: string): any;
    getFullRange(): number[];
    /**
     * Unscales a value from screen space into axis space.
    
    * @param unscaledValue  * The scaled value in screen coordinates to unscale into axis space.
    *
    * Unscales a value from screen space into axis space.
    *
    * ```ts
    * let dataValue: number = this.yAxis.unscaleValue(pixel);
    * ```
    */
    unscaleValue(unscaledValue: number): number;
    private _actualMinimumValueChange;
    get actualMinimumValueChange(): EventEmitter<number>;
    private _actualMaximumValueChange;
    get actualMaximumValueChange(): EventEmitter<number>;
    private _actualIntervalChange;
    get actualIntervalChange(): EventEmitter<number>;
    private _actualMinorIntervalChange;
    get actualMinorIntervalChange(): EventEmitter<number>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxNumericAxisBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxNumericAxisBaseComponent, "ng-component", never, { "autoRangeBufferMode": "autoRangeBufferMode"; "minimumValue": "minimumValue"; "actualMinimumValue": "actualMinimumValue"; "actualVisibleMinimumValue": "actualVisibleMinimumValue"; "maximumValue": "maximumValue"; "actualMaximumValue": "actualMaximumValue"; "actualVisibleMaximumValue": "actualVisibleMaximumValue"; "interval": "interval"; "actualInterval": "actualInterval"; "minorInterval": "minorInterval"; "actualMinorInterval": "actualMinorInterval"; "referenceValue": "referenceValue"; "isLogarithmic": "isLogarithmic"; "actualIsLogarithmic": "actualIsLogarithmic"; "favorLabellingScaleEnd": "favorLabellingScaleEnd"; "logarithmBase": "logarithmBase"; "formatAbbreviatedLabel": "formatAbbreviatedLabel"; "abbreviatedLabelFormat": "abbreviatedLabelFormat"; "abbreviatedLabelFormatSpecifiers": "abbreviatedLabelFormatSpecifiers"; "isFormattingAbbreviatedLargeNumber": "isFormattingAbbreviatedLargeNumber"; "abbreviateLargeNumbers": "abbreviateLargeNumbers"; }, { "actualMinimumValueChange": "actualMinimumValueChange"; "actualMaximumValueChange": "actualMaximumValueChange"; "actualIntervalChange": "actualIntervalChange"; "actualMinorIntervalChange": "actualMinorIntervalChange"; }, never, never>;
}
