import { PieChartSweepDirection } from "./PieChartSweepDirection";
import { CalloutCollisionMode } from "igniteui-angular-core";
import { OthersCategoryType } from "igniteui-angular-core";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { RadialLabelMode } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { IgxRadialBaseChartComponent } from "./igx-radial-base-chart-component";
import { DataPieBaseChart } from "./DataPieBaseChart";
import * as i0 from "@angular/core";
/**
 * Represents a base class for PieBase chart control that can plot scatter data
*/
export declare abstract class IgxDataPieBaseChartComponent extends IgxRadialBaseChartComponent {
    /**
                                 * @hidden
                                 */
    get i(): DataPieBaseChart;
    constructor();
    /**
     * Gets or sets the label format for the slices.
    */
    get sliceLabelFormat(): string;
    set sliceLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the labels for the slices.
    */
    get sliceLabelFormatSpecifiers(): any[];
    set sliceLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_sliceLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the label format for the LegendSlices.
    */
    get legendSliceLabelFormat(): string;
    set legendSliceLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the labels for the LegendSlices.
    */
    get legendSliceLabelFormatSpecifiers(): any[];
    set legendSliceLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_legendSliceLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the label format for the OthersSlices.
    */
    get othersSliceLabelFormat(): string;
    set othersSliceLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the labels for the OthersSlices.
    */
    get othersSliceLabelFormatSpecifiers(): any[];
    set othersSliceLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_othersSliceLabelFormatSpecifiers: any[] | string;
    /**
     * Gets or sets the label format for the LegendOthersSlices.
    */
    get legendOthersSliceLabelFormat(): string;
    set legendOthersSliceLabelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the labels for the LegendOthersSlices.
    */
    get legendOthersSliceLabelFormatSpecifiers(): any[];
    set legendOthersSliceLabelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_legendOthersSliceLabelFormatSpecifiers: any[] | string;
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get innerExtent(): number;
    set innerExtent(v: number);
    static ngAcceptInputType_innerExtent: number | string;
    /**
     * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
     * a value between 0.0 and 1.0.
    */
    get sweepDirection(): PieChartSweepDirection;
    set sweepDirection(v: PieChartSweepDirection);
    static ngAcceptInputType_sweepDirection: PieChartSweepDirection | string;
    /**
     * Defines the positioning mode of the slice labels for the pie chart.
    */
    get sliceLabelPositionMode(): CalloutCollisionMode;
    set sliceLabelPositionMode(v: CalloutCollisionMode);
    static ngAcceptInputType_sliceLabelPositionMode: CalloutCollisionMode | string;
    /**
     * Gets or sets the light color to use for slice labels.
    */
    get lightSliceLabelColor(): string;
    set lightSliceLabelColor(v: string);
    /**
     * Gets or sets the Dark color to use for slice labels.
    */
    get darkSliceLabelColor(): string;
    set darkSliceLabelColor(v: string);
    /**
     * Gets or sets the overridden value member path to use.
    */
    get valueMemberPath(): string;
    set valueMemberPath(v: string);
    /**
     * Gets or sets the legend label member path to use.
    */
    get legendLabelMemberPath(): string;
    set legendLabelMemberPath(v: string);
    /**
     * Gets or sets whether to use numeric or percent-based threshold value.
    */
    get othersCategoryType(): OthersCategoryType;
    set othersCategoryType(v: OthersCategoryType);
    static ngAcceptInputType_othersCategoryType: OthersCategoryType | string;
    /**
     * Gets or sets the threshold value that determines if slices are grouped into the Others slice.
    */
    get othersCategoryThreshold(): number;
    set othersCategoryThreshold(v: number);
    static ngAcceptInputType_othersCategoryThreshold: number | string;
    /**
     * Gets or sets the label of the Others slice.
    */
    get othersCategoryText(): string;
    set othersCategoryText(v: string);
    /**
     * Gets or sets the overridden value member path to use.
    */
    get labelMemberPath(): string;
    set labelMemberPath(v: string);
    /**
     * Gets or sets whether the axis should favor emitting a label at the end of the scale.
    */
    get valueAxisFavorLabellingScaleEnd(): boolean;
    set valueAxisFavorLabellingScaleEnd(v: boolean);
    static ngAcceptInputType_valueAxisFavorLabellingScaleEnd: boolean | string;
    /**
     * Gets or sets how the numeric axis will adjust its range buffer to less closely fix the data from the series.
    */
    get valueAxisAutoRangeBufferMode(): AxisRangeBufferMode;
    set valueAxisAutoRangeBufferMode(v: AxisRangeBufferMode);
    static ngAcceptInputType_valueAxisAutoRangeBufferMode: AxisRangeBufferMode | string;
    /**
     * Gets or sets the frequency of displayed labels along the X-axis.
     * Gets or sets the set value is a factor that determines which labels will be hidden. For example, an interval of 2 will display every other label.
    */
    get angleAxisInterval(): number;
    set angleAxisInterval(v: number);
    static ngAcceptInputType_angleAxisInterval: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines along the X-axis.
     * Gets or sets the set value is a factor that determines how the minor lines will be displayed.
    */
    get angleAxisMinorInterval(): number;
    set angleAxisMinorInterval(v: number);
    static ngAcceptInputType_angleAxisMinorInterval: number | string;
    /**
     * Gets or sets the distance between each label and grid line along the Y-axis.
    */
    get valueAxisInterval(): number;
    set valueAxisInterval(v: number);
    static ngAcceptInputType_valueAxisInterval: number | string;
    /**
     * Gets or sets whether the Y-axis should use a logarithmic scale instead of a linear one.
     * Since log(-1) is imaginary and log(0) is undefined, it is recommended to enable this property only when the Y-axis minimum is greater than zero.
    */
    get valueAxisIsLogarithmic(): boolean;
    set valueAxisIsLogarithmic(v: boolean);
    static ngAcceptInputType_valueAxisIsLogarithmic: boolean | string;
    /**
     * Gets or sets the base value to use in the log function when mapping the position of data items along the Y-axis.
     * This property is effective only when ValueAxisIsLogarithmic is true.
    */
    get valueAxisLogarithmBase(): number;
    set valueAxisLogarithmBase(v: number);
    static ngAcceptInputType_valueAxisLogarithmBase: number | string;
    /**
     * Gets or sets the data value corresponding to the minimum value of the Y-axis.
    */
    get valueAxisMinimumValue(): number;
    set valueAxisMinimumValue(v: number);
    static ngAcceptInputType_valueAxisMinimumValue: number | string;
    /**
     * Gets or sets the data value corresponding to the maximum value of the Y-axis.
    */
    get valueAxisMaximumValue(): number;
    set valueAxisMaximumValue(v: number);
    static ngAcceptInputType_valueAxisMaximumValue: number | string;
    /**
     * Gets or sets the frequency of displayed minor lines along the Y-axis.
    */
    get valueAxisMinorInterval(): number;
    set valueAxisMinorInterval(v: number);
    static ngAcceptInputType_valueAxisMinorInterval: number | string;
    /**
     * Gets the current minimum value for the Y-axis.
    */
    get valueAxisActualMinimum(): number;
    static ngAcceptInputType_valueAxisActualMinimum: number | string;
    /**
     * Gets the current maximum value for the Y-axis.
    */
    get valueAxisActualMaximum(): number;
    static ngAcceptInputType_valueAxisActualMaximum: number | string;
    /**
     * Gets or sets the extent of the chart's radius. Value between 0 and 1.
    */
    get radiusExtent(): number;
    set radiusExtent(v: number);
    static ngAcceptInputType_radiusExtent: number | string;
    /**
     * Gets or sets the start angle to use for the pie chart measured in degrees from the positive x axis.
    */
    get startAngle(): number;
    set startAngle(v: number);
    static ngAcceptInputType_startAngle: number | string;
    /**
     * Gets or sets the label of the Others slice.
    */
    get sliceLabelContentSeparator(): string;
    set sliceLabelContentSeparator(v: string);
    /**
     * Gets or sets the label of the Others slice.
    */
    get sliceLabelContentMode(): RadialLabelMode;
    set sliceLabelContentMode(v: RadialLabelMode);
    static ngAcceptInputType_sliceLabelContentMode: RadialLabelMode | string;
    /**
     * Gets or sets the label of the Others slice.
    */
    get legendSliceLabelContentMode(): RadialLabelMode;
    set legendSliceLabelContentMode(v: RadialLabelMode);
    static ngAcceptInputType_legendSliceLabelContentMode: RadialLabelMode | string;
    /**
     * Gets or sets whether to favor labelling the end of the scale.
    */
    get angleAxisFavorLabellingScaleEnd(): boolean;
    set angleAxisFavorLabellingScaleEnd(v: boolean);
    static ngAcceptInputType_angleAxisFavorLabellingScaleEnd: boolean | string;
    /**
     * Gets or sets whether the large numbers on the Y-axis labels are abbreviated.
    */
    get valueAxisAbbreviateLargeNumbers(): boolean;
    set valueAxisAbbreviateLargeNumbers(v: boolean);
    static ngAcceptInputType_valueAxisAbbreviateLargeNumbers: boolean | string;
    /**
     * Gets or sets collision avoidance between markers on series that support this behaviour.
    */
    get markerCollision(): CollisionAvoidanceType;
    set markerCollision(v: CollisionAvoidanceType);
    static ngAcceptInputType_markerCollision: CollisionAvoidanceType | string;
    findByName(name: string): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxDataPieBaseChartComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxDataPieBaseChartComponent, "ng-component", never, { "sliceLabelFormat": "sliceLabelFormat"; "sliceLabelFormatSpecifiers": "sliceLabelFormatSpecifiers"; "legendSliceLabelFormat": "legendSliceLabelFormat"; "legendSliceLabelFormatSpecifiers": "legendSliceLabelFormatSpecifiers"; "othersSliceLabelFormat": "othersSliceLabelFormat"; "othersSliceLabelFormatSpecifiers": "othersSliceLabelFormatSpecifiers"; "legendOthersSliceLabelFormat": "legendOthersSliceLabelFormat"; "legendOthersSliceLabelFormatSpecifiers": "legendOthersSliceLabelFormatSpecifiers"; "innerExtent": "innerExtent"; "sweepDirection": "sweepDirection"; "sliceLabelPositionMode": "sliceLabelPositionMode"; "lightSliceLabelColor": "lightSliceLabelColor"; "darkSliceLabelColor": "darkSliceLabelColor"; "valueMemberPath": "valueMemberPath"; "legendLabelMemberPath": "legendLabelMemberPath"; "othersCategoryType": "othersCategoryType"; "othersCategoryThreshold": "othersCategoryThreshold"; "othersCategoryText": "othersCategoryText"; "labelMemberPath": "labelMemberPath"; "valueAxisFavorLabellingScaleEnd": "valueAxisFavorLabellingScaleEnd"; "valueAxisAutoRangeBufferMode": "valueAxisAutoRangeBufferMode"; "angleAxisInterval": "angleAxisInterval"; "angleAxisMinorInterval": "angleAxisMinorInterval"; "valueAxisInterval": "valueAxisInterval"; "valueAxisIsLogarithmic": "valueAxisIsLogarithmic"; "valueAxisLogarithmBase": "valueAxisLogarithmBase"; "valueAxisMinimumValue": "valueAxisMinimumValue"; "valueAxisMaximumValue": "valueAxisMaximumValue"; "valueAxisMinorInterval": "valueAxisMinorInterval"; "radiusExtent": "radiusExtent"; "startAngle": "startAngle"; "sliceLabelContentSeparator": "sliceLabelContentSeparator"; "sliceLabelContentMode": "sliceLabelContentMode"; "legendSliceLabelContentMode": "legendSliceLabelContentMode"; "angleAxisFavorLabellingScaleEnd": "angleAxisFavorLabellingScaleEnd"; "valueAxisAbbreviateLargeNumbers": "valueAxisAbbreviateLargeNumbers"; "markerCollision": "markerCollision"; }, {}, never, never>;
}
