import { EventEmitter } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { ShapeItemSearchMode } from "./ShapeItemSearchMode";
import { IgxNumericXAxisComponent } from "./igx-numeric-x-axis-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxAssigningShapeStyleEventArgs } from "./igx-assigning-shape-style-event-args";
import { IgxAssigningShapeMarkerStyleEventArgs } from "./igx-assigning-shape-marker-style-event-args";
import { IgxStyleShapeEventArgs } from "./igx-style-shape-event-args";
import { IgxSeriesComponent } from "./igx-series-component";
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import * as i0 from "@angular/core";
/**
 * Series class for rendering polygons.
*/
export declare abstract class IgxShapeSeriesBaseComponent extends IgxSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): ShapeSeriesBase;
    constructor();
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual visuals.
    */
    get isCustomShapeStyleAllowed(): boolean;
    set isCustomShapeStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomShapeStyleAllowed: boolean | string;
    /**
     * Gets or sets whether this Shape series should allow custom style overrides of its individual marker visuals.
    */
    get isCustomShapeMarkerStyleAllowed(): boolean;
    set isCustomShapeMarkerStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomShapeMarkerStyleAllowed: boolean | string;
    get actualItemSearchMode(): ShapeItemSearchMode;
    set actualItemSearchMode(v: ShapeItemSearchMode);
    static ngAcceptInputType_actualItemSearchMode: ShapeItemSearchMode | string;
    /**
     * Gets or sets the mode the series will use to find the closest point to the cursor.
    */
    get itemSearchMode(): ShapeItemSearchMode;
    set itemSearchMode(v: ShapeItemSearchMode);
    static ngAcceptInputType_itemSearchMode: ShapeItemSearchMode | string;
    /**
     * Gets or sets the threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchThreshold(): number;
    set itemSearchThreshold(v: number);
    static ngAcceptInputType_itemSearchThreshold: number | string;
    /**
     * Gets or sets the points threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchPointsThreshold(): number;
    set itemSearchPointsThreshold(v: number);
    static ngAcceptInputType_itemSearchPointsThreshold: number | string;
    /**
     * The name of the property on ItemsSource items which, for each shape, contains a list of points to be converted to a polygon.
     * To be consistent with the Shapefile technical description, it is expected that each list of points is defined as an IEnumerable of IEnumerable of Point, or in other words, a list of lists of points.
    */
    get shapeMemberPath(): string;
    set shapeMemberPath(v: string);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get highlightedShapeMemberPath(): string;
    set highlightedShapeMemberPath(v: string);
    /**
     * Gets or sets the effective x-axis for the current ScatterBase object.
    */
    get xAxis(): IgxNumericXAxisComponent;
    set xAxis(v: IgxNumericXAxisComponent);
    /**
     * Gets or sets the effective y-axis for the current ScatterBase object.
    */
    get yAxis(): IgxNumericYAxisComponent;
    set yAxis(v: IgxNumericYAxisComponent);
    /**
     * The resolution at which to filter out shapes in the series.  For example, if the ShapeFilterResolution is set to 3, then elements with a bounding rectangle smaller than 3 X 3 pixels will be filtered out.
     * In the case of ScatterPolylineSeries, the resolution is compared to either dimension, rather than both.  In other words, a polyline will not be filtered if its height or its width exceeds the value of this property.  Whereas with a ShapeSeries, both the height and the width must exceed the value of this property.
    */
    get shapeFilterResolution(): number;
    set shapeFilterResolution(v: number);
    static ngAcceptInputType_shapeFilterResolution: number | string;
    /**
     * Gets whether or not this series is a shape series
    */
    get isShape(): boolean;
    static ngAcceptInputType_isShape: boolean | string;
    /**
     * Overridden by derived series classes to indicate when marker-less display is preferred or not.
    */
    get isMarkerlessDisplayPreferred(): boolean;
    static ngAcceptInputType_isMarkerlessDisplayPreferred: boolean | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    getExactItemIndex(world: IgPoint): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    */
    canUseAsYAxis(axis: any): boolean;
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    */
    canUseAsXAxis(axis: any): boolean;
    private _assigningShapeStyle;
    /**
     * Event raised when Assigning Shape Style. Note, if using this event, or highlighting, its best to avoid use of ShapeStyle/StyleShape/ShapeStyleSelector.
    */
    get assigningShapeStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningShapeStyleEventArgs;
    }>;
    private _assigningShapeMarkerStyle;
    /**
     * Event raised when Assigning Shape Marker Style
    */
    get assigningShapeMarkerStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningShapeMarkerStyleEventArgs;
    }>;
    private _styleShape;
    /**
     * Raised when tile's image URI should be provided
    */
    get styleShape(): EventEmitter<{
        sender: any;
        args: IgxStyleShapeEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxShapeSeriesBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxShapeSeriesBaseComponent, "ng-component", never, { "isCustomShapeStyleAllowed": "isCustomShapeStyleAllowed"; "isCustomShapeMarkerStyleAllowed": "isCustomShapeMarkerStyleAllowed"; "actualItemSearchMode": "actualItemSearchMode"; "itemSearchMode": "itemSearchMode"; "itemSearchThreshold": "itemSearchThreshold"; "itemSearchPointsThreshold": "itemSearchPointsThreshold"; "shapeMemberPath": "shapeMemberPath"; "highlightedShapeMemberPath": "highlightedShapeMemberPath"; "xAxis": "xAxis"; "yAxis": "yAxis"; "shapeFilterResolution": "shapeFilterResolution"; }, { "assigningShapeStyle": "assigningShapeStyle"; "assigningShapeMarkerStyle": "assigningShapeMarkerStyle"; "styleShape": "styleShape"; }, never, never>;
}
