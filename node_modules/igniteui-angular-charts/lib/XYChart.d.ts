import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { HorizontalAlignment } from "igniteui-angular-core";
import { VerticalAlignment } from "igniteui-angular-core";
import { Visibility } from "igniteui-angular-core";
import { YAxisLabelLocation } from "./YAxisLabelLocation";
import { XAxisLabelLocation } from "./XAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-angular-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class XYChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected ux(): void;
    protected vo(a: string, b: any, c: any): void;
    private zm;
    get zo(): (item: any) => string;
    set zo(a: (item: any) => string);
    private zn;
    get zp(): (item: any) => string;
    set zp(a: (item: any) => string);
    private z3;
    get aa5(): number;
    set aa5(a: number);
    private z5;
    get aa7(): number;
    set aa7(a: number);
    private z4;
    get aa6(): number;
    set aa6(a: number);
    private z2;
    get aa4(): number;
    set aa4(a: number);
    private aak;
    get abm(): number;
    set abm(a: number);
    private aam;
    get abo(): number;
    set abo(a: number);
    private aal;
    get abn(): number;
    set abn(a: number);
    private aaj;
    get abl(): number;
    set abl(a: number);
    private afd;
    get aft(): Brush;
    set aft(a: Brush);
    private afk;
    get af0(): Brush;
    set af0(a: Brush);
    private afb;
    get afr(): Brush;
    set afr(a: Brush);
    private afc;
    get afs(): Brush;
    set afs(a: Brush);
    private aae;
    get abg(): number;
    set abg(a: number);
    private aav;
    get abx(): number;
    set abx(a: number);
    private aad;
    get abf(): number;
    set abf(a: number);
    private aau;
    get abw(): number;
    set abw(a: number);
    private aag;
    get abi(): number;
    set abi(a: number);
    private aax;
    get abz(): number;
    set abz(a: number);
    private aaf;
    get abh(): number;
    set abh(a: number);
    private aaw;
    get aby(): number;
    set aby(a: number);
    private aac;
    get abe(): number;
    set abe(a: number);
    private aat;
    get abv(): number;
    set abv(a: number);
    private afj;
    get afz(): Brush;
    set afz(a: Brush);
    private afq;
    get af6(): Brush;
    set af6(a: Brush);
    protected vp(a: string, b: any, c: any): void;
    private ab5;
    get act(): string;
    set act(a: string);
    private ab9;
    get ady(): string;
    set ady(a: string);
    private ab7;
    get adh(): string;
    set adh(a: string);
    private acb;
    get aem(): string;
    set aem(a: string);
    private aes;
    private aeu;
    protected wf(a: DataSeries): void;
    protected abstract zk(): Axis;
    protected abstract zl(): Axis;
    protected aev(a: (arg1: Axis) => void): void;
    protected aew(a: (arg1: Axis) => void, b: string): void;
    protected ae1(a: (arg1: Axis) => void, b: boolean): void;
    protected ae0(a: (arg1: Axis) => void): void;
    protected uh(a: (arg1: Axis) => void, b: boolean): void;
    protected aez(a: (arg1: TitleSettings) => void): void;
    protected ae4(a: (arg1: TitleSettings) => void): void;
    protected ae2(a: (arg1: AxisLabelSettings) => void): void;
    protected aex(a: (arg1: AxisLabelSettings) => void): void;
    aay(a: number): number;
    aa0(a: number): number;
    aaz(a: number): number;
    aa1(a: number): number;
    protected wc(a: XamDataChart): void;
    static ace(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected us(a: XamDataChart, b: any): void;
    protected aer(a: Axis): void;
    protected aet(a: Axis): void;
    protected up(): void;
    protected aep(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected aeq(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected vl(a: string, b: any, c: any): void;
    ae3(): void;
    aey(): void;
    zr(a: YAxisLabelLocation): AxisLabelsLocation;
    zq(a: XAxisLabelLocation): AxisLabelsLocation;
    private ab0;
    get ab2(): any;
    set ab2(a: any);
    private ab1;
    get ab3(): any;
    set ab3(a: any);
    private afe;
    get afu(): Brush;
    set afu(a: Brush);
    private afl;
    get af1(): Brush;
    set af1(a: Brush);
    private z6;
    get aa8(): number;
    set aa8(a: number);
    private aan;
    get abp(): number;
    set abp(a: number);
    private z7;
    get aa9(): number;
    set aa9(a: number);
    private aao;
    get abq(): number;
    set abq(a: number);
    private afg;
    get afw(): Brush;
    set afw(a: Brush);
    private afn;
    get af3(): Brush;
    set af3(a: Brush);
    private afh;
    get afx(): Brush;
    set afx(a: Brush);
    private afo;
    get af4(): Brush;
    set af4(a: Brush);
    private z8;
    get aba(): number;
    set aba(a: number);
    private aap;
    get abr(): number;
    set abr(a: number);
    private z9;
    get abb(): number;
    set abb(a: number);
    private aaq;
    get abs(): number;
    set abs(a: number);
    private afi;
    get afy(): Brush;
    set afy(a: Brush);
    private afp;
    get af5(): Brush;
    set af5(a: Brush);
    private aaa;
    get abc(): number;
    set abc(a: number);
    private aar;
    get abt(): number;
    set abt(a: number);
    private ab6;
    get ac8(): string;
    set ac8(a: string);
    private aca;
    get aed(): string;
    set aed(a: string);
    private aff;
    get afv(): Brush;
    set afv(a: Brush);
    private afm;
    get af2(): Brush;
    set af2(a: Brush);
    private z1;
    get aa3(): number;
    set aa3(a: number);
    private aai;
    get abk(): number;
    set abk(a: number);
    private z0;
    get aa2(): number;
    set aa2(a: number);
    private aah;
    get abj(): number;
    set abj(a: number);
    private aab;
    get abd(): number;
    set abd(a: number);
    private aas;
    get abu(): number;
    set abu(a: number);
    private zw;
    get zy(): boolean;
    set zy(a: boolean);
    private zx;
    get zz(): boolean;
    set zz(a: boolean);
    private ae6;
    get ae9(): HorizontalAlignment;
    set ae9(a: HorizontalAlignment);
    private af9;
    get agc(): VerticalAlignment;
    set agc(a: VerticalAlignment);
    private ae5;
    get ae8(): HorizontalAlignment;
    set ae8(a: HorizontalAlignment);
    private ae7;
    protected get_afa(): HorizontalAlignment;
    protected set_afa(a: HorizontalAlignment): void;
    get afa(): HorizontalAlignment;
    set afa(a: HorizontalAlignment);
    private af7;
    get aga(): VerticalAlignment;
    set aga(a: VerticalAlignment);
    private af8;
    get agb(): VerticalAlignment;
    set agb(a: VerticalAlignment);
    private agd;
    get agf(): Visibility;
    set agf(a: Visibility);
    private age;
    get agg(): Visibility;
    set agg(a: Visibility);
    private zu;
    protected get_zv(): YAxisLabelLocation;
    protected set_zv(a: YAxisLabelLocation): void;
    get zv(): YAxisLabelLocation;
    set zv(a: YAxisLabelLocation);
    private zs;
    protected get_zt(): XAxisLabelLocation;
    protected set_zt(a: XAxisLabelLocation): void;
    get zt(): XAxisLabelLocation;
    set zt(a: XAxisLabelLocation);
    private ab4;
    get ack(): string;
    set ack(a: string);
    private zg;
    get zi(): any[];
    set zi(a: any[]);
    private ab8;
    get adp(): string;
    set adp(a: string);
    private zh;
    get zj(): any[];
    set zj(a: any[]);
}
