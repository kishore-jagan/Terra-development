import { EventArgs, Base, Type, Point, IList$1, IEnumerable, IEnumerator$1, IEnumerator, INotifyPropertyChanged, PropertyChangedEventArgs } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { DataTemplate } from "igniteui-angular-core";
import { Visibility } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { PenLineCap } from "igniteui-angular-core";
import { Style } from "igniteui-angular-core";
import { MarkerType } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { List$1 } from "igniteui-angular-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { Rect } from "igniteui-angular-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { SeriesViewer } from "./SeriesViewer";
import { PointCollection } from "igniteui-angular-core";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { IChartLegend } from "igniteui-angular-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { RenderSurface } from "./RenderSurface";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Path } from "igniteui-angular-core";
import { CategoryMode } from "./CategoryMode";
import { DependencyObject } from "igniteui-angular-core";
import { NumericYAxis } from "./NumericYAxis";
import { Pool$1 } from "igniteui-angular-core";
import { Rectangle } from "igniteui-angular-core";
import { IScaler } from "./IScaler";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { ICategoryScaler } from "./ICategoryScaler";
import { IBucketizer } from "./IBucketizer";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { IBarSeries } from "./IBarSeries";
import { Color } from "igniteui-angular-core";
import { LegendItemBadgeShape } from "igniteui-angular-core";
import { LegendItemBadgeMode } from "igniteui-angular-core";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { SeriesHighlightedValuesDisplayMode } from "./SeriesHighlightedValuesDisplayMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { DomRenderer } from "igniteui-angular-core";
import { PropertyUpdatedEventArgs } from "igniteui-angular-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ValuesHolder } from "./ValuesHolder";
import { PreparationParams } from "./PreparationParams";
import { RenderingContext } from "igniteui-angular-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-angular-core";
import { Panel } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class StackedSeriesCreatedEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: StackedFragmentSeries);
    c: StackedFragmentSeries;
    get brush(): Brush;
    set brush(a: Brush);
    get legendItemTemplate(): DataTemplate;
    set legendItemTemplate(a: DataTemplate);
    get legendItemBadgeTemplate(): DataTemplate;
    set legendItemBadgeTemplate(a: DataTemplate);
    get legendItemVisibility(): Visibility;
    set legendItemVisibility(a: Visibility);
    get outline(): Brush;
    set outline(a: Brush);
    get dashArray(): DoubleCollection;
    set dashArray(a: DoubleCollection);
    get dashCap(): PenLineCap;
    set dashCap(a: PenLineCap);
    get index(): number;
    get thickness(): number;
    set thickness(a: number);
    get title(): any;
    set title(a: any);
    get transitionDuration(): number;
    set transitionDuration(a: number);
    get transitionEasingFunction(): (time: number) => number;
    set transitionEasingFunction(a: (time: number) => number);
    get markerBrush(): Brush;
    set markerBrush(a: Brush);
    get markerOutline(): Brush;
    set markerOutline(a: Brush);
    get markerStyle(): Style;
    set markerStyle(a: Style);
    get markerTemplate(): DataTemplate;
    set markerTemplate(a: DataTemplate);
    get markerType(): MarkerType;
    set markerType(a: MarkerType);
    get markerThickness(): number;
    set markerThickness(a: number);
    get lineCap(): PenLineCap;
    set lineCap(a: PenLineCap);
}
/**
 * @hidden
 */
export declare abstract class FragmentBase extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    private ___neverPassByValue;
    constructor();
    ace: CategoryLineRasterizer;
    private _logicalSeriesLink;
    get logicalSeriesLink(): StackedFragmentSeries;
    set logicalSeriesLink(a: StackedFragmentSeries);
    private acg;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    protected get_e3(): boolean;
    protected get_e9(): boolean;
    na(): string;
    j0(): number;
    protected p5(a: Series): void;
    j5(): number;
    resolveLegendIndex(): number;
    bn(): Series;
    yk(): CategoryAxisBase;
    acd(): CategoryFramePreparer;
    y0(): NumericAxisBase;
    acj(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    z1(a: CategoryFrame, b: CategorySeriesView): void;
    v6(a: Point, b: boolean, c: boolean): Point;
    ai(): Axis[];
    private ack;
    acm(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    aaq(a: CategorySeriesView): number;
    ax(a: Axis): AxisRange;
    acl(): number;
    acn(a: IChartLegend): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    rp(a: Rect, b: RenderSurface): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragment extends FragmentBase {
    static $t: Type;
    protected bi(): Series;
    constructor();
    protected cq(): SeriesView;
    aco: AreaFragmentView;
    qx(a: SeriesView): void;
    protected get_et(): boolean;
    protected get_es(): boolean;
    protected yv(): CategoryTransitionInMode;
    protected acq(a: Point, b: boolean): boolean;
    gu(a: Point, b: boolean): boolean;
    private acp;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    o3(a: boolean, b: SeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    r7(): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class ColumnFragment extends FragmentBase {
    static $t: Type;
    protected bi(): Series;
    protected get_ex(): boolean;
    protected get_fj(): boolean;
    protected ji(): number;
    protected yv(): CategoryTransitionInMode;
    constructor();
    protected cq(): SeriesView;
    acp: ColumnFragmentView;
    qx(a: SeriesView): void;
    acs: number;
    act: number;
    get fragmentXAxis(): CategoryAxisBase;
    get fragmentYAxis(): NumericAxisBase;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    yk(): CategoryAxisBase;
    y0(): NumericAxisBase;
    protected get_eb(): boolean;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    o3(a: boolean, b: SeriesView): void;
    ax(a: Axis): AxisRange;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    g9(): boolean;
    zm(a: SeriesView): number;
    zn(a: SeriesView): number;
    zo(a: SeriesView): number;
    wh(a: Point): Rect;
    gu(a: Point, b: boolean): boolean;
    protected gx(a: Point, b: boolean): boolean;
    protected acy(a: Rect, b: number): Rect;
    kv(a: any, b: Point): any;
    kl(a: Point): any;
    j3(a: Point): number;
    j1(a: Point): number;
    acj(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    private acr;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    z1(a: CategoryFrame, b: CategorySeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BarFragment extends ColumnFragment {
    static $t: Type;
    constructor();
    protected get_ev(): boolean;
    protected get_fj(): boolean;
    protected get_ex(): boolean;
    protected yv(): CategoryTransitionInMode;
    get barFragmentXAxis(): NumericXAxis;
    get barFragmentYAxis(): CategoryYAxis;
    yk(): CategoryAxisBase;
    protected get_isVertical(): boolean;
    ip(a: Point): number;
    y0(): NumericAxisBase;
    protected acy(a: Rect, b: number): Rect;
    wh(a: Point): Rect;
    gu(a: Point, b: boolean): boolean;
    acj(a: ISupportsMarkers, b: CategoryFrame, c: number[], d: IDetectsCollisions, e: number, f: number, g: number, h: number): boolean;
    kl(a: Point): any;
    j3(a: Point): number;
    aaq(a: CategorySeriesView): number;
    protected q5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class StackedBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedBarBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    g(a: number): void;
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class StackedColumnBucketCalculator extends StackedBucketCalculator {
    static $t: Type;
    constructor(a: CategorySeriesView);
    getBucket(a: number): number[];
    getBucket1(a: AnchoredCategorySeries, b: number, c: number, d: Rect, e: Rect, f: CategoryFrame): number[];
}
/**
 * @hidden
 */
export declare class FragmentBaseValueList extends Base implements IList$1<number> {
    static $t: Type;
    private a;
    constructor(a: FragmentBase);
    indexOf(a: number): number;
    insert(a: number, b: number): void;
    removeAt(a: number): void;
    item(a: number, b?: number): number;
    add(a: number): void;
    clear(): void;
    contains(a: number): boolean;
    copyTo(a: number[], b: number): void;
    get count(): number;
    get isReadOnly(): boolean;
    remove(a: number): boolean;
    getEnumerator(): IEnumerator$1<number>;
    getEnumeratorObject(): IEnumerator;
}
/**
 * @hidden
 */
export declare class LineFragment extends FragmentBase {
    static $t: Type;
    protected bi(): Series;
    protected get_fi(): boolean;
    protected zf(): boolean;
    constructor();
    protected cq(): SeriesView;
    aco: LineFragmentView;
    qx(a: SeriesView): void;
    protected acq(a: Point, b: boolean): boolean;
    protected get_et(): boolean;
    gu(a: Point, b: boolean): boolean;
    private acp;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    o3(a: boolean, b: SeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare abstract class SplineFragmentBase extends SplineSeriesBase {
    static $t: Type;
    private _logicalSeriesLink;
    get logicalSeriesLink(): StackedFragmentSeries;
    set logicalSeriesLink(a: StackedFragmentSeries);
    acx: CategoryLineRasterizer;
    constructor();
    private acz;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    protected p5(a: Series): void;
    protected get_e3(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected get_e9(): boolean;
    na(): string;
    v6(a: Point, b: boolean, c: boolean): Point;
    ai(): Axis[];
    private ac1;
    j0(): number;
    resolveLegendIndex(): number;
    j5(): number;
    bn(): Series;
    acj(a: CategoryFrame, b: number[], c: CollisionAvoider, d: number, e: number, f: CategorySeriesView, g: number): boolean;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    ax(a: Axis): AxisRange;
    ac2(a: CategoryFrame, b: Rect, c: Rect, d: CategoryAxisBase, e: NumericYAxis, f: CategorySeriesView): void;
    z1(a: CategoryFrame, b: CategorySeriesView): void;
    acd(a: CategorySeriesView): number[][];
    ace(a: CategorySeriesView): number[][];
    acs(a: CategorySeriesView): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineAreaFragment extends SplineFragmentBase {
    static $t: Type;
    protected bi(): Series;
    constructor();
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    private ac3;
    ac(): void;
    protected get_et(): boolean;
    protected get_es(): boolean;
    protected get_fy(): boolean;
    protected yv(): CategoryTransitionInMode;
    protected ac5(a: Point, b: boolean): boolean;
    gu(a: Point, b: boolean): boolean;
    private ac4;
    ac7: PointCollection;
    o3(a: boolean, b: SeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    rp(a: Rect, b: RenderSurface): void;
    ac6(a: PointCollection, b: List$1<number[]>, c: CategorySeriesView): void;
    aaq(a: CategorySeriesView): number;
    r7(): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineFragment extends SplineFragmentBase {
    static $t: Type;
    protected bi(): Series;
    protected get_fy(): boolean;
    protected zf(): boolean;
    constructor();
    protected cq(): SeriesView;
    ac3: SplineFragmentView;
    qx(a: SeriesView): void;
    protected ac5(a: Point, b: boolean): boolean;
    protected get_et(): boolean;
    gu(a: Point, b: boolean): boolean;
    private ac4;
    o3(a: boolean, b: SeriesView): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class SplineFragmentBaseValueList extends Base implements IList$1<number> {
    static $t: Type;
    private a;
    constructor(a: SplineFragmentBase);
    indexOf(a: number): number;
    insert(a: number, b: number): void;
    removeAt(a: number): void;
    item(a: number, b?: number): number;
    add(a: number): void;
    clear(): void;
    contains(a: number): boolean;
    copyTo(a: number[], b: number): void;
    get count(): number;
    get isReadOnly(): boolean;
    remove(a: number): boolean;
    getEnumerator(): IEnumerator$1<number>;
    getEnumeratorObject(): IEnumerator;
}
/**
 * @hidden
 */
export declare abstract class StackedSeriesBase extends CategorySeries implements IIsCategoryBased {
    static $t: Type;
    constructor();
    qc(): void;
    protected get_fc(): boolean;
    getHostReferenceValue(): number;
    protected cq(): SeriesView;
    aal: StackedSeriesView;
    qx(a: SeriesView): void;
    qy(a: Rect, b: Rect): void;
    private _series;
    get series(): StackedSeriesCollection;
    set series(a: StackedSeriesCollection);
    ka(): number;
    pz(a: (arg1: Series) => boolean): void;
    aam: boolean;
    aao: boolean;
    protected get_isStacked(): boolean;
    seriesCreated: (sender: any, e: StackedSeriesCreatedEventArgs) => void;
    abb: Visibility;
    aau: number;
    aat: number;
    aab: number[];
    aac: number[];
    private aaj;
    get aak(): StackedSeriesManager;
    set aak(a: StackedSeriesManager);
    aag: StackedSeriesCollection;
    get aaf(): StackedSeriesCollection;
    private aa0;
    private aa6;
    private aa5;
    r0(a: Point): void;
    yr(a: CategorySeriesView): CategoryFramePreparer;
    z1(a: CategoryFrame, b: CategorySeriesView): void;
    ro(a: boolean): void;
    protected get_gr(): boolean;
    o3(a: boolean, b: SeriesView): void;
    aa1(): void;
    aa7(): void;
    protected get_aan(): boolean;
    get aan(): boolean;
    gb(a: any): boolean;
    ax(a: Axis): AxisRange;
    w8(): boolean;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    aae(): CategorySeriesView;
    aar(): number;
    aas(): number;
    aaw(a: StackedFragmentSeries): number;
    aav(a: Point): number;
    aap(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    private aaq;
    aa2(): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    aa4(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    ay(a: Rect): AxisRange;
    rr(): void;
    protected aa3(): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    protected gl(): boolean;
    protected get_e3(): boolean;
    rp(a: Rect, b: RenderSurface): void;
    aad: CategoryFrame;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    kk(): any;
    get mayContainUnknowns(): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare abstract class HorizontalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: CategoryAxisBase;
    protected get_ei(): boolean;
    protected get_f3(): boolean;
    ci(): SeriesPlotAreaMarginHorizontalMode;
    cj(): SeriesPlotAreaMarginVerticalMode;
    yAxis: NumericYAxis;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    ai(): Axis[];
    zg(): boolean;
    r7(): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    abf(a: any): boolean;
    abe(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected bi(): Series;
    protected get_es(): boolean;
    constructor();
    ac(): void;
    protected cq(): SeriesView;
    abk: StackedAreaSeriesView;
    qx(a: SeriesView): void;
    ax(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare abstract class VerticalStackedSeriesBase extends StackedSeriesBase {
    static $t: Type;
    xAxis: NumericXAxis;
    yAxis: CategoryYAxis;
    yk(): CategoryAxisBase;
    y0(): NumericAxisBase;
    ci(): SeriesPlotAreaMarginHorizontalMode;
    cj(): SeriesPlotAreaMarginVerticalMode;
    ay(a: Rect): AxisRange;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_isVertical(): boolean;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    zg(): boolean;
    protected q5(a: any, b: string, c: any, d: any): void;
    abf(a: any): boolean;
    abe(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedBarSeries extends VerticalStackedSeriesBase implements IBarSeries {
    static $t: Type;
    protected bi(): Series;
    protected get_ev(): boolean;
    protected get_fj(): boolean;
    protected ji(): number;
    constructor();
    ac(): void;
    protected cq(): SeriesView;
    abk: StackedBarSeriesView;
    qx(a: SeriesView): void;
    abl: number;
    abm: number;
    aae(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    zp(): number;
    aar(): number;
    aas(): number;
    ax(a: Axis): AxisRange;
    gb(a: any): boolean;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    j1(a: Point): number;
    kl(a: Point): any;
    aa7(): void;
    aav(a: Point): number;
    aap(a: AnchoredCategorySeries, b: Rect, c: Rect, d: SeriesView): boolean;
    iu(): number;
    aa4(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    getPreferredCategoryMode(): CategoryMode;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedColumnSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected bi(): Series;
    protected get_ex(): boolean;
    protected get_fj(): boolean;
    protected ji(): number;
    constructor();
    protected cq(): SeriesView;
    abk: StackedColumnSeriesView;
    qx(a: SeriesView): void;
    abl: number;
    abm: number;
    aae(): CategorySeriesView;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    ax(a: Axis): AxisRange;
    iu(): number;
    aa4(a: AnchoredCategorySeries, b: CategoryFrame, c: CategorySeriesView, d: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected bi(): Series;
    abl: boolean;
    protected ji(): number;
    protected get_es(): boolean;
    protected get_fy(): boolean;
    constructor();
    ac(): void;
    protected cq(): SeriesView;
    abk: StackedSplineAreaSeriesView;
    qx(a: SeriesView): void;
    ax(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected q5(a: any, b: string, c: any, d: any): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSplineSeries extends HorizontalStackedSeriesBase {
    static $t: Type;
    protected bi(): Series;
    abl: boolean;
    protected get_fy(): boolean;
    protected ji(): number;
    constructor();
    ac(): void;
    protected cq(): SeriesView;
    abk: StackedSplineSeriesView;
    qx(a: SeriesView): void;
    ax(a: Axis): AxisRange;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedFragmentSeries extends DependencyObject implements INotifyPropertyChanged {
    static $t: Type;
    constructor();
    itemsSource: IEnumerable;
    highlightedItemsSource: IEnumerable;
    kz: Brush;
    ku: Brush;
    k8: DoubleCollection;
    k7: DoubleCollection;
    lb: PenLineCap;
    k9: PenLineCap;
    au: boolean;
    al: boolean;
    b1: number;
    bi: number;
    k6: Color;
    k5: Color;
    a4: boolean;
    ar: boolean;
    b2: number;
    bj: number;
    b3: number;
    bk: number;
    lc: PenLineCap;
    la: PenLineCap;
    av: boolean;
    am: boolean;
    hq: DataTemplate;
    hn: DataTemplate;
    hr: DataTemplate;
    ho: DataTemplate;
    lu: Visibility;
    ls: Visibility;
    r: LegendItemBadgeShape;
    p: LegendItemBadgeMode;
    q: LegendItemBadgeShape;
    o: LegendItemBadgeMode;
    k0: Brush;
    kv: Brush;
    k1: Brush;
    kw: Brush;
    lr: Style;
    lq: Style;
    hs: DataTemplate;
    hp: DataTemplate;
    x: MarkerType;
    w: MarkerType;
    t: MarkerFillMode;
    s: MarkerFillMode;
    v: MarkerOutlineMode;
    u: MarkerOutlineMode;
    e0: string;
    by: number;
    bf: number;
    k2: Brush;
    kx: Brush;
    k3: Brush;
    ky: Brush;
    bm: number;
    bb: number;
    bw: number;
    bd: number;
    ab: SeriesOutlineMode;
    aa: SeriesOutlineMode;
    bv: number;
    bc: number;
    z: SeriesHighlightedValuesDisplayMode;
    bz: number;
    bg: number;
    an: boolean;
    aw: boolean;
    b0: number;
    bh: number;
    b4: number;
    bl: number;
    bx: number;
    be: number;
    cj: any;
    ck: any;
    cf: any;
    ai: (time: number) => number;
    cd: number;
    ce: number;
    aj: (time: number) => number;
    n: CategoryTransitionInMode;
    ax: boolean;
    ae: TransitionInSpeedType;
    ao: boolean;
    b7: number;
    m: CategoryTransitionInMode;
    ad: TransitionInSpeedType;
    ah: (time: number) => number;
    ag: (time: number) => number;
    b6: number;
    a3: boolean;
    aq: boolean;
    a2: boolean;
    ap: boolean;
    ft: string;
    fp: string;
    fr: string;
    d0: string;
    d2: string;
    cg(a: number, b: number): any;
    eb(): string;
    d9: string;
    ed: string;
    cp: string;
    cr: string;
    lv: Visibility;
    lt: Visibility;
    private _parentSeries;
    get parentSeries(): StackedSeriesBase;
    set parentSeries(a: StackedSeriesBase);
    cc: number;
    af: SeriesViewer;
    ak: IFastItemColumn$1<number>;
    private _visualSeriesLink;
    get visualSeriesLink(): AnchoredCategorySeries;
    set visualSeriesLink(a: AnchoredCategorySeries);
    a7: List$1<number>;
    a8: List$1<number>;
    a6: List$1<number[]>;
    az: boolean;
    b8(a: Point): number;
    ch(a: Point): any;
    cb(a: Point, b: boolean): number;
    ca(a: Point, b: boolean): number;
    bt(a: Point, b: boolean, c: boolean): number;
    li(a: Point, b: boolean, c: boolean): Point;
    lm(a: Point): Rect;
    j(a: Point): Rect[];
    ln(a: Point): Rect;
    k(a: Point): Rect[];
    lo(a: Point): Rect;
    lp(a: Point): Rect;
    bp(a: Point, b: boolean, c: boolean): number;
    le(a: Point, b: boolean, c: boolean): Point;
    br(a: Point, b: boolean, c: boolean): number;
    lg(a: Point, b: boolean, c: boolean): Point;
    lj(a: Point, b: boolean, c: boolean): Point;
    bu(a: Point, b: boolean, c: boolean): number;
    lf(a: Point, b: boolean, c: boolean): Point;
    bq(a: Point, b: boolean, c: boolean): number;
    lh(a: Point, b: boolean, c: boolean): Point;
    bs(a: Point, b: boolean, c: boolean): number;
    b9(a: Point): number;
    bo(): number;
    bn(a: Point): number;
    ci(a: Point): any;
    as(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    lk(a: Point): Point;
    ld(a: Point): Point;
    a0(a: any): boolean;
    ll(): Rect;
    fx(): void;
    f2(a: Point): void;
    a1(a: Point, b: boolean): boolean;
    fw(a: Point): void;
    b5: DomRenderer;
    provideRenderer(a: DomRenderer): void;
    k4: Brush;
    hm(): void;
    gu(): void;
    gw(): void;
    f4(): void;
    f5(): void;
    gb(): void;
    ga(): void;
    g0(): void;
    gq(): void;
    f6(): void;
    gc(): void;
    g3(): void;
    g4(): void;
    hi(): void;
    g5(): void;
    g6(): void;
    gd(): void;
    gj(): void;
    gk(): void;
    gl(): void;
    gi(): void;
    gh(): void;
    go(): void;
    gr(): void;
    gt(): void;
    gx(): void;
    gy(): void;
    gz(): void;
    gg(): void;
    f9(): void;
    f3(): void;
    ge(): void;
    g1(): void;
    g2(): void;
    gm(): void;
    g7(): void;
    gn(): void;
    gv(): void;
    g9(): void;
    hb(): void;
    ha(): void;
    hd(): void;
    he(): void;
    hf(): void;
    gf(): void;
    hc(): void;
    hh(): void;
    g8(): void;
    gp(): void;
    gs(): void;
    hg(): void;
    hk(): void;
    hj(): void;
    f7(): void;
    f8(): void;
    hl(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    propertyUpdated: (sender: any, e: PropertyUpdatedEventArgs) => void;
    protected f0(a: string, b: any, c: any): void;
    private a5;
    private at;
    private ay;
    protected fy(a: any, b: string, c: any, d: any): void;
    f1(): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class StackedSeriesCollection extends ObservableCollection$1<StackedFragmentSeries> {
    static $t: Type;
    constructor();
    collectionResetting: (sender: any, e: EventArgs) => void;
    protected p(): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesFramePreparer extends CategoryFramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    protected j(a: PreparationParams): ValuesHolder;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
}
/**
 * @hidden
 */
export declare class AreaFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    df: AreaFragment;
    au(): void;
    constructor(a: AreaFragment);
    dl: Path;
    dn: Path;
    dm: Path;
    dp: Path;
    dh: Path;
    dj: Path;
    di: Path;
    dk: Path;
    dg(): void;
    cx(): CategoryBucketCalculator;
    protected bd(): void;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    an(a: any): void;
}
/**
 * @hidden
 */
export declare class ColumnFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    df: ColumnFragment;
    au(): void;
    constructor(a: ColumnFragment);
    protected dj: List$1<Rectangle>;
    dg: Pool$1<Rectangle>;
    dh: List$1<number>;
    di: List$1<number>;
    private dq;
    private dk;
    private dm;
    private dl;
    protected bg(a: any, b: number): void;
    dn(a: Rectangle, b: number, c: number): void;
    protected bh(a: any, b: number): void;
    protected ac(a: number): any;
    private dp;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
/**
 * @hidden
 */
export declare class LineFragmentView extends AnchoredCategorySeriesView {
    static $t: Type;
    df: LineFragment;
    constructor(a: LineFragment);
    dl: Path;
    dk: Path;
    dm: Path;
    di: Path;
    dh: Path;
    dj: Path;
    dg(): void;
    cx(): CategoryBucketCalculator;
    protected bd(): void;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    an(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineAreaFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    private dh;
    au(): void;
    constructor(a: SplineAreaFragment);
    dn: Path;
    dq: Path;
    dp: Path;
    dr: Path;
    dj: Path;
    dl: Path;
    dk: Path;
    dm: Path;
    di(): void;
    protected bd(): void;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    an(a: any): void;
}
/**
 * @hidden
 */
export declare class SplineFragmentView extends SplineSeriesBaseView {
    static $t: Type;
    dh: SplineFragment;
    constructor(a: SplineFragment);
    cx(): CategoryBucketCalculator;
    dn: Path;
    dm: Path;
    dp: Path;
    dk: Path;
    dj: Path;
    dl: Path;
    di(): void;
    protected bd(): void;
    protected be(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    protected get_index(): number;
    an(a: any): void;
}
/**
 * @hidden
 */
export declare class StackedSeriesView extends CategorySeriesView {
    static $t: Type;
    c5: StackedSeriesBase;
    private readonly c6;
    get c7(): Canvas;
    private readonly c8;
    get c9(): Panel;
    constructor(a: StackedSeriesBase);
    cx(): CategoryBucketCalculator;
    ar(): void;
    at(a: RenderingContext, b: RenderingContext): void;
    protected af(): void;
}
/**
 * @hidden
 */
export declare class StackedBarSeriesView extends StackedSeriesView {
    static $t: Type;
    da: StackedBarSeries;
    constructor(a: StackedBarSeries);
    cx(): CategoryBucketCalculator;
    au(): void;
}
/**
 * @hidden
 */
export declare class StackedColumnSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedColumnSeries);
    cx(): CategoryBucketCalculator;
    au(): void;
}
/**
 * @hidden
 */
export declare class StackedAreaSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedAreaSeries);
    au(): void;
}
/**
 * @hidden
 */
export declare class StackedSplineAreaSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedSplineAreaSeries);
    au(): void;
    da(): number;
}
/**
 * @hidden
 */
export declare class StackedSplineSeriesView extends StackedSeriesView {
    static $t: Type;
    constructor(a: StackedSplineSeries);
    au(): void;
    da(): number;
}
/**
 * @hidden
 */
export declare class StackedSeriesManager extends Base {
    static $t: Type;
    constructor(a: StackedSeriesBase);
    b: StackedSeriesBase;
    f: ObservableCollection$1<AnchoredCategorySeries>;
    c: StackedSeriesCollection;
    e: ObservableCollection$1<AnchoredCategorySeries>;
    d: ObservableCollection$1<AnchoredCategorySeries>;
    k: Canvas;
    l: Panel;
    a(a: StackedFragmentSeries): AnchoredCategorySeries;
    j(): void;
    private i;
    h(a: boolean): void;
    private g;
}
