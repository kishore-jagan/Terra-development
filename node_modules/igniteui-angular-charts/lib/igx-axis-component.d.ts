import { EventEmitter, OnInit } from '@angular/core';
import { Visibility } from "igniteui-angular-core";
import { HorizontalAlignment } from "igniteui-angular-core";
import { VerticalAlignment } from "igniteui-angular-core";
import { Axis } from './Axis';
import { AxisLabelsLocation } from './AxisLabelsLocation';
import { AxisTitlePosition } from './AxisTitlePosition';
import { IgxRenderRequestedEventArgs } from './igx-render-requested-event-args';
import { IgxAxisRangeChangedEventArgs } from './igx-axis-range-changed-event-args';
import { IgxAxisAnnotationCollection } from './igx-axis-annotation-collection';
import * as i0 from "@angular/core";
/**
 * Represents the base class from which all axis types are derived.
*
* The `Axis` is an array of axis objects.
*
* ```html
* <igx-data-chart
*     [dataSource]="data" >
*     <igx-category-x-axis
* 		label="label"
* 		#xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
* 		#yAxis>
*     </igx-numeric-y-axis>
* </igx-data-chart>
* ```
*/
export declare abstract class IgxAxisComponent implements OnInit {
    protected _implementation: any;
    get i(): Axis;
    private onImplementationCreated;
    constructor();
    get axisInternal(): Axis;
    protected createImplementation(): Axis;
    ngOnInit(): void;
    set name(value: string);
    get name(): string;
    provideData(data: any): void;
    private _renderer;
    private _provideRenderer;
    static _createFromInternal(internal: any): IgxAxisComponent;
    /**
 * Gets or sets if the current axis is of category axis type
*/
    get isCategory(): boolean;
    static ngAcceptInputType_isCategory: boolean | string;
    /**
     * Gets or sets if the current axis is of numeric axis type
    *
    *     Gets or sets if the current axis is of numeric axis type
    */
    get isNumeric(): boolean;
    static ngAcceptInputType_isNumeric: boolean | string;
    /**
     * Gets if the current axis is of angular axis type
    */
    get isAngular(): boolean;
    static ngAcceptInputType_isAngular: boolean | string;
    /**
     * Gets or sets if the current axis is of radial axis type
    */
    get isRadial(): boolean;
    static ngAcceptInputType_isRadial: boolean | string;
    /**
     * Gets if the current axis is a vertical axis.
    */
    get isVertical(): boolean;
    static ngAcceptInputType_isVertical: boolean | string;
    /**
     * Gets or sets if the current axis is sorting data items
    */
    get isSorting(): boolean;
    static ngAcceptInputType_isSorting: boolean | string;
    /**
     * Gets or sets if the current axis is of date time axis type
    */
    get isDateTime(): boolean;
    static ngAcceptInputType_isDateTime: boolean | string;
    /**
     * Gets or sets if the current axis is of ordinal axis type
    */
    get isOrdinal(): boolean;
    static ngAcceptInputType_isOrdinal: boolean | string;
    /**
     * Gets or sets if the axis is a piecewise scaling function.
    */
    get isPiecewise(): boolean;
    static ngAcceptInputType_isPiecewise: boolean | string;
    /**
     * Gets if the current axis is of category date time axis type
    */
    get isCategoryDateTime(): boolean;
    static ngAcceptInputType_isCategoryDateTime: boolean | string;
    /**
     * Gets if the current axis is a continuous rather than a discrete scale
    */
    get isContinuous(): boolean;
    static ngAcceptInputType_isContinuous: boolean | string;
    /**
     * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
    *
    * The `FormatLabel` function takes an object that produces a formatted label for displaying in the chart.
    *
    * ```html
    * <igx-data-chart [dataSource]="data" >
    *     <igx-category-x-axis
    * 		name="xAxis"
    * 		FormatLabel="xAxis_FormatLabel" />
    * </igx-data-chart>
    * ```
    */
    get formatLabel(): (item: any) => string;
    set formatLabel(v: (item: any) => string);
    /**
     * Gets or sets the Title property.
    *
    * Use `Title` property to display the title of the component.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get title(): string;
    set title(v: string);
    /**
     * Gets or sets the Stroke property.
     * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.
    *
    * Use `Stroke` property to set the stroke of the chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		stroke="blue"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get stroke(): string;
    set stroke(v: string);
    /**
     * Gets or sets the effective stroke used for the axis.
    */
    get actualStroke(): string;
    set actualStroke(v: string);
    /**
     * Gets or sets the StrokeThickness property.
    *
    * Use `StrokeThickness` property for the thickness of the stroke.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		strokeThickness= 5
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get strokeThickness(): number;
    set strokeThickness(v: number);
    static ngAcceptInputType_strokeThickness: number | string;
    /**
     * Gets or sets the StrokeDashArray property.
    */
    get strokeDashArray(): number[];
    set strokeDashArray(v: number[]);
    static ngAcceptInputType_strokeDashArray: number[] | string;
    /**
     * Gets or sets the Strip property.
    *
    * Use `Strip` property to set the strip of the chart.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		 strip= "grey"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get strip(): string;
    set strip(v: string);
    /**
     * Gets or sets the MajorStroke property.
     * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.
    *
    * Gets or sets the `MajorStroke` using this property.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 	   majorStroke="black"
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get majorStroke(): string;
    set majorStroke(v: string);
    /**
     * Gets or sets the ActualMajorStroke property.
    *
    * The `ActualMajorStroke` property is used for ActualMajorStroke of the axis.
    */
    get actualMajorStroke(): string;
    set actualMajorStroke(v: string);
    /**
     * Gets or sets the MajorStrokeThickness property.
    *
    * Gets or sets the `MajorStrokeThickness` using this property.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 	  majorStrokeThickness="1"
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get majorStrokeThickness(): number;
    set majorStrokeThickness(v: number);
    static ngAcceptInputType_majorStrokeThickness: number | string;
    /**
     * Gets or sets the MajorStrokeDashArray property.
    */
    get majorStrokeDashArray(): number[];
    set majorStrokeDashArray(v: number[]);
    static ngAcceptInputType_majorStrokeDashArray: number[] | string;
    /**
     * Gets or sets the MinorStroke property.
    *
    * Gets or sets the minorStroke thickness using `MinorStrokeThickness` property.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 	 minorStrokeThickness="1"
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get minorStroke(): string;
    set minorStroke(v: string);
    /**
     * Gets or sets the ActualMinorStroke property.
    *
    * The `ActualMinorStroke` property is used for ActualMinorStroke of the axis.
    */
    get actualMinorStroke(): string;
    set actualMinorStroke(v: string);
    /**
     * Gets or sets the MinorStrokeThickness property.
    */
    get minorStrokeThickness(): number;
    set minorStrokeThickness(v: number);
    static ngAcceptInputType_minorStrokeThickness: number | string;
    /**
     * Gets or sets the MinorStrokeDashArray property.
    */
    get minorStrokeDashArray(): number[];
    set minorStrokeDashArray(v: number[]);
    static ngAcceptInputType_minorStrokeDashArray: number[] | string;
    /**
     * Gets or sets the TickStroke property.
    *
    * Use `TickStroke` property for the color of the tickmarks.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		tickStroke="black"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get tickStroke(): string;
    set tickStroke(v: string);
    /**
     * Gets or sets the TickStrokeThickness property.
    *
    * Use `TickStrokeThickness` property for thickness of the stroke tickmarks.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		tickStrokeThicknes="2"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get tickStrokeThickness(): number;
    set tickStrokeThickness(v: number);
    static ngAcceptInputType_tickStrokeThickness: number | string;
    /**
     * Gets or sets the TickStrokeDashArray property.
    */
    get tickStrokeDashArray(): number[];
    set tickStrokeDashArray(v: number[]);
    static ngAcceptInputType_tickStrokeDashArray: number[] | string;
    /**
     * Gets or sets the TickLength property.
    *
    * Use `TickLength` property for The length of the tickmarks to display for this axis.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		tickLength="5"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get tickLength(): number;
    set tickLength(v: number);
    static ngAcceptInputType_tickLength: number | string;
    /**
     * Gets or sets the IsDisabled property. If true, the axis will not be rendered.
    *
    * The `IsDisabled` property is used to decide if the axis will not be rendered.
    */
    get isDisabled(): boolean;
    set isDisabled(v: boolean);
    static ngAcceptInputType_isDisabled: boolean | string;
    /**
     * Gets or sets the IsInverted property.
    *
    * Gets or sets the `IsInverted` property.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		isInverted= true
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get isInverted(): boolean;
    set isInverted(v: boolean);
    static ngAcceptInputType_isInverted: boolean | string;
    /**
     * Gets or sets whether annotations should be shifted to avoid collision, even if this would result in them appearing where they shouldn't be along the scale.
    */
    get shouldAvoidAnnotationCollisions(): boolean;
    set shouldAvoidAnnotationCollisions(v: boolean);
    static ngAcceptInputType_shouldAvoidAnnotationCollisions: boolean | string;
    /**
     * ets or sets whether annotations should be kept in view, even if they aren't positioned where they should appear on the scale.
    */
    get shouldKeepAnnotationsInView(): boolean;
    set shouldKeepAnnotationsInView(v: boolean);
    static ngAcceptInputType_shouldKeepAnnotationsInView: boolean | string;
    /**
     * Gets or sets whether to use label height measurement when determining the initial number of labels to render, before resolving collisions, etc.
    */
    get usePerLabelHeightMeasurement(): boolean;
    set usePerLabelHeightMeasurement(v: boolean);
    static ngAcceptInputType_usePerLabelHeightMeasurement: boolean | string;
    /**
     * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.
    *
    * Use `UseEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,
    * before resolving collisions, etc.
    */
    get useEnhancedIntervalManagement(): boolean;
    set useEnhancedIntervalManagement(v: boolean);
    static ngAcceptInputType_useEnhancedIntervalManagement: boolean | string;
    /**
     * Gets or sets the minimum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.
    *
    * The `EnhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		enhancedIntervalMinimumCharacters=5
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    *
    * </igx-data-chart>
    * ```
    */
    get enhancedIntervalMinimumCharacters(): number;
    set enhancedIntervalMinimumCharacters(v: number);
    static ngAcceptInputType_enhancedIntervalMinimumCharacters: number | string;
    /**
     * Gets or sets whether the enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.
    */
    get enhancedIntervalPreferMoreCategoryLabels(): boolean;
    set enhancedIntervalPreferMoreCategoryLabels(v: boolean);
    static ngAcceptInputType_enhancedIntervalPreferMoreCategoryLabels: boolean | string;
    /**
     * Gets or sets the text style to use for axis labels.
    *
    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
    */
    get labelTextStyle(): string;
    set labelTextStyle(v: string);
    /**
     * The color of the {0}.
    *
    * The `labelTextColor` property Overrides the color of the text used for the axis labels.
    */
    get labelTextColor(): string;
    set labelTextColor(v: string);
    /**
     * Gets or sets the location of the {0}.
    *
    * The `Location` property is used for the location.
    */
    get labelLocation(): AxisLabelsLocation;
    set labelLocation(v: AxisLabelsLocation);
    static ngAcceptInputType_labelLocation: AxisLabelsLocation | string;
    /**
     * Gets or sets the visibility of the {0}.
    *
    * The `Visibility` property is used for the visibility of the axis.
    */
    get labelVisibility(): Visibility;
    set labelVisibility(v: Visibility);
    static ngAcceptInputType_labelVisibility: Visibility | string;
    /**
     * Gets or sets whether the first label is displayed when the zoom level is set to 1.
    *
    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
    */
    get labelShowFirstLabel(): boolean;
    set labelShowFirstLabel(v: boolean);
    static ngAcceptInputType_labelShowFirstLabel: boolean | string;
    /**
     * Gets or sets the angle of the {0}.
    *
    * The `Angle` property is used to set the angle of the axis.
    */
    get labelAngle(): number;
    set labelAngle(v: number);
    static ngAcceptInputType_labelAngle: number | string;
    /**
     * Distance between the axis and the edge of the control.
    *
    * The `Extent` property is used for the extent.
    */
    get labelExtent(): number;
    set labelExtent(v: number);
    static ngAcceptInputType_labelExtent: number | string;
    /**
     * Margin applied to the left of the {0}.
    *
    * The `labelLeftMargin` property is used for the left margin of the labels.
    */
    get labelLeftMargin(): number;
    set labelLeftMargin(v: number);
    static ngAcceptInputType_labelLeftMargin: number | string;
    /**
     * Margin applied to the right of the {0}.
    *
    * The `labelRightMargin` property is used for the right margin of the labels.
    */
    get labelRightMargin(): number;
    set labelRightMargin(v: number);
    static ngAcceptInputType_labelRightMargin: number | string;
    /**
     * Margin applied above the {0}.
    *
    * The `labelTopMargin` property is used for the top margin of the labels.
    */
    get labelTopMargin(): number;
    set labelTopMargin(v: number);
    static ngAcceptInputType_labelTopMargin: number | string;
    /**
     * Margin applied below the {0}.
    *
    * The `labelBottomMargin` is used to set the bottom margin of the labels.
    */
    get labelBottomMargin(): number;
    set labelBottomMargin(v: number);
    static ngAcceptInputType_labelBottomMargin: number | string;
    /**
     * Gets or sets the horizontal alignment of the {0}.
    *
    * The `HorizontalAlignment` property is used for the horizontal alignment.
    */
    get labelHorizontalAlignment(): HorizontalAlignment;
    set labelHorizontalAlignment(v: HorizontalAlignment);
    static ngAcceptInputType_labelHorizontalAlignment: HorizontalAlignment | string;
    /**
     * Gets or sets the vertical alignment of the {0}.
    *
    * The `VerticalAlignment` property is used for the vertical alignment of the axis.
    */
    get labelVerticalAlignment(): VerticalAlignment;
    set labelVerticalAlignment(v: VerticalAlignment);
    static ngAcceptInputType_labelVerticalAlignment: VerticalAlignment | string;
    ensureLabelSettings(): void;
    /**
     * Gets or sets the CrossingAxis property.
    *
    * The `CrossingAxis` property is used for CrossingAxis .
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		crossingAxis= "xAxis"
    * 		crossingValue= 700
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get crossingAxis(): IgxAxisComponent;
    set crossingAxis(v: IgxAxisComponent);
    /**
     * Gets or sets the CrossingValue property.
    *
    * The `CrossingValue` property is used for CrossingValue of the axis.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data" >
    *     <igx-category-x-axis
    * 		label="label"
    * 		#xAxis>
    *     </igx-category-x-axis>
    *     <igx-numeric-y-axis
    * 		crossingAxis= "xAxis"
    * 		crossingValue= 700
    * 		#yAxis>
    *     </igx-numeric-y-axis>
    * </igx-data-chart>
    * ```
    */
    get crossingValue(): any;
    set crossingValue(v: any);
    /**
     * Gets or sets the title position relative to the axis labels.
    */
    get titlePosition(): AxisTitlePosition;
    set titlePosition(v: AxisTitlePosition);
    static ngAcceptInputType_titlePosition: AxisTitlePosition | string;
    /**
     * Gets or sets the text style to use for axis labels.
    *
    * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
    */
    get titleTextStyle(): string;
    set titleTextStyle(v: string);
    /**
     * The color of the {0}.
    *
    * The `labelTextColor` property Overrides the color of the text used for the axis labels.
    */
    get titleTextColor(): string;
    set titleTextColor(v: string);
    /**
     * Gets or sets the location of the {0}.
    *
    * The `Location` property is used for the location.
    */
    get titleLocation(): AxisLabelsLocation;
    set titleLocation(v: AxisLabelsLocation);
    static ngAcceptInputType_titleLocation: AxisLabelsLocation | string;
    /**
     * Gets or sets the visibility of the {0}.
    *
    * The `Visibility` property is used for the visibility of the axis.
    */
    get titleVisibility(): Visibility;
    set titleVisibility(v: Visibility);
    static ngAcceptInputType_titleVisibility: Visibility | string;
    /**
     * Gets or sets whether the first label is displayed when the zoom level is set to 1.
    *
    * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
    */
    get titleShowFirstLabel(): boolean;
    set titleShowFirstLabel(v: boolean);
    static ngAcceptInputType_titleShowFirstLabel: boolean | string;
    /**
     * Gets or sets the angle of the {0}.
    *
    * The `Angle` property is used to set the angle of the axis.
    */
    get titleAngle(): number;
    set titleAngle(v: number);
    static ngAcceptInputType_titleAngle: number | string;
    /**
     * Distance between the axis and the edge of the control.
    *
    * The `Extent` property is used for the extent.
    */
    get titleExtent(): number;
    set titleExtent(v: number);
    static ngAcceptInputType_titleExtent: number | string;
    /**
     * Margin applied to the left of the {0}.
    *
    * The `labelLeftMargin` property is used for the left margin of the labels.
    */
    get titleLeftMargin(): number;
    set titleLeftMargin(v: number);
    static ngAcceptInputType_titleLeftMargin: number | string;
    /**
     * Margin applied to the right of the {0}.
    *
    * The `labelRightMargin` property is used for the right margin of the labels.
    */
    get titleRightMargin(): number;
    set titleRightMargin(v: number);
    static ngAcceptInputType_titleRightMargin: number | string;
    /**
     * Margin applied above the {0}.
    *
    * The `labelTopMargin` property is used for the top margin of the labels.
    */
    get titleTopMargin(): number;
    set titleTopMargin(v: number);
    static ngAcceptInputType_titleTopMargin: number | string;
    /**
     * Margin applied below the {0}.
    *
    * The `labelBottomMargin` is used to set the bottom margin of the labels.
    */
    get titleBottomMargin(): number;
    set titleBottomMargin(v: number);
    static ngAcceptInputType_titleBottomMargin: number | string;
    /**
     * Gets or sets the horizontal alignment of the {0}.
    *
    * The `HorizontalAlignment` property is used for the horizontal alignment.
    */
    get titleHorizontalAlignment(): HorizontalAlignment;
    set titleHorizontalAlignment(v: HorizontalAlignment);
    static ngAcceptInputType_titleHorizontalAlignment: HorizontalAlignment | string;
    /**
     * Gets or sets the vertical alignment of the {0}.
    *
    * The `VerticalAlignment` property is used for the vertical alignment of the axis.
    */
    get titleVerticalAlignment(): VerticalAlignment;
    set titleVerticalAlignment(v: VerticalAlignment);
    static ngAcceptInputType_titleVerticalAlignment: VerticalAlignment | string;
    ensureTitleSettings(): void;
    private _annotations;
    /**
     * Gets the current annotations for the axis.
    */
    get annotations(): IgxAxisAnnotationCollection;
    set annotations(v: IgxAxisAnnotationCollection);
    static ngAcceptInputType_annotations: IgxAxisAnnotationCollection | string;
    /**
     * Gets or sets the coercion methods to use when loading data from data sources.
     * Should be specified before setting any member paths, if being used. Setting it later
     * will not cause data to be re-imported into the chart.
    *
    * The	`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.
    * Setting it later will not cause data to be reimported into the chart.
    */
    get coercionMethods(): any;
    set coercionMethods(v: any);
    /**
     * Gets or sets whether the series should expect that properties in its items source may be functions that need to be
     * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.
     * This value must be set before assigning an item's source to take effect.
    */
    get expectFunctions(): boolean;
    set expectFunctions(v: boolean);
    static ngAcceptInputType_expectFunctions: boolean | string;
    /**
     * Gets or sets the axis label format string.
    *
    * The `Label` property is used for label mapping of the axis labels.
    */
    get label(): any;
    set label(v: any);
    /**
     * Gets or sets the label format string to use for the label.
    */
    get labelFormat(): string;
    set labelFormat(v: string);
    /**
     * Gets or sets the format specifiers to use with the LabelFormat string.
    */
    get labelFormatSpecifiers(): any[];
    set labelFormatSpecifiers(v: any[]);
    static ngAcceptInputType_labelFormatSpecifiers: any[] | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    getFullRange(): number[];
    /**
     * Renders the axis with no animation.
    
    */
    renderAxis(): void;
    /**
     * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
    
    */
    resetCachedEnhancedInterval(): void;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the label for a data item.
    
    * @param value  * The unscaled value to get a label for.
    */
    getValueLabel(value: number): string;
    /**
     * Scales a value from axis space into screen space.
    
    * @param unscaledValue  * The unscaled axis value to scale.
    */
    scaleValue(unscaledValue: number): number;
    private _rangeChanged;
    /**
     * Occurs when the axis range changes.
    */
    get rangeChanged(): EventEmitter<{
        sender: any;
        args: IgxAxisRangeChangedEventArgs;
    }>;
    private _renderRequested;
    /**
     * This event is raised every time a render has been requested from a series.
    */
    get renderRequested(): EventEmitter<{
        sender: any;
        args: IgxRenderRequestedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxAxisComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxAxisComponent, "ng-component", never, { "name": "name"; "formatLabel": "formatLabel"; "title": "title"; "stroke": "stroke"; "actualStroke": "actualStroke"; "strokeThickness": "strokeThickness"; "strokeDashArray": "strokeDashArray"; "strip": "strip"; "majorStroke": "majorStroke"; "actualMajorStroke": "actualMajorStroke"; "majorStrokeThickness": "majorStrokeThickness"; "majorStrokeDashArray": "majorStrokeDashArray"; "minorStroke": "minorStroke"; "actualMinorStroke": "actualMinorStroke"; "minorStrokeThickness": "minorStrokeThickness"; "minorStrokeDashArray": "minorStrokeDashArray"; "tickStroke": "tickStroke"; "tickStrokeThickness": "tickStrokeThickness"; "tickStrokeDashArray": "tickStrokeDashArray"; "tickLength": "tickLength"; "isDisabled": "isDisabled"; "isInverted": "isInverted"; "shouldAvoidAnnotationCollisions": "shouldAvoidAnnotationCollisions"; "shouldKeepAnnotationsInView": "shouldKeepAnnotationsInView"; "usePerLabelHeightMeasurement": "usePerLabelHeightMeasurement"; "useEnhancedIntervalManagement": "useEnhancedIntervalManagement"; "enhancedIntervalMinimumCharacters": "enhancedIntervalMinimumCharacters"; "enhancedIntervalPreferMoreCategoryLabels": "enhancedIntervalPreferMoreCategoryLabels"; "labelTextStyle": "labelTextStyle"; "labelTextColor": "labelTextColor"; "labelLocation": "labelLocation"; "labelVisibility": "labelVisibility"; "labelShowFirstLabel": "labelShowFirstLabel"; "labelAngle": "labelAngle"; "labelExtent": "labelExtent"; "labelLeftMargin": "labelLeftMargin"; "labelRightMargin": "labelRightMargin"; "labelTopMargin": "labelTopMargin"; "labelBottomMargin": "labelBottomMargin"; "labelHorizontalAlignment": "labelHorizontalAlignment"; "labelVerticalAlignment": "labelVerticalAlignment"; "crossingAxis": "crossingAxis"; "crossingValue": "crossingValue"; "titlePosition": "titlePosition"; "titleTextStyle": "titleTextStyle"; "titleTextColor": "titleTextColor"; "titleLocation": "titleLocation"; "titleVisibility": "titleVisibility"; "titleShowFirstLabel": "titleShowFirstLabel"; "titleAngle": "titleAngle"; "titleExtent": "titleExtent"; "titleLeftMargin": "titleLeftMargin"; "titleRightMargin": "titleRightMargin"; "titleTopMargin": "titleTopMargin"; "titleBottomMargin": "titleBottomMargin"; "titleHorizontalAlignment": "titleHorizontalAlignment"; "titleVerticalAlignment": "titleVerticalAlignment"; "annotations": "annotations"; "coercionMethods": "coercionMethods"; "expectFunctions": "expectFunctions"; "label": "label"; "labelFormat": "labelFormat"; "labelFormatSpecifiers": "labelFormatSpecifiers"; }, { "rangeChanged": "rangeChanged"; "renderRequested": "renderRequested"; }, never, never>;
}
