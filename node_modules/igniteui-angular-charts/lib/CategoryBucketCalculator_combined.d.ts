import { Base, Type, Point } from "igniteui-angular-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { FramePreparer } from "./FramePreparer";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { List$1 } from "igniteui-angular-core";
import { ISupportsMarkers } from "./ISupportsMarkers";
import { IProvidesViewport } from "./IProvidesViewport";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { CategoryFrame } from "./CategoryFrame";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { PreparationParams } from "./PreparationParams";
import { Frame } from "./Frame";
import { ICategoryScaler } from "./ICategoryScaler";
import { ValuesHolder } from "./ValuesHolder";
import { NumericAxisBase } from "./NumericAxisBase";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { ICategorySeriesInteractionManager } from "./ICategorySeriesInteractionManager";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "igniteui-angular-core";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { CategoryMode } from "./CategoryMode";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { AssigningCategoryMarkerStyleEventArgs } from "./AssigningCategoryMarkerStyleEventArgs";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { Pool$1 } from "igniteui-angular-core";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { TransitionOutSpeedType } from "./TransitionOutSpeedType";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { RenderSurface } from "./RenderSurface";
import { Clipper } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class CategoryBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected c: CategorySeriesView;
    constructor(a: CategorySeriesView);
    e: number;
    f: number;
    d: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    g(a: number): void;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class CategoryFramePreparerBase extends FramePreparer {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    g: IBucketizer;
    h: IIsCategoryBased;
    protected abstract l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    m: boolean;
    private i;
    r(a: ICategoryScaler, b: Rect, c: Rect, d: Rect): number;
    private s;
    d(a: Frame, b: SeriesView): void;
    protected v(a: CategoryFrame, b: SeriesView): void;
    private o;
    protected get q(): List$1<number[]>;
    private p;
    private n;
    protected t(a: PreparationParams, b: ValuesHolder, c: number, d: boolean, e: boolean): number;
    protected k(): boolean;
    protected abstract z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected abstract u(a: ValuesHolder, b: number, c: boolean): void;
    protected abstract e(a: number, b: ValuesHolder): number[];
    protected f(a: PreparationParams, b: number, c: ValuesHolder, d: number, e: boolean, f: number[], g: number): {
        ret: number[];
        p1?: number;
        p4: boolean;
        p5: number[];
    };
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected abstract x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected abstract j(a: PreparationParams): ValuesHolder;
}
/**
 * @hidden
 */
export declare class CategoryFramePreparer extends CategoryFramePreparerBase {
    static $t: Type;
    constructor(a: number, b: IIsCategoryBased);
    constructor(a: number, b: IIsCategoryBased, c: ISupportsMarkers, d: IProvidesViewport, e: ISupportsErrorBars, f: IBucketizer);
    constructor(a: number, ..._rest: any[]);
    private aa;
    private ab;
    protected ac: IHasCategoryTrendline;
    protected ad: IHasSingleValueCategory;
    protected l(a: CategoryFrame, b: number[], c: IDetectsCollisions, d: number, e: number, f: number): boolean;
    protected j(a: PreparationParams): ValuesHolder;
    protected x(a: PreparationParams, b: number[], c: number, d: boolean, e: ScalerParams, f: ScalerParams): void;
    protected y(a: PreparationParams, b: number, c: boolean, d: ScalerParams, e: ScalerParams, f: boolean, g: boolean): void;
    protected w(a: PreparationParams, b: ValuesHolder, c: number): void;
    protected z(a: ValuesHolder, b: number, c: boolean, d: boolean): void;
    protected u(a: ValuesHolder, b: number, c: boolean): void;
    protected e(a: number, b: ValuesHolder): number[];
}
/**
 * @hidden
 */
export declare abstract class CategorySeries extends MarkerSeries implements IHasCategoryModePreference, ISupportsErrorBars {
    static $t: Type;
    yq: CategoryFramePreparer;
    protected cq(): SeriesView;
    yu: CategorySeriesView;
    private yy;
    get yz(): ICategorySeriesInteractionManager;
    d9(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    private zq;
    qx(a: SeriesView): void;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    get categoryAxis(): CategoryAxisBase;
    yk(): CategoryAxisBase;
    y0(): NumericAxisBase;
    protected get_ei(): boolean;
    protected get_f3(): boolean;
    protected get_ew(): boolean;
    constructor();
    ac(): void;
    zb: boolean;
    za: boolean;
    protected y7: boolean;
    protected y6: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    assigningCategoryMarkerStyle: (sender: any, args: AssigningCategoryMarkerStyleEventArgs) => void;
    zd(): boolean;
    protected ze(): boolean;
    protected z3(a: AssigningCategoryStyleEventArgs): void;
    protected z2(a: AssigningCategoryMarkerStyleEventArgs): void;
    ye(a: number, b: number): any[];
    o3(a: boolean, b: SeriesView): void;
    bp(): SeriesComponentsForView;
    p6(): void;
    zh: boolean;
    protected sl(a: Rect, b: Rect): void;
    yw: CategoryTransitionInMode;
    zc: boolean;
    protected sk(a: Rect, b: Rect): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    protected y9(): boolean;
    protected y8(): boolean;
    zk(a: Point): number;
    protected get_fq(): boolean;
    az(): CategoryAxisBase;
    j3(a: Point): number;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    kl(a: Point): any;
    j1(a: Point): number;
    ip(a: Point): number;
    private y4;
    private y5;
    df(a: any, b: Point, c: boolean): HighlightingInfo;
    protected get_fc(): boolean;
    o1(): void;
    de(a: any, b: Point, c: boolean): HighlightingInfo;
    protected zj(): List$1<Marker>;
    protected y3(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected y2(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected y1(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    yn: CategoryFrame;
    yp: CategoryFrame;
    yl: CategoryFrame;
    yo: CategoryFrame;
    ym(): CategoryFrame;
    yt: CategorySeriesRenderManager;
    protected zz(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: number): void;
    z0(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: number): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    private zi;
    protected gl(): boolean;
    protected gm(): boolean;
    protected yv(): CategoryTransitionInMode;
    yx: CategoryTransitionSourceFramePreparer;
    protected o4(): void;
    ro(a: boolean): void;
    protected c2(): TransitionInSpeedType;
    protected c5(): TransitionOutSpeedType;
    protected zl(): number;
    protected zf(): boolean;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    kt(): any;
    zp(): number;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    zy(a: CategorySeriesView, b: CategoryFrame): void;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    z1(a: CategoryFrame, b: CategorySeriesView): void;
    zm(a: SeriesView): number;
    zn(a: SeriesView): number;
    zo(a: SeriesView): number;
    zx(a: SeriesView): void;
    rp(a: Rect, b: RenderSurface): void;
    z5(): void;
    abstract fetchXAxis(): Axis;
    abstract fetchYAxis(): Axis;
    abstract zg(): boolean;
    yr(a: CategorySeriesView): CategoryFramePreparer;
    av(a: Axis): Axis;
    ai(): Axis[];
    static yf(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CategorySeriesView extends MarkerSeriesView implements ISupportsMarkers {
    static $t: Type;
    cy: CategorySeries;
    c1: number;
    c0(a: CategoryFrame): boolean;
    c3(a: CategoryFrame): void;
    constructor(a: CategorySeries);
    updateMarkerTemplate(a: number, b: number, c: number): void;
    cw: CategoryBucketCalculator;
    cx(): CategoryBucketCalculator;
    cz: Pool$1<Marker>;
    get shouldDisplayMarkers(): boolean;
    updateMarkerCount(a: number): void;
    cj(a: (arg1: Marker) => void): void;
    c2(): void;
}
