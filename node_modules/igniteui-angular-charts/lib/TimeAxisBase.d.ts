import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis } from "./ISortingAxis";
import { IDateTimeAxis } from "./IDateTimeAxis";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { IList$1, Type } from "igniteui-angular-core";
import { AxisOrientation } from "./AxisOrientation";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-angular-core";
import { CategoryMode } from "./CategoryMode";
import { SortedListView$1 } from "./SortedListView$1";
import { Series } from "./Series";
import { AxisLabelPanelBase } from "./AxisLabelPanelBase";
/**
 * @hidden
 */
export declare abstract class TimeAxisBase extends CategoryAxisBase implements ISortingAxis, IDateTimeAxis {
    static $t: Type;
    constructor();
    ag(): number[];
    ek(a: number, b: ScalerParams): number;
    fy(a: any, b: string): any;
    private mz;
    private m0;
    en(a: number, b: ScalerParams): number;
    getUnscaledValue3(a: number, b: Rect, c: Rect, d: CategoryMode): number;
    i$h(): void;
    nf(): void;
    protected nk(): void;
    dateTimeMemberPath: string;
    get mj(): IFastItemColumn$1<Date>;
    set mj(a: IFastItemColumn$1<Date>);
    private mi;
    private mr;
    protected get ms(): List$1<number>;
    protected set ms(a: List$1<number>);
    get i$b(): List$1<number>;
    protected ng(): void;
    i$e(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m2(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m1(a: Date): number;
    i$g(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m5(a: Rect, b: Rect, c: Rect, d: Rect): number;
    protected m4(a: Date): number;
    i$d(a: number): number;
    i$c(a: number): number;
    protected m3(a: Date, b: SortedListView$1<Date>): number;
    i$f(a: number): number;
    i$i(): void;
    mo: boolean;
    private mm;
    protected get_mn(): boolean;
    protected set_mn(a: boolean): void;
    get mn(): boolean;
    set mn(a: boolean);
    hz(a: string): void;
    h2(a: any): void;
    h1(a: any): void;
    c3(): boolean;
    protected mq(): boolean;
    protected mp(): boolean;
    private mu;
    get actualMinimumValue(): Date;
    set actualMinimumValue(a: Date);
    private mt;
    f3(): any;
    get actualMaximumValue(): Date;
    set actualMaximumValue(a: Date);
    f2(): any;
    minimumValue: Date;
    maximumValue: Date;
    private nh;
    protected hx(a: any, b: string, c: any, d: any): void;
    private ne;
    protected mk(a: string): IFastItemColumn$1<Date>;
    static ml(a: string, b: CategoryAxisBase): IFastItemColumn$1<Date>;
    av(): AxisLabelPanelBase;
    protected get_a2(): AxisOrientation;
    get a2(): AxisOrientation;
    protected ia(a: boolean): void;
    protected get_ce(): boolean;
    protected startCursor(): void;
    protected resetCursor(): void;
    StartTimeCursor(): void;
    ResetTimeCursor(): void;
    getCategorySize(a: Rect, b: Rect, c: Rect): number;
    getGroupCenter(a: number, b: Rect, c: Rect, d: Rect): number;
    k5(a: Rect, b: Rect, c: Rect): number;
    protected get_cn(): boolean;
    protected nd(a: Date, b: Date): number;
    preferredCategoryMode(a: Series): CategoryMode;
    get isVertical(): boolean;
    j$d(a: number, b: ScalerParams): number;
    j$c(a: number, b: ScalerParams): number;
    j$e(a: IList$1<number[]>, b: IList$1<number>, c: number, d: number, e: ScalerParams): void;
    j$f(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    j$g(a: IList$1<number>, b: number, c: number, d: ScalerParams): void;
    get j$b(): boolean;
    j$a(): number[];
    get i$a(): boolean;
    static $$p: string[];
}
