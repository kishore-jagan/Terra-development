import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { Style } from "igniteui-angular-core";
import { MarkerType } from "./MarkerType";
import { DataTemplate } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { Series } from "./Series";
import { Rect } from "igniteui-angular-core";
import { Type, Point } from "igniteui-angular-core";
import { SeriesView } from "./SeriesView";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { DataContext } from "igniteui-angular-core";
import { IDictionary$2 } from "igniteui-angular-core";
import { HashPool$2 } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { FrameworkElement } from "igniteui-angular-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { Size } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { PointCollection } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class ScatterPolygonSeries extends ShapeSeriesBase {
    static $t: Type;
    protected bi(): Series;
    protected get_fo(): boolean;
    protected get_fj(): boolean;
    constructor();
    protected xy(): boolean;
    protected y0(a: SeriesView): void;
    aae(a: ScatterPolygonSeriesView): void;
    private zx;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    zu: ScatterPolygonSeriesView;
    zv: ShapeAxisInfoCache;
    private static aa1;
    private zs;
    private zt;
    protected get_hasMarkers(): boolean;
    protected get_ej(): boolean;
    vf(): Brush;
    vg(): Brush;
    st(): DataTemplate;
    l8(): string;
    zw: StyleSelector;
    aa3: Style;
    zr: MarkerType;
    aai: DataTemplate;
    zz: number;
    il(): number;
    aag: DataTemplate;
    aah: DataTemplate;
    aaz: Brush;
    aax: Brush;
    aa0: Brush;
    aay: Brush;
    aa2: Style;
    zi: CollisionAvoidanceType;
    private zn;
    get zo(): MarkerOutlineMode;
    set zo(a: MarkerOutlineMode);
    zq(): MarkerOutlineMode;
    sf(a: MarkerOutlineMode): void;
    zp: MarkerOutlineMode;
    private zj;
    get zk(): MarkerFillMode;
    set zk(a: MarkerFillMode);
    zm(): MarkerFillMode;
    se(a: MarkerFillMode): void;
    sg(a: number): void;
    zl: MarkerFillMode;
    protected sb(): void;
    protected qo(): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    a1(a: Point, b: boolean): DataContext;
    aaf(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    d9(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    zh(a: ScatterPolygonSeriesView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    zy(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
    static $t: Type;
    constructor(a: ScatterPolygonSeries);
    au(): void;
    get dg(): NumericMarkerManager;
    dk: boolean;
    protected d2(a: IDictionary$2<any, OwnedPoint>): void;
    protected da(): Point[];
    protected dl(): List$1<number>;
    private db;
    private dm;
    private dh;
    private df;
    protected c5(a: number, b: List$1<PointCollection>): PathGeometry;
    cm(a: FrameworkElement, b: any, c: boolean): void;
    protected ck(a: FrameworkElement, b: PathGeometry): void;
    private dj;
    di: HashPool$2<any, Marker>;
    dw(a: (arg1: Marker) => void): void;
    dy(a: HashPool$2<any, Marker>): void;
    de(): Marker;
    protected dn: List$1<Marker>;
    b4(a: Point): Marker;
    private dd;
    d0(a: Marker): void;
    dz(a: Marker): void;
    d1(a: Marker): void;
    d3(a: boolean): void;
    protected bj(a: any, b: number): void;
    private dc;
    protected bk(a: any, b: number): void;
    protected a7(a: RenderingContext, b: boolean): void;
    dv(): void;
    ds(): void;
    dt(): void;
    dq(): void;
    du(): void;
    dr(): void;
    dp(a: string): void;
    dx(): void;
    private d4;
    d5(a: Marker): Size;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
