import { EventEmitter, OnInit } from '@angular/core';
import { IgxPropertyUpdatedEventArgs } from "igniteui-angular-core";
import { SizeScale } from "./SizeScale";
import * as i0 from "@angular/core";
/**
 * Represents a scale that is used determine an object's size.
*/
export declare class IgxSizeScaleComponent implements OnInit {
    protected createImplementation(): SizeScale;
    ngOnInit(): void;
    protected _implementation: any;
    /**
     * @hidden
     */
    get i(): SizeScale; /**
                                 * @hidden
                                 */
    static _createFromInternal(internal: any): IgxSizeScaleComponent;
    private onImplementationCreated;
    constructor();
    /**
     * Gets or sets global minimum value that will be mapped to MinumumValue of this scale
    */
    get globalMinimum(): number;
    set globalMinimum(v: number);
    static ngAcceptInputType_globalMinimum: number | string;
    /**
     * Gets or sets global maximum value that will be mapped to MaxumumValue of this scale
    */
    get globalMaximum(): number;
    set globalMaximum(v: number);
    static ngAcceptInputType_globalMaximum: number | string;
    /**
     * Gets or sets the minimum size (in pixels) for this scale.
    */
    get minimumValue(): number;
    set minimumValue(v: number);
    static ngAcceptInputType_minimumValue: number | string;
    /**
     * Gets or sets the maximum size (in pixels) for this scale.
    */
    get maximumValue(): number;
    set maximumValue(v: number);
    static ngAcceptInputType_maximumValue: number | string;
    /**
     * Gets or sets whether the scale is logarithmic.
    */
    get isLogarithmic(): boolean;
    set isLogarithmic(v: boolean);
    static ngAcceptInputType_isLogarithmic: boolean | string;
    /**
     * Gets or sets the logarithm base for this scale.
    */
    get logarithmBase(): number;
    set logarithmBase(v: number);
    static ngAcceptInputType_logarithmBase: number | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    getCurrentGlobalMinimum(): number;
    getCurrentGlobalMaximum(): number;
    private _propertyUpdated;
    /**
     * Event raised when a property (including "effective" and non-dependency property) value changes.
    */
    get propertyUpdated(): EventEmitter<{
        sender: any;
        args: IgxPropertyUpdatedEventArgs;
    }>;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxSizeScaleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxSizeScaleComponent, "igx-size-scale", never, { "globalMinimum": "globalMinimum"; "globalMaximum": "globalMaximum"; "minimumValue": "minimumValue"; "maximumValue": "maximumValue"; "isLogarithmic": "isLogarithmic"; "logarithmBase": "logarithmBase"; }, { "propertyUpdated": "propertyUpdated"; }, never, never>;
}
