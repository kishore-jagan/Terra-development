import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { Type, Point } from "igniteui-angular-core";
import { Series } from "./Series";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { RenderSurface } from "./RenderSurface";
import { SeriesView } from "./SeriesView";
import { WriteableBitmap } from "igniteui-angular-core";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class ScatterAreaSeries extends ScatterTriangulationSeries {
    static $t: Type;
    protected bi(): Series;
    protected get_es(): boolean;
    constructor();
    private yl;
    get yn(): ColorScale;
    set yn(a: ColorScale);
    private y4;
    ko(a: any, b: string): any;
    mb(a: string): string;
    yz: string;
    private yq;
    private get yr();
    private set yr(value);
    protected get_g5(): boolean;
    protected set_g5(a: boolean): void;
    protected q5(a: any, b: string, c: any, d: any): void;
    ro(a: boolean): void;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected y5(a: SeriesView): void;
    private y2;
    kl(a: Point): any;
    protected yj: number[];
    protected yk: number[];
    yp(a: SeriesView, b: ScalerParams, c: ScalerParams): TriangleRasterizer;
    protected ys(): ObservableColorCollection;
    ym: ColorScale;
    y6(): void;
    protected sb(): void;
    o3(a: boolean, b: SeriesView): void;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    yo: ScatterAreaSeriesView;
    y3(a: any): void;
    yv: string;
    yx: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterAreaSeriesView extends SeriesView {
    static $t: Type;
    private b4;
    private b0;
    get b3(): number[];
    set b3(a: number[]);
    constructor(a: ScatterAreaSeries);
    cd(a: number, b: number): void;
    b9(a: any): void;
    private b8;
    private b7;
    private b6;
    b1(): number[];
    b2(a: boolean): number[];
    private cc;
    b5(a: Rect, b: ColorScale, c: IFastItemColumn$1<number>): TriangleRasterizer;
    cb(a: TriangleRasterizer): void;
    ca(): void;
    protected a8(a: RenderingContext, b: boolean): void;
    ce(a: WriteableBitmap): void;
    an(a: any): void;
    getDefaultTooltipTemplate(): string;
}
