import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Type, Point } from "igniteui-angular-core";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Pool$1 } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { CollisionGeometry } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { RadialFrame } from "./RadialFrame";
import { RadialBaseView } from "./RadialBaseView";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class RadialPieSeries extends AnchoredRadialSeries {
    static $t: Type;
    protected bi(): Series;
    protected get_fl(): boolean;
    protected get_fj(): boolean;
    protected ji(): number;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    add: RadialPieSeriesView;
    constructor();
    adh: number;
    adi: number;
    private ade;
    get adf(): IFastItemColumn$1<any>;
    set adf(a: IFastItemColumn$1<any>);
    private adj;
    get adl(): string;
    set adl(a: string);
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    o3(a: boolean, b: SeriesView): void;
    iu(): number;
    aq(a: number, b: number): CollisionGeometry;
    protected get_eb(): boolean;
    protected get_ab5(): boolean;
    protected get_abz(): boolean;
    aa2(a: RadialFrame, b: RadialBaseView): void;
    private ads;
    private adg;
    private adr;
    protected q5(a: any, b: string, c: any, d: any): void;
    wh(a: Point): Rect;
    protected ks(a: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialPieSeriesView extends AnchoredRadialSeriesView {
    static $t: Type;
    protected c5: RadialPieSeries;
    constructor(a: RadialPieSeries);
    c6: Pool$1<Path>;
    au(): void;
    protected c7: List$1<Path>;
    dd(): Path;
    c8(a: Path): void;
    da(a: Path): void;
    c9(a: Path): void;
    protected bg(a: any, b: number): void;
    protected ac(a: number): any;
    private dc;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    db(): void;
    an(a: any): void;
}
