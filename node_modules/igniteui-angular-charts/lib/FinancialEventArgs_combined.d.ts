import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-angular-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Series } from "./Series";
import { Rect } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-angular-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "igniteui-angular-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-angular-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { Dictionary$2 } from "igniteui-angular-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { TransitionOutSpeedType } from "./TransitionOutSpeedType";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    get position(): number;
    set position(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _dataSource;
    get dataSource(): FinancialCalculationDataSource;
    set dataSource(a: FinancialCalculationDataSource);
    private _supportingCalculations;
    get supportingCalculations(): FinancialCalculationSupportingCalculations;
    set supportingCalculations(a: FinancialCalculationSupportingCalculations);
    private _basedOn;
    get basedOn(): IList$1<string>;
    set basedOn(a: IList$1<string>);
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    private z1;
    private zz;
    private z0;
    private zy;
    private z2;
    kt(): any;
    qx(a: SeriesView): void;
    xf: FinancialSeriesView;
    protected get_e4(): boolean;
    ai(): Axis[];
    ko(a: any, b: string): any;
    mb(a: string): string;
    protected yy(): number;
    private yw;
    aj(a: Point): Point[][];
    ak(a: Point): Point[][];
    constructor();
    aao: Brush;
    vq(): Brush;
    vr(): Brush;
    o0(): void;
    protected get_ei(): boolean;
    protected get_f3(): boolean;
    wy: CategoryAxisBase;
    xh: NumericYAxis;
    zo: string;
    get xu(): IFastItemColumn$1<number>;
    set xu(a: IFastItemColumn$1<number>);
    private xp;
    zf: string;
    get xs(): IFastItemColumn$1<number>;
    set xs(a: IFastItemColumn$1<number>);
    private xn;
    zk: string;
    get xt(): IFastItemColumn$1<number>;
    set xt(a: IFastItemColumn$1<number>);
    private xo;
    y2: string;
    get xr(): IFastItemColumn$1<number>;
    set xr(a: IFastItemColumn$1<number>);
    private xm;
    zs: string;
    get xw(): IFastItemColumn$1<number>;
    set xw(a: IFastItemColumn$1<number>);
    private xq;
    zb: string;
    y7: string;
    y9: string;
    y5: string;
    zd: string;
    protected f9(): boolean;
    x4: boolean;
    protected xz: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    x6(): boolean;
    protected z5(a: AssigningCategoryStyleEventArgs): void;
    protected w7: CategorySeriesRenderManager;
    protected z3(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean, g: number): void;
    yo(a: Point): number;
    j8(a: Point, b: boolean): number;
    j6(a: Point, b: boolean): number;
    im(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    v6(a: Point, b: boolean, c: boolean): Point;
    i3(a: Point, b: boolean, c: boolean): number;
    iz(a: Point, b: boolean, c: boolean): number;
    i1(a: Point, b: boolean, c: boolean): number;
    yq(a: Point, b: boolean, c: boolean): number;
    yr(a: Point, b: boolean, c: boolean): number;
    ys(a: Point, b: boolean, c: boolean): number;
    v2(a: Point, b: boolean, c: boolean): Point;
    v4(a: Point, b: boolean, c: boolean): Point;
    aaq(a: Point, b: boolean, c: boolean): Point;
    aap(a: Point, b: boolean, c: boolean): Point;
    aar(a: Point, b: boolean, c: boolean): Point;
    p6(): void;
    protected sl(a: Rect, b: Rect): void;
    protected sk(a: Rect, b: Rect): void;
    protected x9: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected ya: Dictionary$2<string, string>;
    private xv;
    private zx;
    private xy;
    protected q5(a: any, b: string, c: any, d: any): void;
    x1(a: any): boolean;
    x0(a: any): boolean;
    protected wr(a: number, b: number, c: Axis): any[];
    protected yv(a: SeriesView): number;
    protected yx(a: SeriesView): number;
    wq(a: number, b: number): any[];
    private xl;
    protected get_fc(): boolean;
    o1(): void;
    de(a: any, b: Point, c: boolean): HighlightingInfo;
    yz(a: Point): number;
    protected xk(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xj(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected x2(): boolean;
    ip(a: Point): number;
    j1(a: Point): number;
    protected get_fq(): boolean;
    az(): CategoryAxisBase;
    j3(a: Point): number;
    kl(a: Point): any;
    w2: CategoryFrame;
    w4: CategoryFrame;
    w0: CategoryFrame;
    w1(): CategoryFrame;
    protected yp(a: Rect, b: Rect, c: Rect): number;
    w9: CategoryTransitionInMode;
    x5: boolean;
    protected gl(): boolean;
    protected w8(): CategoryTransitionInMode;
    protected c2(): TransitionInSpeedType;
    protected c5(): TransitionOutSpeedType;
    z6(a: CategoryFrame, b: FinancialSeriesView): void;
    z4(a: CategoryFrame, b: FinancialSeriesView): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    xa: CategoryTransitionSourceFramePreparer;
    yt(a: FinancialSeriesView): number;
    protected o4(): void;
    ro(a: boolean): void;
    protected gm(): boolean;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected x7(a: IList$1<string>): boolean;
    get x8(): boolean;
    protected x3(): boolean;
    protected zw(a: FinancialEventArgs): void;
    protected get yg(): IEnumerable$1<number>;
    private _yd;
    private yd;
    protected get yf(): IEnumerable$1<number>;
    private _yc;
    private yc;
    protected get ye(): IEnumerable$1<number>;
    private _yb;
    private yb;
    yi(a: IList$1<number>): IList$1<number>;
    private xx;
    protected yh(): IList$1<string>;
    private ym;
    getOpenColumnAsArray(): number[];
    private yk;
    getHighColumnAsArray(): number[];
    private yl;
    getLowColumnAsArray(): number[];
    private yj;
    getCloseColumnAsArray(): number[];
    private yn;
    getVolumeColumnAsArray(): number[];
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected xb(a: number, b: number): FinancialCalculationDataSource;
    yu(a: number): number;
    protected xc(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    get categoryAxis(): CategoryAxisBase;
    private w3;
    rp(a: Rect, b: RenderSurface): void;
    private wz;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    av(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private w5;
    get w6(): CategoryMode;
    set w6(a: CategoryMode);
    protected get_fk(): boolean;
    rx(a: Brush, b: Brush): void;
    private z7;
    private xg;
    private xi;
    kn(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    get openColumn(): IList$1<number>;
    set openColumn(a: IList$1<number>);
    private _closeColumn;
    get closeColumn(): IList$1<number>;
    set closeColumn(a: IList$1<number>);
    private _highColumn;
    get highColumn(): IList$1<number>;
    set highColumn(a: IList$1<number>);
    private _lowColumn;
    get lowColumn(): IList$1<number>;
    set lowColumn(a: IList$1<number>);
    private _volumeColumn;
    get volumeColumn(): IList$1<number>;
    set volumeColumn(a: IList$1<number>);
    private _indicatorColumn;
    get indicatorColumn(): IList$1<number>;
    set indicatorColumn(a: IList$1<number>);
    private _typicalColumn;
    get typicalColumn(): CalculatedColumn;
    set typicalColumn(a: CalculatedColumn);
    private _trueRange;
    get trueRange(): CalculatedColumn;
    set trueRange(a: CalculatedColumn);
    private _trueLow;
    get trueLow(): CalculatedColumn;
    set trueLow(a: CalculatedColumn);
    private _period;
    get period(): number;
    set period(a: number);
    private _shortPeriod;
    get shortPeriod(): number;
    set shortPeriod(a: number);
    private _longPeriod;
    get longPeriod(): number;
    set longPeriod(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _calculateFrom;
    get calculateFrom(): number;
    set calculateFrom(a: number);
    private _calculateCount;
    get calculateCount(): number;
    set calculateCount(a: number);
    private _multiplier;
    get multiplier(): number;
    set multiplier(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _specifiesRange;
    get specifiesRange(): boolean;
    set specifiesRange(a: boolean);
    private _series;
    get series(): FinancialSeries;
    set series(a: FinancialSeries);
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    b2: FinancialSeries;
    b0: FinancialBucketCalculator;
    b4: number;
    b3(a: CategoryFrame): boolean;
    b5(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract b1(): FinancialBucketCalculator;
    au(): void;
    getDefaultTooltipTemplate(): string;
    protected af(): void;
}
