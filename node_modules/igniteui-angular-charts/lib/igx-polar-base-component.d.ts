import { EventEmitter } from '@angular/core';
import { IgPoint } from "igniteui-angular-core";
import { IgxNumericAngleAxisComponent } from "./igx-numeric-angle-axis-component";
import { IgxNumericRadiusAxisComponent } from "./igx-numeric-radius-axis-component";
import { TrendLineType } from "igniteui-angular-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { IgxAssigningPolarStyleEventArgs } from "./igx-assigning-polar-style-event-args";
import { IgxAssigningPolarMarkerStyleEventArgs } from "./igx-assigning-polar-marker-style-event-args";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { PolarBase } from "./PolarBase";
import * as i0 from "@angular/core";
/**
 * Represents the base class from which all IgxDataChartComponent polar series are derived.
*/
export declare abstract class IgxPolarBaseComponent extends IgxMarkerSeriesComponent {
    /**
                                 * @hidden
                                 */
    get i(): PolarBase;
    constructor();
    /**
     * Checks if this series is a polar series
    */
    get isPolar(): boolean;
    static ngAcceptInputType_isPolar: boolean | string;
    /**
     * Gets or sets the path to use to find the angle values for the series.
    */
    get angleMemberPath(): string;
    set angleMemberPath(v: string);
    /**
     * Gets or sets the path to use to get the radius values for the series.
    */
    get radiusMemberPath(): string;
    set radiusMemberPath(v: string);
    /**
     * Gets or sets the highlighted radius value mapping property for the current series object.
    */
    get highlightedRadiusMemberPath(): string;
    set highlightedRadiusMemberPath(v: string);
    /**
     * Gets or sets the highlighted angle value mapping property for the current series object.
    */
    get highlightedAngleMemberPath(): string;
    set highlightedAngleMemberPath(v: string);
    /**
     * Gets the effective angle axis for the current series object.
    */
    get angleAxis(): IgxNumericAngleAxisComponent;
    set angleAxis(v: IgxNumericAngleAxisComponent);
    /**
     * Gets the effective radius axis for the current series object.
    */
    get radiusAxis(): IgxNumericRadiusAxisComponent;
    set radiusAxis(v: IgxNumericRadiusAxisComponent);
    /**
     * Gets or sets whether Cartesian Interpolation should be used rather than Archimedian
     * spiral based interpolation.
    */
    get useCartesianInterpolation(): boolean;
    set useCartesianInterpolation(v: boolean);
    static ngAcceptInputType_useCartesianInterpolation: boolean | string;
    /**
     * Gets or sets the maximum number of markers displayed by the current series.
     * If more than the specified number of markers are visible, the polar series will automatically
     * choose a representative set.
    */
    get maximumMarkers(): number;
    set maximumMarkers(v: number);
    static ngAcceptInputType_maximumMarkers: number | string;
    /**
     * Gets or sets the trend type for the current series object.
    */
    get trendLineType(): TrendLineType;
    set trendLineType(v: TrendLineType);
    static ngAcceptInputType_trendLineType: TrendLineType | string;
    /**
     * Gets or sets the brush that specifies how the current series
     * object's trend line is drawn.
    */
    get trendLineBrush(): string;
    set trendLineBrush(v: string);
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush(): string;
    set actualTrendLineBrush(v: string);
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    get trendLineThickness(): number;
    set trendLineThickness(v: number);
    static ngAcceptInputType_trendLineThickness: number | string;
    /**
     * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
     * is used to draw the trend line for the current series object.
    */
    get trendLineDashArray(): number[];
    set trendLineDashArray(v: number[]);
    static ngAcceptInputType_trendLineDashArray: number[] | string;
    /**
     * Gets or sets the moving average period for the current series object.
    */
    get trendLinePeriod(): number;
    set trendLinePeriod(v: number);
    static ngAcceptInputType_trendLinePeriod: number | string;
    /**
     * Sets or Gets the Trendline Z index.
    */
    get trendLineZIndex(): number;
    set trendLineZIndex(v: number);
    static ngAcceptInputType_trendLineZIndex: number | string;
    /**
     * Gets or sets whether to clip the series to the bounds.
     * Setting this to true can effect performance.
    */
    get clipSeriesToBounds(): boolean;
    set clipSeriesToBounds(v: boolean);
    static ngAcceptInputType_clipSeriesToBounds: boolean | string;
    get actualItemSearchMode(): ScatterItemSearchMode;
    set actualItemSearchMode(v: ScatterItemSearchMode);
    static ngAcceptInputType_actualItemSearchMode: ScatterItemSearchMode | string;
    /**
     * Gets or sets the mode the series will use to find the closest point to the cursor.
    */
    get itemSearchMode(): ScatterItemSearchMode;
    set itemSearchMode(v: ScatterItemSearchMode);
    static ngAcceptInputType_itemSearchMode: ScatterItemSearchMode | string;
    /**
     * Gets or sets the threshold to use when searching for items using ItemSearchMode.
    */
    get itemSearchThreshold(): number;
    set itemSearchThreshold(v: number);
    static ngAcceptInputType_itemSearchThreshold: number | string;
    /**
     * Gets or sets whether this Polar series should allow custom style overrides of its individual visuals.
    */
    get isCustomPolarStyleAllowed(): boolean;
    set isCustomPolarStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomPolarStyleAllowed: boolean | string;
    /**
     * Gets or sets whether this Polar series should allow custom style overrides of its individual marker visuals.
    */
    get isCustomPolarMarkerStyleAllowed(): boolean;
    set isCustomPolarMarkerStyleAllowed(v: boolean);
    static ngAcceptInputType_isCustomPolarMarkerStyleAllowed: boolean | string;
    /**
     * Gets or sets the label displayed before series' radius value in the Data Legend.
    */
    get radiusMemberAsLegendLabel(): string;
    set radiusMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the label displayed before series' angle value in the Data Legend.
    */
    get angleMemberAsLegendLabel(): string;
    set angleMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit displayed after series' radius value in the Data Legend.
    */
    get radiusMemberAsLegendUnit(): string;
    set radiusMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the unit displayed after series' angle value in the Data Legend.
    */
    get angleMemberAsLegendUnit(): string;
    set angleMemberAsLegendUnit(v: string);
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    /**
     * Scrolls the requested item into view, if possible.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item: any): boolean;
    /**
     * Gets the item that is the best match for the specified world coordinates.
    
    * @param world  * The world coordinates to use.
    */
    getItem(world: IgPoint): any;
    /**
     * Gets the index of the item that resides at the provided world coordinates.
    
    * @param world  * The world coordinates of the requested item.
    */
    getItemIndex(world: IgPoint): number;
    getExactItemIndex(world: IgPoint): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    /**
     * Determine if object can be used as RadiusAxis
    
    * @param axis  * The object to check
    */
    canUseAsRadiusAxis(axis: any): boolean;
    /**
     * Determine if object can be used as AngleAxis
    
    * @param axis  * The object to check
    */
    canUseAsAngleAxis(axis: any): boolean;
    private _assigningPolarStyle;
    /**
     * Event raised when Assigning Category Style
    */
    get assigningPolarStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningPolarStyleEventArgs;
    }>;
    private _assigningPolarMarkerStyle;
    /**
     * Event raised when Assigning Polar Marker Style
    */
    get assigningPolarMarkerStyle(): EventEmitter<{
        sender: any;
        args: IgxAssigningPolarMarkerStyleEventArgs;
    }>;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxPolarBaseComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxPolarBaseComponent, "ng-component", never, { "angleMemberPath": "angleMemberPath"; "radiusMemberPath": "radiusMemberPath"; "highlightedRadiusMemberPath": "highlightedRadiusMemberPath"; "highlightedAngleMemberPath": "highlightedAngleMemberPath"; "angleAxis": "angleAxis"; "radiusAxis": "radiusAxis"; "useCartesianInterpolation": "useCartesianInterpolation"; "maximumMarkers": "maximumMarkers"; "trendLineType": "trendLineType"; "trendLineBrush": "trendLineBrush"; "actualTrendLineBrush": "actualTrendLineBrush"; "trendLineThickness": "trendLineThickness"; "trendLineDashArray": "trendLineDashArray"; "trendLinePeriod": "trendLinePeriod"; "trendLineZIndex": "trendLineZIndex"; "clipSeriesToBounds": "clipSeriesToBounds"; "actualItemSearchMode": "actualItemSearchMode"; "itemSearchMode": "itemSearchMode"; "itemSearchThreshold": "itemSearchThreshold"; "isCustomPolarStyleAllowed": "isCustomPolarStyleAllowed"; "isCustomPolarMarkerStyleAllowed": "isCustomPolarMarkerStyleAllowed"; "radiusMemberAsLegendLabel": "radiusMemberAsLegendLabel"; "angleMemberAsLegendLabel": "angleMemberAsLegendLabel"; "radiusMemberAsLegendUnit": "radiusMemberAsLegendUnit"; "angleMemberAsLegendUnit": "angleMemberAsLegendUnit"; }, { "assigningPolarStyle": "assigningPolarStyle"; "assigningPolarMarkerStyle": "assigningPolarMarkerStyle"; }, never, never>;
}
