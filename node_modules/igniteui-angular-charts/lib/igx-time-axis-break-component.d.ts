import { OnInit } from "@angular/core";
import { TimeAxisBreak } from "./TimeAxisBreak";
import * as i0 from "@angular/core";
export declare class IgxTimeAxisBreakComponent implements OnInit {
    protected _implementation: any;
    get i(): TimeAxisBreak;
    private onImplementationCreated;
    constructor();
    protected createImplementation(): TimeAxisBreak;
    ngOnInit(): void;
    private _renderer;
    private _provideRenderer;
    static _createFromInternal(internal: any): IgxTimeAxisBreakComponent;
    /**
 * The start time of the axis break.
*
* Use `Start` property for the start time of the axis break.
*
* ```html
* <igx-data-chart
*     [dataSource]="data">
*     <igx-time-x-axis
* 		dateTimeMemberPath="date"
* 		#xAxis>
*     </igx-time-x-axis>
* </igx-data-chart>
* ```
*
* ```ts
* let xAxis = new IgxTimeXAxisComponent();
* xAxis.dataTimeMemberPath="date";
* this.chart.axes.add(xAxis);
* ```
*/
    get start(): Date;
    set start(v: Date);
    /**
     * The end time of the axis break.
    *
    * Use `End` property for the end time of the axis break.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-time-x-axis
    * 		dateTimeMemberPath="date"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * let xAxis = new IgxTimeXAxisComponent();
    * xAxis.dataTimeMemberPath="date";
    * this.chart.axes.add(xAxis);
    * ```
    */
    get end(): Date;
    set end(v: Date);
    /**
     * The interval at which to repeat this break, expressed as a TimeSpan.
    *
    * Use `Interval` property to se the interval at which to repeat this break, expressed as a TimeSpan.
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    *     <igx-time-x-axis
    * 		dateTimeMemberPath="date"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    *
    * ```ts
    * let xAxis = new IgxTimeXAxisComponent();
    * xAxis.dataTimeMemberPath="date";
    * this.chart.axes.add(xAxis);
    * ```
    */
    get interval(): number;
    set interval(v: number);
    static ngAcceptInputType_interval: number | string;
    findByName(name: string): any;
    protected __p: string;
    protected _hasUserValues: Set<string>;
    protected get hasUserValues(): Set<string>;
    protected __m(propertyName: string): void;
    protected _stylingContainer: any;
    protected _stylingParent: any;
    protected _inStyling: boolean;
    protected _styling(container: any, component: any, parent?: any): void;
    protected _zoneRunner: (act: () => void) => void;
    protected _runInZone(act: () => void): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxTimeAxisBreakComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxTimeAxisBreakComponent, "igx-time-axis-break", never, { "start": "start"; "end": "end"; "interval": "interval"; }, {}, never, never>;
}
