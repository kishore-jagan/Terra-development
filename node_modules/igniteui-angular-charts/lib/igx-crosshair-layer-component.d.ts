import { IgxSeriesComponent } from "./igx-series-component";
import { Visibility } from "igniteui-angular-core";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { CrosshairLayer } from "./CrosshairLayer";
import * as i0 from "@angular/core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export declare class IgxCrosshairLayerComponent extends IgxAnnotationLayerComponent {
    protected createImplementation(): CrosshairLayer;
    /**
                                 * @hidden
                                 */
    get i(): CrosshairLayer;
    constructor();
    /**
     * Gets whether the series is an annotation layer displayed only when hovering over the chart.
    */
    get isAnnotationHoverLayer(): boolean;
    static ngAcceptInputType_isAnnotationHoverLayer: boolean | string;
    /**
     * Gets whether the series is an crosshair annotation layer.
    */
    get isAnnotationCrosshairLayer(): boolean;
    static ngAcceptInputType_isAnnotationCrosshairLayer: boolean | string;
    /**
     * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
    */
    get horizontalLineStroke(): string;
    set horizontalLineStroke(v: string);
    /**
     * Gets or sets the color to use for vertical line. Leave null for an automatic value.
    */
    get verticalLineStroke(): string;
    set verticalLineStroke(v: string);
    /**
     * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeriesName(): string;
    set targetSeriesName(v: string);
    /**
     * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
    */
    get targetSeries(): IgxSeriesComponent;
    set targetSeries(v: IgxSeriesComponent);
    /**
     * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
    */
    get useInterpolation(): boolean;
    set useInterpolation(v: boolean);
    static ngAcceptInputType_useInterpolation: boolean | string;
    /**
     * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
    */
    get isAxisAnnotationEnabled(): boolean;
    set isAxisAnnotationEnabled(v: boolean);
    static ngAcceptInputType_isAxisAnnotationEnabled: boolean | string;
    /**
     * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
    */
    get xAxisAnnotationTextColor(): string;
    set xAxisAnnotationTextColor(v: string);
    /**
     * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationBackground(): string;
    set xAxisAnnotationBackground(v: string);
    /**
     * Gets or sets the corner radius to use for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationBackgroundCornerRadius(): number;
    set xAxisAnnotationBackgroundCornerRadius(v: number);
    static ngAcceptInputType_xAxisAnnotationBackgroundCornerRadius: number | string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get xAxisAnnotationInterpolatedValuePrecision(): number;
    set xAxisAnnotationInterpolatedValuePrecision(v: number);
    static ngAcceptInputType_xAxisAnnotationInterpolatedValuePrecision: number | string;
    /**
     * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
    */
    get xAxisAnnotationOutline(): string;
    set xAxisAnnotationOutline(v: string);
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingLeft(): number;
    set xAxisAnnotationPaddingLeft(v: number);
    static ngAcceptInputType_xAxisAnnotationPaddingLeft: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingTop(): number;
    set xAxisAnnotationPaddingTop(v: number);
    static ngAcceptInputType_xAxisAnnotationPaddingTop: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingRight(): number;
    set xAxisAnnotationPaddingRight(v: number);
    static ngAcceptInputType_xAxisAnnotationPaddingRight: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get xAxisAnnotationPaddingBottom(): number;
    set xAxisAnnotationPaddingBottom(v: number);
    static ngAcceptInputType_xAxisAnnotationPaddingBottom: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingLeft(): number;
    set yAxisAnnotationPaddingLeft(v: number);
    static ngAcceptInputType_yAxisAnnotationPaddingLeft: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingTop(): number;
    set yAxisAnnotationPaddingTop(v: number);
    static ngAcceptInputType_yAxisAnnotationPaddingTop: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingRight(): number;
    set yAxisAnnotationPaddingRight(v: number);
    static ngAcceptInputType_yAxisAnnotationPaddingRight: number | string;
    /**
     * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
    */
    get yAxisAnnotationPaddingBottom(): number;
    set yAxisAnnotationPaddingBottom(v: number);
    static ngAcceptInputType_yAxisAnnotationPaddingBottom: number | string;
    /**
     * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
    */
    get xAxisAnnotationStrokeThickness(): number;
    set xAxisAnnotationStrokeThickness(v: number);
    static ngAcceptInputType_xAxisAnnotationStrokeThickness: number | string;
    /**
     * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
    */
    get yAxisAnnotationTextColor(): string;
    set yAxisAnnotationTextColor(v: string);
    /**
     * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationBackground(): string;
    set yAxisAnnotationBackground(v: string);
    /**
     * Gets or sets the corner radius to use for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationBackgroundCornerRadius(): number;
    set yAxisAnnotationBackgroundCornerRadius(v: number);
    static ngAcceptInputType_yAxisAnnotationBackgroundCornerRadius: number | string;
    /**
     * Gets or sets the precision to use displaying values for interpolated crosshair positions.
    */
    get yAxisAnnotationInterpolatedValuePrecision(): number;
    set yAxisAnnotationInterpolatedValuePrecision(v: number);
    static ngAcceptInputType_yAxisAnnotationInterpolatedValuePrecision: number | string;
    /**
     * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
    */
    get yAxisAnnotationOutline(): string;
    set yAxisAnnotationOutline(v: string);
    /**
     * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
    */
    get yAxisAnnotationStrokeThickness(): number;
    set yAxisAnnotationStrokeThickness(v: number);
    static ngAcceptInputType_yAxisAnnotationStrokeThickness: number | string;
    /**
     * Gets or sets whether to display the vertical line.
    */
    get verticalLineVisibility(): Visibility;
    set verticalLineVisibility(v: Visibility);
    static ngAcceptInputType_verticalLineVisibility: Visibility | string;
    /**
     * Gets or sets whether to display the horizontal line.
    */
    get horizontalLineVisibility(): Visibility;
    set horizontalLineVisibility(v: Visibility);
    static ngAcceptInputType_horizontalLineVisibility: Visibility | string;
    /**
     * Gets or sets whether to skip unknown values when searching for series values.
    */
    get skipUnknownValues(): boolean;
    set skipUnknownValues(v: boolean);
    static ngAcceptInputType_skipUnknownValues: boolean | string;
    findByName(name: string): any;
    protected _styling(container: any, component: any, parent?: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxCrosshairLayerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxCrosshairLayerComponent, "igx-crosshair-layer", never, { "horizontalLineStroke": "horizontalLineStroke"; "verticalLineStroke": "verticalLineStroke"; "targetSeriesName": "targetSeriesName"; "targetSeries": "targetSeries"; "useInterpolation": "useInterpolation"; "isAxisAnnotationEnabled": "isAxisAnnotationEnabled"; "xAxisAnnotationTextColor": "xAxisAnnotationTextColor"; "xAxisAnnotationBackground": "xAxisAnnotationBackground"; "xAxisAnnotationBackgroundCornerRadius": "xAxisAnnotationBackgroundCornerRadius"; "xAxisAnnotationInterpolatedValuePrecision": "xAxisAnnotationInterpolatedValuePrecision"; "xAxisAnnotationOutline": "xAxisAnnotationOutline"; "xAxisAnnotationPaddingLeft": "xAxisAnnotationPaddingLeft"; "xAxisAnnotationPaddingTop": "xAxisAnnotationPaddingTop"; "xAxisAnnotationPaddingRight": "xAxisAnnotationPaddingRight"; "xAxisAnnotationPaddingBottom": "xAxisAnnotationPaddingBottom"; "yAxisAnnotationPaddingLeft": "yAxisAnnotationPaddingLeft"; "yAxisAnnotationPaddingTop": "yAxisAnnotationPaddingTop"; "yAxisAnnotationPaddingRight": "yAxisAnnotationPaddingRight"; "yAxisAnnotationPaddingBottom": "yAxisAnnotationPaddingBottom"; "xAxisAnnotationStrokeThickness": "xAxisAnnotationStrokeThickness"; "yAxisAnnotationTextColor": "yAxisAnnotationTextColor"; "yAxisAnnotationBackground": "yAxisAnnotationBackground"; "yAxisAnnotationBackgroundCornerRadius": "yAxisAnnotationBackgroundCornerRadius"; "yAxisAnnotationInterpolatedValuePrecision": "yAxisAnnotationInterpolatedValuePrecision"; "yAxisAnnotationOutline": "yAxisAnnotationOutline"; "yAxisAnnotationStrokeThickness": "yAxisAnnotationStrokeThickness"; "verticalLineVisibility": "verticalLineVisibility"; "horizontalLineVisibility": "horizontalLineVisibility"; "skipUnknownValues": "skipUnknownValues"; }, {}, never, never>;
}
