import { IgPoint } from "igniteui-angular-core";
import { TrendLineType } from "igniteui-angular-core";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
export declare abstract class IgxAnchoredRadialSeriesComponent extends IgxRadialBaseComponent {
    /**
                                 * @hidden
                                 */
    get i(): AnchoredRadialSeries;
    constructor();
    /**
     * Gets or sets whether to normalize the values against the category values if using a proportional category axis.
    */
    get useCategoryNormalizedValues(): boolean;
    set useCategoryNormalizedValues(v: boolean);
    static ngAcceptInputType_useCategoryNormalizedValues: boolean | string;
    /**
     * Gets or sets the item path that provides the values for the current series.
    */
    get valueMemberPath(): string;
    set valueMemberPath(v: string);
    /**
     * Gets or sets the value mapping property for the current series object.
    */
    get highlightedValueMemberPath(): string;
    set highlightedValueMemberPath(v: string);
    /**
     * Gets or sets the label displayed before series value in the Data Legend.
    */
    get valueMemberAsLegendLabel(): string;
    set valueMemberAsLegendLabel(v: string);
    /**
     * Gets or sets the unit displayed after series value in the Data Legend.
    */
    get valueMemberAsLegendUnit(): string;
    set valueMemberAsLegendUnit(v: string);
    /**
     * Gets or sets the trend type for the current series object.
    */
    get trendLineType(): TrendLineType;
    set trendLineType(v: TrendLineType);
    static ngAcceptInputType_trendLineType: TrendLineType | string;
    /**
     * Gets or sets the brush that specifies how to the current series
     * object's Trend line is drawn.
    */
    get trendLineBrush(): string;
    set trendLineBrush(v: string);
    /**
     * Gets the effective TrendLineBrush for this series.
    */
    get actualTrendLineBrush(): string;
    set actualTrendLineBrush(v: string);
    /**
     * Gets or sets the thickness of the current series object's trend line.
    */
    get trendLineThickness(): number;
    set trendLineThickness(v: number);
    static ngAcceptInputType_trendLineThickness: number | string;
    /**
     * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
     * is used to draw the trend line for the current series object.
    */
    get trendLineDashArray(): number[];
    set trendLineDashArray(v: number[]);
    static ngAcceptInputType_trendLineDashArray: number[] | string;
    /**
     * Gets or sets the trend line period for the current series.
     * The typical, and initial, value for bollinger band periods is 20.
    */
    get trendLinePeriod(): number;
    set trendLinePeriod(v: number);
    static ngAcceptInputType_trendLinePeriod: number | string;
    /**
     * Sets or Gets the Z index of the trendline.
    */
    get trendLineZIndex(): number;
    set trendLineZIndex(v: number);
    static ngAcceptInputType_trendLineZIndex: number | string;
    get hasValueAxis(): boolean;
    static ngAcceptInputType_hasValueAxis: boolean | string;
    get isValueAxisInverted(): boolean;
    static ngAcceptInputType_isValueAxisInverted: boolean | string;
    getItemValue(item: any, memberPathName: string): any;
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    getMemberPathValue(memberPathName: string): string;
    getPreviousOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getNextOrExactIndex(world: IgPoint, skipUnknowns: boolean): number;
    getSeriesValue(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): number;
    getSeriesValuePosition(world: IgPoint, useInterpolation: boolean, skipUnknowns: boolean): IgPoint;
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    getOffsetValue(): number;
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    getCategoryWidth(): number;
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    scrollIntoView(item: any): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<IgxAnchoredRadialSeriesComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<IgxAnchoredRadialSeriesComponent, "ng-component", never, { "useCategoryNormalizedValues": "useCategoryNormalizedValues"; "valueMemberPath": "valueMemberPath"; "highlightedValueMemberPath": "highlightedValueMemberPath"; "valueMemberAsLegendLabel": "valueMemberAsLegendLabel"; "valueMemberAsLegendUnit": "valueMemberAsLegendUnit"; "trendLineType": "trendLineType"; "trendLineBrush": "trendLineBrush"; "actualTrendLineBrush": "actualTrendLineBrush"; "trendLineThickness": "trendLineThickness"; "trendLineDashArray": "trendLineDashArray"; "trendLinePeriod": "trendLinePeriod"; "trendLineZIndex": "trendLineZIndex"; }, {}, never, never>;
}
