import { HorizontalRangeCategorySeries } from "./HorizontalRangeCategorySeries";
import { Series } from "./Series";
import { SeriesView } from "./SeriesView";
import { Type, Point } from "igniteui-angular-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Rect } from "igniteui-angular-core";
import { CategoryFrame } from "./CategoryFrame";
import { List$1 } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { Rectangle } from "igniteui-angular-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { RangeCategorySeriesView } from "./RangeCategorySeriesView";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare class RangeColumnSeries extends HorizontalRangeCategorySeries {
    static $t: Type;
    protected bi(): Series;
    protected get_ex(): boolean;
    protected get_fj(): boolean;
    protected ji(): number;
    protected cq(): SeriesView;
    qx(a: SeriesView): void;
    abj: RangeColumnSeriesView;
    constructor();
    abk: number;
    abl: number;
    protected get_eb(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    wh(a: Point): Rect;
    gu(a: Point, b: boolean): boolean;
    o3(a: boolean, b: SeriesView): void;
    iu(): number;
    z4(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RangeColumnSeriesView extends RangeCategorySeriesView {
    static $t: Type;
    protected c7: RangeColumnSeries;
    constructor(a: RangeColumnSeries);
    c8: Pool$1<Rectangle>;
    au(): void;
    protected c9: List$1<Rectangle>;
    df(): Rectangle;
    da(a: Rectangle): void;
    dc(a: Rectangle): void;
    db(a: Rectangle): void;
    dd(a: Rectangle, b: number, c: number): void;
    protected ac(a: number): any;
    private de;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    an(a: any): void;
}
