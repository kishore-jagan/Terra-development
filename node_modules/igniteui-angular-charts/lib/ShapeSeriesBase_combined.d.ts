import { Series } from "./Series";
import { DependencyProperty } from "igniteui-angular-core";
import { DependencyObject } from "igniteui-angular-core";
import { HighlightingInfo } from "igniteui-angular-core";
import { ShapeItemSearchMode } from "./ShapeItemSearchMode";
import { IFastItemColumn$1 } from "igniteui-angular-core";
import { Point, Type } from "igniteui-angular-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { Axis } from "./Axis";
import { FrameworkElement } from "igniteui-angular-core";
import { DataContext } from "igniteui-angular-core";
import { Marker } from "./Marker";
import { Tuple$2 } from "igniteui-angular-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { AssigningShapeStyleEventArgs } from "./AssigningShapeStyleEventArgs";
import { AssigningShapeMarkerStyleEventArgs } from "./AssigningShapeMarkerStyleEventArgs";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { RenderSurface } from "./RenderSurface";
import { Dictionary$2 } from "igniteui-angular-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { Shape } from "igniteui-angular-core";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { FastItemsSourceEventAction } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-angular-core";
import { StyleSelector } from "./StyleSelector";
import { Path } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { PointCollection } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
/**
 * @hidden
 */
export declare abstract class ShapeSeriesBase extends Series {
    static $t: Type;
    constructor();
    o0(): void;
    ai(): Axis[];
    ko(a: any, b: string): any;
    mb(a: string): string;
    xr: boolean;
    xq: boolean;
    protected xj: boolean;
    protected xi: boolean;
    protected get_fc(): boolean;
    private xe;
    private xf;
    protected get_eb(): boolean;
    protected xc(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected xd(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    private w5;
    get w6(): ShapeItemSearchMode;
    set w6(a: ShapeItemSearchMode);
    protected w7(): ShapeItemSearchMode;
    w8: ShapeItemSearchMode;
    x9: number;
    x8: number;
    ip(a: Point): number;
    private wu;
    private wv;
    protected yr(a: Point): Tuple$2<number, Point>;
    private yq;
    protected get_xk(): boolean;
    protected get xk(): boolean;
    private yp;
    protected x4(a: Point): number;
    v6(a: Point, b: boolean, c: boolean): Point;
    kl(a: Point): any;
    protected xb(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    de(a: any, b: Point, c: boolean): HighlightingInfo;
    df(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningShapeStyle: (sender: any, args: AssigningShapeStyleEventArgs) => void;
    assigningShapeMarkerStyle: (sender: any, args: AssigningShapeMarkerStyleEventArgs) => void;
    protected xx(): boolean;
    protected xw(): boolean;
    protected w9: ShapeSeriesRenderManager;
    yl: string;
    get yc(): string;
    set yc(a: string);
    static readonly y4: DependencyProperty;
    protected f9(): boolean;
    protected hr(): List$1<SeriesLayerPropertyOverlay>;
    private yt;
    private xg;
    get xh(): IFastItemColumn$1<any>;
    set xh(a: IFastItemColumn$1<any>);
    w2: NumericXAxis;
    w4: NumericYAxis;
    private xo;
    private static xs;
    private convertToListList;
    protected dk(a: string): IFastItemColumn$1<any>;
    protected q5(a: any, b: string, c: any, d: any): void;
    protected xv(): boolean;
    protected xu(): boolean;
    xm(a: any): boolean;
    xl(a: any): boolean;
    private w1;
    private w3;
    private x3;
    xz: List$1<Rect>;
    private y1;
    private zf;
    private x1;
    private wr;
    private wt;
    private ws;
    private wq;
    protected get_xp(): boolean;
    protected get xp(): boolean;
    protected xy(): boolean;
    ro(a: boolean): void;
    rm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected y0(a: SeriesView): void;
    protected yw(a: FrameworkElement, b: boolean, c: number, d: number, e: boolean, f: boolean): void;
    protected yv(a: number, b: number, c: boolean): void;
    protected yy(a: AssigningShapeStyleEventArgs): void;
    protected yx(a: AssigningShapeMarkerStyleEventArgs): void;
    ww(a: number, b: number): any[];
    protected wx(a: number, b: number): any[];
    private static yz;
    p6(): void;
    protected sl(a: Rect, b: Rect): void;
    protected sk(a: Rect, b: Rect): void;
    protected o9(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    hc(a: Rect, b: Rect, c: SeriesView): boolean;
    protected get_xt(): boolean;
    protected get xt(): boolean;
    qx(a: SeriesView): void;
    private xa;
    private x2;
    private w0;
    private ys;
    ze: Rect;
    private y3;
    o3(a: boolean, b: SeriesView): void;
    private yu;
    private y2;
    a1(a: Point, b: boolean): DataContext;
    ya(a: number): any;
    protected get_g5(): boolean;
    protected set_g5(a: boolean): void;
    x5: number;
    x6: number;
    ax(a: Axis): AxisRange;
    protected get_fv(): boolean;
    protected get_fj(): boolean;
    get xn(): boolean;
    zg(a: any, b: DependencyObject, c: Style): Style;
    styleShape: (sender: any, e: StyleShapeEventArgs) => void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ShapeSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningShapeMarkerStyleEventArgs;
    ax: AssigningShapeStyleEventArgs;
    a1(a: Shape, b: number, c: boolean): void;
    ay(a: ShapeSeriesBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare abstract class ShapeSeriesViewBase extends SeriesView {
    static $t: Type;
    constructor(a: ShapeSeriesBase);
    cc: Dictionary$2<number, FlattenedShape>;
    b4(a: Point): Marker;
    get ce(): List$1<ShapeHitRegion>;
    protected b8(): Pool$1<FrameworkElement>;
    cb(a: Rect): boolean;
    static cf(a: List$1<FlattenedShape>): List$1<PointCollection>;
    get ca(): boolean;
    protected b6: ShapeSeriesBase;
    private cd;
    ci(a: number, b: any, c: Rect, d: List$1<FlattenedShape>): void;
    protected c4(a: number, b: any): FrameworkElement;
    protected abstract ck(a: FrameworkElement, b: PathGeometry): void;
    static cl(a: ShapeSeriesViewBase, b: Path, c: any): void;
    cp(a: (arg1: FrameworkElement) => void): void;
    cm(a: FrameworkElement, b: any, c: boolean): void;
    protected co(a: FrameworkElement, b: boolean): void;
    private cj;
    private cx;
    protected abstract c5(a: number, b: List$1<PointCollection>): PathGeometry;
    cu(): void;
    ct(): void;
    private ch;
    cw(a: number, b: number): void;
    cn(): void;
    protected cg: List$1<Path>;
    c1(): FrameworkElement;
    cq(a: FrameworkElement): void;
    cr(a: FrameworkElement): void;
    cs(a: FrameworkElement): void;
    protected b9: Pool$1<FrameworkElement>;
    c6(a: number, b: List$1<PointCollection>, c: boolean): PathGeometry;
    protected ac(a: number): any;
    private c7;
    protected ab(a: number): any;
    protected a8(a: RenderingContext, b: boolean): void;
    private b7;
    private c8;
    get c9(): Style;
    cz(a: StyleSelector): void;
    cy(a: Style): void;
    c2(a: Point, b: boolean): FrameworkElement;
    c3(a: Point, b: boolean, c: boolean): FrameworkElement;
    b5(a: Point, b: boolean, c: boolean): ShapeHitRegion;
    private b1;
    private b3;
    private b2;
    private b0;
    cv(a: number[], b: number[], c: number[], d: number[]): void;
    c0(): void;
    an(a: any): void;
}
