import { Brush } from "igniteui-angular-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-angular-core";
import { EventArgs, IList, Type } from "igniteui-angular-core";
import { IZoomSlider } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { DataSeriesType } from "igniteui-angular-core";
import { IDataSeriesAdapterRule } from "igniteui-angular-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-angular-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-angular-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-angular-core";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-angular-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { IZoomableCategoryAxis } from "./IZoomableCategoryAxis";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-angular-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected vp(a: string, b: any, c: any): void;
    private aov;
    private aou;
    private aor;
    private ao4;
    private ah9;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private ak7;
    private ak5;
    private ak2;
    private ak4;
    private ak6;
    private ak3;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private apf;
    private apt;
    private aob;
    private apr;
    setGridRows(): void;
    protected ux(): void;
    private apb;
    private apc;
    private apl;
    private aoa;
    private ao1;
    protected uu(a: XamDataChart): void;
    private apw;
    private apz;
    private apx;
    private apy;
    akj(): number;
    u6(source_: any, a: number, b: any): void;
    u7(source_: any, a: number, b: any): void;
    u5(source_: any): void;
    u9(source_: any, a: number, b: any, c: any): void;
    protected u0(a: Series, b: number): void;
    private ahf;
    private get ahg();
    private set ahg(value);
    private alp;
    get alw(): any;
    set alw(a: any);
    private alq;
    get alx(): any;
    set alx(a: any);
    private alm;
    get alt(): any;
    set alt(a: any);
    private alr;
    get aly(): any;
    set aly(a: any);
    private als;
    get alz(): any;
    set alz(a: any);
    private aln;
    get alu(): any;
    set alu(a: any);
    private alo;
    get alv(): any;
    set alv(a: any);
    private aix;
    get aiy(): IZoomSlider;
    set aiy(a: IZoomSlider);
    protected get_jy(): number;
    protected set_jy(a: number): void;
    protected get_g6(): boolean;
    protected set_g6(a: boolean): void;
    private aj7;
    get ako(): number;
    set ako(a: number);
    constructor();
    protected zk(): Axis;
    protected zl(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected bi(a: DataSeries): DataSeriesType;
    protected get_hy(): List$1<DataSeriesType>;
    protected get hy(): List$1<DataSeriesType>;
    protected get_hx(): List$1<IDataSeriesAdapterRule>;
    protected get hx(): List$1<IDataSeriesAdapterRule>;
    private ag2;
    private aig;
    private ag1;
    protected t9(): void;
    protected t3(a: Series, b: number): void;
    protected c5(a: Series): MarkerType;
    protected we(a: DataSeries): void;
    protected wh(): void;
    private ahk;
    private ahj;
    private aht;
    private ahm;
    private al8;
    private ag3;
    private aih;
    private ain;
    private aio;
    private aim;
    private aip;
    private get ai6();
    private ah3;
    private get ah4();
    private get ai9();
    private ah1;
    private get ah2();
    private get ai7();
    private ah5;
    private get ah6();
    private get ai8();
    private aia;
    private get aib();
    protected dg(a: DataSeries, b: DataSeriesType): Series;
    protected wg(): void;
    protected aew(a: (arg1: Axis) => void, b: string): void;
    protected ae1(a: (arg1: Axis) => void, b: boolean): void;
    protected ao3(a: (arg1: IZoomableCategoryAxis) => void): void;
    protected aez(a: (arg1: TitleSettings) => void): void;
    protected ae4(a: (arg1: TitleSettings) => void): void;
    protected ae2(a: (arg1: AxisLabelSettings) => void): void;
    protected aex(a: (arg1: AxisLabelSettings) => void): void;
    protected ut(a: XamDataChart): void;
    private static alk;
    private al0;
    private am3;
    private aol;
    private an7;
    private an8;
    private aod;
    private aog;
    private aoe;
    private aof;
    private aoh;
    private ale;
    protected uj(a: (arg1: Series, arg2: number) => void): void;
    private ait;
    private get volumeChart();
    private set volumeChart(value);
    private ao6;
    private aja;
    private aje;
    private ajb;
    private ajd;
    private ao5;
    private aiq;
    private ais;
    private apn;
    lv(): any;
    al5(): string;
    private air;
    private apm;
    private ajj;
    private apk;
    protected uq(): void;
    protected get_hd(): boolean;
    protected get ajp(): boolean;
    private aps;
    private ao7;
    protected ve(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private aoj;
    private apg;
    private get ajo();
    private aok;
    private ajf;
    private apa;
    private aoo;
    private aot;
    private aos;
    private aom;
    private aon;
    private aox;
    private ao0;
    private aoy;
    private an9;
    private ape;
    private apq;
    private aop;
    private apo;
    private aji;
    private aow;
    private aoi;
    private api;
    private aph;
    private ao9;
    private aoq;
    private ajq;
    private app;
    private aoc;
    private apj;
    protected wm(a: Series, b: Series, c: DataSeries): void;
    private al7;
    protected aer(a: Axis): void;
    protected aet(a: Axis): void;
    private aoz;
    protected uy(a: Series, b: number): void;
    protected uz(a: Series, b: number): void;
    protected vl(a: string, b: any, c: any): void;
    protected get_cf(): DomainType;
    get cf(): DomainType;
    private ai5;
    get ajn(): boolean;
    set ajn(a: boolean);
    private ald;
    get all(): number;
    set all(a: number);
    private ake;
    get akx(): number;
    set akx(a: number);
    private akg;
    get akz(): number;
    set akz(a: number);
    private akf;
    get aky(): number;
    set aky(a: number);
    private akh;
    get ak0(): number;
    set ak0(a: number);
    get akw(): number;
    get akv(): number;
    private ahl;
    get ahn(): FinancialChartVolumeType;
    set ahn(a: FinancialChartVolumeType);
    private aho;
    get ahp(): FinancialChartXAxisMode;
    set ahp(a: FinancialChartXAxisMode);
    private aj9;
    get akq(): number;
    set akq(a: number);
    private akc;
    get akt(): number;
    set akt(a: number);
    private aka;
    get akr(): number;
    set akr(a: number);
    private akb;
    get aks(): number;
    set aks(a: number);
    private akd;
    get aku(): number;
    set aku(a: number);
    private ahq;
    get ahr(): FinancialChartYAxisMode;
    set ahr(a: FinancialChartYAxisMode);
    private ai0;
    get ajg(): boolean;
    set ajg(a: boolean);
    private ahh;
    get ahi(): FinancialChartType;
    set ahi(a: FinancialChartType);
    protected get_afa(): HorizontalAlignment;
    protected set_afa(a: HorizontalAlignment): void;
    private ai1;
    get ajh(): boolean;
    set ajh(a: boolean);
    private ahv;
    get ahw(): FinancialIndicatorTypeCollection;
    set ahw(a: FinancialIndicatorTypeCollection);
    private ahx;
    get ahy(): FinancialOverlayTypeCollection;
    set ahy(a: FinancialOverlayTypeCollection);
    private ajs;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private ai3;
    get ajl(): boolean;
    set ajl(a: boolean);
    protected get_j6(): number;
    protected set_j6(a: number): void;
    private static readonly ang;
    private ai2;
    get ajk(): boolean;
    set ajk(a: boolean);
    private static readonly anr;
    private ai4;
    get ajm(): boolean;
    set ajm(a: boolean);
    private aiu;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private aif;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private ag0;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private ahs;
    get ahu(): FinancialChartZoomSliderType;
    set ahu(a: FinancialChartZoomSliderType);
    private agj;
    get agr(): BrushCollection;
    set agr(a: BrushCollection);
    private agk;
    get ags(): BrushCollection;
    set ags(a: BrushCollection);
    private agl;
    get agt(): BrushCollection;
    set agt(a: BrushCollection);
    private agm;
    get agu(): BrushCollection;
    set agu(a: BrushCollection);
    private ago;
    get agw(): BrushCollection;
    set agw(a: BrushCollection);
    private agn;
    get agv(): BrushCollection;
    set agv(a: BrushCollection);
    private agi;
    get agq(): BrushCollection;
    set agq(a: BrushCollection);
    private agh;
    get agp(): BrushCollection;
    set agp(a: BrushCollection);
    private aj8;
    get akp(): number;
    set akp(a: number);
    private aj6;
    get akn(): number;
    set akn(a: number);
    private aj5;
    get akm(): number;
    set akm(a: number);
    private aj4;
    get akl(): number;
    set akl(a: number);
    private ah7;
    get ah8(): IndicatorDisplayTypeCollection;
    set ah8(a: IndicatorDisplayTypeCollection);
    private ak9;
    get alg(): number;
    set alg(a: number);
    private aj3;
    get akk(): number;
    set akk(a: number);
    private alc;
    get alj(): number;
    set alj(a: number);
    private ala;
    get alh(): number;
    set alh(a: number);
    private ak8;
    get alf(): number;
    set alf(a: number);
    private alb;
    get ali(): number;
    set ali(a: number);
    private ahc;
    get ahe(): FinancialChartRangeSelectorOptionCollection;
    set ahe(a: FinancialChartRangeSelectorOptionCollection);
    ahd: FinancialChartRangeSelectorOptionCollection;
    private ag8;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_he(): boolean;
    protected set_he(a: boolean): void;
    private apu;
    get apv(): Brush;
    set apv(a: Brush);
    private aki;
    get ak1(): number;
    set ak1(a: number);
    private aiz;
    get ajc(): boolean;
    set ajc(a: boolean);
    private ahz;
    get ah0(): IChartLegend;
    set ah0(a: IChartLegend);
    private agz;
    private get xAxis();
    private set xAxis(value);
    private aie;
    private get yAxis();
    private set yAxis(value);
    private aid;
    private get volumeAxis();
    private set volumeAxis(value);
    private agy;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private aic;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private agx;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private ajr;
    private get aju();
    private set aju(value);
    private ajt;
    private get ajw();
    private set ajw(value);
    private aj0;
    get aj2(): Date;
    set aj2(a: Date);
    private ajz;
    get aj1(): Date;
    set aj1(a: Date);
    private ajx;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
