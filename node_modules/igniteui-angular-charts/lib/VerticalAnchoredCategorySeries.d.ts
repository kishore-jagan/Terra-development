import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { IVerticalAnchoredCategorySeriesInteractionManager } from "./IVerticalAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { Axis } from "./Axis";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericAxisBase } from "./NumericAxisBase";
import { ScalerParams } from "./ScalerParams";
import { AxisRange } from "./AxisRange";
import { Rect } from "igniteui-angular-core";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
/**
 * @hidden
 */
export declare abstract class VerticalAnchoredCategorySeries extends AnchoredCategorySeries {
    static $t: Type;
    xAxis: NumericXAxis;
    yAxis: CategoryYAxis;
    ci(): SeriesPlotAreaMarginHorizontalMode;
    cj(): SeriesPlotAreaMarginVerticalMode;
    o0(): void;
    private abv;
    get abw(): IVerticalAnchoredCategorySeriesInteractionManager;
    protected get_isVertical(): boolean;
    yk(): CategoryAxisBase;
    y0(): NumericAxisBase;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    j6(a: Point, b: boolean): number;
    j8(a: Point, b: boolean): number;
    im(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    ay(a: Rect): AxisRange;
    protected b0(): SeriesHitTestMode;
    wj(a: Point): Rect;
    private ab4;
    gu(a: Point, b: boolean): boolean;
    i3(a: Point, b: boolean, c: boolean): number;
    v6(a: Point, b: boolean, c: boolean): Point;
    fetchXAxis(): Axis;
    fetchYAxis(): Axis;
    aa8(a: Axis): void;
    aa9(a: Axis): void;
    zg(): boolean;
    ye(a: number, b: number): any[];
    ip(a: Point): number;
    zk(a: Point): number;
    j1(a: Point): number;
    kl(a: Point): any;
    protected q5(a: any, b: string, c: any, d: any): void;
    abz(a: any): boolean;
    aby(a: any): boolean;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
