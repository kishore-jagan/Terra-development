import { Component, Input } from '@angular/core';
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxRangeCategorySeriesComponent } from "./igx-range-category-series-component";
import { toPoint, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Base class for ranged category series with a category X-axis and a numeric Y-axis.
*
* Instantiate HorizontalAnchoredCategorySeries
*
* ```html
*  <igx-data-chart
*       [dataSource]="data"  >
* 	 <igx-column-series
*         #series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*           >
*       </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxColumnSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath="value";
* this.chart.series.add(series);
* ```
*/
export let IgxHorizontalRangeCategorySeriesComponent = /*@__PURE__*/ (() => {
    class IgxHorizontalRangeCategorySeriesComponent extends IgxRangeCategorySeriesComponent {
        constructor() {
            super();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets the effective x-axis for the current CategorySeries object.
        *
        * Instantiate xAxis
        *
        * <!-- Angular -->
        *
        * ```html
        *  <igx-data-chart
        *       [dataSource]="data"  >
        * 	  <igx-category-x-axis
        *         label="label"
        *         #xAxis
        *         >
        *       </igx-category-x-axis>
        * 	 <igx-column-series
        *     ...
        *         [xAxis]="xAxis"
        *     ...
        *           >
        *       </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get xAxis() {
            const r = this.i.xAxis;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxCategoryAxisBaseComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set xAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;
        }
        /**
         * Gets or sets the effective y-axis for the current CategorySeries object.
        *
        * Instantiate yAxis
        *
        * <!-- Angular -->
        *
        * ```js
        *  <igx-data-chart
        *       [dataSource]="data"  >
        * 	  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        *       </igx-numeric-y-axis>
        * 	 <igx-column-series
        *     ...
        *         [yAxis]="yAxis"
        *     ...
        *           >
        *       </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * let series = new IgxColumnSeriesComponent();
        * series.xAxis = this.xAxis;
        * series.yAxis = this.yAxis;
        * series.valueMemberPath="value";
        * this.chart.series.add(series);
        * ```
        */
        get yAxis() {
            const r = this.i.yAxis;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxNumericYAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set yAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;
        }
        /**
         * Checks if this series is a range series
        *
        * You can use the `IsRange` to get the current series is a range type series.
        *
        * <!-- Angular JS -->
        *
        * ```ts
        *   var r = this.series.isRange;
        * ```
        */
        get isRange() {
            return this.i.fs;
        }
        /**
         * Gets or sets the label displayed before series' Low value in the Data Legend.
        */
        get lowMemberAsLegendLabel() {
            return this.i.aa7;
        }
        set lowMemberAsLegendLabel(v) {
            this.i.aa7 = v;
        }
        /**
         * Gets or sets the label displayed before series' High value in the Data Legend.
        */
        get highMemberAsLegendLabel() {
            return this.i.aa3;
        }
        set highMemberAsLegendLabel(v) {
            this.i.aa3 = v;
        }
        /**
         * Gets or sets the unit displayed after series' Low value in the Data Legend.
        */
        get lowMemberAsLegendUnit() {
            return this.i.aa9;
        }
        set lowMemberAsLegendUnit(v) {
            this.i.aa9 = v;
        }
        /**
         * Gets or sets the unit displayed after series' High value in the Data Legend.
        */
        get highMemberAsLegendUnit() {
            return this.i.aa5;
        }
        set highMemberAsLegendUnit(v) {
            this.i.aa5 = v;
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
                return this.xAxis;
            }
            if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
                return this.yAxis;
            }
            return null;
        }
        _styling(container, component, parent) {
            super._styling(container, component, parent);
            this._inStyling = true;
            if (this.xAxis && this.xAxis._styling) {
                this.xAxis._styling(container, component, this);
            }
            if (this.yAxis && this.yAxis._styling) {
                this.yAxis._styling(container, component, this);
            }
            this._inStyling = false;
        }
        /**
         * Returns the offset value for this series if grouped on a category axis.
        
        *
        * You can use the `GetOffsetValue` to get the offset value for this series if grouped on a category axis.
        *
        * <!-- Angular JS -->
        *
        *       var g = series.getOffsetValue();
        *
        * <!-- Ignite JS -->
        *
        *      N/A
        */
        getOffsetValue() {
            let iv = this.i.getOffsetValue();
            return (iv);
        }
        /**
         * Returns the width of the category grouping this series is in.
        
        *
        * You can use the `GetCategoryWidth` to get the width of the category grouping a series is in.
        *
        * <!-- Angular JS -->
        *
        *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
        *
        * <!-- Ignite JS -->
        *
        *      N/A
        */
        getCategoryWidth() {
            let iv = this.i.getCategoryWidth();
            return (iv);
        }
        getNextOrExactIndex(world, skipUnknowns) {
            let iv = this.i.j6(toPoint(world), skipUnknowns);
            return (iv);
        }
        getPreviousOrExactIndex(world, skipUnknowns) {
            let iv = this.i.j8(toPoint(world), skipUnknowns);
            return (iv);
        }
        getSeriesValue(world, useInterpolation, skipUnknowns) {
            let iv = this.i.i3(toPoint(world), useInterpolation, skipUnknowns);
            return (iv);
        }
        getSeriesLowValue(world, useInterpolation, skipUnknowns) {
            let iv = this.i.i1(toPoint(world), useInterpolation, skipUnknowns);
            return (iv);
        }
        getSeriesHighValue(world, useInterpolation, skipUnknowns) {
            let iv = this.i.iz(toPoint(world), useInterpolation, skipUnknowns);
            return (iv);
        }
        getSeriesHighValuePosition(world, useInterpolation, skipUnknowns) {
            let iv = this.i.v2(toPoint(world), useInterpolation, skipUnknowns);
            return fromPoint(iv);
        }
        getSeriesLowValuePosition(world, useInterpolation, skipUnknowns) {
            let iv = this.i.v4(toPoint(world), useInterpolation, skipUnknowns);
            return fromPoint(iv);
        }
        getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
            let iv = this.i.v6(toPoint(world), useInterpolation, skipUnknowns);
            return fromPoint(iv);
        }
        /**
         * Determine if object can be used as YAxis
        
        * @param axis  * The object to check
        *
        * You can use the `CanUseAsYAxis` method to determine if object can be used as YAxis
        */
        canUseAsYAxis(axis) {
            let iv = this.i.aa2(axis);
            return (iv);
        }
        /**
         * Determine if object can be used as XAxis
        
        * @param axis  * The object to check
        *
        * You can use the `CanUseAsXAxis` method to determine if object can be used as XAxis
        *
        * <!-- Angular JS -->
        *
        *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
        */
        canUseAsXAxis(axis) {
            let iv = this.i.aa1(axis);
            return (iv);
        }
    }
    IgxHorizontalRangeCategorySeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxHorizontalRangeCategorySeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxHorizontalRangeCategorySeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxHorizontalRangeCategorySeriesComponent, selector: "ng-component", inputs: { xAxis: "xAxis", yAxis: "yAxis", lowMemberAsLegendLabel: "lowMemberAsLegendLabel", highMemberAsLegendLabel: "highMemberAsLegendLabel", lowMemberAsLegendUnit: "lowMemberAsLegendUnit", highMemberAsLegendUnit: "highMemberAsLegendUnit" }, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
    return IgxHorizontalRangeCategorySeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxHorizontalRangeCategorySeriesComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], lowMemberAsLegendLabel: [{
                type: Input
            }], highMemberAsLegendLabel: [{
                type: Input
            }], lowMemberAsLegendUnit: [{
                type: Input
            }], highMemberAsLegendUnit: [{
                type: Input
            }] } });
