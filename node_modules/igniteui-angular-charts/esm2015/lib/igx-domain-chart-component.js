import { Component, EventEmitter, Output, Input } from '@angular/core';
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { TrendLineType_$type } from "igniteui-angular-core";
import { IgxChartSeriesEventArgs } from './igx-chart-series-event-args';
import { arrayFindByName, brushToString, stringToBrush, toBrushCollection, fromBrushCollection, fromRect, toRect, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { delegateCombine } from "igniteui-angular-core";
import { IgxDomainChartSeriesPointerEventArgs } from './igx-domain-chart-series-pointer-event-args';
import { MarkerTypeCollection as MarkerTypeCollection_internal } from './MarkerTypeCollection';
import { IgxMarkerTypeCollection } from './igx-marker-type-collection';
import { SyncableObservableCollection$1 } from "igniteui-angular-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { IgxCalloutStyleUpdatingEventArgs } from "./igx-callout-style-updating-event-args";
import { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';
import { SeriesHighlightingMode_$type } from './SeriesHighlightingMode';
import { SeriesHighlightingBehavior_$type } from './SeriesHighlightingBehavior';
import { LegendHighlightingMode_$type } from './LegendHighlightingMode';
import { SeriesOutlineMode_$type } from './SeriesOutlineMode';
import { MarkerOutlineMode_$type } from './MarkerOutlineMode';
import { MarkerFillMode_$type } from './MarkerFillMode';
import { MarkerAutomaticBehavior_$type } from './MarkerAutomaticBehavior';
import { LegendItemBadgeMode_$type } from "igniteui-angular-core";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { DataAbbreviationMode_$type } from "igniteui-angular-core";
import { DataLegendValueMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-angular-core";
import { DataLegendUnitsMode_$type } from "igniteui-angular-core";
import { DataLegendLabelMode_$type } from "igniteui-angular-core";
import { DataLegendSummaryType_$type } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { FontInfo } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode_$type } from './SeriesPlotAreaMarginHorizontalMode';
import { SeriesPlotAreaMarginVerticalMode_$type } from './SeriesPlotAreaMarginVerticalMode';
import { IgxCalloutPlacementPositionsCollection } from './igx-callout-placement-positions-collection';
import { CalloutPlacementPositions_$type } from './CalloutPlacementPositions';
import { SeriesViewerScrollbarMode_$type } from './SeriesViewerScrollbarMode';
import { SeriesViewerHorizontalScrollbarPosition_$type } from './SeriesViewerHorizontalScrollbarPosition';
import { SeriesViewerVerticalScrollbarPosition_$type } from './SeriesViewerVerticalScrollbarPosition';
import { IgxCalloutRenderStyleUpdatingEventArgs } from './igx-callout-render-style-updating-event-args';
import { CalloutPlacementPositionsCollection as CalloutPlacementPositionsCollection_internal } from './CalloutPlacementPositionsCollection';
import { DataToolTipLayerGroupingMode_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-angular-core";
import { IgxChartSummaryDescriptionCollection } from './igx-chart-summary-description-collection';
import { IgxChartSortDescriptionCollection } from './igx-chart-sort-description-collection';
import { IgxFilterExpressionCollection } from "igniteui-angular-core";
import { ValueModeCollection as ValueModeCollection_internal } from './ValueModeCollection';
import { IgxValueModeCollection } from './igx-value-mode-collection';
import { ValueLayerValueMode_$type } from './ValueLayerValueMode';
import { IgxFilterStringErrorsParsingEventArgs } from './igx-filter-string-errors-parsing-event-args';
import { SeriesHighlightedValuesDisplayMode_$type } from './SeriesHighlightedValuesDisplayMode';
import { SeriesSelectionMode_$type } from './SeriesSelectionMode';
import { SeriesSelectionBehavior_$type } from './SeriesSelectionBehavior';
import { ChartSelectedItemCollection as ChartSelectedItemCollection_internal } from "./ChartSelectedItemCollection";
import { ChartSelection } from "./ChartSelection";
import { IgxSeriesViewerSelectedSeriesItemsChangedEventArgs } from "./igx-series-viewer-selected-series-items-changed-event-args";
import { IgxChartSelectedItemCollection } from "./igx-chart-selected-item-collection";
import { CalloutCollisionMode_$type } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { IgxDomainChartPlotAreaPointerEventArgs } from './igx-domain-chart-plot-area-pointer-event-args';
import * as i0 from "@angular/core";
/**
 * Represents a base class for all domain charts that can plot scatter data and shapefiles
*
* ```html
* <igx-category-chart
*       yAxisMinimumValue="0"
*       [dataSource]="data"
*       bottomMargin= 20>
*     </igx-category-chart>
* ```
*/
export let IgxDomainChartComponent = /*@__PURE__*/ (() => {
    class IgxDomainChartComponent {
        constructor() {
            this._calloutsDataSource = null;
            this._selectedSeriesItems = null;
            this._focusedSeriesItems = null;
            this._markerTypes = null;
            this._calloutsAllowedPositions = null;
            this._valueLines = null;
            this.__p = null;
            this._hasUserValues = new Set();
            this._stylingContainer = null;
            this._stylingParent = null;
            this._inStyling = false;
            this._seriesAdded = null;
            this._seriesRemoved = null;
            this._seriesPointerEnter = null;
            this._seriesPointerLeave = null;
            this._seriesPointerMove = null;
            this._seriesPointerDown = null;
            this._seriesPointerUp = null;
            this._seriesClick = null;
            this._plotAreaPointerEnter = null;
            this._plotAreaPointerLeave = null;
            this._plotAreaPointerMove = null;
            this._plotAreaPointerDown = null;
            this._plotAreaPointerUp = null;
            this._calloutStyleUpdating = null;
            this._calloutRenderStyleUpdating = null;
            this._selectedSeriesItemsChanged = null;
            this._focusedSeriesItemsChanged = null;
            this._filterStringErrorsParsing = null;
            this._zoneRunner = null;
            if (this._styling) {
                NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
            }
            this._implementation = this.createImplementation();
            this._implementation.externalObject = this;
            this.onImplementationCreated();
        }
        createImplementation() {
            return null;
        }
        ngOnInit() {
        }
        get i() {
            return this._implementation;
        }
        onImplementationCreated() {
        }
        /**
        * Sets or gets the template reference to use for tooltips for all the series.
        *
        *
        */
        get tooltipTemplate() {
            return this.i.tooltipTemplate;
        }
        set tooltipTemplate(v) {
            this.i.tooltipTemplate = v;
        }
        /**
        * Sets or gets the template references to use for tooltips for all the series, in order.
        *
        *
        */
        get tooltipTemplates() {
            let ret = [];
            if (this.i.tooltipTemplates) {
                for (let ii = 0; ii < this.i.tooltipTemplates.count; ii++) {
                    ret.push(this.i.tooltipTemplates.item(ii));
                }
            }
            return ret;
        }
        set tooltipTemplates(v) {
            this.i.tooltipTemplates.clear();
            if (v) {
                for (let ii = 0; ii < v.length; ii++) {
                    this.i.tooltipTemplates.add(v[ii]);
                }
            }
        }
        get legend() {
            if (this.i.legend != null)
                return this.i.legend.externalObject;
        }
        set legend(v) {
            if (v != undefined && v != null)
                this.i.legend = v.i;
        }
        set calloutsDataSource(value) {
            this._calloutsDataSource = value;
            this.bindCalloutsData();
        }
        get calloutsDataSource() {
            return this._calloutsDataSource;
        }
        bindCalloutsData() {
            if (this.i != null && this.i !== undefined) {
                this.i.calloutsItemsSource = this._calloutsDataSource;
            }
        }
        /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
        get pixelScalingRatio() {
            return this.i.j1;
        }
        set pixelScalingRatio(v) {
            this.i.j1 = +v;
        }
        /**
         * Gets or sets the left margin of chart title
        *
        *  Use `titleLeftMargin` property for the left margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        * 	titleLeftMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleLeftMargin = 10;
        * ```
        */
        get titleLeftMargin() {
            return this.i.ke;
        }
        set titleLeftMargin(v) {
            this.i.ke = +v;
        }
        /**
         * Gets or sets the right margin of chart title
        *
        *  Use `titleLeftMargin` property for the right margin of chart title.
        *
        * ```html
        * <igx-category-chart
        * 		yAxisMinimumValue="0"
        * 		[dataSource]="data"
        * 		titleRightMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleRightMargin = 10;
        * ```
        */
        get titleRightMargin() {
            return this.i.kf;
        }
        set titleRightMargin(v) {
            this.i.kf = +v;
        }
        /**
         * Gets or sets the top margin of chart title
        *
        *  Use `titleTopMargin` property for the top margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *      yAxisMinimumValue="0"
        *      [dataSource]="data"
        *      title="Countries"
        *      titleTopMargin=10 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleTopMargin = 10;
        * ```
        */
        get titleTopMargin() {
            return this.i.kg;
        }
        set titleTopMargin(v) {
            this.i.kg = +v;
        }
        /**
         * Gets or sets the bottom margin of chart title
        *
        *  Use `titleBottomMargin` property for the bottom margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *    yAxisMinimumValue="0"
        *    [dataSource]="data"
        *    titleBottomMargin= 10 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.titleBottomMargin = 5;
        * ```
        */
        get titleBottomMargin() {
            return this.i.kd;
        }
        set titleBottomMargin(v) {
            this.i.kd = +v;
        }
        /**
         * Gets or sets the left margin of chart subtitle
        *
        * Use `subtitleLeftMargin` property for the left margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleLeftMargin= 20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleLeftMargin = 20 ;
        * ```
        */
        get subtitleLeftMargin() {
            return this.i.j9;
        }
        set subtitleLeftMargin(v) {
            this.i.j9 = +v;
        }
        /**
         * Gets or sets the top margin of chart subtitle
        *
        * Use `subtitleTopMargin` property for the top margin of chart subtitle.
        *
        * ```html
        *    <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTopMargin=10>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTopMargin = 10;
        * ```
        */
        get subtitleTopMargin() {
            return this.i.kb;
        }
        set subtitleTopMargin(v) {
            this.i.kb = +v;
        }
        /**
         * Gets or sets the right margin of chart subtitle
        *
        * Use `subtitleRightMargin` property for the right margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleRightMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.subtitleRightMargin = 20 ;
        * ```
        */
        get subtitleRightMargin() {
            return this.i.ka;
        }
        set subtitleRightMargin(v) {
            this.i.ka = +v;
        }
        /**
         * Gets or sets the bottom margin of chart subtitle
        *
        * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        * 	subtitleBottomMargin=10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleBottomMargin = 10 ;
        * ```
        */
        get subtitleBottomMargin() {
            return this.i.j8;
        }
        set subtitleBottomMargin(v) {
            this.i.j8 = +v;
        }
        /**
         * Gets or sets color of chart subtitle
        *
        * Use `subtitleTextColor` property to color the subtitle.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTextColor= 'blue'>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTextColor = "#ff0000" ;
        * ```
        */
        get subtitleTextColor() {
            return brushToString(this.i.yi);
        }
        set subtitleTextColor(v) {
            this.i.yi = stringToBrush(v);
        }
        /**
         * Gets or sets color of chart title
        *
        *  Use `titleTextColor` property to color the chart title
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       titleTextColor= "red">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.titleTextColor="red" ;
        * ```
        */
        get titleTextColor() {
            return brushToString(this.i.yj);
        }
        set titleTextColor(v) {
            this.i.yj = stringToBrush(v);
        }
        /**
         * Gets or sets the left margin of the chart content.
        *
        * Use the 'leftMargin' property for the left margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       leftMargin=20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.leftMargin = 20;
        * ```
        */
        get leftMargin() {
            return this.i.jy;
        }
        set leftMargin(v) {
            this.i.jy = +v;
        }
        /**
         * Gets or sets the top margin of the chart content.
        *
        * Use `topMargin` property for the margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     topMargin= 20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.topMargin=20;
        * ```
        */
        get topMargin() {
            return this.i.kh;
        }
        set topMargin(v) {
            this.i.kh = +v;
        }
        /**
         * Gets or sets the right margin of the chart content.
        *
        * Use `rightMargin` property for the right margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     rightMargin=20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *   this.chart.rightMargin = 20 ;
        * ```
        */
        get rightMargin() {
            return this.i.j7;
        }
        set rightMargin(v) {
            this.i.j7 = +v;
        }
        /**
         * Gets or sets the bottom margin around the chart content.
        *
        * Use the `bottomMargin` property for the bottom margin around the chart content.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       bottomMargin= 20>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.bottomMargin=20;
        * ```
        */
        get bottomMargin() {
            return this.i.jk;
        }
        set bottomMargin(v) {
            this.i.jk = +v;
        }
        /**
         * Gets or sets the duration used for animating series plots when the data is changing
        *
        * Use the `TransitionDuration` property to animating between data values.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     transitionDuration="500">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.transitionDuratio= 500;
        * ```
        */
        get transitionDuration() {
            return this.i.lk;
        }
        set transitionDuration(v) {
            this.i.lk = +v;
        }
        /**
         * Gets or sets the easing function used for animating series plots when the data is changing.
         * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
        *
        * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     transitionInEasingFunction= "cubic">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.transitionInEasingFunction=  this.cubicFunc;
        *
        * cubicFunc(time: number) : number
        *   {
        *     return time;
        *   }
        * ```
        */
        get transitionEasingFunction() {
            return this.i.ex;
        }
        set transitionEasingFunction(v) {
            this.i.ex = v;
        }
        /**
         * Gets or sets the duration used for animating highlighting changes
        */
        get highlightingTransitionDuration() {
            return this.i.lh;
        }
        set highlightingTransitionDuration(v) {
            this.i.lh = +v;
        }
        /**
         * Gets or sets the duration used for animating Selection changes
        */
        get selectionTransitionDuration() {
            return this.i.lj;
        }
        set selectionTransitionDuration(v) {
            this.i.lj = +v;
        }
        /**
         * Gets or sets the duration used for animating Focus changes
        */
        get focusTransitionDuration() {
            return this.i.lg;
        }
        set focusTransitionDuration(v) {
            this.i.lg = +v;
        }
        /**
         * Gets or sets CSS font property for the chart subtitle
        *
        * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTextStyle ="16pt Verdona">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTextStyle= "16pt Verdona";
        * ```
        */
        get subtitleTextStyle() {
            return this.i.sp;
        }
        set subtitleTextStyle(v) {
            this.i.sp = v;
        }
        /**
         * Gets or sets CSS font property for the chart title
        *
        * Use `titleTextStyle` property for the CSS font property of the chart title
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       titleTextStyle= "24pt Verdona">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTextStyle = "24pt Verdona";
        * ```
        */
        get titleTextStyle() {
            return this.i.s0;
        }
        set titleTextStyle(v) {
            this.i.s0 = v;
        }
        get isDetached() {
            return this.i.isDetached;
        }
        get dataToolTipGroupingMode() {
            return this.i.b3;
        }
        set dataToolTipGroupingMode(v) {
            this.i.b3 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        }
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get dataToolTipPositionOffsetX() {
            return this.i.jp;
        }
        set dataToolTipPositionOffsetX(v) {
            this.i.jp = +v;
        }
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get dataToolTipPositionOffsetY() {
            return this.i.jq;
        }
        set dataToolTipPositionOffsetY(v) {
            this.i.jq = +v;
        }
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get dataToolTipDefaultPositionOffsetX() {
            return this.i.jn;
        }
        set dataToolTipDefaultPositionOffsetX(v) {
            this.i.jn = +v;
        }
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get dataToolTipDefaultPositionOffsetY() {
            return this.i.jo;
        }
        set dataToolTipDefaultPositionOffsetY(v) {
            this.i.jo = +v;
        }
        /**
         * Gets or sets the tooltip position mode on the X axis for grouped series.
        */
        get dataToolTipGroupedPositionModeX() {
            return this.i.bz;
        }
        set dataToolTipGroupedPositionModeX(v) {
            this.i.bz = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        }
        /**
         * Gets or sets the tooltip position mode on the Y axis for grouped series.
        */
        get dataToolTipGroupedPositionModeY() {
            return this.i.b1;
        }
        set dataToolTipGroupedPositionModeY(v) {
            this.i.b1 = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        }
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get dataToolTipShouldUpdateWhenSeriesDataChanges() {
            return this.i.gs;
        }
        set dataToolTipShouldUpdateWhenSeriesDataChanges(v) {
            this.i.gs = ensureBool(v);
        }
        /**
         * Gets or sets indexes, titles, or names of series to include in displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
        */
        get dataToolTipIncludedSeries() {
            return this.i.m;
        }
        set dataToolTipIncludedSeries(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.m = v;
        }
        /**
         * Gets or sets indexes, titles, or names of series to exclude from displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
        */
        get dataToolTipExcludedSeries() {
            return this.i.j;
        }
        set dataToolTipExcludedSeries(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.j = v;
        }
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
         * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
        */
        get dataToolTipIncludedColumns() {
            return this.i.l;
        }
        set dataToolTipIncludedColumns(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.l = v;
        }
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
         * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
        */
        get dataToolTipExcludedColumns() {
            return this.i.i;
        }
        set dataToolTipExcludedColumns(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.i = v;
        }
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get dataToolTipValueFormatAbbreviation() {
            return this.i.bh;
        }
        set dataToolTipValueFormatAbbreviation(v) {
            this.i.bh = ensureEnum(DataAbbreviationMode_$type, v);
        }
        /**
         * Gets or sets maximum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get dataToolTipValueFormatMaxFractions() {
            return this.i.ld;
        }
        set dataToolTipValueFormatMaxFractions(v) {
            this.i.ld = +v;
        }
        /**
         * Gets or sets minimum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get dataToolTipValueFormatMinFractions() {
            return this.i.le;
        }
        set dataToolTipValueFormatMinFractions(v) {
            this.i.le = +v;
        }
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get dataToolTipValueFormatMode() {
            return this.i.bx;
        }
        set dataToolTipValueFormatMode(v) {
            this.i.bx = ensureEnum(DataLegendValueMode_$type, v);
        }
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get dataToolTipValueFormatCulture() {
            return this.i.pu;
        }
        set dataToolTipValueFormatCulture(v) {
            this.i.pu = v;
        }
        /**
         * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get dataToolTipValueFormatUseGrouping() {
            return this.i.gt;
        }
        set dataToolTipValueFormatUseGrouping(v) {
            this.i.gt = ensureBool(v);
        }
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get dataToolTipValueFormatString() {
            return this.i.p0;
        }
        set dataToolTipValueFormatString(v) {
            this.i.p0 = v;
        }
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get dataToolTipValueFormatSpecifiers() {
            return this.i.n;
        }
        set dataToolTipValueFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.n = v;
        }
        get dataToolTipValueRowMarginBottom() {
            return this.i.zc ? this.i.zc.bottom : NaN;
        }
        set dataToolTipValueRowMarginBottom(v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.bottom = +v;
            this.i.zc = this.i.zc;
        }
        get dataToolTipValueRowMarginLeft() {
            return this.i.zc ? this.i.zc.left : NaN;
        }
        set dataToolTipValueRowMarginLeft(v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.left = +v;
            this.i.zc = this.i.zc;
        }
        get dataToolTipValueRowMarginRight() {
            return this.i.zc ? this.i.zc.right : NaN;
        }
        set dataToolTipValueRowMarginRight(v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.right = +v;
            this.i.zc = this.i.zc;
        }
        get dataToolTipValueRowMarginTop() {
            return this.i.zc ? this.i.zc.top : NaN;
        }
        set dataToolTipValueRowMarginTop(v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.top = +v;
            this.i.zc = this.i.zc;
        }
        ensureDataToolTipValueRowMargin() {
            if (this.i.zc) {
                return;
            }
            this.i.zc = new Thickness(2);
        }
        /**
         * Gets or sets whether to show series rows.
        */
        get dataToolTipValueRowVisible() {
            return this.i.gu;
        }
        set dataToolTipValueRowVisible(v) {
            this.i.gu = ensureBool(v);
        }
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get dataToolTipValueTextWhenMissingData() {
            return this.i.p9;
        }
        set dataToolTipValueTextWhenMissingData(v) {
            this.i.p9 = v;
        }
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get dataToolTipValueTextUseSeriesColors() {
            return this.i.gv;
        }
        set dataToolTipValueTextUseSeriesColors(v) {
            this.i.gv = ensureBool(v);
        }
        get dataToolTipValueTextMarginBottom() {
            return this.i.zd ? this.i.zd.bottom : NaN;
        }
        set dataToolTipValueTextMarginBottom(v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.bottom = +v;
            this.i.zd = this.i.zd;
        }
        get dataToolTipValueTextMarginLeft() {
            return this.i.zd ? this.i.zd.left : NaN;
        }
        set dataToolTipValueTextMarginLeft(v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.left = +v;
            this.i.zd = this.i.zd;
        }
        get dataToolTipValueTextMarginRight() {
            return this.i.zd ? this.i.zd.right : NaN;
        }
        set dataToolTipValueTextMarginRight(v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.right = +v;
            this.i.zd = this.i.zd;
        }
        get dataToolTipValueTextMarginTop() {
            return this.i.zd ? this.i.zd.top : NaN;
        }
        set dataToolTipValueTextMarginTop(v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.top = +v;
            this.i.zd = this.i.zd;
        }
        ensureDataToolTipValueTextMargin() {
            if (this.i.zd) {
                return;
            }
            this.i.zd = new Thickness(2);
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipValueTextColor() {
            return brushToString(this.i.x6);
        }
        set dataToolTipValueTextColor(v) {
            this.i.x6 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipValueTextStyle() {
            if (this.i.fh == null) {
                return null;
            }
            return this.i.fh.fontString;
        }
        set dataToolTipValueTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fh = fi;
        }
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get dataToolTipHeaderFormatString() {
            return this.i.ok;
        }
        set dataToolTipHeaderFormatString(v) {
            this.i.ok = v;
        }
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get dataToolTipHeaderFormatSpecifiers() {
            return this.i.k;
        }
        set dataToolTipHeaderFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.k = v;
        }
        /**
         * Gets or sets globalization culture when displaying header as date time
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get dataToolTipHeaderFormatCulture() {
            return this.i.og;
        }
        set dataToolTipHeaderFormatCulture(v) {
            this.i.og = v;
        }
        /**
         * Gets or sets date format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get dataToolTipHeaderFormatDate() {
            return this.i.bn;
        }
        set dataToolTipHeaderFormatDate(v) {
            this.i.bn = ensureEnum(DataLegendHeaderDateMode_$type, v);
        }
        /**
         * Gets or sets time format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get dataToolTipHeaderFormatTime() {
            return this.i.bp;
        }
        set dataToolTipHeaderFormatTime(v) {
            this.i.bp = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        }
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get dataToolTipHeaderText() {
            return this.i.op;
        }
        set dataToolTipHeaderText(v) {
            this.i.op = v;
        }
        /**
         * Gets or sets the header text color.
        */
        get dataToolTipHeaderTextColor() {
            return brushToString(this.i.xy);
        }
        set dataToolTipHeaderTextColor(v) {
            this.i.xy = stringToBrush(v);
        }
        get dataToolTipHeaderTextMarginBottom() {
            return this.i.y6 ? this.i.y6.bottom : NaN;
        }
        set dataToolTipHeaderTextMarginBottom(v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.bottom = +v;
            this.i.y6 = this.i.y6;
        }
        get dataToolTipHeaderTextMarginLeft() {
            return this.i.y6 ? this.i.y6.left : NaN;
        }
        set dataToolTipHeaderTextMarginLeft(v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.left = +v;
            this.i.y6 = this.i.y6;
        }
        get dataToolTipHeaderTextMarginRight() {
            return this.i.y6 ? this.i.y6.right : NaN;
        }
        set dataToolTipHeaderTextMarginRight(v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.right = +v;
            this.i.y6 = this.i.y6;
        }
        get dataToolTipHeaderTextMarginTop() {
            return this.i.y6 ? this.i.y6.top : NaN;
        }
        set dataToolTipHeaderTextMarginTop(v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.top = +v;
            this.i.y6 = this.i.y6;
        }
        ensureDataToolTipHeaderTextMargin() {
            if (this.i.y6) {
                return;
            }
            this.i.y6 = new Thickness(2);
        }
        get dataToolTipHeaderRowMarginBottom() {
            return this.i.y5 ? this.i.y5.bottom : NaN;
        }
        set dataToolTipHeaderRowMarginBottom(v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.bottom = +v;
            this.i.y5 = this.i.y5;
        }
        get dataToolTipHeaderRowMarginLeft() {
            return this.i.y5 ? this.i.y5.left : NaN;
        }
        set dataToolTipHeaderRowMarginLeft(v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.left = +v;
            this.i.y5 = this.i.y5;
        }
        get dataToolTipHeaderRowMarginRight() {
            return this.i.y5 ? this.i.y5.right : NaN;
        }
        set dataToolTipHeaderRowMarginRight(v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.right = +v;
            this.i.y5 = this.i.y5;
        }
        get dataToolTipHeaderRowMarginTop() {
            return this.i.y5 ? this.i.y5.top : NaN;
        }
        set dataToolTipHeaderRowMarginTop(v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.top = +v;
            this.i.y5 = this.i.y5;
        }
        ensureDataToolTipHeaderRowMargin() {
            if (this.i.y5) {
                return;
            }
            this.i.y5 = new Thickness(2);
        }
        /**
         * Gets or sets whether to show Header row.
        */
        get dataToolTipHeaderRowVisible() {
            return this.i.gr;
        }
        set dataToolTipHeaderRowVisible(v) {
            this.i.gr = ensureBool(v);
        }
        /**
         * Gets or Sets the style to use for the header text.
        */
        get dataToolTipHeaderTextStyle() {
            if (this.i.e9 == null) {
                return null;
            }
            return this.i.e9.fontString;
        }
        set dataToolTipHeaderTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.e9 = fi;
        }
        /**
         * Gets or sets the Group text color.
        */
        get dataToolTipGroupTextColor() {
            return brushToString(this.i.xx);
        }
        set dataToolTipGroupTextColor(v) {
            this.i.xx = stringToBrush(v);
        }
        get dataToolTipGroupTextMarginBottom() {
            return this.i.y4 ? this.i.y4.bottom : NaN;
        }
        set dataToolTipGroupTextMarginBottom(v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.bottom = +v;
            this.i.y4 = this.i.y4;
        }
        get dataToolTipGroupTextMarginLeft() {
            return this.i.y4 ? this.i.y4.left : NaN;
        }
        set dataToolTipGroupTextMarginLeft(v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.left = +v;
            this.i.y4 = this.i.y4;
        }
        get dataToolTipGroupTextMarginRight() {
            return this.i.y4 ? this.i.y4.right : NaN;
        }
        set dataToolTipGroupTextMarginRight(v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.right = +v;
            this.i.y4 = this.i.y4;
        }
        get dataToolTipGroupTextMarginTop() {
            return this.i.y4 ? this.i.y4.top : NaN;
        }
        set dataToolTipGroupTextMarginTop(v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.top = +v;
            this.i.y4 = this.i.y4;
        }
        ensureDataToolTipGroupTextMargin() {
            if (this.i.y4) {
                return;
            }
            this.i.y4 = new Thickness(2);
        }
        get dataToolTipGroupRowMarginBottom() {
            return this.i.y3 ? this.i.y3.bottom : NaN;
        }
        set dataToolTipGroupRowMarginBottom(v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.bottom = +v;
            this.i.y3 = this.i.y3;
        }
        get dataToolTipGroupRowMarginLeft() {
            return this.i.y3 ? this.i.y3.left : NaN;
        }
        set dataToolTipGroupRowMarginLeft(v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.left = +v;
            this.i.y3 = this.i.y3;
        }
        get dataToolTipGroupRowMarginRight() {
            return this.i.y3 ? this.i.y3.right : NaN;
        }
        set dataToolTipGroupRowMarginRight(v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.right = +v;
            this.i.y3 = this.i.y3;
        }
        get dataToolTipGroupRowMarginTop() {
            return this.i.y3 ? this.i.y3.top : NaN;
        }
        set dataToolTipGroupRowMarginTop(v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.top = +v;
            this.i.y3 = this.i.y3;
        }
        ensureDataToolTipGroupRowMargin() {
            if (this.i.y3) {
                return;
            }
            this.i.y3 = new Thickness(2);
        }
        /**
         * Gets or sets whether to show Group row.
        */
        get dataToolTipGroupRowVisible() {
            return this.i.gq;
        }
        set dataToolTipGroupRowVisible(v) {
            this.i.gq = ensureBool(v);
        }
        /**
         * Gets or Sets the style to use for the Group text.
        */
        get dataToolTipGroupTextStyle() {
            if (this.i.e8 == null) {
                return null;
            }
            return this.i.e8.fontString;
        }
        set dataToolTipGroupTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.e8 = fi;
        }
        /**
         * Gets or sets the summary text color.
        */
        get dataToolTipSummaryTitleTextColor() {
            return brushToString(this.i.x1);
        }
        set dataToolTipSummaryTitleTextColor(v) {
            this.i.x1 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get dataToolTipSummaryTitleTextStyle() {
            if (this.i.fc == null) {
                return null;
            }
            return this.i.fc.fontString;
        }
        set dataToolTipSummaryTitleTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fc = fi;
        }
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get dataToolTipSummaryType() {
            return this.i.bt;
        }
        set dataToolTipSummaryType(v) {
            this.i.bt = ensureEnum(DataLegendSummaryType_$type, v);
        }
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get dataToolTipSummaryTitleText() {
            return this.i.o8;
        }
        set dataToolTipSummaryTitleText(v) {
            this.i.o8 = v;
        }
        get dataToolTipSummaryTitleTextMarginBottom() {
            return this.i.y9 ? this.i.y9.bottom : NaN;
        }
        set dataToolTipSummaryTitleTextMarginBottom(v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.bottom = +v;
            this.i.y9 = this.i.y9;
        }
        get dataToolTipSummaryTitleTextMarginLeft() {
            return this.i.y9 ? this.i.y9.left : NaN;
        }
        set dataToolTipSummaryTitleTextMarginLeft(v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.left = +v;
            this.i.y9 = this.i.y9;
        }
        get dataToolTipSummaryTitleTextMarginRight() {
            return this.i.y9 ? this.i.y9.right : NaN;
        }
        set dataToolTipSummaryTitleTextMarginRight(v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.right = +v;
            this.i.y9 = this.i.y9;
        }
        get dataToolTipSummaryTitleTextMarginTop() {
            return this.i.y9 ? this.i.y9.top : NaN;
        }
        set dataToolTipSummaryTitleTextMarginTop(v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.top = +v;
            this.i.y9 = this.i.y9;
        }
        ensureDataToolTipSummaryTitleTextMargin() {
            if (this.i.y9) {
                return;
            }
            this.i.y9 = new Thickness(2);
        }
        get dataToolTipSummaryRowMarginBottom() {
            return this.i.y8 ? this.i.y8.bottom : NaN;
        }
        set dataToolTipSummaryRowMarginBottom(v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.bottom = +v;
            this.i.y8 = this.i.y8;
        }
        get dataToolTipSummaryRowMarginLeft() {
            return this.i.y8 ? this.i.y8.left : NaN;
        }
        set dataToolTipSummaryRowMarginLeft(v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.left = +v;
            this.i.y8 = this.i.y8;
        }
        get dataToolTipSummaryRowMarginRight() {
            return this.i.y8 ? this.i.y8.right : NaN;
        }
        set dataToolTipSummaryRowMarginRight(v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.right = +v;
            this.i.y8 = this.i.y8;
        }
        get dataToolTipSummaryRowMarginTop() {
            return this.i.y8 ? this.i.y8.top : NaN;
        }
        set dataToolTipSummaryRowMarginTop(v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.top = +v;
            this.i.y8 = this.i.y8;
        }
        ensureDataToolTipSummaryRowMargin() {
            if (this.i.y8) {
                return;
            }
            this.i.y8 = new Thickness(2);
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipSummaryValueTextColor() {
            return brushToString(this.i.x3);
        }
        set dataToolTipSummaryValueTextColor(v) {
            this.i.x3 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipSummaryValueTextStyle() {
            if (this.i.fe == null) {
                return null;
            }
            return this.i.fe.fontString;
        }
        set dataToolTipSummaryValueTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fe = fi;
        }
        /**
         * Gets or sets the units text for the data legend.
        */
        get dataToolTipSummaryLabelText() {
            return this.i.o3;
        }
        set dataToolTipSummaryLabelText(v) {
            this.i.o3 = v;
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipSummaryLabelTextColor() {
            return brushToString(this.i.x0);
        }
        set dataToolTipSummaryLabelTextColor(v) {
            this.i.x0 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipSummaryLabelTextStyle() {
            if (this.i.fb == null) {
                return null;
            }
            return this.i.fb.fontString;
        }
        set dataToolTipSummaryLabelTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fb = fi;
        }
        /**
         * Gets or sets the units text for the data legend.
        */
        get dataToolTipSummaryUnitsText() {
            return this.i.pe;
        }
        set dataToolTipSummaryUnitsText(v) {
            this.i.pe = v;
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipSummaryUnitsTextColor() {
            return brushToString(this.i.x2);
        }
        set dataToolTipSummaryUnitsTextColor(v) {
            this.i.x2 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipSummaryUnitsTextStyle() {
            if (this.i.fd == null) {
                return null;
            }
            return this.i.fd.fontString;
        }
        set dataToolTipSummaryUnitsTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fd = fi;
        }
        get dataToolTipBadgeMarginBottom() {
            return this.i.y2 ? this.i.y2.bottom : NaN;
        }
        set dataToolTipBadgeMarginBottom(v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.bottom = +v;
            this.i.y2 = this.i.y2;
        }
        get dataToolTipBadgeMarginLeft() {
            return this.i.y2 ? this.i.y2.left : NaN;
        }
        set dataToolTipBadgeMarginLeft(v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.left = +v;
            this.i.y2 = this.i.y2;
        }
        get dataToolTipBadgeMarginRight() {
            return this.i.y2 ? this.i.y2.right : NaN;
        }
        set dataToolTipBadgeMarginRight(v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.right = +v;
            this.i.y2 = this.i.y2;
        }
        get dataToolTipBadgeMarginTop() {
            return this.i.y2 ? this.i.y2.top : NaN;
        }
        set dataToolTipBadgeMarginTop(v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.top = +v;
            this.i.y2 = this.i.y2;
        }
        ensureDataToolTipBadgeMargin() {
            if (this.i.y2) {
                return;
            }
            this.i.y2 = new Thickness(2);
        }
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get dataToolTipBadgeShape() {
            return this.i.cw;
        }
        set dataToolTipBadgeShape(v) {
            this.i.cw = ensureEnum(LegendItemBadgeShape_$type, v);
        }
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get dataToolTipUnitsDisplayMode() {
            return this.i.bv;
        }
        set dataToolTipUnitsDisplayMode(v) {
            this.i.bv = ensureEnum(DataLegendUnitsMode_$type, v);
        }
        /**
         * Gets or sets the units text for the data legend.
        */
        get dataToolTipUnitsText() {
            return this.i.po;
        }
        set dataToolTipUnitsText(v) {
            this.i.po = v;
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipUnitsTextColor() {
            return brushToString(this.i.x5);
        }
        set dataToolTipUnitsTextColor(v) {
            this.i.x5 = stringToBrush(v);
        }
        get dataToolTipUnitsTextMarginBottom() {
            return this.i.zb ? this.i.zb.bottom : NaN;
        }
        set dataToolTipUnitsTextMarginBottom(v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.bottom = +v;
            this.i.zb = this.i.zb;
        }
        get dataToolTipUnitsTextMarginLeft() {
            return this.i.zb ? this.i.zb.left : NaN;
        }
        set dataToolTipUnitsTextMarginLeft(v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.left = +v;
            this.i.zb = this.i.zb;
        }
        get dataToolTipUnitsTextMarginRight() {
            return this.i.zb ? this.i.zb.right : NaN;
        }
        set dataToolTipUnitsTextMarginRight(v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.right = +v;
            this.i.zb = this.i.zb;
        }
        get dataToolTipUnitsTextMarginTop() {
            return this.i.zb ? this.i.zb.top : NaN;
        }
        set dataToolTipUnitsTextMarginTop(v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.top = +v;
            this.i.zb = this.i.zb;
        }
        ensureDataToolTipUnitsTextMargin() {
            if (this.i.zb) {
                return;
            }
            this.i.zb = new Thickness(2);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipUnitsTextStyle() {
            if (this.i.fg == null) {
                return null;
            }
            return this.i.fg.fontString;
        }
        set dataToolTipUnitsTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fg = fi;
        }
        get dataToolTipTitleTextMarginBottom() {
            return this.i.za ? this.i.za.bottom : NaN;
        }
        set dataToolTipTitleTextMarginBottom(v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.bottom = +v;
            this.i.za = this.i.za;
        }
        get dataToolTipTitleTextMarginLeft() {
            return this.i.za ? this.i.za.left : NaN;
        }
        set dataToolTipTitleTextMarginLeft(v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.left = +v;
            this.i.za = this.i.za;
        }
        get dataToolTipTitleTextMarginRight() {
            return this.i.za ? this.i.za.right : NaN;
        }
        set dataToolTipTitleTextMarginRight(v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.right = +v;
            this.i.za = this.i.za;
        }
        get dataToolTipTitleTextMarginTop() {
            return this.i.za ? this.i.za.top : NaN;
        }
        set dataToolTipTitleTextMarginTop(v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.top = +v;
            this.i.za = this.i.za;
        }
        ensureDataToolTipTitleTextMargin() {
            if (this.i.za) {
                return;
            }
            this.i.za = new Thickness(2);
        }
        /**
         * Gets or sets the display text color.
        */
        get dataToolTipTitleTextColor() {
            return brushToString(this.i.x4);
        }
        set dataToolTipTitleTextColor(v) {
            this.i.x4 = stringToBrush(v);
        }
        /**
         * Gets or Sets the style to use for the display text.
        */
        get dataToolTipTitleTextStyle() {
            if (this.i.ff == null) {
                return null;
            }
            return this.i.ff.fontString;
        }
        set dataToolTipTitleTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.ff = fi;
        }
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get dataToolTipLabelDisplayMode() {
            return this.i.br;
        }
        set dataToolTipLabelDisplayMode(v) {
            this.i.br = ensureEnum(DataLegendLabelMode_$type, v);
        }
        /**
         * Gets or sets the units text color.
        */
        get dataToolTipLabelTextColor() {
            return brushToString(this.i.xz);
        }
        set dataToolTipLabelTextColor(v) {
            this.i.xz = stringToBrush(v);
        }
        get dataToolTipLabelTextMarginBottom() {
            return this.i.y7 ? this.i.y7.bottom : NaN;
        }
        set dataToolTipLabelTextMarginBottom(v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.bottom = +v;
            this.i.y7 = this.i.y7;
        }
        get dataToolTipLabelTextMarginLeft() {
            return this.i.y7 ? this.i.y7.left : NaN;
        }
        set dataToolTipLabelTextMarginLeft(v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.left = +v;
            this.i.y7 = this.i.y7;
        }
        get dataToolTipLabelTextMarginRight() {
            return this.i.y7 ? this.i.y7.right : NaN;
        }
        set dataToolTipLabelTextMarginRight(v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.right = +v;
            this.i.y7 = this.i.y7;
        }
        get dataToolTipLabelTextMarginTop() {
            return this.i.y7 ? this.i.y7.top : NaN;
        }
        set dataToolTipLabelTextMarginTop(v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.top = +v;
            this.i.y7 = this.i.y7;
        }
        ensureDataToolTipLabelTextMargin() {
            if (this.i.y7) {
                return;
            }
            this.i.y7 = new Thickness(2);
        }
        /**
         * Gets or Sets the style to use for the units text.
        */
        get dataToolTipLabelTextStyle() {
            if (this.i.fa == null) {
                return null;
            }
            return this.i.fa.fontString;
        }
        set dataToolTipLabelTextStyle(v) {
            let fi = new FontInfo();
            fi.fontString = v;
            this.i.fa = fi;
        }
        /**
         * Gets the domain type of this chart
        */
        get domainType() {
            return this.i.cf;
        }
        /**
         * Gets the current sort that is applied to the grid. Collection can be updated to modify the sort for the grid. Once sort descriptions are in this collection, the grid will no longer listen for changes on their properties.
        */
        get sortDescriptions() {
            const r = this.i.a6;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        get groupSortDescriptions() {
            const r = this.i.a2;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the current grouping that is applied to the grid. Collection can be updated to modify the grouping for the grid. Once grouping descriptions are in this collection, the grid will no longer listen for changes on their properties.
        */
        get groupDescriptions() {
            const r = this.i.a1;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the current filter that is applied to the chart. Collection can be updated to modify the filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
        */
        get filterExpressions() {
            const r = this.i.eq;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the current highlight filter that is applied to the chart. Collection can be updated to modify the highlight filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
        */
        get highlightFilterExpressions() {
            const r = this.i.er;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the current summaries that are applied to the grid.
        */
        get summaryDescriptions() {
            const r = this.i.ba;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSummaryDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets or sets the selection mode to use for the series in the component, when supported.
        */
        get selectionMode() {
            return this.i.d1;
        }
        set selectionMode(v) {
            this.i.d1 = ensureEnum(SeriesSelectionMode_$type, v);
        }
        /**
         * Gets or sets the focus mode to use for the series in the component, when supported.
        */
        get focusMode() {
            return this.i.d0;
        }
        set focusMode(v) {
            this.i.d0 = ensureEnum(SeriesSelectionMode_$type, v);
        }
        /**
         * Gets or sets the selection brush to use for the series.
        */
        get selectionBrush() {
            return brushToString(this.i.yh);
        }
        set selectionBrush(v) {
            this.i.yh = stringToBrush(v);
        }
        /**
         * Gets or sets the focus brush to use for the series.
        */
        get focusBrush() {
            return brushToString(this.i.x9);
        }
        set focusBrush(v) {
            this.i.x9 = stringToBrush(v);
        }
        /**
         * Gets or sets the selection behavior to use for the series in the component, when supported.
        */
        get selectionBehavior() {
            return this.i.dx;
        }
        set selectionBehavior(v) {
            this.i.dx = ensureEnum(SeriesSelectionBehavior_$type, v);
        }
        /**
         * Gets the currently selected data items.  Adding or removing data items from this collection will
         * select or deselect the visuals associated with those items.
        */
        get selectedSeriesItems() {
            if (this._selectedSeriesItems === null) {
                let coll = new IgxChartSelectedItemCollection();
                let innerColl = this.i.selectedSeriesItems;
                if (!innerColl) {
                    innerColl = new ChartSelectedItemCollection_internal();
                }
                this._selectedSeriesItems = coll._fromInner(innerColl);
            }
            return this._selectedSeriesItems;
        }
        set selectedSeriesItems(v) {
            if (this._selectedSeriesItems !== null) {
                this._selectedSeriesItems._setSyncTarget(null);
                this._selectedSeriesItems = null;
            }
            let coll = new IgxChartSelectedItemCollection();
            this._selectedSeriesItems = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(ChartSelection.$type);
            let innerColl = this.i.selectedSeriesItems;
            if (!innerColl) {
                innerColl = new ChartSelectedItemCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._selectedSeriesItems._setSyncTarget(syncColl);
        }
        /**
         * Gets the currently focused data items.  Adding or removing data items from this collection will
         * focus or blur the visuals associated with those items.
        */
        get focusedSeriesItems() {
            if (this._focusedSeriesItems === null) {
                let coll = new IgxChartSelectedItemCollection();
                let innerColl = this.i.focusedSeriesItems;
                if (!innerColl) {
                    innerColl = new ChartSelectedItemCollection_internal();
                }
                this._focusedSeriesItems = coll._fromInner(innerColl);
            }
            return this._focusedSeriesItems;
        }
        set focusedSeriesItems(v) {
            if (this._focusedSeriesItems !== null) {
                this._focusedSeriesItems._setSyncTarget(null);
                this._focusedSeriesItems = null;
            }
            let coll = new IgxChartSelectedItemCollection();
            this._focusedSeriesItems = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(ChartSelection.$type);
            let innerColl = this.i.focusedSeriesItems;
            if (!innerColl) {
                innerColl = new ChartSelectedItemCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._focusedSeriesItems._setSyncTarget(syncColl);
        }
        /**
         * Gets the initial sorts that are applied to the chart.
        */
        get initialSortDescriptions() {
            const r = this.i.a5;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the initial sorts that are applied to the chart after groupings and summaries are applied.
        */
        get initialGroupSortDescriptions() {
            const r = this.i.a4;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the initial groupings that are applied to the chart.
        */
        get initialGroupDescriptions() {
            const r = this.i.a3;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the initial filters that are applied to the chart.
        */
        get initialFilterExpressions() {
            const r = this.i.es;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the initial highlight filters that are applied to the chart.
        */
        get initialHighlightFilterExpressions() {
            const r = this.i.et;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets the initial summaries that are applied to the chart.
        */
        get initialSummaryDescriptions() {
            const r = this.i.a9;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxChartSummaryDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        /**
         * Gets or sets the sorts to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get initialSorts() {
            return this.i.rd;
        }
        set initialSorts(v) {
            this.i.rd = v;
        }
        /**
         * Gets or sets the sorts to apply after grouping has been applied.
        */
        get groupSorts() {
            return this.i.qm;
        }
        set groupSorts(v) {
            this.i.qm = v;
        }
        /**
         * Gets or sets the groupings to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get initialGroups() {
            return this.i.q9;
        }
        set initialGroups(v) {
            this.i.q9 = v;
        }
        /**
         * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
        */
        get initialFilter() {
            return this.i.q7;
        }
        set initialFilter(v) {
            this.i.q7 = v;
        }
        /**
         * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
        */
        get initialHighlightFilter() {
            return this.i.rb;
        }
        set initialHighlightFilter(v) {
            this.i.rb = v;
        }
        /**
         * Gets or sets the summaries to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get initialSummaries() {
            return this.i.rf;
        }
        set initialSummaries(v) {
            this.i.rf = v;
        }
        /**
         * Gets or sets a collection of data items used to generate the chart.
         * The HighlightedItemsSource of this chart can be a list of objects containing one or more numeric properties.
         * Additionally, if the objects in the list implement the IEnumerable interface,
         * the Chart will attempt to delve into the sub-collections when reading through the data source.
         * Data binding can be further configured by attributing the data item classes
         * with the DataSeriesMemberIntentAttribute.
        */
        get highlightedDataSource() {
            return this.i.highlightedItemsSource;
        }
        set highlightedDataSource(v) {
            this.i.highlightedItemsSource = v;
        }
        /**
         * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
        *
        * The `IncludedProperties` property used to include the properties for the consideration of the category chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     includedProperties="ProductName,Cost" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.includedProperties = ["ProductName", "Cost"];
        * ```
        */
        get includedProperties() {
            return this.i.q;
        }
        set includedProperties(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.q = v;
        }
        /**
         * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
        *
        * The `ExcludedProperties` property used for the property paths that should be excluded from consideration by the category chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     excludedProperties="ID">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.excludedProperties = ["ID", "Discount"];
        * ```
        */
        get excludedProperties() {
            return this.i.o;
        }
        set excludedProperties(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.o = v;
        }
        /**
         * Gets or sets the palette of brushes to use for coloring the chart series.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        * Use the `Brushes` property to  set the brushes.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       Brushes="#ff0000, #cc0000, #aa0000">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.brushes = ["#ff0000","#00ff00"];
        * ```
        */
        get brushes() {
            return fromBrushCollection(this.i.ab);
        }
        set brushes(v) {
            this.i.ab = toBrushCollection(v);
        }
        /**
         * Gets or sets the palette of brushes to use for outlines on the chart series.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        *  Use the `Outlines` property to sets the palette of brushes to use for outlines on the chart series
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     outlines="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        */
        get outlines() {
            return fromBrushCollection(this.i.af);
        }
        set outlines(v) {
            this.i.af = toBrushCollection(v);
        }
        /**
         * Gets the actual palette of brushes to use for coloring the chart series.
        */
        get actualBrushes() {
            return fromBrushCollection(this.i.z);
        }
        set actualBrushes(v) {
            this.i.z = toBrushCollection(v);
        }
        /**
         * Gets the actual palette of brushes to use for outlines on the chart series.
        */
        get actualOutlines() {
            return fromBrushCollection(this.i.aa);
        }
        set actualOutlines(v) {
            this.i.aa = toBrushCollection(v);
        }
        /**
         * Gets or sets whether the chart can be horizontally zoomed through user interactions.
        *
        * Use the `IsHorizontalZoomEnabled` property to allow chart horizontally zoomed .
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       isHorizontalZoomEnabled=true>
        *   </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.isHorizontalZoomEnabled = true;
        * ```
        */
        get isHorizontalZoomEnabled() {
            return this.i.g6;
        }
        set isHorizontalZoomEnabled(v) {
            this.i.g6 = ensureBool(v);
        }
        /**
         * Gets or sets whether the chart can be vertically zoomed through user interactions.
        *
        * Use the `IsVerticalZoomEnabled` property to allow chart zoom vertically.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       isVerticalZoomEnabled=true>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.isVerticalZoomEnabled = true;
        * ```
        */
        get isVerticalZoomEnabled() {
            return this.i.he;
        }
        set isVerticalZoomEnabled(v) {
            this.i.he = ensureBool(v);
        }
        /**
         * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.
        */
        get shouldDisplayMockData() {
            return this.i.hh;
        }
        set shouldDisplayMockData(v) {
            this.i.hh = ensureBool(v);
        }
        /**
         * Gets or sets whether the chart should use a faded skeleton style for mock data.
        */
        get shouldUseSkeletonStyleForMockData() {
            return this.i.hk;
        }
        set shouldUseSkeletonStyleForMockData(v) {
            this.i.hk = ensureBool(v);
        }
        /**
         * Gets or sets whether and how to display highlighted values for the series. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get highlightedValuesDisplayMode() {
            return this.i.dk;
        }
        set highlightedValuesDisplayMode(v) {
            this.i.dk = ensureEnum(SeriesHighlightedValuesDisplayMode_$type, v);
        }
        /**
         * Gets or sets whether the chart can highlight series through user interactions.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get isSeriesHighlightingEnabled() {
            return this.i.g9;
        }
        set isSeriesHighlightingEnabled(v) {
            this.i.g9 = ensureBool(v);
        }
        /**
         * Gets or sets whether the chart can highlight series through user interactions.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get highlightedLegendItemVisibility() {
            return this.i.zf;
        }
        set highlightedLegendItemVisibility(v) {
            this.i.zf = ensureEnum(Visibility_$type, v);
        }
        /**
         * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
         * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
        *
        * Use `WindowRect` property representing the current scroll and zoom state of the chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       WindowRect=[0,0,1,1]>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.windowRect =[0,0,1,1];
        * ```
        */
        get windowRect() {
            return fromRect(this.i.yp);
        }
        set windowRect(v) {
            this.i.yp = toRect(v);
        }
        /**
         * Gets a rectangle representing the bounds of the plot area.
        *
        * `viewport` property representing the bounds of the plot area.
        *
        * ```ts
        * let viewport:Rect =  this.chart.viewport;
        * ```
        */
        get viewport() {
            return fromRect(this.i.yo);
        }
        /**
         * Gets or sets text to display above the plot area.
        *
        * Use the `Title` property to display the text above the plot area.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     title="This is a Title">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.title= "This is a Title";
        * ```
        */
        get chartTitle() {
            return this.i.st;
        }
        set chartTitle(v) {
            this.i.st = v;
        }
        /**
         * Gets or sets text to display below the Title, above the plot area.
        *
        * Use the `Subtitle` property to display the text below  and above the plot area.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitle= "This is a subtitle">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.subtitle ="CategoryChart Subtitle" ;
        * ```
        */
        get subtitle() {
            return this.i.si;
        }
        set subtitle(v) {
            this.i.si = v;
        }
        /**
         * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
        *
        * Use the `TitleAlignment` property for the horizontal alignment of the title.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     titleAlignment= "center">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleAlignment = HorizontalAlignment.Center;
        * ```
        */
        get titleAlignment() {
            return this.i.wy;
        }
        set titleAlignment(v) {
            this.i.wy = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
        *
        * Use the `SubtitleAlignment` property to Gets or sets horizontal alignment.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleAlignment= "center">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleAlignment = HorizontalAlignment.Right;
        * ```
        */
        get subtitleAlignment() {
            return this.i.wx;
        }
        set subtitleAlignment(v) {
            this.i.wx = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets the behavior that determines how unknown values will be plotted on the chart.
         * Null and Double.NaN are two examples of unknown values.
        *
        * Use the `UnknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       unknownValuePlotting= "dontPlot">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;
        * ```
        */
        get unknownValuePlotting() {
            return this.i.eh;
        }
        set unknownValuePlotting(v) {
            this.i.eh = ensureEnum(UnknownValuePlotting_$type, v);
        }
        /**
         * Gets or sets the rendering resolution for all series in this chart.
         * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
        *
        * Use the `Resolution` property if the callouts should be display.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     resolution= 2>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *   this.chart.resolution = 2 ;
        * ```
        */
        get resolution() {
            return this.i.j6;
        }
        set resolution(v) {
            this.i.j6 = +v;
        }
        /**
         * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
        *
        * Use the `Thickness` property for the thickness of all the series in this chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     thickness=5>
        * </igx-category-chart>
        * ```
        */
        get thickness() {
            return this.i.kc;
        }
        set thickness(v) {
            this.i.kc = +v;
        }
        /**
         * Gets or sets the OutlineMode for all series in this chart.
        */
        get outlineMode() {
            return this.i.dr;
        }
        set outlineMode(v) {
            this.i.dr = ensureEnum(SeriesOutlineMode_$type, v);
        }
        /**
         * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.
        */
        get markerOutlineMode() {
            return this.i.c3;
        }
        set markerOutlineMode(v) {
            this.i.c3 = ensureEnum(MarkerOutlineMode_$type, v);
        }
        /**
         * Gets or sets the MarkerFillMode for all series that support markers in this chart.
        */
        get markerFillMode() {
            return this.i.c1;
        }
        set markerFillMode(v) {
            this.i.c1 = ensureEnum(MarkerFillMode_$type, v);
        }
        /**
         * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.
        */
        get markerFillOpacity() {
            return this.i.jz;
        }
        set markerFillOpacity(v) {
            this.i.jz = +v;
        }
        /**
         * Gets or sets the Marker Thickness for all series that support markers in this chart.
        */
        get markerThickness() {
            return this.i.j0;
        }
        set markerThickness(v) {
            this.i.j0 = +v;
        }
        /**
         * Gets or sets the marker shapes used for indicating location of data points in this chart.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        */
        get markerTypes() {
            if (this._markerTypes === null) {
                let coll = new IgxMarkerTypeCollection();
                let innerColl = this.i.c9;
                if (!innerColl) {
                    innerColl = new MarkerTypeCollection_internal();
                }
                this._markerTypes = coll._fromInner(innerColl);
                this.i.c9 = innerColl;
            }
            return this._markerTypes;
        }
        set markerTypes(v) {
            if (this._markerTypes !== null) {
                this._markerTypes._setSyncTarget(null);
                this._markerTypes = null;
            }
            let coll = new IgxMarkerTypeCollection();
            this._markerTypes = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(MarkerType_$type);
            let innerColl = this.i.c9;
            if (!innerColl) {
                innerColl = new MarkerTypeCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._markerTypes._setSyncTarget(syncColl);
            this.i.c9 = innerColl;
        }
        /**
         * Gets or sets the default marker type for all series plotted in this chart.
         * This property is ignored when the MarkerTypes property is set
        */
        get markerAutomaticBehavior() {
            return this.i.cz;
        }
        set markerAutomaticBehavior(v) {
            this.i.cz = ensureEnum(MarkerAutomaticBehavior_$type, v);
        }
        /**
         * Gets or sets the palette of brushes used for rendering fill area of data point markers.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        *
        * `MarkerBrushes` property used for rendering fill area of data point markers.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerBrushes="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.markerBrushes=[ "#ff0000", "#ffff00", "#00ffff" ];
        * ```
        */
        get markerBrushes() {
            return fromBrushCollection(this.i.ad);
        }
        set markerBrushes(v) {
            this.i.ad = toBrushCollection(v);
        }
        /**
         * Gets or sets the palette of brushes used for rendering outlines of data point markers.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        *
        * `MarkerOutlines` property used for rendering outlines of data point markers.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerOutlines="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.markerOutlines= ["#ff0000", "#ffff00", "#00ffff"] ;
        * ```
        */
        get markerOutlines() {
            return fromBrushCollection(this.i.ae);
        }
        set markerOutlines(v) {
            this.i.ae = toBrushCollection(v);
        }
        /**
         * Gets or sets the maximum number of markers displayed in the plot area of the chart.
        *
        * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerMaxCount=100 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.markerMaxCount = 100 ;
        * ```
        */
        get markerMaxCount() {
            return this.i.li;
        }
        set markerMaxCount(v) {
            this.i.li = +v;
        }
        /**
         * Gets or sets the fill opacity for all series that have area visuals in this chart.
         * For example, Area, SplineArea, Column chart types
        */
        get areaFillOpacity() {
            return this.i.jj;
        }
        set areaFillOpacity(v) {
            this.i.jj = +v;
        }
        /**
         * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
        */
        get animateSeriesWhenAxisRangeChanges() {
            return this.i.gg;
        }
        set animateSeriesWhenAxisRangeChanges(v) {
            this.i.gg = ensureBool(v);
        }
        /**
         * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        * Use the `TrendLineBrushes` property for coloring trend lines in the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     trendLineBrushes="#ff0000,#aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineBrushes=["#ff0000", "#ffff00", "#00ffff"]	;
        * ```
        */
        get trendLineBrushes() {
            return fromBrushCollection(this.i.ah);
        }
        set trendLineBrushes(v) {
            this.i.ah = toBrushCollection(v);
        }
        /**
         * Gets or sets the formula used for calculating trend lines in this chart.
         * This property applies only to these chart types: point, line, spline, and bubble
        *
        * Use the `TrendLineType` property for calculating trend lines.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       trendLineType= "cubicFit">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineType = TrendLineType.CubicFit;
        * ```
        */
        get trendLineType() {
            return this.i.ef;
        }
        set trendLineType(v) {
            this.i.ef = ensureEnum(TrendLineType_$type, v);
        }
        /**
         * Gets or sets the thickness of the trend lines in this chart.
         * This property applies only to these chart types: point, line, spline, and bubble
        *
        * Use the `TrendLineThickness` property for the thickness of the trend lines in the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     trendLineThickness= 2>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineThickness=2;
        * ```
        */
        get trendLineThickness() {
            return this.i.ki;
        }
        set trendLineThickness(v) {
            this.i.ki = +v;
        }
        /**
         * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
        *
        * Use `AlignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     AlignsGridLinesToPixels="true">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.alignsGridLinesToPixels= true;
        * ```
        */
        get alignsGridLinesToPixels() {
            return this.i.gf;
        }
        set alignsGridLinesToPixels(v) {
            this.i.gf = ensureBool(v);
        }
        /**
         * Margin applied to the Left of the plot area.
        */
        get plotAreaMarginLeft() {
            return this.i.j3;
        }
        set plotAreaMarginLeft(v) {
            this.i.j3 = +v;
        }
        /**
         * Margin applied to the Top of the plot area.
        */
        get plotAreaMarginTop() {
            return this.i.j5;
        }
        set plotAreaMarginTop(v) {
            this.i.j5 = +v;
        }
        /**
         * Margin applied to the right of the plot area.
        */
        get plotAreaMarginRight() {
            return this.i.j4;
        }
        set plotAreaMarginRight(v) {
            this.i.j4 = +v;
        }
        /**
         * Margin applied below the plot area.
        */
        get plotAreaMarginBottom() {
            return this.i.j2;
        }
        set plotAreaMarginBottom(v) {
            this.i.j2 = +v;
        }
        /**
         * Gets or sets mode to use for automatically calculating the plot area margin.
        */
        get computedPlotAreaMarginMode() {
            return this.i.bc;
        }
        set computedPlotAreaMarginMode(v) {
            this.i.bc = ensureEnum(ComputedPlotAreaMarginMode_$type, v);
        }
        /**
         * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.
        */
        get seriesPlotAreaMarginHorizontalMode() {
            return this.i.dt;
        }
        set seriesPlotAreaMarginHorizontalMode(v) {
            this.i.dt = ensureEnum(SeriesPlotAreaMarginHorizontalMode_$type, v);
        }
        /**
         * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.
        */
        get seriesPlotAreaMarginVerticalMode() {
            return this.i.dv;
        }
        set seriesPlotAreaMarginVerticalMode(v) {
            this.i.dv = ensureEnum(SeriesPlotAreaMarginVerticalMode_$type, v);
        }
        /**
         * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
        */
        get highlightingMode() {
            return this.i.dp;
        }
        set highlightingMode(v) {
            this.i.dp = ensureEnum(SeriesHighlightingMode_$type, v);
        }
        /**
         * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
        */
        get highlightingBehavior() {
            return this.i.dm;
        }
        set highlightingBehavior(v) {
            this.i.dm = ensureEnum(SeriesHighlightingBehavior_$type, v);
        }
        /**
         * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
        */
        get legendHighlightingMode() {
            return this.i.cr;
        }
        set legendHighlightingMode(v) {
            this.i.cr = ensureEnum(LegendHighlightingMode_$type, v);
        }
        /**
         * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
        */
        get legendItemBadgeShape() {
            return this.i.cx;
        }
        set legendItemBadgeShape(v) {
            this.i.cx = ensureEnum(LegendItemBadgeShape_$type, v);
        }
        /**
         * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
        */
        get legendItemBadgeMode() {
            return this.i.ct;
        }
        set legendItemBadgeMode(v) {
            this.i.ct = ensureEnum(LegendItemBadgeMode_$type, v);
        }
        get trendLinePeriod() {
            return this.i.ll;
        }
        set trendLinePeriod(v) {
            this.i.ll = +v;
        }
        /**
         * Gets or sets the style of tooltip to be displayed.
        */
        get toolTipType() {
            return this.i.ed;
        }
        set toolTipType(v) {
            this.i.ed = ensureEnum(ToolTipType_$type, v);
        }
        /**
         * Gets or sets the crosshairs to be displayed.
        */
        get crosshairsDisplayMode() {
            return this.i.bf;
        }
        set crosshairsDisplayMode(v) {
            this.i.bf = ensureEnum(CrosshairsDisplayMode_$type, v);
        }
        /**
         * Gets or sets whether crosshairs will snap to the nearest data point.
        */
        get crosshairsSnapToData() {
            return this.i.gp;
        }
        set crosshairsSnapToData(v) {
            this.i.gp = ensureBool(v);
        }
        /**
         * Gets or sets the color to apply to vertical crosshairs line.
        */
        get crosshairsLineVerticalStroke() {
            return brushToString(this.i.xw);
        }
        set crosshairsLineVerticalStroke(v) {
            this.i.xw = stringToBrush(v);
        }
        /**
         * Gets or sets thickness of crosshairs lines.
        */
        get crosshairsLineThickness() {
            return this.i.jm;
        }
        set crosshairsLineThickness(v) {
            this.i.jm = +v;
        }
        /**
         * Gets or sets the color to apply to horizontal crosshairs line.
        */
        get crosshairsLineHorizontalStroke() {
            return brushToString(this.i.xv);
        }
        set crosshairsLineHorizontalStroke(v) {
            this.i.xv = stringToBrush(v);
        }
        /**
         * Gets or sets whether annotations are shown along the axis for crosshair values
        */
        get crosshairsAnnotationEnabled() {
            return this.i.go;
        }
        set crosshairsAnnotationEnabled(v) {
            this.i.go = ensureBool(v);
        }
        /**
         * Gets or sets the background of crosshair annotation on x-axis.
        */
        get crosshairsAnnotationXAxisBackground() {
            return brushToString(this.i.xr);
        }
        set crosshairsAnnotationXAxisBackground(v) {
            this.i.xr = stringToBrush(v);
        }
        /**
         * Gets or sets the background of crosshair annotation on y-axis.
        */
        get crosshairsAnnotationYAxisBackground() {
            return brushToString(this.i.xt);
        }
        set crosshairsAnnotationYAxisBackground(v) {
            this.i.xt = stringToBrush(v);
        }
        /**
         * Gets or sets the text color of crosshair annotation on x-axis.
        */
        get crosshairsAnnotationXAxisTextColor() {
            return brushToString(this.i.xs);
        }
        set crosshairsAnnotationXAxisTextColor(v) {
            this.i.xs = stringToBrush(v);
        }
        /**
         * Gets or sets the text color of crosshair annotation on y-axis.
        */
        get crosshairsAnnotationYAxisTextColor() {
            return brushToString(this.i.xu);
        }
        set crosshairsAnnotationYAxisTextColor(v) {
            this.i.xu = stringToBrush(v);
        }
        /**
         * Gets or sets precision on interpolated values of crosshairs on x-axis.
        */
        get crosshairsAnnotationXAxisPrecision() {
            return this.i.lb;
        }
        set crosshairsAnnotationXAxisPrecision(v) {
            this.i.lb = +v;
        }
        /**
         * Gets or sets precision on interpolated values of crosshairs on y-axis.
        */
        get crosshairsAnnotationYAxisPrecision() {
            return this.i.lc;
        }
        set crosshairsAnnotationYAxisPrecision(v) {
            this.i.lc = +v;
        }
        /**
         * Gets or sets whether annotations for the final value of each series is displayed on the axis.
        */
        get shouldAvoidAxisAnnotationCollisions() {
            return this.i.hg;
        }
        set shouldAvoidAxisAnnotationCollisions(v) {
            this.i.hg = ensureBool(v);
        }
        /**
         * Gets or sets a whether the chart should pan its content when zoo,ing in passed max zoom level.
        */
        get shouldPanOnMaximumZoom() {
            return this.i.hi;
        }
        set shouldPanOnMaximumZoom(v) {
            this.i.hi = ensureBool(v);
        }
        /**
         * Gets or sets whether annotations for the final value of each series is displayed on the axis.
        */
        get finalValueAnnotationsVisible() {
            return this.i.gw;
        }
        set finalValueAnnotationsVisible(v) {
            this.i.gw = ensureBool(v);
        }
        /**
         * Gets or sets the background of final value annotation.
        */
        get finalValueAnnotationsBackground() {
            return brushToString(this.i.x7);
        }
        set finalValueAnnotationsBackground(v) {
            this.i.x7 = stringToBrush(v);
        }
        /**
         * Gets or sets the text color of final value annotation.
        */
        get finalValueAnnotationsTextColor() {
            return brushToString(this.i.x8);
        }
        set finalValueAnnotationsTextColor(v) {
            this.i.x8 = stringToBrush(v);
        }
        /**
         * Gets or sets precision on final value annotation.
        */
        get finalValueAnnotationsPrecision() {
            return this.i.lf;
        }
        set finalValueAnnotationsPrecision(v) {
            this.i.lf = +v;
        }
        /**
         * Gets or sets if the auto value callouts should be displayed.
        */
        get autoCalloutsVisible() {
            return this.i.gi;
        }
        set autoCalloutsVisible(v) {
            this.i.gi = ensureBool(v);
        }
        /**
         * Gets or sets if callouts should be displayed.
        */
        get calloutsVisible() {
            return this.i.gn;
        }
        set calloutsVisible(v) {
            this.i.gn = ensureBool(v);
        }
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get calloutStyleUpdatingEventEnabled() {
            return this.i.gj;
        }
        set calloutStyleUpdatingEventEnabled(v) {
            this.i.gj = ensureBool(v);
        }
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get useValueForAutoCalloutLabels() {
            return this.i.hl;
        }
        set useValueForAutoCalloutLabels(v) {
            this.i.hl = ensureBool(v);
        }
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get calloutCollisionMode() {
            return this.i.ak;
        }
        set calloutCollisionMode(v) {
            this.i.ak = ensureEnum(CalloutCollisionMode_$type, v);
        }
        /**
         * Gets or sets if the series item color should be used for the callout fills.
        */
        get calloutsUseItemColorForFill() {
            return this.i.gl;
        }
        set calloutsUseItemColorForFill(v) {
            this.i.gl = ensureBool(v);
        }
        /**
         * Gets or sets if the series item color should be used for the callout outlines.
        */
        get calloutsUseItemColorForOutline() {
            return this.i.gm;
        }
        set calloutsUseItemColorForOutline(v) {
            this.i.gm = ensureBool(v);
        }
        /**
         * Gets or sets whether to the label color is automatically decided between a light and dark option for contrast.
        */
        get calloutsUseAutoContrastingLabelColors() {
            return this.i.gk;
        }
        set calloutsUseAutoContrastingLabelColors(v) {
            this.i.gk = ensureBool(v);
        }
        /**
         * Gets or sets if the thickness that should be used for the callout outlines.
        */
        get calloutsStrokeThickness() {
            return this.i.jl;
        }
        set calloutsStrokeThickness(v) {
            this.i.jl = +v;
        }
        /**
         * Gets or sets if the thickness that should be used for the callout outlines.
        */
        get calloutsBackground() {
            return brushToString(this.i.xq);
        }
        set calloutsBackground(v) {
            this.i.xq = stringToBrush(v);
        }
        /**
         * Gets or sets the amount of precision to apply to the auto callout labels.
        */
        get calloutsAutoLabelPrecision() {
            return this.i.la;
        }
        set calloutsAutoLabelPrecision(v) {
            this.i.la = +v;
        }
        /**
         * Gets or sets the allowed positions that the callout layer is allowed to use.
        */
        get calloutsAllowedPositions() {
            if (this._calloutsAllowedPositions === null) {
                let coll = new IgxCalloutPlacementPositionsCollection();
                let innerColl = this.i.am;
                if (!innerColl) {
                    innerColl = new CalloutPlacementPositionsCollection_internal();
                }
                this._calloutsAllowedPositions = coll._fromInner(innerColl);
                this.i.am = innerColl;
            }
            return this._calloutsAllowedPositions;
        }
        set calloutsAllowedPositions(v) {
            if (this._calloutsAllowedPositions !== null) {
                this._calloutsAllowedPositions._setSyncTarget(null);
                this._calloutsAllowedPositions = null;
            }
            let coll = new IgxCalloutPlacementPositionsCollection();
            this._calloutsAllowedPositions = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(CalloutPlacementPositions_$type);
            let innerColl = this.i.am;
            if (!innerColl) {
                innerColl = new CalloutPlacementPositionsCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._calloutsAllowedPositions._setSyncTarget(syncColl);
            this.i.am = innerColl;
        }
        /**
         * Gets or sets the member path of the X data for the callouts.
        */
        get calloutsXMemberPath() {
            return this.i.nk;
        }
        set calloutsXMemberPath(v) {
            this.i.nk = v;
        }
        /**
         * Gets or sets the member path of the Y data for the callouts.
        */
        get calloutsYMemberPath() {
            return this.i.nm;
        }
        set calloutsYMemberPath(v) {
            this.i.nm = v;
        }
        /**
         * Gets or sets the member path of the label data for the callouts.
        */
        get calloutsLabelMemberPath() {
            return this.i.nc;
        }
        set calloutsLabelMemberPath(v) {
            this.i.nc = v;
        }
        /**
         * Gets or sets the member path of the content data for the callouts.
        */
        get calloutsContentMemberPath() {
            return this.i.m9;
        }
        set calloutsContentMemberPath(v) {
            this.i.m9 = v;
        }
        /**
         * Gets or sets what value lines to use in the chart.
        */
        get valueLines() {
            if (this._valueLines === null) {
                let coll = new IgxValueModeCollection();
                let innerColl = this.i.ej;
                if (!innerColl) {
                    innerColl = new ValueModeCollection_internal();
                }
                this._valueLines = coll._fromInner(innerColl);
                this.i.ej = innerColl;
            }
            return this._valueLines;
        }
        set valueLines(v) {
            if (this._valueLines !== null) {
                this._valueLines._setSyncTarget(null);
                this._valueLines = null;
            }
            let coll = new IgxValueModeCollection();
            this._valueLines = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(ValueLayerValueMode_$type);
            let innerColl = this.i.ej;
            if (!innerColl) {
                innerColl = new ValueModeCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._valueLines._setSyncTarget(syncColl);
            this.i.ej = innerColl;
        }
        /**
         * Gets or sets the palette of brushes to use for coloring the value lines present in the ValueLines property.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        */
        get valueLinesBrushes() {
            return fromBrushCollection(this.i.ai);
        }
        set valueLinesBrushes(v) {
            this.i.ai = toBrushCollection(v);
        }
        /**
         * Gets or sets thickness of value lines.
        */
        get valueLinesThickness() {
            return this.i.kj;
        }
        set valueLinesThickness(v) {
            this.i.kj = +v;
        }
        /**
         * Gets or sets the horizontal scrollbar mode to use for the series viewer.
        */
        get horizontalViewScrollbarMode() {
            return this.i.d6;
        }
        set horizontalViewScrollbarMode(v) {
            this.i.d6 = ensureEnum(SeriesViewerScrollbarMode_$type, v);
        }
        /**
         * Gets or sets the vertical scrollbar mode to use for the series viewer.
        */
        get verticalViewScrollbarMode() {
            return this.i.d7;
        }
        set verticalViewScrollbarMode(v) {
            this.i.d7 = ensureEnum(SeriesViewerScrollbarMode_$type, v);
        }
        /**
         * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarPosition() {
            return this.i.d3;
        }
        set horizontalViewScrollbarPosition(v) {
            this.i.d3 = ensureEnum(SeriesViewerHorizontalScrollbarPosition_$type, v);
        }
        /**
         * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarPosition() {
            return this.i.eb;
        }
        set verticalViewScrollbarPosition(v) {
            this.i.eb = ensureEnum(SeriesViewerVerticalScrollbarPosition_$type, v);
        }
        /**
         * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarFill() {
            return brushToString(this.i.ye);
        }
        set horizontalViewScrollbarFill(v) {
            this.i.ye = stringToBrush(v);
        }
        /**
         * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarOutline() {
            return brushToString(this.i.yf);
        }
        set horizontalViewScrollbarOutline(v) {
            this.i.yf = stringToBrush(v);
        }
        /**
         * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarStrokeThickness() {
            return this.i.jv;
        }
        set horizontalViewScrollbarStrokeThickness(v) {
            this.i.jv = +v;
        }
        /**
         * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarMaxOpacity() {
            return this.i.ju;
        }
        set horizontalViewScrollbarMaxOpacity(v) {
            this.i.ju = +v;
        }
        /**
         * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarCornerRadius() {
            return this.i.jr;
        }
        set horizontalViewScrollbarCornerRadius(v) {
            this.i.jr = +v;
        }
        /**
         * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarHeight() {
            return this.i.js;
        }
        set horizontalViewScrollbarHeight(v) {
            this.i.js = +v;
        }
        /**
         * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarInset() {
            return this.i.jt;
        }
        set horizontalViewScrollbarInset(v) {
            this.i.jt = +v;
        }
        /**
         * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarTrackStartInset() {
            return this.i.jx;
        }
        set horizontalViewScrollbarTrackStartInset(v) {
            this.i.jx = +v;
        }
        /**
         * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarTrackEndInset() {
            return this.i.jw;
        }
        set horizontalViewScrollbarTrackEndInset(v) {
            this.i.jw = +v;
        }
        /**
         * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
        */
        get horizontalViewScrollbarShouldAddAutoTrackInsets() {
            return this.i.gz;
        }
        set horizontalViewScrollbarShouldAddAutoTrackInsets(v) {
            this.i.gz = ensureBool(v);
        }
        /**
         * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarFill() {
            return brushToString(this.i.yk);
        }
        set verticalViewScrollbarFill(v) {
            this.i.yk = stringToBrush(v);
        }
        /**
         * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarOutline() {
            return brushToString(this.i.yl);
        }
        set verticalViewScrollbarOutline(v) {
            this.i.yl = stringToBrush(v);
        }
        /**
         * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarStrokeThickness() {
            return this.i.kn;
        }
        set verticalViewScrollbarStrokeThickness(v) {
            this.i.kn = +v;
        }
        /**
         * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarMaxOpacity() {
            return this.i.km;
        }
        set verticalViewScrollbarMaxOpacity(v) {
            this.i.km = +v;
        }
        /**
         * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarCornerRadius() {
            return this.i.kk;
        }
        set verticalViewScrollbarCornerRadius(v) {
            this.i.kk = +v;
        }
        /**
         * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarWidth() {
            return this.i.kq;
        }
        set verticalViewScrollbarWidth(v) {
            this.i.kq = +v;
        }
        /**
         * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarInset() {
            return this.i.kl;
        }
        set verticalViewScrollbarInset(v) {
            this.i.kl = +v;
        }
        /**
         * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarTrackStartInset() {
            return this.i.kp;
        }
        set verticalViewScrollbarTrackStartInset(v) {
            this.i.kp = +v;
        }
        /**
         * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarTrackEndInset() {
            return this.i.ko;
        }
        set verticalViewScrollbarTrackEndInset(v) {
            this.i.ko = +v;
        }
        /**
         * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
        */
        get verticalViewScrollbarShouldAddAutoTrackInsets() {
            return this.i.hm;
        }
        set verticalViewScrollbarShouldAddAutoTrackInsets(v) {
            this.i.hm = ensureBool(v);
        }
        /**
         * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
        */
        get windowRectMinWidth() {
            return this.i.ks;
        }
        set windowRectMinWidth(v) {
            this.i.ks = +v;
        }
        /**
         * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
        */
        get windowRectMinHeight() {
            return this.i.kr;
        }
        set windowRectMinHeight(v) {
            this.i.kr = +v;
        }
        /**
         * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property is overridden by the WindowRectMinWidth property
        */
        get windowSizeMinWidth() {
            return this.i.ku;
        }
        set windowSizeMinWidth(v) {
            this.i.ku = +v;
        }
        /**
         * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property is overridden by the WindowRectMinHeight property
        */
        get windowSizeMinHeight() {
            return this.i.kt;
        }
        set windowSizeMinHeight(v) {
            this.i.kt = +v;
        }
        findByName(name) {
            if (this.findEphemera) {
                if (name && name.indexOf("@@e:") == 0) {
                    return this.findEphemera(name);
                }
            }
            if (this.dataToolTipValueFormatSpecifiers != null && arrayFindByName(this.dataToolTipValueFormatSpecifiers, name)) {
                return arrayFindByName(this.dataToolTipValueFormatSpecifiers, name);
            }
            if (this.dataToolTipHeaderFormatSpecifiers != null && arrayFindByName(this.dataToolTipHeaderFormatSpecifiers, name)) {
                return arrayFindByName(this.dataToolTipHeaderFormatSpecifiers, name);
            }
            if (this.sortDescriptions != null && this.sortDescriptions.findByName && this.sortDescriptions.findByName(name)) {
                return this.sortDescriptions.findByName(name);
            }
            if (this.groupSortDescriptions != null && this.groupSortDescriptions.findByName && this.groupSortDescriptions.findByName(name)) {
                return this.groupSortDescriptions.findByName(name);
            }
            if (this.groupDescriptions != null && this.groupDescriptions.findByName && this.groupDescriptions.findByName(name)) {
                return this.groupDescriptions.findByName(name);
            }
            if (this.filterExpressions != null && this.filterExpressions.findByName && this.filterExpressions.findByName(name)) {
                return this.filterExpressions.findByName(name);
            }
            if (this.highlightFilterExpressions != null && this.highlightFilterExpressions.findByName && this.highlightFilterExpressions.findByName(name)) {
                return this.highlightFilterExpressions.findByName(name);
            }
            if (this.summaryDescriptions != null && this.summaryDescriptions.findByName && this.summaryDescriptions.findByName(name)) {
                return this.summaryDescriptions.findByName(name);
            }
            if (this.selectedSeriesItems != null && this.selectedSeriesItems.findByName && this.selectedSeriesItems.findByName(name)) {
                return this.selectedSeriesItems.findByName(name);
            }
            if (this.focusedSeriesItems != null && this.focusedSeriesItems.findByName && this.focusedSeriesItems.findByName(name)) {
                return this.focusedSeriesItems.findByName(name);
            }
            if (this.initialSortDescriptions != null && this.initialSortDescriptions.findByName && this.initialSortDescriptions.findByName(name)) {
                return this.initialSortDescriptions.findByName(name);
            }
            if (this.initialGroupSortDescriptions != null && this.initialGroupSortDescriptions.findByName && this.initialGroupSortDescriptions.findByName(name)) {
                return this.initialGroupSortDescriptions.findByName(name);
            }
            if (this.initialGroupDescriptions != null && this.initialGroupDescriptions.findByName && this.initialGroupDescriptions.findByName(name)) {
                return this.initialGroupDescriptions.findByName(name);
            }
            if (this.initialFilterExpressions != null && this.initialFilterExpressions.findByName && this.initialFilterExpressions.findByName(name)) {
                return this.initialFilterExpressions.findByName(name);
            }
            if (this.initialHighlightFilterExpressions != null && this.initialHighlightFilterExpressions.findByName && this.initialHighlightFilterExpressions.findByName(name)) {
                return this.initialHighlightFilterExpressions.findByName(name);
            }
            if (this.initialSummaryDescriptions != null && this.initialSummaryDescriptions.findByName && this.initialSummaryDescriptions.findByName(name)) {
                return this.initialSummaryDescriptions.findByName(name);
            }
            if (this.legend && this.legend.name && this.legend.name == name) {
                return this.legend;
            }
            if (this.markerTypes != null && this.markerTypes.findByName && this.markerTypes.findByName(name)) {
                return this.markerTypes.findByName(name);
            }
            if (this.calloutsAllowedPositions != null && this.calloutsAllowedPositions.findByName && this.calloutsAllowedPositions.findByName(name)) {
                return this.calloutsAllowedPositions.findByName(name);
            }
            if (this.valueLines != null && this.valueLines.findByName && this.valueLines.findByName(name)) {
                return this.valueLines.findByName(name);
            }
            return null;
        }
        get hasUserValues() {
            return this._hasUserValues;
        }
        __m(propertyName) {
            if (!this._inStyling) {
                this._hasUserValues.add(propertyName);
            }
        }
        _styling(container, component, parent) {
            if (this._inStyling) {
                return;
            }
            this._inStyling = true;
            this._stylingContainer = container;
            this._stylingParent = component;
            let genericPrefix = "";
            let typeName = this.i.$type.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            genericPrefix = toSpinal("DomainChartComponent");
            let additionalPrefixes = [];
            let prefix = toSpinal(typeName);
            additionalPrefixes.push(prefix + "-");
            let b = this.i.$type.baseType;
            while (b && b.name != "Object" &&
                b.name != "Base" &&
                b.name != "Control" &&
                b.Name != "DependencyObject" &&
                b.Name != "FrameworkElement") {
                typeName = b.name;
                if (typeName.indexOf("Xam") === 0) {
                    typeName = typeName.substring(3);
                }
                let basePrefix = toSpinal(typeName);
                additionalPrefixes.push(basePrefix + "-");
                b = b.baseType;
            }
            if (parent) {
                let parentTypeName = parent.i.$type.name;
                if (parentTypeName.indexOf("Xam") === 0) {
                    parentTypeName = parentTypeName.substring(3);
                }
                let parentPrefix = toSpinal(parentTypeName);
                additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
                additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
            }
            initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
            if (this._otherStyling) {
                this._otherStyling(container, component, parent);
            }
            this._inStyling = false;
        }
        /**
     * Provides a container for this control
    
    *
    * `provideContainer` method provide container for the control.
    *
    * ```ts
    *     this.chart.provideContainer("Container");
    * ```
    */
        provideContainer(container) {
            this.i.provideContainer(container);
        }
        /**
         * Destroy this control
        
        *
        * Use the `destroy` property to destroy the chart.
        *
        * ```ts
        * this.chart.destroy();
        * ```
        */
        destroy() {
            this.i.destroy();
        }
        /**
         * Called when the control has been resized.
        
        *
        * `NotifyResized` method Called when the control has been resized.
        *
        * ```ts
        * this.chart.notifyResized();
        * ```
        */
        notifyResized() {
            this.i.notifyResized();
        }
        notifyVisualPropertiesChanged() {
            this.i.va();
        }
        /**
         * Forces any pending refresh to the chart to be finished.
        
        *
        * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.
        *
        * ```ts
        * this.chart.flush();
        * ```
        */
        flush() {
            this.i.ug();
        }
        /**
         * Hides the active main tooltip, if displayed.
        
        *
        * Use the `HideToolTip` method to hide the active tooltip.
        *
        * ```ts
        * this.chart.hideToolTip();
        * ```
        */
        hideToolTip() {
            this.i.uo();
        }
        /**
         * Replays transition-in animation on all series in the chart.
        
        */
        replayTransitionIn() {
            this.i.wd();
        }
        /**
         * Performs zoom in action on the chart by specified percentage of current window rect
        
        */
        zoomIn(percentage) {
            this.i.wt(percentage);
        }
        /**
         * Performs zoom out action on the chart by specified percentage of current window rect
        
        */
        zoomOut(percentage) {
            this.i.wu(percentage);
        }
        /**
         * Resets the zoom level to default.
        
        */
        resetZoom() {
            this.i.wl();
        }
        getDesiredToolbarActions() {
            let iv = this.i.getDesiredToolbarActions();
            return (iv);
        }
        addCommandAvailabilityListener(listener) {
            this.i.addCommandAvailabilityListener(listener);
        }
        removeCommandAvailabilityListener(listener) {
            this.i.removeCommandAvailabilityListener(listener);
        }
        addCommandStateChangedListener(listener) {
            this.i.addCommandStateChangedListener(listener);
        }
        removeCommandStateChangedListener(listener) {
            this.i.removeCommandStateChangedListener(listener);
        }
        notifySetItem(source_, index, oldItem, newItem) {
            this.i.u9(source_, index, oldItem, newItem);
        }
        /**
         * Used to manually notify the chart that the data source has reset or cleared its items.
        
        *
        * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.
        *
        * ```ts
        * this.chart.notifyClearItems(this.data);
        * ```
        */
        notifyClearItems(source_) {
            this.i.u5(source_);
        }
        notifyInsertItem(source_, index, newItem) {
            this.i.u6(source_, index, newItem);
        }
        notifyRemoveItem(source_, index, oldItem) {
            this.i.u7(source_, index, oldItem);
        }
        /**
         * Event raised when a series is initialized and added to this chart.
        *
        * `SeriesAdded` event raised when a series is initialized and added to this chart.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesAdded)="CategoryChart_SeriesAdded()"
        *      >
        * </igx-category-chart>
        * ```
        */
        get seriesAdded() {
            if (this._seriesAdded == null) {
                this._seriesAdded = new EventEmitter();
                this.i.seriesAdded = delegateCombine(this.i.seriesAdded, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxChartSeriesEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesAdded) {
                            this.beforeSeriesAdded(this, outerArgs);
                        }
                        this._seriesAdded.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesAdded;
        }
        /**
         * Event raised when a series is removed from this chart.
        *
        * `SeriesRemoved` event raised when a series is removed from this chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesRemoved)="CategoryChart_seriesRemoved()">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get seriesRemoved() {
            if (this._seriesRemoved == null) {
                this._seriesRemoved = new EventEmitter();
                this.i.seriesRemoved = delegateCombine(this.i.seriesRemoved, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxChartSeriesEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesRemoved) {
                            this.beforeSeriesRemoved(this, outerArgs);
                        }
                        this._seriesRemoved.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesRemoved;
        }
        /**
         * Occurs when the pointer enters a Series.
        *
        * `SeriesPointerEnter` event raised when the pointer enters a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerEnter)="CategoryChart_seriesPointerEnter()" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get seriesPointerEnter() {
            if (this._seriesPointerEnter == null) {
                this._seriesPointerEnter = new EventEmitter();
                this.i.seriesPointerEnter = delegateCombine(this.i.seriesPointerEnter, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesPointerEnter) {
                            this.beforeSeriesPointerEnter(this, outerArgs);
                        }
                        this._seriesPointerEnter.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerEnter;
        }
        /**
         * Occurs when the pointer leaves a Series.
        *
        * `SeriesPointerLeave` event raised when the pointer leaves a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerLeave)= "CategoryChart_seriesPointerLeave()" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get seriesPointerLeave() {
            if (this._seriesPointerLeave == null) {
                this._seriesPointerLeave = new EventEmitter();
                this.i.seriesPointerLeave = delegateCombine(this.i.seriesPointerLeave, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesPointerLeave) {
                            this.beforeSeriesPointerLeave(this, outerArgs);
                        }
                        this._seriesPointerLeave.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerLeave;
        }
        /**
         * Occurs when the pointer moves over a Series.
        *
        * `SeriesPointerMove` event raised when the pointer moves over a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *        (seriesPointerMove)="CategoryChart_seriesPointerMove()">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get seriesPointerMove() {
            if (this._seriesPointerMove == null) {
                this._seriesPointerMove = new EventEmitter();
                this.i.seriesPointerMove = delegateCombine(this.i.seriesPointerMove, (o, e) => {
                    let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeSeriesPointerMove) {
                        this.beforeSeriesPointerMove(this, outerArgs);
                    }
                    this._seriesPointerMove.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._seriesPointerMove;
        }
        /**
         * Occurs when the pointer is pressed down over a Series.
        *
        * `SeriesPointerDown` event raised when the pointer is pressed down over a Series
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerDown)="CategoryChart_seriesPointerDown()" >
        * </igx-category-chart>
        * ```
        */
        get seriesPointerDown() {
            if (this._seriesPointerDown == null) {
                this._seriesPointerDown = new EventEmitter();
                this.i.seriesPointerDown = delegateCombine(this.i.seriesPointerDown, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesPointerDown) {
                            this.beforeSeriesPointerDown(this, outerArgs);
                        }
                        this._seriesPointerDown.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerDown;
        }
        /**
         * Occurs when the pointer is released over a Series.
        *
        * `SeriesPointerUp` event raised when the pointer is released over a Series.
        *
        * ```ts
        *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerUp)="CategoryChart_seriesPointerUp()" >
        * </igx-category-chart>
        * ```
        */
        get seriesPointerUp() {
            if (this._seriesPointerUp == null) {
                this._seriesPointerUp = new EventEmitter();
                this.i.seriesPointerUp = delegateCombine(this.i.seriesPointerUp, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesPointerUp) {
                            this.beforeSeriesPointerUp(this, outerArgs);
                        }
                        this._seriesPointerUp.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerUp;
        }
        /**
         * Occurs when the pointer is clicked over a series.
        */
        get seriesClick() {
            if (this._seriesClick == null) {
                this._seriesClick = new EventEmitter();
                this.i.seriesClick = delegateCombine(this.i.seriesClick, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSeriesClick) {
                            this.beforeSeriesClick(this, outerArgs);
                        }
                        this._seriesClick.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesClick;
        }
        /**
         * Occurs when the pointer enters the plot area.
        */
        get plotAreaPointerEnter() {
            if (this._plotAreaPointerEnter == null) {
                this._plotAreaPointerEnter = new EventEmitter();
                this.i.plotAreaPointerEnter = delegateCombine(this.i.plotAreaPointerEnter, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforePlotAreaPointerEnter) {
                            this.beforePlotAreaPointerEnter(this, outerArgs);
                        }
                        this._plotAreaPointerEnter.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerEnter;
        }
        /**
         * Occurs when the pointer leaves the plot area.
        */
        get plotAreaPointerLeave() {
            if (this._plotAreaPointerLeave == null) {
                this._plotAreaPointerLeave = new EventEmitter();
                this.i.plotAreaPointerLeave = delegateCombine(this.i.plotAreaPointerLeave, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforePlotAreaPointerLeave) {
                            this.beforePlotAreaPointerLeave(this, outerArgs);
                        }
                        this._plotAreaPointerLeave.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerLeave;
        }
        /**
         * Occurs when the pointer is over the plot area.
        */
        get plotAreaPointerMove() {
            if (this._plotAreaPointerMove == null) {
                this._plotAreaPointerMove = new EventEmitter();
                this.i.plotAreaPointerMove = delegateCombine(this.i.plotAreaPointerMove, (o, e) => {
                    let outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforePlotAreaPointerMove) {
                        this.beforePlotAreaPointerMove(this, outerArgs);
                    }
                    this._plotAreaPointerMove.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._plotAreaPointerMove;
        }
        /**
         * Occurs when the pointer is pressed down over the plot area.
        */
        get plotAreaPointerDown() {
            if (this._plotAreaPointerDown == null) {
                this._plotAreaPointerDown = new EventEmitter();
                this.i.plotAreaPointerDown = delegateCombine(this.i.plotAreaPointerDown, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforePlotAreaPointerDown) {
                            this.beforePlotAreaPointerDown(this, outerArgs);
                        }
                        this._plotAreaPointerDown.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerDown;
        }
        /**
         * Occurs when the pointer is released over the plot area.
        */
        get plotAreaPointerUp() {
            if (this._plotAreaPointerUp == null) {
                this._plotAreaPointerUp = new EventEmitter();
                this.i.plotAreaPointerUp = delegateCombine(this.i.plotAreaPointerUp, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforePlotAreaPointerUp) {
                            this.beforePlotAreaPointerUp(this, outerArgs);
                        }
                        this._plotAreaPointerUp.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerUp;
        }
        /**
         * Occurs when the style of a callout is updated.
        */
        get calloutStyleUpdating() {
            if (this._calloutStyleUpdating == null) {
                this._calloutStyleUpdating = new EventEmitter();
                this.i.calloutStyleUpdating = delegateCombine(this.i.calloutStyleUpdating, (o, e) => {
                    let outerArgs = new IgxCalloutStyleUpdatingEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeCalloutStyleUpdating) {
                        this.beforeCalloutStyleUpdating(this, outerArgs);
                    }
                    this._calloutStyleUpdating.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._calloutStyleUpdating;
        }
        /**
         * Occurs when the style of a callout is updated.
        */
        get calloutRenderStyleUpdating() {
            if (this._calloutRenderStyleUpdating == null) {
                this._calloutRenderStyleUpdating = new EventEmitter();
                this.i.calloutRenderStyleUpdating = delegateCombine(this.i.calloutRenderStyleUpdating, (o, e) => {
                    let outerArgs = new IgxCalloutRenderStyleUpdatingEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeCalloutRenderStyleUpdating) {
                        this.beforeCalloutRenderStyleUpdating(this, outerArgs);
                    }
                    this._calloutRenderStyleUpdating.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._calloutRenderStyleUpdating;
        }
        get selectedSeriesItemsChanged() {
            if (this._selectedSeriesItemsChanged == null) {
                this._selectedSeriesItemsChanged = new EventEmitter();
                this.i.selectedSeriesItemsChanged = delegateCombine(this.i.selectedSeriesItemsChanged, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxSeriesViewerSelectedSeriesItemsChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeSelectedSeriesItemsChanged) {
                            this.beforeSelectedSeriesItemsChanged(this, outerArgs);
                        }
                        this._selectedSeriesItemsChanged.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._selectedSeriesItemsChanged;
        }
        get focusedSeriesItemsChanged() {
            if (this._focusedSeriesItemsChanged == null) {
                this._focusedSeriesItemsChanged = new EventEmitter();
                this.i.focusedSeriesItemsChanged = delegateCombine(this.i.focusedSeriesItemsChanged, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxSeriesViewerSelectedSeriesItemsChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeFocusedSeriesItemsChanged) {
                            this.beforeFocusedSeriesItemsChanged(this, outerArgs);
                        }
                        this._focusedSeriesItemsChanged.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._focusedSeriesItemsChanged;
        }
        get filterStringErrorsParsing() {
            if (this._filterStringErrorsParsing == null) {
                this._filterStringErrorsParsing = new EventEmitter();
                this.i.filterStringErrorsParsing = delegateCombine(this.i.filterStringErrorsParsing, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxFilterStringErrorsParsingEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeFilterStringErrorsParsing) {
                            this.beforeFilterStringErrorsParsing(this, outerArgs);
                        }
                        this._filterStringErrorsParsing.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._filterStringErrorsParsing;
        }
        _runInZone(act) {
            if (this._zoneRunner != null) {
                this._zoneRunner(act);
            }
            else {
                act();
            }
        }
    }
    IgxDomainChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxDomainChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxDomainChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxDomainChartComponent, selector: "ng-component", inputs: { tooltipTemplate: "tooltipTemplate", tooltipTemplates: "tooltipTemplates", legend: "legend", calloutsDataSource: "calloutsDataSource", pixelScalingRatio: "pixelScalingRatio", titleLeftMargin: "titleLeftMargin", titleRightMargin: "titleRightMargin", titleTopMargin: "titleTopMargin", titleBottomMargin: "titleBottomMargin", subtitleLeftMargin: "subtitleLeftMargin", subtitleTopMargin: "subtitleTopMargin", subtitleRightMargin: "subtitleRightMargin", subtitleBottomMargin: "subtitleBottomMargin", subtitleTextColor: "subtitleTextColor", titleTextColor: "titleTextColor", leftMargin: "leftMargin", topMargin: "topMargin", rightMargin: "rightMargin", bottomMargin: "bottomMargin", transitionDuration: "transitionDuration", transitionEasingFunction: "transitionEasingFunction", highlightingTransitionDuration: "highlightingTransitionDuration", selectionTransitionDuration: "selectionTransitionDuration", focusTransitionDuration: "focusTransitionDuration", subtitleTextStyle: "subtitleTextStyle", titleTextStyle: "titleTextStyle", dataToolTipGroupingMode: "dataToolTipGroupingMode", dataToolTipPositionOffsetX: "dataToolTipPositionOffsetX", dataToolTipPositionOffsetY: "dataToolTipPositionOffsetY", dataToolTipDefaultPositionOffsetX: "dataToolTipDefaultPositionOffsetX", dataToolTipDefaultPositionOffsetY: "dataToolTipDefaultPositionOffsetY", dataToolTipGroupedPositionModeX: "dataToolTipGroupedPositionModeX", dataToolTipGroupedPositionModeY: "dataToolTipGroupedPositionModeY", dataToolTipShouldUpdateWhenSeriesDataChanges: "dataToolTipShouldUpdateWhenSeriesDataChanges", dataToolTipIncludedSeries: "dataToolTipIncludedSeries", dataToolTipExcludedSeries: "dataToolTipExcludedSeries", dataToolTipIncludedColumns: "dataToolTipIncludedColumns", dataToolTipExcludedColumns: "dataToolTipExcludedColumns", dataToolTipValueFormatAbbreviation: "dataToolTipValueFormatAbbreviation", dataToolTipValueFormatMaxFractions: "dataToolTipValueFormatMaxFractions", dataToolTipValueFormatMinFractions: "dataToolTipValueFormatMinFractions", dataToolTipValueFormatMode: "dataToolTipValueFormatMode", dataToolTipValueFormatCulture: "dataToolTipValueFormatCulture", dataToolTipValueFormatUseGrouping: "dataToolTipValueFormatUseGrouping", dataToolTipValueFormatString: "dataToolTipValueFormatString", dataToolTipValueFormatSpecifiers: "dataToolTipValueFormatSpecifiers", dataToolTipValueRowMarginBottom: "dataToolTipValueRowMarginBottom", dataToolTipValueRowMarginLeft: "dataToolTipValueRowMarginLeft", dataToolTipValueRowMarginRight: "dataToolTipValueRowMarginRight", dataToolTipValueRowMarginTop: "dataToolTipValueRowMarginTop", dataToolTipValueRowVisible: "dataToolTipValueRowVisible", dataToolTipValueTextWhenMissingData: "dataToolTipValueTextWhenMissingData", dataToolTipValueTextUseSeriesColors: "dataToolTipValueTextUseSeriesColors", dataToolTipValueTextMarginBottom: "dataToolTipValueTextMarginBottom", dataToolTipValueTextMarginLeft: "dataToolTipValueTextMarginLeft", dataToolTipValueTextMarginRight: "dataToolTipValueTextMarginRight", dataToolTipValueTextMarginTop: "dataToolTipValueTextMarginTop", dataToolTipValueTextColor: "dataToolTipValueTextColor", dataToolTipValueTextStyle: "dataToolTipValueTextStyle", dataToolTipHeaderFormatString: "dataToolTipHeaderFormatString", dataToolTipHeaderFormatSpecifiers: "dataToolTipHeaderFormatSpecifiers", dataToolTipHeaderFormatCulture: "dataToolTipHeaderFormatCulture", dataToolTipHeaderFormatDate: "dataToolTipHeaderFormatDate", dataToolTipHeaderFormatTime: "dataToolTipHeaderFormatTime", dataToolTipHeaderText: "dataToolTipHeaderText", dataToolTipHeaderTextColor: "dataToolTipHeaderTextColor", dataToolTipHeaderTextMarginBottom: "dataToolTipHeaderTextMarginBottom", dataToolTipHeaderTextMarginLeft: "dataToolTipHeaderTextMarginLeft", dataToolTipHeaderTextMarginRight: "dataToolTipHeaderTextMarginRight", dataToolTipHeaderTextMarginTop: "dataToolTipHeaderTextMarginTop", dataToolTipHeaderRowMarginBottom: "dataToolTipHeaderRowMarginBottom", dataToolTipHeaderRowMarginLeft: "dataToolTipHeaderRowMarginLeft", dataToolTipHeaderRowMarginRight: "dataToolTipHeaderRowMarginRight", dataToolTipHeaderRowMarginTop: "dataToolTipHeaderRowMarginTop", dataToolTipHeaderRowVisible: "dataToolTipHeaderRowVisible", dataToolTipHeaderTextStyle: "dataToolTipHeaderTextStyle", dataToolTipGroupTextColor: "dataToolTipGroupTextColor", dataToolTipGroupTextMarginBottom: "dataToolTipGroupTextMarginBottom", dataToolTipGroupTextMarginLeft: "dataToolTipGroupTextMarginLeft", dataToolTipGroupTextMarginRight: "dataToolTipGroupTextMarginRight", dataToolTipGroupTextMarginTop: "dataToolTipGroupTextMarginTop", dataToolTipGroupRowMarginBottom: "dataToolTipGroupRowMarginBottom", dataToolTipGroupRowMarginLeft: "dataToolTipGroupRowMarginLeft", dataToolTipGroupRowMarginRight: "dataToolTipGroupRowMarginRight", dataToolTipGroupRowMarginTop: "dataToolTipGroupRowMarginTop", dataToolTipGroupRowVisible: "dataToolTipGroupRowVisible", dataToolTipGroupTextStyle: "dataToolTipGroupTextStyle", dataToolTipSummaryTitleTextColor: "dataToolTipSummaryTitleTextColor", dataToolTipSummaryTitleTextStyle: "dataToolTipSummaryTitleTextStyle", dataToolTipSummaryType: "dataToolTipSummaryType", dataToolTipSummaryTitleText: "dataToolTipSummaryTitleText", dataToolTipSummaryTitleTextMarginBottom: "dataToolTipSummaryTitleTextMarginBottom", dataToolTipSummaryTitleTextMarginLeft: "dataToolTipSummaryTitleTextMarginLeft", dataToolTipSummaryTitleTextMarginRight: "dataToolTipSummaryTitleTextMarginRight", dataToolTipSummaryTitleTextMarginTop: "dataToolTipSummaryTitleTextMarginTop", dataToolTipSummaryRowMarginBottom: "dataToolTipSummaryRowMarginBottom", dataToolTipSummaryRowMarginLeft: "dataToolTipSummaryRowMarginLeft", dataToolTipSummaryRowMarginRight: "dataToolTipSummaryRowMarginRight", dataToolTipSummaryRowMarginTop: "dataToolTipSummaryRowMarginTop", dataToolTipSummaryValueTextColor: "dataToolTipSummaryValueTextColor", dataToolTipSummaryValueTextStyle: "dataToolTipSummaryValueTextStyle", dataToolTipSummaryLabelText: "dataToolTipSummaryLabelText", dataToolTipSummaryLabelTextColor: "dataToolTipSummaryLabelTextColor", dataToolTipSummaryLabelTextStyle: "dataToolTipSummaryLabelTextStyle", dataToolTipSummaryUnitsText: "dataToolTipSummaryUnitsText", dataToolTipSummaryUnitsTextColor: "dataToolTipSummaryUnitsTextColor", dataToolTipSummaryUnitsTextStyle: "dataToolTipSummaryUnitsTextStyle", dataToolTipBadgeMarginBottom: "dataToolTipBadgeMarginBottom", dataToolTipBadgeMarginLeft: "dataToolTipBadgeMarginLeft", dataToolTipBadgeMarginRight: "dataToolTipBadgeMarginRight", dataToolTipBadgeMarginTop: "dataToolTipBadgeMarginTop", dataToolTipBadgeShape: "dataToolTipBadgeShape", dataToolTipUnitsDisplayMode: "dataToolTipUnitsDisplayMode", dataToolTipUnitsText: "dataToolTipUnitsText", dataToolTipUnitsTextColor: "dataToolTipUnitsTextColor", dataToolTipUnitsTextMarginBottom: "dataToolTipUnitsTextMarginBottom", dataToolTipUnitsTextMarginLeft: "dataToolTipUnitsTextMarginLeft", dataToolTipUnitsTextMarginRight: "dataToolTipUnitsTextMarginRight", dataToolTipUnitsTextMarginTop: "dataToolTipUnitsTextMarginTop", dataToolTipUnitsTextStyle: "dataToolTipUnitsTextStyle", dataToolTipTitleTextMarginBottom: "dataToolTipTitleTextMarginBottom", dataToolTipTitleTextMarginLeft: "dataToolTipTitleTextMarginLeft", dataToolTipTitleTextMarginRight: "dataToolTipTitleTextMarginRight", dataToolTipTitleTextMarginTop: "dataToolTipTitleTextMarginTop", dataToolTipTitleTextColor: "dataToolTipTitleTextColor", dataToolTipTitleTextStyle: "dataToolTipTitleTextStyle", dataToolTipLabelDisplayMode: "dataToolTipLabelDisplayMode", dataToolTipLabelTextColor: "dataToolTipLabelTextColor", dataToolTipLabelTextMarginBottom: "dataToolTipLabelTextMarginBottom", dataToolTipLabelTextMarginLeft: "dataToolTipLabelTextMarginLeft", dataToolTipLabelTextMarginRight: "dataToolTipLabelTextMarginRight", dataToolTipLabelTextMarginTop: "dataToolTipLabelTextMarginTop", dataToolTipLabelTextStyle: "dataToolTipLabelTextStyle", selectionMode: "selectionMode", focusMode: "focusMode", selectionBrush: "selectionBrush", focusBrush: "focusBrush", selectionBehavior: "selectionBehavior", selectedSeriesItems: "selectedSeriesItems", focusedSeriesItems: "focusedSeriesItems", initialSorts: "initialSorts", groupSorts: "groupSorts", initialGroups: "initialGroups", initialFilter: "initialFilter", initialHighlightFilter: "initialHighlightFilter", initialSummaries: "initialSummaries", highlightedDataSource: "highlightedDataSource", includedProperties: "includedProperties", excludedProperties: "excludedProperties", brushes: "brushes", outlines: "outlines", actualBrushes: "actualBrushes", actualOutlines: "actualOutlines", isHorizontalZoomEnabled: "isHorizontalZoomEnabled", isVerticalZoomEnabled: "isVerticalZoomEnabled", shouldDisplayMockData: "shouldDisplayMockData", shouldUseSkeletonStyleForMockData: "shouldUseSkeletonStyleForMockData", highlightedValuesDisplayMode: "highlightedValuesDisplayMode", isSeriesHighlightingEnabled: "isSeriesHighlightingEnabled", highlightedLegendItemVisibility: "highlightedLegendItemVisibility", windowRect: "windowRect", chartTitle: "chartTitle", subtitle: "subtitle", titleAlignment: "titleAlignment", subtitleAlignment: "subtitleAlignment", unknownValuePlotting: "unknownValuePlotting", resolution: "resolution", thickness: "thickness", outlineMode: "outlineMode", markerOutlineMode: "markerOutlineMode", markerFillMode: "markerFillMode", markerFillOpacity: "markerFillOpacity", markerThickness: "markerThickness", markerTypes: "markerTypes", markerAutomaticBehavior: "markerAutomaticBehavior", markerBrushes: "markerBrushes", markerOutlines: "markerOutlines", markerMaxCount: "markerMaxCount", areaFillOpacity: "areaFillOpacity", animateSeriesWhenAxisRangeChanges: "animateSeriesWhenAxisRangeChanges", trendLineBrushes: "trendLineBrushes", trendLineType: "trendLineType", trendLineThickness: "trendLineThickness", alignsGridLinesToPixels: "alignsGridLinesToPixels", plotAreaMarginLeft: "plotAreaMarginLeft", plotAreaMarginTop: "plotAreaMarginTop", plotAreaMarginRight: "plotAreaMarginRight", plotAreaMarginBottom: "plotAreaMarginBottom", computedPlotAreaMarginMode: "computedPlotAreaMarginMode", seriesPlotAreaMarginHorizontalMode: "seriesPlotAreaMarginHorizontalMode", seriesPlotAreaMarginVerticalMode: "seriesPlotAreaMarginVerticalMode", highlightingMode: "highlightingMode", highlightingBehavior: "highlightingBehavior", legendHighlightingMode: "legendHighlightingMode", legendItemBadgeShape: "legendItemBadgeShape", legendItemBadgeMode: "legendItemBadgeMode", trendLinePeriod: "trendLinePeriod", toolTipType: "toolTipType", crosshairsDisplayMode: "crosshairsDisplayMode", crosshairsSnapToData: "crosshairsSnapToData", crosshairsLineVerticalStroke: "crosshairsLineVerticalStroke", crosshairsLineThickness: "crosshairsLineThickness", crosshairsLineHorizontalStroke: "crosshairsLineHorizontalStroke", crosshairsAnnotationEnabled: "crosshairsAnnotationEnabled", crosshairsAnnotationXAxisBackground: "crosshairsAnnotationXAxisBackground", crosshairsAnnotationYAxisBackground: "crosshairsAnnotationYAxisBackground", crosshairsAnnotationXAxisTextColor: "crosshairsAnnotationXAxisTextColor", crosshairsAnnotationYAxisTextColor: "crosshairsAnnotationYAxisTextColor", crosshairsAnnotationXAxisPrecision: "crosshairsAnnotationXAxisPrecision", crosshairsAnnotationYAxisPrecision: "crosshairsAnnotationYAxisPrecision", shouldAvoidAxisAnnotationCollisions: "shouldAvoidAxisAnnotationCollisions", shouldPanOnMaximumZoom: "shouldPanOnMaximumZoom", finalValueAnnotationsVisible: "finalValueAnnotationsVisible", finalValueAnnotationsBackground: "finalValueAnnotationsBackground", finalValueAnnotationsTextColor: "finalValueAnnotationsTextColor", finalValueAnnotationsPrecision: "finalValueAnnotationsPrecision", autoCalloutsVisible: "autoCalloutsVisible", calloutsVisible: "calloutsVisible", calloutStyleUpdatingEventEnabled: "calloutStyleUpdatingEventEnabled", useValueForAutoCalloutLabels: "useValueForAutoCalloutLabels", calloutCollisionMode: "calloutCollisionMode", calloutsUseItemColorForFill: "calloutsUseItemColorForFill", calloutsUseItemColorForOutline: "calloutsUseItemColorForOutline", calloutsUseAutoContrastingLabelColors: "calloutsUseAutoContrastingLabelColors", calloutsStrokeThickness: "calloutsStrokeThickness", calloutsBackground: "calloutsBackground", calloutsAutoLabelPrecision: "calloutsAutoLabelPrecision", calloutsAllowedPositions: "calloutsAllowedPositions", calloutsXMemberPath: "calloutsXMemberPath", calloutsYMemberPath: "calloutsYMemberPath", calloutsLabelMemberPath: "calloutsLabelMemberPath", calloutsContentMemberPath: "calloutsContentMemberPath", valueLines: "valueLines", valueLinesBrushes: "valueLinesBrushes", valueLinesThickness: "valueLinesThickness", horizontalViewScrollbarMode: "horizontalViewScrollbarMode", verticalViewScrollbarMode: "verticalViewScrollbarMode", horizontalViewScrollbarPosition: "horizontalViewScrollbarPosition", verticalViewScrollbarPosition: "verticalViewScrollbarPosition", horizontalViewScrollbarFill: "horizontalViewScrollbarFill", horizontalViewScrollbarOutline: "horizontalViewScrollbarOutline", horizontalViewScrollbarStrokeThickness: "horizontalViewScrollbarStrokeThickness", horizontalViewScrollbarMaxOpacity: "horizontalViewScrollbarMaxOpacity", horizontalViewScrollbarCornerRadius: "horizontalViewScrollbarCornerRadius", horizontalViewScrollbarHeight: "horizontalViewScrollbarHeight", horizontalViewScrollbarInset: "horizontalViewScrollbarInset", horizontalViewScrollbarTrackStartInset: "horizontalViewScrollbarTrackStartInset", horizontalViewScrollbarTrackEndInset: "horizontalViewScrollbarTrackEndInset", horizontalViewScrollbarShouldAddAutoTrackInsets: "horizontalViewScrollbarShouldAddAutoTrackInsets", verticalViewScrollbarFill: "verticalViewScrollbarFill", verticalViewScrollbarOutline: "verticalViewScrollbarOutline", verticalViewScrollbarStrokeThickness: "verticalViewScrollbarStrokeThickness", verticalViewScrollbarMaxOpacity: "verticalViewScrollbarMaxOpacity", verticalViewScrollbarCornerRadius: "verticalViewScrollbarCornerRadius", verticalViewScrollbarWidth: "verticalViewScrollbarWidth", verticalViewScrollbarInset: "verticalViewScrollbarInset", verticalViewScrollbarTrackStartInset: "verticalViewScrollbarTrackStartInset", verticalViewScrollbarTrackEndInset: "verticalViewScrollbarTrackEndInset", verticalViewScrollbarShouldAddAutoTrackInsets: "verticalViewScrollbarShouldAddAutoTrackInsets", windowRectMinWidth: "windowRectMinWidth", windowRectMinHeight: "windowRectMinHeight", windowSizeMinWidth: "windowSizeMinWidth", windowSizeMinHeight: "windowSizeMinHeight" }, outputs: { seriesAdded: "seriesAdded", seriesRemoved: "seriesRemoved", seriesPointerEnter: "seriesPointerEnter", seriesPointerLeave: "seriesPointerLeave", seriesPointerMove: "seriesPointerMove", seriesPointerDown: "seriesPointerDown", seriesPointerUp: "seriesPointerUp", seriesClick: "seriesClick", plotAreaPointerEnter: "plotAreaPointerEnter", plotAreaPointerLeave: "plotAreaPointerLeave", plotAreaPointerMove: "plotAreaPointerMove", plotAreaPointerDown: "plotAreaPointerDown", plotAreaPointerUp: "plotAreaPointerUp", calloutStyleUpdating: "calloutStyleUpdating", calloutRenderStyleUpdating: "calloutRenderStyleUpdating", selectedSeriesItemsChanged: "selectedSeriesItemsChanged", focusedSeriesItemsChanged: "focusedSeriesItemsChanged", filterStringErrorsParsing: "filterStringErrorsParsing" }, ngImport: i0, template: ``, isInline: true });
    return IgxDomainChartComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxDomainChartComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { tooltipTemplate: [{
                type: Input
            }], tooltipTemplates: [{
                type: Input
            }], legend: [{
                type: Input
            }], calloutsDataSource: [{
                type: Input
            }], pixelScalingRatio: [{
                type: Input
            }], titleLeftMargin: [{
                type: Input
            }], titleRightMargin: [{
                type: Input
            }], titleTopMargin: [{
                type: Input
            }], titleBottomMargin: [{
                type: Input
            }], subtitleLeftMargin: [{
                type: Input
            }], subtitleTopMargin: [{
                type: Input
            }], subtitleRightMargin: [{
                type: Input
            }], subtitleBottomMargin: [{
                type: Input
            }], subtitleTextColor: [{
                type: Input
            }], titleTextColor: [{
                type: Input
            }], leftMargin: [{
                type: Input
            }], topMargin: [{
                type: Input
            }], rightMargin: [{
                type: Input
            }], bottomMargin: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], transitionEasingFunction: [{
                type: Input
            }], highlightingTransitionDuration: [{
                type: Input
            }], selectionTransitionDuration: [{
                type: Input
            }], focusTransitionDuration: [{
                type: Input
            }], subtitleTextStyle: [{
                type: Input
            }], titleTextStyle: [{
                type: Input
            }], dataToolTipGroupingMode: [{
                type: Input
            }], dataToolTipPositionOffsetX: [{
                type: Input
            }], dataToolTipPositionOffsetY: [{
                type: Input
            }], dataToolTipDefaultPositionOffsetX: [{
                type: Input
            }], dataToolTipDefaultPositionOffsetY: [{
                type: Input
            }], dataToolTipGroupedPositionModeX: [{
                type: Input
            }], dataToolTipGroupedPositionModeY: [{
                type: Input
            }], dataToolTipShouldUpdateWhenSeriesDataChanges: [{
                type: Input
            }], dataToolTipIncludedSeries: [{
                type: Input
            }], dataToolTipExcludedSeries: [{
                type: Input
            }], dataToolTipIncludedColumns: [{
                type: Input
            }], dataToolTipExcludedColumns: [{
                type: Input
            }], dataToolTipValueFormatAbbreviation: [{
                type: Input
            }], dataToolTipValueFormatMaxFractions: [{
                type: Input
            }], dataToolTipValueFormatMinFractions: [{
                type: Input
            }], dataToolTipValueFormatMode: [{
                type: Input
            }], dataToolTipValueFormatCulture: [{
                type: Input
            }], dataToolTipValueFormatUseGrouping: [{
                type: Input
            }], dataToolTipValueFormatString: [{
                type: Input
            }], dataToolTipValueFormatSpecifiers: [{
                type: Input
            }], dataToolTipValueRowMarginBottom: [{
                type: Input
            }], dataToolTipValueRowMarginLeft: [{
                type: Input
            }], dataToolTipValueRowMarginRight: [{
                type: Input
            }], dataToolTipValueRowMarginTop: [{
                type: Input
            }], dataToolTipValueRowVisible: [{
                type: Input
            }], dataToolTipValueTextWhenMissingData: [{
                type: Input
            }], dataToolTipValueTextUseSeriesColors: [{
                type: Input
            }], dataToolTipValueTextMarginBottom: [{
                type: Input
            }], dataToolTipValueTextMarginLeft: [{
                type: Input
            }], dataToolTipValueTextMarginRight: [{
                type: Input
            }], dataToolTipValueTextMarginTop: [{
                type: Input
            }], dataToolTipValueTextColor: [{
                type: Input
            }], dataToolTipValueTextStyle: [{
                type: Input
            }], dataToolTipHeaderFormatString: [{
                type: Input
            }], dataToolTipHeaderFormatSpecifiers: [{
                type: Input
            }], dataToolTipHeaderFormatCulture: [{
                type: Input
            }], dataToolTipHeaderFormatDate: [{
                type: Input
            }], dataToolTipHeaderFormatTime: [{
                type: Input
            }], dataToolTipHeaderText: [{
                type: Input
            }], dataToolTipHeaderTextColor: [{
                type: Input
            }], dataToolTipHeaderTextMarginBottom: [{
                type: Input
            }], dataToolTipHeaderTextMarginLeft: [{
                type: Input
            }], dataToolTipHeaderTextMarginRight: [{
                type: Input
            }], dataToolTipHeaderTextMarginTop: [{
                type: Input
            }], dataToolTipHeaderRowMarginBottom: [{
                type: Input
            }], dataToolTipHeaderRowMarginLeft: [{
                type: Input
            }], dataToolTipHeaderRowMarginRight: [{
                type: Input
            }], dataToolTipHeaderRowMarginTop: [{
                type: Input
            }], dataToolTipHeaderRowVisible: [{
                type: Input
            }], dataToolTipHeaderTextStyle: [{
                type: Input
            }], dataToolTipGroupTextColor: [{
                type: Input
            }], dataToolTipGroupTextMarginBottom: [{
                type: Input
            }], dataToolTipGroupTextMarginLeft: [{
                type: Input
            }], dataToolTipGroupTextMarginRight: [{
                type: Input
            }], dataToolTipGroupTextMarginTop: [{
                type: Input
            }], dataToolTipGroupRowMarginBottom: [{
                type: Input
            }], dataToolTipGroupRowMarginLeft: [{
                type: Input
            }], dataToolTipGroupRowMarginRight: [{
                type: Input
            }], dataToolTipGroupRowMarginTop: [{
                type: Input
            }], dataToolTipGroupRowVisible: [{
                type: Input
            }], dataToolTipGroupTextStyle: [{
                type: Input
            }], dataToolTipSummaryTitleTextColor: [{
                type: Input
            }], dataToolTipSummaryTitleTextStyle: [{
                type: Input
            }], dataToolTipSummaryType: [{
                type: Input
            }], dataToolTipSummaryTitleText: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginBottom: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginLeft: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginRight: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginTop: [{
                type: Input
            }], dataToolTipSummaryRowMarginBottom: [{
                type: Input
            }], dataToolTipSummaryRowMarginLeft: [{
                type: Input
            }], dataToolTipSummaryRowMarginRight: [{
                type: Input
            }], dataToolTipSummaryRowMarginTop: [{
                type: Input
            }], dataToolTipSummaryValueTextColor: [{
                type: Input
            }], dataToolTipSummaryValueTextStyle: [{
                type: Input
            }], dataToolTipSummaryLabelText: [{
                type: Input
            }], dataToolTipSummaryLabelTextColor: [{
                type: Input
            }], dataToolTipSummaryLabelTextStyle: [{
                type: Input
            }], dataToolTipSummaryUnitsText: [{
                type: Input
            }], dataToolTipSummaryUnitsTextColor: [{
                type: Input
            }], dataToolTipSummaryUnitsTextStyle: [{
                type: Input
            }], dataToolTipBadgeMarginBottom: [{
                type: Input
            }], dataToolTipBadgeMarginLeft: [{
                type: Input
            }], dataToolTipBadgeMarginRight: [{
                type: Input
            }], dataToolTipBadgeMarginTop: [{
                type: Input
            }], dataToolTipBadgeShape: [{
                type: Input
            }], dataToolTipUnitsDisplayMode: [{
                type: Input
            }], dataToolTipUnitsText: [{
                type: Input
            }], dataToolTipUnitsTextColor: [{
                type: Input
            }], dataToolTipUnitsTextMarginBottom: [{
                type: Input
            }], dataToolTipUnitsTextMarginLeft: [{
                type: Input
            }], dataToolTipUnitsTextMarginRight: [{
                type: Input
            }], dataToolTipUnitsTextMarginTop: [{
                type: Input
            }], dataToolTipUnitsTextStyle: [{
                type: Input
            }], dataToolTipTitleTextMarginBottom: [{
                type: Input
            }], dataToolTipTitleTextMarginLeft: [{
                type: Input
            }], dataToolTipTitleTextMarginRight: [{
                type: Input
            }], dataToolTipTitleTextMarginTop: [{
                type: Input
            }], dataToolTipTitleTextColor: [{
                type: Input
            }], dataToolTipTitleTextStyle: [{
                type: Input
            }], dataToolTipLabelDisplayMode: [{
                type: Input
            }], dataToolTipLabelTextColor: [{
                type: Input
            }], dataToolTipLabelTextMarginBottom: [{
                type: Input
            }], dataToolTipLabelTextMarginLeft: [{
                type: Input
            }], dataToolTipLabelTextMarginRight: [{
                type: Input
            }], dataToolTipLabelTextMarginTop: [{
                type: Input
            }], dataToolTipLabelTextStyle: [{
                type: Input
            }], selectionMode: [{
                type: Input
            }], focusMode: [{
                type: Input
            }], selectionBrush: [{
                type: Input
            }], focusBrush: [{
                type: Input
            }], selectionBehavior: [{
                type: Input
            }], selectedSeriesItems: [{
                type: Input
            }], focusedSeriesItems: [{
                type: Input
            }], initialSorts: [{
                type: Input
            }], groupSorts: [{
                type: Input
            }], initialGroups: [{
                type: Input
            }], initialFilter: [{
                type: Input
            }], initialHighlightFilter: [{
                type: Input
            }], initialSummaries: [{
                type: Input
            }], highlightedDataSource: [{
                type: Input
            }], includedProperties: [{
                type: Input
            }], excludedProperties: [{
                type: Input
            }], brushes: [{
                type: Input
            }], outlines: [{
                type: Input
            }], actualBrushes: [{
                type: Input
            }], actualOutlines: [{
                type: Input
            }], isHorizontalZoomEnabled: [{
                type: Input
            }], isVerticalZoomEnabled: [{
                type: Input
            }], shouldDisplayMockData: [{
                type: Input
            }], shouldUseSkeletonStyleForMockData: [{
                type: Input
            }], highlightedValuesDisplayMode: [{
                type: Input
            }], isSeriesHighlightingEnabled: [{
                type: Input
            }], highlightedLegendItemVisibility: [{
                type: Input
            }], windowRect: [{
                type: Input
            }], chartTitle: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], titleAlignment: [{
                type: Input
            }], subtitleAlignment: [{
                type: Input
            }], unknownValuePlotting: [{
                type: Input
            }], resolution: [{
                type: Input
            }], thickness: [{
                type: Input
            }], outlineMode: [{
                type: Input
            }], markerOutlineMode: [{
                type: Input
            }], markerFillMode: [{
                type: Input
            }], markerFillOpacity: [{
                type: Input
            }], markerThickness: [{
                type: Input
            }], markerTypes: [{
                type: Input
            }], markerAutomaticBehavior: [{
                type: Input
            }], markerBrushes: [{
                type: Input
            }], markerOutlines: [{
                type: Input
            }], markerMaxCount: [{
                type: Input
            }], areaFillOpacity: [{
                type: Input
            }], animateSeriesWhenAxisRangeChanges: [{
                type: Input
            }], trendLineBrushes: [{
                type: Input
            }], trendLineType: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], alignsGridLinesToPixels: [{
                type: Input
            }], plotAreaMarginLeft: [{
                type: Input
            }], plotAreaMarginTop: [{
                type: Input
            }], plotAreaMarginRight: [{
                type: Input
            }], plotAreaMarginBottom: [{
                type: Input
            }], computedPlotAreaMarginMode: [{
                type: Input
            }], seriesPlotAreaMarginHorizontalMode: [{
                type: Input
            }], seriesPlotAreaMarginVerticalMode: [{
                type: Input
            }], highlightingMode: [{
                type: Input
            }], highlightingBehavior: [{
                type: Input
            }], legendHighlightingMode: [{
                type: Input
            }], legendItemBadgeShape: [{
                type: Input
            }], legendItemBadgeMode: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], toolTipType: [{
                type: Input
            }], crosshairsDisplayMode: [{
                type: Input
            }], crosshairsSnapToData: [{
                type: Input
            }], crosshairsLineVerticalStroke: [{
                type: Input
            }], crosshairsLineThickness: [{
                type: Input
            }], crosshairsLineHorizontalStroke: [{
                type: Input
            }], crosshairsAnnotationEnabled: [{
                type: Input
            }], crosshairsAnnotationXAxisBackground: [{
                type: Input
            }], crosshairsAnnotationYAxisBackground: [{
                type: Input
            }], crosshairsAnnotationXAxisTextColor: [{
                type: Input
            }], crosshairsAnnotationYAxisTextColor: [{
                type: Input
            }], crosshairsAnnotationXAxisPrecision: [{
                type: Input
            }], crosshairsAnnotationYAxisPrecision: [{
                type: Input
            }], shouldAvoidAxisAnnotationCollisions: [{
                type: Input
            }], shouldPanOnMaximumZoom: [{
                type: Input
            }], finalValueAnnotationsVisible: [{
                type: Input
            }], finalValueAnnotationsBackground: [{
                type: Input
            }], finalValueAnnotationsTextColor: [{
                type: Input
            }], finalValueAnnotationsPrecision: [{
                type: Input
            }], autoCalloutsVisible: [{
                type: Input
            }], calloutsVisible: [{
                type: Input
            }], calloutStyleUpdatingEventEnabled: [{
                type: Input
            }], useValueForAutoCalloutLabels: [{
                type: Input
            }], calloutCollisionMode: [{
                type: Input
            }], calloutsUseItemColorForFill: [{
                type: Input
            }], calloutsUseItemColorForOutline: [{
                type: Input
            }], calloutsUseAutoContrastingLabelColors: [{
                type: Input
            }], calloutsStrokeThickness: [{
                type: Input
            }], calloutsBackground: [{
                type: Input
            }], calloutsAutoLabelPrecision: [{
                type: Input
            }], calloutsAllowedPositions: [{
                type: Input
            }], calloutsXMemberPath: [{
                type: Input
            }], calloutsYMemberPath: [{
                type: Input
            }], calloutsLabelMemberPath: [{
                type: Input
            }], calloutsContentMemberPath: [{
                type: Input
            }], valueLines: [{
                type: Input
            }], valueLinesBrushes: [{
                type: Input
            }], valueLinesThickness: [{
                type: Input
            }], horizontalViewScrollbarMode: [{
                type: Input
            }], verticalViewScrollbarMode: [{
                type: Input
            }], horizontalViewScrollbarPosition: [{
                type: Input
            }], verticalViewScrollbarPosition: [{
                type: Input
            }], horizontalViewScrollbarFill: [{
                type: Input
            }], horizontalViewScrollbarOutline: [{
                type: Input
            }], horizontalViewScrollbarStrokeThickness: [{
                type: Input
            }], horizontalViewScrollbarMaxOpacity: [{
                type: Input
            }], horizontalViewScrollbarCornerRadius: [{
                type: Input
            }], horizontalViewScrollbarHeight: [{
                type: Input
            }], horizontalViewScrollbarInset: [{
                type: Input
            }], horizontalViewScrollbarTrackStartInset: [{
                type: Input
            }], horizontalViewScrollbarTrackEndInset: [{
                type: Input
            }], horizontalViewScrollbarShouldAddAutoTrackInsets: [{
                type: Input
            }], verticalViewScrollbarFill: [{
                type: Input
            }], verticalViewScrollbarOutline: [{
                type: Input
            }], verticalViewScrollbarStrokeThickness: [{
                type: Input
            }], verticalViewScrollbarMaxOpacity: [{
                type: Input
            }], verticalViewScrollbarCornerRadius: [{
                type: Input
            }], verticalViewScrollbarWidth: [{
                type: Input
            }], verticalViewScrollbarInset: [{
                type: Input
            }], verticalViewScrollbarTrackStartInset: [{
                type: Input
            }], verticalViewScrollbarTrackEndInset: [{
                type: Input
            }], verticalViewScrollbarShouldAddAutoTrackInsets: [{
                type: Input
            }], windowRectMinWidth: [{
                type: Input
            }], windowRectMinHeight: [{
                type: Input
            }], windowSizeMinWidth: [{
                type: Input
            }], windowSizeMinHeight: [{
                type: Input
            }], seriesAdded: [{
                type: Output
            }], seriesRemoved: [{
                type: Output
            }], seriesPointerEnter: [{
                type: Output
            }], seriesPointerLeave: [{
                type: Output
            }], seriesPointerMove: [{
                type: Output
            }], seriesPointerDown: [{
                type: Output
            }], seriesPointerUp: [{
                type: Output
            }], seriesClick: [{
                type: Output
            }], plotAreaPointerEnter: [{
                type: Output
            }], plotAreaPointerLeave: [{
                type: Output
            }], plotAreaPointerMove: [{
                type: Output
            }], plotAreaPointerDown: [{
                type: Output
            }], plotAreaPointerUp: [{
                type: Output
            }], calloutStyleUpdating: [{
                type: Output
            }], calloutRenderStyleUpdating: [{
                type: Output
            }], selectedSeriesItemsChanged: [{
                type: Output
            }], focusedSeriesItemsChanged: [{
                type: Output
            }], filterStringErrorsParsing: [{
                type: Output
            }] } });
