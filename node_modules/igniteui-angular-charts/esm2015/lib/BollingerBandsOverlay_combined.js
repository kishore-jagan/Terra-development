/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialOverlay } from "./FinancialOverlay";
import { DependencyProperty } from "igniteui-angular-core";
import { Series } from "./Series";
import { List$1 } from "igniteui-angular-core";
import { Number_$type, typeCast, runOn, markType, markDep, getEnumerator, Point_$type, fromEnum } from "igniteui-angular-core";
import { CategoryFrame } from "./CategoryFrame";
import { SafeEnumerable } from "./SafeEnumerable";
import { TrendCalculators } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-angular-core";
import { Polygon } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { isNaN_ } from "igniteui-angular-core";
import { Flattener } from "igniteui-angular-core";
/**
 * @hidden
 */
export let BollingerBandsOverlay = /*@__PURE__*/ (() => {
    class BollingerBandsOverlay extends FinancialOverlay {
        constructor() {
            super();
            this.aa0 = 0;
            this.aa1 = 0;
            this.aay = new List$1(Number_$type, 0);
            this.aaz = new List$1(Number_$type, 0);
            this.ab = BollingerBandsOverlay.$;
            this.w2 = new CategoryFrame(4);
            this.w4 = new CategoryFrame(4);
            this.w0 = new CategoryFrame(4);
        }
        bi() {
            return new BollingerBandsOverlay();
        }
        q5(a, b, c, d) {
            if (this.yh().contains(b)) {
                this.aas = false;
            }
            super.q5(a, b, c, d);
            switch (b) {
                case BollingerBandsOverlay.$$p[1]:
                    this.aas = false;
                    this.rn(false);
                    break;
                case BollingerBandsOverlay.$$p[0]:
                    this.rn(false);
                    break;
            }
        }
        aat() {
            this.aay.clear();
            this.aaz.clear();
            let a = getEnumerator(TrendCalculators.e(new SafeEnumerable(this.yg), this.aa3));
            let b = getEnumerator(TrendCalculators.f(new SafeEnumerable(this.yg), this.aa3));
            this.aa1 = 1.7976931348623157E+308;
            this.aa0 = -1.7976931348623157E+308;
            let c = true;
            let d = true;
            let e = this.aa2;
            while (c || d) {
                if (a.moveNext()) {
                    this.aay.add(a.current);
                }
                else {
                    c = false;
                }
                if (b.moveNext()) {
                    this.aaz.add(b.current);
                }
                else {
                    d = false;
                }
                if (c && d) {
                    this.aa1 = Math.min(this.aa1, a.current - b.current * e);
                    this.aa0 = Math.max(this.aa0, a.current + b.current * e);
                }
            }
            return true;
        }
        ax(a) {
            if (this.aay == null || this.aaz == null || a == null || this.dl == null || a != this.xh) {
                return null;
            }
            let b = new AxisRange(this.aa1, this.aa0);
            return b;
        }
        z4(a, b) {
            super.z4(a, b);
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.wy;
            let g = this.xh;
            let h = new ScalerParams(0, c, d, f.ch, e);
            let i = new ScalerParams(0, c, d, g.ch, e);
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let j = typeCast(ISortingAxis_$type, this.wy);
            if (j != null && j.i$b.count != this.dl.count) {
                return;
            }
            let k = 0;
            k = this.yp(c, d, e);
            if (!this.aas) {
                this.aas = this.aat();
                if (this.xh != null) {
                    this.xh.c2(true);
                }
            }
            i.b = this.iw();
            let l = this.wy.en(2, h) - this.wy.en(1, h);
            for (let m = b.b0.c; m <= b.b0.d; ++m) {
                let n;
                if (j == null) {
                    n = b.b0.getBucket(m);
                }
                else {
                    let o = j.i$b._inner[m];
                    let p = j.i$d(o);
                    let q = this.aay._inner[m];
                    let r = this.aaz._inner[m];
                    let s = q;
                    let t = r;
                    let u = p;
                    let v = 1;
                    while (m < b.b0.d) {
                        o = j.i$b._inner[m + 1];
                        u = j.i$d(o);
                        if (u - p > l) {
                            break;
                        }
                        m++;
                        s += this.aay._inner[m];
                        t += this.aaz._inner[m];
                        v++;
                    }
                    s /= v;
                    t /= v;
                    let w = s - t * this.aa2;
                    let x = s;
                    let y = s + t * this.aa2;
                    let z = NaN;
                    if (!isNaN_(p)) {
                        z = this.wy.ek(p, h);
                    }
                    n = [z, w, x, y];
                }
                let aa = Math.max(1, l);
                if (!isNaN_(n[0]) && m * aa >= this.aau) {
                    if (this.wy != null && typeCast(ISortingAxis_$type, this.wy) !== null) {
                        n[0] = n[0] + k;
                    }
                    else {
                        n[0] = f.ek(n[0], h) + k;
                    }
                    n[1] = g.ek(n[1], i);
                    n[2] = g.ek(n[2], i);
                    n[3] = g.ek(n[3], i);
                    a.f.add(n);
                }
            }
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            if (c != null) {
                c.b7();
            }
        }
        i3(a, b, c) {
            if (this.aay == null) {
                return super.i3(a, b, c);
            }
            let d = this.getEffectiveViewport1(this.ct);
            let e = this.yp(this.ct.by, this.ct.bx, d);
            let f = new ScalerParams(0, this.ct.by, this.ct.bx, this.wy.ch, d);
            f.c = this.c9.v0;
            return this.i5(this.aay, a, this.wy, f, e, runOn(this, this.yo), b, c);
        }
        j8(a, b) {
            if (this.aay == null) {
                return super.j8(a, b);
            }
            return this.j9(a, b, this.wy, runOn(this, this.yo), this.aay);
        }
        j6(a, b) {
            if (this.aay == null) {
                return super.j6(a, b);
            }
            return this.j7(a, b, this.wy, runOn(this, this.yo), this.aay);
        }
        hc(a, b, c) {
            let d = super.hc(a, b, c);
            if (!this.x7(this.yh())) {
                d = false;
            }
            return d;
        }
        z6(a, b) {
            super.z6(a, b);
            let c = typeCast(BollingerBandsOverlayView.$, b);
            let d = this.getEffectiveViewport1(b);
            if (b.b3(a)) {
                c.b7();
                let e = a.f.count;
                let f = (g) => a.f._inner[g][0];
                let g = (h) => a.f._inner[e - 1 - h][0];
                let h = (i) => a.f._inner[i][1];
                let i = (j) => a.f._inner[j][2];
                let j = (k) => a.f._inner[e - 1 - k][3];
                c.b8(e, f, g, h, i, j);
                b.b5(a);
            }
            this.w7.a2(this, this.x6(), runOn(this, this.wq), this.yv(b), this.yx(b));
            let k = false;
            let l = this.w7.b;
            let m = a.f;
            let n = this.dl.count;
            if (l != null) {
                k = true;
            }
            if (k) {
                let o = new ScalerParams(0, b.by, b.bx, this.wy.ch, d);
                this.z3(m, -1, n, this.wy, o, b.q, -1);
            }
            let p = c.cf;
            let q = c.cg;
            let r = c.ch;
            let s = c.ca;
            this.w7.ad(q, true, false, true, true);
            this.w7.an = null;
            this.w7.am = null;
            this.w7.ad(p, true, false, false, true);
            this.w7.ad(r, true, false, false, true);
            this.w7.ad(s, false, true, false, false);
            s._opacity = this.w7.j * this.h7;
        }
        cq() {
            return new BollingerBandsOverlayView(this);
        }
        qx(a) {
            super.qx(a);
            this.aax = typeCast(BollingerBandsOverlayView.$, a);
        }
        yy() {
            return 3;
        }
        iw() {
            return Series.iy(this.aay, null);
        }
    }
    BollingerBandsOverlay.$t = markType(BollingerBandsOverlay, 'BollingerBandsOverlay', FinancialOverlay.$);
    BollingerBandsOverlay.$$p = markDep(DependencyProperty, PropertyMetadata, BollingerBandsOverlay, 'raisePropertyChanged', ['Multiplier:aa2:aa6', [1, 2], 'Period:aa3:aa7', [1, 14]]);
    return BollingerBandsOverlay;
})();
/**
 * @hidden
 */
export let BollingerBandsBucketCalculator = /*@__PURE__*/ (() => {
    class BollingerBandsBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.a.b2.dl.count - 1);
            if (b <= c) {
                let d = this.f.b6.aa2;
                let e = 0;
                let f = 0;
                let g = 0;
                for (let h = b; h <= c; ++h) {
                    if (!isNaN_(this.f.b6.aay._inner[h]) && !isNaN_(this.f.b6.aaz._inner[h])) {
                        e += this.f.b6.aay._inner[h];
                        f += this.f.b6.aaz._inner[h];
                        ++g;
                    }
                }
                if (g > 0) {
                    e = e / g;
                    f = f / g;
                    return [0.5 * (b + c), e - f * d, e, e + f * d];
                }
            }
            return [NaN, NaN, NaN, NaN];
        }
    }
    BollingerBandsBucketCalculator.$t = markType(BollingerBandsBucketCalculator, 'BollingerBandsBucketCalculator', FinancialBucketCalculator.$);
    return BollingerBandsBucketCalculator;
})();
/**
 * @hidden
 */
export let BollingerBandsOverlayView = /*@__PURE__*/ (() => {
    class BollingerBandsOverlayView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b6 = null;
            this.cb = new Polygon();
            this.ci = new Polyline();
            this.cj = new Polyline();
            this.ck = new Polyline();
            this.b9 = new Polygon();
            this.cc = new Polyline();
            this.cd = new Polyline();
            this.ce = new Polyline();
            this.b6 = a;
        }
        au() {
            super.au();
            if (!this.q) {
            }
        }
        b1() {
            return new BollingerBandsBucketCalculator(this);
        }
        b8(a, b, c, d, e, f) {
            for (let g of fromEnum(Flattener.d(a, b, d, this.e.ib))) {
                this.cb.an.add({ $type: Point_$type, x: b(g), y: d(g) });
                this.ci.an.add({ $type: Point_$type, x: b(g), y: d(g) });
            }
            for (let h of fromEnum(Flattener.d(a, b, e, this.e.ib))) {
                this.cj.an.add({ $type: Point_$type, x: b(h), y: e(h) });
            }
            for (let i of fromEnum(Flattener.d(a, c, f, this.e.ib))) {
                this.cb.an.add({ $type: Point_$type, x: c(i), y: f(i) });
                this.ck.an.add({ $type: Point_$type, x: c(i), y: f(i) });
            }
            this.as();
        }
        b7() {
            this.cb.an.clear();
            this.ci.an.clear();
            this.cj.an.clear();
            this.ck.an.clear();
            this.as();
        }
        get ca() {
            return this.cb;
        }
        get cf() {
            return this.ci;
        }
        get cg() {
            return this.cj;
        }
        get ch() {
            return this.ck;
        }
        be() {
            super.be();
            this.b9.an = this.cb.an;
            this.cc.an = this.ci.an;
            this.cd.an = this.cj.an;
            this.ce.an = this.ck.an;
            let a = this.br();
            this.b9._fill = a;
            this.b9._opacity = 1;
            this.cc._stroke = a;
            this.cc.ad = this.e.ic + 3;
            this.cd._stroke = a;
            this.cd.ad = this.e.ic + 3;
            this.ce._stroke = a;
            this.ce.ad = this.e.ic + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.u(this.b9);
                    a.v(this.cc);
                    a.v(this.cd);
                    a.v(this.ce);
                }
                else {
                    a.u(this.cb);
                    a.v(this.ci);
                    a.v(this.cj);
                    a.v(this.ck);
                }
            }
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPolygonData(a, this.cb, "FillShape", ["Fill"]);
            this.e.bb.exportPolylineData(a, this.ci, "BottomLine", ["Lower", "Main"]);
            this.e.bb.exportPolylineData(a, this.cj, "CentralLine", ["Central"]);
            this.e.bb.exportPolylineData(a, this.ck, "TopLine", ["Upper"]);
        }
    }
    BollingerBandsOverlayView.$t = markType(BollingerBandsOverlayView, 'BollingerBandsOverlayView', FinancialSeriesView.$);
    return BollingerBandsOverlayView;
})();
