/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { DependencyProperty } from "igniteui-angular-core";
import { Series } from "./Series";
import { FinalValueSelectionMode_$type } from "./FinalValueSelectionMode";
import { Brush } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { FinalValueLayerFrame } from "./FinalValueLayerFrame";
import { List$1 } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { Dictionary$2 } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { AxisAnnotation } from "./AxisAnnotation";
import { Base, enumGetBox, fromEnum, Point_$type, markType, markDep } from "igniteui-angular-core";
import { AxisAnnotationFrameManager } from "./AxisAnnotationFrameManager";
import { PropertyMetadata } from "igniteui-angular-core";
import { DeviceUtils } from "igniteui-angular-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { BrushUtil } from "igniteui-angular-core";
/**
 * @hidden
 */
export let FinalValueLayer = /*@__PURE__*/ (() => {
    class FinalValueLayer extends AnnotationLayer {
        constructor() {
            super();
            this.axisAnnotationFormatLabel = null;
            this.zv = null;
            this.zu = null;
            let a = new FinalValueLayerFrame();
            let b = new FinalValueLayerFrame();
            let c = new FinalValueLayerFrame();
            let d = this.kb / 1000;
            this.w4 = a;
            this.w3 = b;
            this.w5 = c;
            this.ab = FinalValueLayer.$;
        }
        bi() {
            return new FinalValueLayer();
        }
        get_eo() {
            return true;
        }
        cq() {
            return new FinalValueLayerView(this);
        }
        qx(a) {
            super.qx(a);
            this.zq = a;
        }
        get aa0() {
            return new Thickness(1, this.zy, this.z0, this.zz, this.zx);
        }
        zt() {
            return this.axisAnnotationFormatLabel != null;
        }
        yh(a, b) {
            if (this.zs == null || this.zs == a) {
                if (!this.a0.c) {
                    this.rn(b);
                }
            }
        }
        yj(a, b) {
            super.yj(a, b);
            let c = a;
            c.f.clear();
            c.r.clear();
            c.q.clear();
            c.ac.clear();
            c.p.clear();
            c.ab.clear();
            c.h.clear();
            c.g.clear();
            c.i.clear();
            c.k.clear();
            c.m.clear();
            c.l.clear();
            c.j.clear();
            c.n.clear();
            c.o.clear();
            c.t.clear();
            c.s.clear();
            c.u.clear();
            c.w.clear();
            c.y.clear();
            c.x.clear();
            c.v.clear();
            c.z.clear();
            c.aa.clear();
            if (this.xa(this.zs)) {
                this.aah(this.zs, c);
            }
            else {
                for (let d of fromEnum(this.c9.series)) {
                    if (this.xa(d)) {
                        this.aah(d, c);
                    }
                    if (d.isStacked) {
                        d.pz((e) => {
                            if (this.xa(e)) {
                                this.aah(e, c);
                            }
                            if (e.ee) {
                                e.px((f) => {
                                    if (this.xa(f)) {
                                        this.aah(f, c);
                                    }
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    if (d.ee) {
                        d.px((e) => {
                            if (this.xa(e)) {
                                this.aah(e, c);
                            }
                            return true;
                        });
                    }
                }
            }
        }
        xa(a) {
            if (!super.xa(a)) {
                return false;
            }
            if (this.aae != null) {
                if (a.e9) {
                    let b = a.na();
                    if (!Base.equalsStatic(this.aae, b)) {
                        return false;
                    }
                }
                else {
                    if (!Base.equalsStatic(this.aae, a.name)) {
                        return false;
                    }
                }
            }
            return true;
        }
        ql() {
            super.ql();
            if (!this.a0.c && !this.d1()) {
                return;
            }
            if (this.d1()) {
                this.aai(this.w5, false);
            }
            else {
                this.aai(this.w3, false);
            }
        }
        aaz(a) {
            let b = NaN;
            let c = NaN;
            let d = this.zr;
            if (d == 0) {
                d = 1;
            }
            let e = false;
            if (d == 2) {
                e = true;
            }
            if (a.isVertical) {
                let f = a.az();
                if (f != null) {
                    if (d == 1 || d == 2) {
                        let g = this.wd(this.ct);
                        if (f.ch) {
                            c = a.wb({ $type: Point_$type, x: g.right, y: g.bottom }).y;
                        }
                        else {
                            c = a.wb({ $type: Point_$type, x: g.right, y: g.top }).y;
                        }
                    }
                    else {
                        if (f.ch) {
                            c = 1;
                        }
                        else {
                            c = 0;
                        }
                    }
                }
                return a.v6({ $type: Point_$type, x: 0, y: c }, e, true);
            }
            else {
                let h = a.az();
                if (h != null) {
                    if (d == 1 || d == 2) {
                        let i = this.wd(this.ct);
                        if (h.ch) {
                            b = a.wb({ $type: Point_$type, x: i.left, y: i.top }).x;
                        }
                        else {
                            b = a.wb({ $type: Point_$type, x: i.right, y: i.top }).x;
                        }
                    }
                    else {
                        if (h.ch) {
                            b = 0;
                        }
                        else {
                            b = 1;
                        }
                    }
                }
                if (a.e4) {
                    return a.v6({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
                else {
                    return a.v6({ $type: Point_$type, x: b, y: 0 }, e, true);
                }
            }
        }
        aah(a, b) {
            let c = this.aaz(a);
            let d = this.wb(c);
            let e = this.u3;
            if (e == null) {
                e = this.u9;
            }
            if (e == null) {
                e = a.u3;
                if (e != null) {
                    e = this.zq.b8(e);
                }
            }
            AxisAnnotationFrameManager.c(b, c, a, this.c9, this.getEffectiveViewport(), e, this.aaw, this.zw, this.aay, this.aax, this.aa0, this.z1, this.aaw, this.zw, this.aay, this.aax, this.aa0, this.z1, this._visibility == 0 && a.isVertical, this._visibility == 0 && !a.isVertical);
        }
        aai(a, b) {
            let c = false;
            if (this.zu == null) {
                c = true;
                this.zv = new List$1(Axis.$, 0);
                this.zu = new Dictionary$2(Axis.$, Pool$1.$.specialize(AxisAnnotation.$), 0);
            }
            AxisAnnotationFrameManager.d(this, a, c, this.zu, this.zv, b, this.z2, this.z2, this.axisAnnotationFormatLabel, this.axisAnnotationFormatLabel);
        }
        ym(a, b) {
            super.ym(a, b);
            if (this.d1()) {
                this.aai(this.w5, true);
            }
            else {
                this.aai(this.w3, false);
            }
        }
        f8() {
            return true;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case FinalValueLayer.$$p[11]:
                case FinalValueLayer.$$p[12]:
                    this.rn(true);
                    break;
                case FinalValueLayer.$$p[1]:
                case FinalValueLayer.$$p[0]:
                case FinalValueLayer.$$p[3]:
                case FinalValueLayer.$$p[5]:
                case FinalValueLayer.$$p[7]:
                case FinalValueLayer.$$p[6]:
                case FinalValueLayer.$$p[4]:
                case "Visibility":
                case FinalValueLayer.$$p[8]:
                case FinalValueLayer.$$p[9]:
                case FinalValueLayer.$$p[10]:
                    this.rn(true);
                    break;
                case "SeriesViewer":
                    let e = this.zv;
                    let f = this.zu;
                    if (f != null) {
                        for (let g of fromEnum(f)) {
                            let h = g.value;
                            h.c((i) => g.key.an.remove(i));
                            h.clear();
                        }
                        e.clear();
                        f.clear();
                    }
                    break;
            }
        }
        o3(a, b) {
            super.o3(a, b);
            if (a) {
                AxisAnnotationFrameManager.b(this.w3);
                this.aai(this.w3, false);
            }
        }
    }
    FinalValueLayer.$t = markType(FinalValueLayer, 'FinalValueLayer', AnnotationLayer.$);
    FinalValueLayer.$$p = markDep(DependencyProperty, PropertyMetadata, FinalValueLayer, 'raisePropertyChanged', ['AxisAnnotationBackgroundCornerRadius:zw:aaj', [1, DeviceUtils.g(3)], 'AxisAnnotationBackground:aaw:aak', [Brush.$, null], 'AxisAnnotationInterpolatedValuePrecision:z2:aal', [1, -1], 'AxisAnnotationOutline:aax:aam', [Brush.$, null], 'AxisAnnotationPaddingBottom:zx:aan', [1, NaN], 'AxisAnnotationPaddingLeft:zy:aao', [1, NaN], 'AxisAnnotationPaddingRight:zz:aap', [1, NaN], 'AxisAnnotationPaddingTop:z0:aaq', [1, NaN], 'AxisAnnotationStrokeThickness:z1:aar', [1, NaN], 'AxisAnnotationTextColor:aay:aas', [Brush.$, null], 'FinalValueSelectionMode:zr:aat', [FinalValueSelectionMode_$type, enumGetBox(FinalValueSelectionMode_$type, 0)], 'TargetSeriesName:aae:aau', [2, null], 'TargetSeries:zs:aav', [Series.$, null]]);
    return FinalValueLayer;
})();
/**
 * @hidden
 */
export let FinalValueLayerView = /*@__PURE__*/ (() => {
    class FinalValueLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b7 = null;
            this.b7 = a;
        }
        au() {
            super.au();
        }
        b8(a) {
            if (a == null) {
                return a;
            }
            return BrushUtil.m(a, 0.1);
        }
        an(a) {
            super.an(a);
        }
    }
    FinalValueLayerView.$t = markType(FinalValueLayerView, 'FinalValueLayerView', AnnotationLayerView.$);
    return FinalValueLayerView;
})();
