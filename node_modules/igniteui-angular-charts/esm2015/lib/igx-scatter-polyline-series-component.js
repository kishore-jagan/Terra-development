import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStyle } from "igniteui-angular-core";
import { IgxShapeSeriesBaseComponent } from "./igx-shape-series-base-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterPolylineSeries } from "./ScatterPolylineSeries";
import * as i0 from "@angular/core";
/**
 * Series class used for displaying multiple polylines for datasources which contain multiple lists of points.
*/
export let IgxScatterPolylineSeriesComponent = /*@__PURE__*/ (() => {
    class IgxScatterPolylineSeriesComponent extends IgxShapeSeriesBaseComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new ScatterPolylineSeries();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the current series shows a polyline shape.
        */
        get isPolyline() {
            return this.i.fp;
        }
        /**
         * The default style to apply to all Shapes in the series.
        */
        get shapeStyle() {
            const r = this.i.zn;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxStyle();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set shapeStyle(v) {
            v == null ? this.i.zn = null : this.i.zn = v.i;
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
                return this.shapeStyle;
            }
            return null;
        }
    }
    IgxScatterPolylineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolylineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxScatterPolylineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxScatterPolylineSeriesComponent, selector: "igx-scatter-polyline-series", inputs: { shapeStyle: "shapeStyle" }, providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolylineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolylineSeriesComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxScatterPolylineSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolylineSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-scatter-polyline-series',
                    template: ``,
                    providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolylineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolylineSeriesComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { shapeStyle: [{
                type: Input
            }] } });
