/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { FinancialSeries } from "./FinancialSeries";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { DependencyProperty } from "igniteui-angular-core";
import { TrendLineType_$type } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap_$type } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { CategoryFrame } from "./CategoryFrame";
import { Number_$type, typeCast, enumGetBox, EnumUtil, runOn, markType, markDep } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { ISortingAxis_$type } from "./ISortingAxis";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { CategorySeries } from "./CategorySeries";
import { NotImplementedException } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { isNaN_ } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { GeometryGroup } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { LineGeometry } from "igniteui-angular-core";
import { Defaults } from "./Defaults";
import { Extensions } from "igniteui-angular-core";
import { IndicatorRenderer } from "./IndicatorRenderer";
/**
 * @hidden
 */
export let FinancialIndicator = /*@__PURE__*/ (() => {
    class FinancialIndicator extends FinancialSeries {
        constructor() {
            super();
            this._indicatorColumn = null;
            this.aas = null;
            this.w2 = new CategoryFrame(3);
            this.w4 = new CategoryFrame(3);
            this.w0 = new CategoryFrame(3);
            this.indicatorColumn = new List$1(Number_$type, 0);
            this.aas = new AxisRange(-100, 100);
        }
        get_e5() {
            return true;
        }
        cq() {
            return new FinancialIndicatorView(this);
        }
        qx(a) {
            super.qx(a);
            this.aat = a;
        }
        aa6(a) {
            if (this.xh != null && !this.xh.c1()) {
                this.rn(true);
            }
        }
        aay(a, b, c) {
            if (isNaN_(b.x) || isNaN_(b.y)) {
                return false;
            }
            let d = this.xh;
            let e = 0;
            if (d != null) {
                e = d.e5(d.l8);
            }
            if ((a.y >= e && a.y <= b.y) || (a.y <= e && a.y >= b.y)) {
                return true;
            }
            return false;
        }
        b0() {
            if (this.b1 == 0) {
                return 1;
            }
            else {
                return super.b0();
            }
        }
        wh(a) {
            if (this.wy == null || this.xh == null) {
                return Rect.empty;
            }
            let b = this.v1(a);
            let c = this.ct.by;
            let d = this.ct.bx;
            let e = this.getEffectiveViewport1(this.ct);
            let f = new ScalerParams(0, c, d, this.xh.ch, e);
            f.b = this.iw();
            let g = this.am(this.wy, this.w0.f, this.yv(this.ct), this.yx(this.ct), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.xh.ek(this.xh.l8, f);
            let m = 1;
            if (j < k) {
                let n = h[0] - 0.5 * m;
                let o = h[1];
                let p = l;
                return new Rect(0, n, Math.min(o, p), m, Math.max(o, p) - Math.min(o, p));
            }
            else {
                let q = i[0] - 0.5 * m;
                let r = i[1];
                let s = l;
                return new Rect(0, q, Math.min(r, s), m, Math.max(r, s) - Math.min(r, s));
            }
        }
        gu(a, b) {
            let c = this.v6(this.wb(a), true, false);
            if (this.aav == 1) {
                if (this.aay(a, c, b)) {
                    return true;
                }
            }
            if (this.aav == 1 || this.aav == 0) {
                if (this.gt(a, b)) {
                    return true;
                }
            }
            if (this.aav == 2) {
                if (this.gx(a, b)) {
                    return true;
                }
            }
            return false;
        }
        o9(a, b, c, d) {
            super.o9(a, b, c, d);
            if (this.wy != null && typeCast(ISortingAxis_$type, this.wy) !== null) {
                this.wy.i$i();
            }
            if (this.aat.ca) {
                this.aat.b8.g$e(a, b, c, d);
            }
            if (d != null && this.ya.containsKey(d)) {
                let e = this.ya.tryGetValue(d, d);
                d = e.p1;
            }
            if (this.wy != null && typeCast(ISortingAxis_$type, this.wy) !== null) {
                a = 4;
                b = 0;
                c = this.dl.count;
            }
            switch (a) {
                case 3:
                    if (this.aax(b, c, d)) {
                        this.aa8(b, c, d);
                        this.aa6(true);
                    }
                    break;
                case 2:
                    if (this.aax(b, this.dl.count - b, d)) {
                        this.aa8(b, this.dl.count - b, d);
                        this.aa6(true);
                    }
                    break;
                case 1:
                    if (this.aax(b, this.dl.count - b, d)) {
                        let f = new Array(c);
                        for (let g = 0; g < c; g++) {
                            f[g] = 0;
                        }
                        this.indicatorColumn.s(b, f);
                        this.aa8(b, this.dl.count - b, d);
                        this.aa6(true);
                    }
                    break;
                case 0:
                    if (this.aax(b, this.dl.count - b, d)) {
                        this.indicatorColumn.v(b, c);
                        this.aa8(b, this.dl.count - b, d);
                        this.aa6(true);
                    }
                    break;
                case 4:
                    if (this.aax(b, this.dl.count - b, d)) {
                        this.indicatorColumn = new List$1(Number_$type, 2, this.dl.count);
                        let h = new Array(c);
                        for (let i = 0; i < c; i++) {
                            h[i] = 0;
                        }
                        this.indicatorColumn.s(0, h);
                        this.aa8(b, this.dl.count - b, d);
                        this.aa6(true);
                    }
                    break;
            }
        }
        get_aau() {
            return 0;
        }
        get aau() {
            return this.get_aau();
        }
        get abj() {
            return this.c(FinancialIndicator.aa9);
        }
        set abj(a) {
            this.h(FinancialIndicator.aa9, a);
        }
        aa3() {
            return -1;
        }
        get indicatorColumn() {
            return this._indicatorColumn;
        }
        set indicatorColumn(a) {
            this._indicatorColumn = a;
        }
        q5(a, b, c, d) {
            switch (b) {
                case "XAxis":
                    this.aat.cg();
                    break;
                case "TrendLineType":
                    let e = EnumUtil.getEnumValue(TrendLineType_$type, d);
                    if (e != 0) {
                        this.aat.b8 = CategoryTrendLineManagerFactory.a(this.aat.b8, this.wy, this.sp, this, this.dp);
                    }
                    break;
            }
            super.q5(a, b, c, d);
            if (this.aat.ca && this.aat.b8.g$b(a, b, c, d)) {
                this.rn(false);
                let f = typeCast(FinancialIndicatorView.$, this.cs);
                if (f != null && f.ca) {
                    f.b8.g$b(a, b, c, d);
                }
                this.qh();
            }
            switch (b) {
                case "FastItemsSource":
                    if (this.dl != null) {
                        this.indicatorColumn = new List$1(Number_$type, 2, this.dl.count);
                        let g = new Array(this.dl.count);
                        for (let h = 0; h < this.dl.count; h++) {
                            g[h] = 0;
                        }
                        this.indicatorColumn.s(0, g);
                        this.aa8(0, this.dl.count, null);
                        if (this.xh != null && !this.xh.c1()) {
                            this.xf.b0.e(this.ib);
                            this.rn(this.ge && c != null);
                        }
                    }
                    break;
                case "TrendLineBrush":
                    this.rb(b);
                    break;
                case FinancialIndicator.$$p[0]:
                    this.o3(true, this.ct);
                    this.sc();
                    this.rn(false);
                    this.qh();
                    break;
                case "OpenColumn":
                case "HighColumn":
                case "LowColumn":
                case "CloseColumn":
                case "VolumeColumn":
                    if (this.dl != null) {
                        if (this.indicatorColumn.count != this.dl.count) {
                            this.indicatorColumn = new List$1(Number_$type, 2, this.dl.count);
                            let i = new Array(this.dl.count);
                            for (let j = 0; j < this.dl.count; j++) {
                                i[j] = 0;
                            }
                            this.indicatorColumn.s(0, i);
                        }
                        if (this.aax(0, this.dl.count - 1, b)) {
                            this.aa7();
                        }
                    }
                    break;
                case "XAxis":
                    if (this.wy != null && (typeCast(ISortingAxis_$type, this.wy) !== null || typeCast(ISortingAxis_$type, c) !== null)) {
                        this.aa7();
                    }
                    break;
                case "YAxis":
                case FinancialIndicator.$$p[1]:
                    this.aa7();
                    this.qh();
                    break;
                case "TrendLineType":
                    this.qh();
                    break;
            }
        }
        i3(a, b, c) {
            if (this.indicatorColumn == null) {
                return super.i3(a, b, c);
            }
            let d = this.getEffectiveViewport1(this.ct);
            let e = this.yp(this.ct.by, this.ct.bx, d);
            let f = new ScalerParams(0, this.ct.by, this.ct.bx, this.wy.ch, d);
            f.c = this.c9.v0;
            return this.i5(this.indicatorColumn, a, this.wy, f, e, runOn(this, this.yo), b, c);
        }
        j8(a, b) {
            if (this.indicatorColumn == null) {
                return super.j8(a, b);
            }
            return this.j9(a, b, this.wy, runOn(this, this.yo), this.indicatorColumn);
        }
        j6(a, b) {
            if (this.indicatorColumn == null) {
                return super.j6(a, b);
            }
            return this.j7(a, b, this.wy, runOn(this, this.yo), this.indicatorColumn);
        }
        get_hb() {
            return true;
        }
        aax(a, b, c) {
            if (c == null) {
                return true;
            }
            if (this.aaz(a, b).contains(c)) {
                return true;
            }
            return false;
        }
        aa8(a, b, c) {
            this.aaw(a, b);
        }
        ax(a) {
            if (this.dl == null) {
                return null;
            }
            if (a != null && a == this.xh) {
                return this.aas;
            }
            return null;
        }
        gb(a) {
            let b = this.dl != null ? this.dl.indexOf(a) : -1;
            let c = this.ct.by;
            c = c.copy();
            let d = this.ct.bx;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.wf(this.ct);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.wy != null) {
                    let g = new ScalerParams(0, e, e, this.wy.ch, f);
                    let h = this.wy.ek(b, g);
                    if (h < c.left + 0.1 * c.width) {
                        h = h + 0.4 * c.width;
                    }
                    if (h > c.right - 0.1 * c.width) {
                        h = h - 0.4 * c.width;
                    }
                    c.x = h - 0.5 * c.width;
                }
                if (this.xh != null && this.indicatorColumn != null && b < this.indicatorColumn.count) {
                    let i = new ScalerParams(0, e, e, this.xh.ch, f);
                    i.b = this.iw();
                    let j = this.xh.ek(this.indicatorColumn._inner[b], i);
                    if (j < c.top + 0.1 * c.height) {
                        j = j + 0.4 * c.height;
                    }
                    if (j > c.bottom - 0.1 * c.height) {
                        j = j - 0.4 * c.height;
                    }
                    c.y = j - 0.5 * c.height;
                }
                this.c1.au(this.c9, c, true);
            }
            return b >= 0;
        }
        hc(a, b, c) {
            let d = super.hc(a, b, c);
            if (this.indicatorColumn == null || this.indicatorColumn.count == 0) {
                d = false;
            }
            return d;
        }
        z4(a, b) {
            super.z4(a, b);
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = this.wy;
            let g = this.xh;
            let h = new ScalerParams(0, c, d, f.ch, e);
            let i = new ScalerParams(0, c, d, g.ch, e);
            i.b = this.iw();
            let j = this.wy.ag();
            let k = j[0];
            let l = j[1];
            a.f.clear();
            a.n.clear();
            a.q.clear();
            let m = 0;
            let n = typeCast(ISortingAxis_$type, this.wy);
            if (n != null && n.i$b.count != this.dl.count) {
                return;
            }
            m = this.yp(c, d, e);
            let o = this.aa3();
            if (o == -1) {
                o = this.trendLinePeriod;
            }
            let p = typeCast(FinancialIndicatorView.$, b);
            if (p.ca) {
                p.b8.prepareLineCore(a.q, this.trendLineType, this.indicatorColumn, o, (q) => this.wy.ek(q, h), (q) => this.xh.ek(q, i), ((() => {
                    let $ret = new TrendResolutionParams();
                    $ret.e = b.b0.b;
                    $ret.f = b.b0.c;
                    $ret.g = b.b0.d;
                    $ret.a = m;
                    $ret.d = this.ib;
                    $ret.i = d;
                    $ret.j = c;
                    $ret.h = e;
                    $ret.b = l;
                    $ret.c = k;
                    return $ret;
                })()));
            }
            let q = this.wy.en(2, h) - this.wy.en(1, h);
            for (let r = b.b0.c; r <= b.b0.d; ++r) {
                let s;
                if (n == null) {
                    s = b.b0.getBucket(r);
                }
                else {
                    let t = n.i$b._inner[r];
                    let u = n.i$d(t);
                    let v = this.indicatorColumn._inner[r];
                    let w = v;
                    let x = u;
                    while (r < b.b0.d) {
                        t = n.i$b._inner[r + 1];
                        x = n.i$d(t);
                        if (x - u > q) {
                            break;
                        }
                        r++;
                        let y = this.indicatorColumn._inner[r];
                        v = Math.min(v, y);
                        w = Math.max(w, y);
                    }
                    let z = NaN;
                    if (!isNaN_(u)) {
                        z = this.wy.ek(u, h);
                    }
                    s = [z, v, w];
                }
                if (!isNaN_(s[0])) {
                    if (this.wy != null && typeCast(ISortingAxis_$type, this.wy) !== null) {
                        s[0] = s[0] + m;
                    }
                    else {
                        s[0] = f.ek(s[0], h) + m;
                    }
                    s[1] = g.ek(s[1], i);
                    if (b.b0.b > 1 || n != null) {
                        s[2] = g.ek(s[2], i);
                    }
                    else {
                        s[2] = s[1];
                    }
                    a.f.add(s);
                }
            }
            return;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.cb(a);
            if (c.ca) {
                c.b8.g$d();
            }
        }
        w8() {
            switch (this.aav) {
                case 1: return 1;
                case 2: return 1;
                case 0: return 12;
            }
            return 1;
        }
        z6(a, b) {
            super.z6(a, b);
            let c = typeCast(FinancialIndicatorView.$, b);
            let d = (e) => a.f._inner[e][0];
            let e = (f) => a.f._inner[f][1];
            if (c.ca) {
                c.b8.g$d();
                c.b8.g$g(a.q);
            }
            let f = b.bx;
            let g = this.getEffectiveViewport1(b);
            let h = 0;
            let i = this.u3;
            let j = this.aao;
            if (b.b3(a)) {
                c.cb(false);
                if (a.f.count > 0) {
                    switch (this.aav) {
                        case 0:
                            let k = CategorySeries.yf(a.f, a.f.count - 1, f, b.by, false);
                            c.cf(a.f.count, d, e, true, k);
                            break;
                        case 1:
                            if (this.xh != null) {
                                h = this.yt(b);
                            }
                            else {
                                h = 0.5 * (f.top + f.bottom);
                            }
                            let l = CategorySeries.yf(a.f, a.f.count - 1, f, b.by, false);
                            c.cd(a.f.count, d, e, true, h, l);
                            break;
                        case 2:
                            h = this.yt(b);
                            c.ce(a.f.count, d, e, true, h);
                            break;
                        default: throw new NotImplementedException(0);
                    }
                }
                b.b5(a);
            }
            let m = a.f;
            let n = this.dl.count;
            this.w7.a2(this, this.x6(), runOn(this, this.wq), this.yv(b), this.yx(b));
            let o = false;
            let p = this.w7.b;
            if (p != null) {
                o = true;
            }
            this.w7.ak = i;
            this.w7.ag = i;
            if (o) {
                let q = new ScalerParams(0, b.by, b.bx, this.wy.ch, g);
                this.w7.f = false;
                this.z3(m, -1, n, this.wy, q, b.q, -1);
            }
            this.w7.ad(c.cx, true, false, true, false);
            this.w7.ad(c.cz, true, false, true, false);
            this.w7.ad(c.cy, false, true, false, false);
            c.cy._opacity = 0.8 * this.w7.j * this.h7;
            this.w7.ad(c.cw, true, false, false, false);
            this.w7.ak = j;
            this.w7.ag = j;
            if (o) {
                let r = new ScalerParams(0, b.by, b.bx, this.wy.ch, g);
                this.w7.f = true;
                this.z3(m, -1, n, this.wy, r, b.q, -1);
            }
            this.w7.ad(c.ct, true, false, true, false);
            this.w7.ad(c.cv, true, false, true, false);
            this.w7.ad(c.cu, false, true, false, false);
            c.cu._opacity = 0.8 * this.w7.j * this.h7;
            this.w7.ad(c.cs, true, false, false, false);
            c.ch();
        }
        sb() {
            super.sb();
            if (this.index < 0) {
                return;
            }
            if (this.aat.ca) {
                this.aat.ci();
            }
        }
        aa7() {
            if (this.aat.ca) {
                this.aat.b8.g$i();
            }
            this.aaw(0, this.indicatorColumn.count);
            if (this.xh != null && !this.xh.c1()) {
                this.rn(this.ge && this.d5);
            }
        }
        pv(a) {
            super.pv(a);
            this.bb.exportTrendlineData(this, a, this.aat.b8.g$j);
        }
        bd(a) {
            if (this.aav == 1 || this.aav == 2) {
                return 3;
            }
            else if (this.aav == 0) {
                return 2;
            }
            return a;
        }
    }
    FinancialIndicator.$t = markType(FinancialIndicator, 'FinancialIndicator', FinancialSeries.$, [ITrendLineSeries_$type]);
    FinancialIndicator.aa9 = DependencyProperty.i("ActualTrendLineBrush", Brush.$, FinancialIndicator.$, new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    FinancialIndicator.$$p = markDep(DependencyProperty, PropertyMetadata, FinancialIndicator, 'raisePropertyChanged', ['DisplayType:aav:aba', [IndicatorDisplayType_$type, enumGetBox(IndicatorDisplayType_$type, 0)], 'IgnoreFirst:aa1:abb', [1, 0], 'TrendLineType::abh', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::abg', [1, 1.5], 'TrendLinePeriod::abf', [1, 7], 'TrendLineBrush::abc', [Brush.$, null], 'TrendLineZIndex:aa2:abi', [1, 1001], 'TrendLineDashArray:abk:abd', [DoubleCollection.$], 'TrendLineDashCap:abl:abe', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return FinancialIndicator;
})();
/**
 * @hidden
 */
export let FinancialIndicatorBucketCalculator = /*@__PURE__*/ (() => {
    class FinancialIndicatorBucketCalculator extends FinancialBucketCalculator {
        constructor(a) {
            super(a);
            this.f = null;
            this.f = a;
        }
        getBucket(a) {
            let b = a * this.b;
            let c = Math.min(b + this.b - 1, this.f.b6.indicatorColumn.count - 1);
            let d = NaN;
            let e = NaN;
            for (let f = b; f <= c; ++f) {
                let g = this.f.b6.indicatorColumn._inner[f];
                if (!isNaN_(d)) {
                    if (!isNaN_(g)) {
                        d = Math.min(d, g);
                        e = Math.max(e, g);
                    }
                }
                else {
                    d = g;
                    e = g;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [NaN, NaN, NaN];
        }
    }
    FinancialIndicatorBucketCalculator.$t = markType(FinancialIndicatorBucketCalculator, 'FinancialIndicatorBucketCalculator', FinancialBucketCalculator.$);
    return FinancialIndicatorBucketCalculator;
})();
/**
 * @hidden
 */
export let FinancialIndicatorView = /*@__PURE__*/ (() => {
    class FinancialIndicatorView extends FinancialSeriesView {
        constructor(a) {
            super(a);
            this.b6 = null;
            this.b9 = null;
            this.cx = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.ct = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cy = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cu = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cz = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cv = ((() => {
                let $ret = new Path();
                $ret.an = new PathGeometry();
                return $ret;
            })());
            this.cw = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                return $ret;
            })());
            this.cs = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                return $ret;
            })());
            this.b7 = null;
            this.cp = new Path();
            this.cr = new Path();
            this.cq = new Path();
            this.co = new Path();
            this.cl = new Path();
            this.cn = new Path();
            this.cm = new Path();
            this.ck = new Path();
            this.b6 = a;
            this.b9 = ((() => {
                let $ret = new Pool$1(LineGeometry.$);
                $ret.create = runOn(this, this.cj);
                $ret.destroy = runOn(this, this.cc);
                return $ret;
            })());
        }
        b1() {
            return new FinancialIndicatorBucketCalculator(this);
        }
        au() {
            super.au();
            if (!this.q) {
                this.b6.aao = Defaults.ah;
                this.b6.aav = this.b6.aau;
            }
        }
        cj() {
            return new LineGeometry();
        }
        cc(a) {
        }
        get b8() {
            if (this.b7 == null) {
                this.b7 = CategoryTrendLineManagerFactory.a(this.b7, this.e.az(), this.e.sp, this.e, this.e.dp);
            }
            return this.b7;
        }
        set b8(a) {
            this.b7 = a;
        }
        get ca() {
            return this.b7 != null;
        }
        cb(a) {
            Extensions.e(this.cx.an);
            Extensions.e(this.cy.an);
            Extensions.e(this.cz.an);
            Extensions.e(this.ct.an);
            Extensions.e(this.cu.an);
            Extensions.e(this.cv.an);
            Extensions.d(this.cw.an);
            Extensions.d(this.cs.an);
            if (a) {
                this.b9.count = 0;
            }
            this.as();
        }
        ch() {
        }
        cf(a, b, c, d, e) {
            IndicatorRenderer.g(a, b, c, d, this.by, this.bx, this.cx, this.ct, this.b0.b, this.e.ib, e);
            this.as();
        }
        cd(a, b, c, d, e, f) {
            IndicatorRenderer.e(a, b, c, d, this.by, this.bx, this.cx, this.cy, this.ct, this.cu, e, this.b0.b, this.e.ib, f);
            this.as();
        }
        ce(a, b, c, d, e) {
            IndicatorRenderer.f(a, b, c, d, this.bx, e, this.b9, this.cw, this.cs);
            this.as();
        }
        ci() {
            this.b6.abj = null;
            if (this.b6.trendLineBrush != null) {
                this.b6.abj = this.b6.trendLineBrush;
            }
            else {
                this.b6.abj = this.b6.u3;
            }
        }
        be() {
            super.be();
            let a = this.br();
            this.cp.an = this.cx.an;
            this.cr.an = this.cz.an;
            this.cq.an = this.cy.an;
            this.co.an = this.cw.an;
            this.cl.an = this.ct.an;
            this.cn.an = this.cv.an;
            this.cm.an = this.cu.an;
            this.ck.an = this.cs.an;
            this.cp._stroke = a;
            this.cr._stroke = a;
            this.cp.ad = this.e.ic + 3;
            this.cr.ad = this.e.ic + 3;
            this.cq._fill = a;
            this.cq._opacity = 1;
            this.co._stroke = a;
            this.co.ad = this.e.ic + 3;
            this.cl._stroke = a;
            this.cn._stroke = a;
            this.cl.ad = this.e.ic + 3;
            this.cn.ad = this.e.ic + 3;
            this.cm._fill = a;
            this.cm._opacity = 1;
            this.ck._stroke = a;
            this.ck.ad = this.e.ic + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    if (this.b6.aav == 2) {
                        a.t(this.co);
                        a.t(this.ck);
                    }
                    else {
                        a.t(this.cq);
                        a.t(this.cp);
                        a.t(this.cr);
                        a.t(this.cm);
                        a.t(this.cl);
                        a.t(this.cn);
                    }
                }
                else {
                    if (this.b6.aav == 2) {
                        a.t(this.cw);
                        a.t(this.cs);
                    }
                    else {
                        a.t(this.cy);
                        a.t(this.cx);
                        a.t(this.cz);
                        a.t(this.cu);
                        a.t(this.ct);
                        a.t(this.cv);
                    }
                }
            }
        }
        a7(a, b) {
            if (a.d) {
                if (this.b6.trendLineType != 0 && !b) {
                    let c = this.b8.g$j;
                    c.ad = this.b6.trendLineThickness;
                    c._stroke = this.b6.abj;
                    c.aj = this.b6.abl;
                    c.ai = this.b6.abk;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.cw, "positiveColumnsShape", ["Positive", "Main"]);
            this.e.bb.exportPathData(a, this.cs, "negativeColumnsShape", ["Negative"]);
            this.e.bb.exportPathData(a, this.cx, "positive0", ["Positive", "Main"]);
            this.e.bb.exportPathData(a, this.cz, "positive1", ["Positive"]);
            this.e.bb.exportPathData(a, this.cy, "positive01", ["PositiveFill"]);
            this.e.bb.exportPathData(a, this.ct, "negative0", ["Negative", "Main"]);
            this.e.bb.exportPathData(a, this.cv, "negative1", ["Negative"]);
            this.e.bb.exportPathData(a, this.cu, "negative01", ["NegativeFill"]);
        }
        cg() {
            if (this.ca) {
                this.b7 = CategoryTrendLineManagerFactory.a(this.b7, this.e.az(), this.e.sp, this.e, this.e.dp);
            }
        }
    }
    FinancialIndicatorView.$t = markType(FinancialIndicatorView, 'FinancialIndicatorView', FinancialSeriesView.$);
    return FinancialIndicatorView;
})();
