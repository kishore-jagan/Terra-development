import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxVerticalAnchoredCategorySeriesComponent } from "./igx-vertical-anchored-category-series-component";
import { IgxAnchoredCategorySeriesComponent } from "./igx-anchored-category-series-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { BarSeries } from "./BarSeries";
import { toPoint, fromRect } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent bar series.
*/
export let IgxBarSeriesComponent = /*@__PURE__*/ (() => {
    class IgxBarSeriesComponent extends IgxVerticalAnchoredCategorySeriesComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new BarSeries();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the current series shows a bar shape.
        */
        get isBar() {
            return this.i.ev;
        }
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get isMarkerlessDisplayPreferred() {
            return this.i.fj;
        }
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the bar.
        */
        get radiusX() {
            return this.i.ab6;
        }
        set radiusX(v) {
            this.i.ab6 = +v;
        }
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the bar.
        */
        get radiusY() {
            return this.i.ab7;
        }
        set radiusY(v) {
            this.i.ab7 = +v;
        }
        /**
         * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
        
        * @param world  * The world coordinate for which to get a value bounding box for
        */
        getSeriesValueBoundingBox(world) {
            let iv = this.i.wh(toPoint(world));
            return fromRect(iv);
        }
        /**
         * Scrolls the series to display the item for the specified data item.
         * The series is scrolled by the minimum amount required to place the specified data item within
         * the central 80% of the visible axis.
        
        * @param item  * The data item (item) to scroll to.
        */
        scrollIntoView(item) {
            let iv = this.i.gb(item);
            return (iv);
        }
        /**
         * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
        
        */
        getItemSpan() {
            let iv = this.i.iu();
            return (iv);
        }
    }
    IgxBarSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxBarSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxBarSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxBarSeriesComponent, selector: "igx-bar-series", inputs: { radiusX: "radiusX", radiusY: "radiusY" }, providers: [{ provide: IgxVerticalAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxBarSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxBarSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-bar-series',
                    template: ``,
                    providers: [{ provide: IgxVerticalAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxBarSeriesComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { radiusX: [{
                type: Input
            }], radiusY: [{
                type: Input
            }] } });
