import { Component, Input } from '@angular/core';
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { VerticalAlignment_$type } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { YAxisLabelLocation_$type } from "./YAxisLabelLocation";
import { XAxisLabelLocation_$type } from "./XAxisLabelLocation";
import { IgxDomainChartComponent } from "./igx-domain-chart-component";
import { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a base class for domain charts with X/Y axes
*/
export let IgxXYChartComponent = /*@__PURE__*/ (() => {
    class IgxXYChartComponent extends IgxDomainChartComponent {
        constructor() {
            super();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
        *
        * To customize the text of the x-axis label, set `XAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be your data item.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     [xAxisFormatLabel]="formatX"
        *     xAxisExtent="250">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * formatX(item: any): string {
        *     return "[ " + item.label + "! ]";
        * }
        * ```
        */
        get xAxisFormatLabel() {
            return this.i.zo;
        }
        set xAxisFormatLabel(v) {
            this.i.zo = v;
        }
        /**
         * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
        *
        * To customize the text of the y-axis label, set `YAxisFormatLabel` to a single-parameter function.  The argument passed to that function will be the numeric value corresponding to a position on the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     [yAxisFormatLabel]="formatY">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * formatY(value: any): string {
        *     return "[ " + value+ "! ]";
        * }
        * ```
        */
        get yAxisFormatLabel() {
            return this.i.zp;
        }
        set yAxisFormatLabel(v) {
            this.i.zp = v;
        }
        /**
         * Gets or sets the left margin of labels on the X-axis
        *
        * Use the `XAxisLabelLeftMargin` property to apply a margin left of the x-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelLeftMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelLeftMargin ="100";
        * ```
        */
        get xAxisLabelLeftMargin() {
            return this.i.aa5;
        }
        set xAxisLabelLeftMargin(v) {
            this.i.aa5 = +v;
        }
        /**
         * Gets or sets the top margin of labels on the X-axis
        *
        * Use the `XAxisLabelTopMargin` property to apply a margin above the x-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleTopMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTopMargin="250";
        * ```
        */
        get xAxisLabelTopMargin() {
            return this.i.aa7;
        }
        set xAxisLabelTopMargin(v) {
            this.i.aa7 = +v;
        }
        /**
         * Gets or sets the right margin of labels on the X-axis
        *
        * Use the `XAxisLabelRightMargin` property to apply a margin right of the x-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelRightMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelRightMargin="100";
        * ```
        */
        get xAxisLabelRightMargin() {
            return this.i.aa6;
        }
        set xAxisLabelRightMargin(v) {
            this.i.aa6 = +v;
        }
        /**
         * Gets or sets the bottom margin of labels on the X-axis
        *
        * Use the `XAxisLabelBottomMargin` property to apply a margin below the x-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelBottomMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelBottomMargin ="100";
        * ```
        */
        get xAxisLabelBottomMargin() {
            return this.i.aa4;
        }
        set xAxisLabelBottomMargin(v) {
            this.i.aa4 = +v;
        }
        /**
         * Gets or sets the left margin of labels on the Y-axis
        *
        * Use the `YAxisLabelLeftMargin` property to apply a margin left of the y-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelLeftMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart. yAxisLabelLeftMargin="250";
        * ```
        */
        get yAxisLabelLeftMargin() {
            return this.i.abm;
        }
        set yAxisLabelLeftMargin(v) {
            this.i.abm = +v;
        }
        /**
         * Gets or sets the top margin of labels on the Y-axis
        *
        * Use the `YAxisLabelTopMargin` property to apply a margin above the y-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelTopMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelTopMargin="250";
        * ```
        */
        get yAxisLabelTopMargin() {
            return this.i.abo;
        }
        set yAxisLabelTopMargin(v) {
            this.i.abo = +v;
        }
        /**
         * Gets or sets the right margin of labels on the Y-axis
        *
        * Use the `YAxisLabelRightMargin` property to apply a margin right of the y-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelRightMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelRightMargin="250";
        * ```
        */
        get yAxisLabelRightMargin() {
            return this.i.abn;
        }
        set yAxisLabelRightMargin(v) {
            this.i.abn = +v;
        }
        /**
         * Gets or sets the bottom margin of labels on the Y-axis
        *
        * Use the `YAxisLabelBottomMargin` property to apply a margin below the y-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelBottomMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelBottomMargin="250";
        * ```
        */
        get yAxisLabelBottomMargin() {
            return this.i.abl;
        }
        set yAxisLabelBottomMargin(v) {
            this.i.abl = +v;
        }
        /**
         * Gets or sets color of labels on the X-axis
        *
        * To change the color of x-axis labels, set the `XAxisLabelTextColor` property to a color string.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelTextColor="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelTextColor="green";
        * ```
        */
        get xAxisLabelTextColor() {
            return brushToString(this.i.aft);
        }
        set xAxisLabelTextColor(v) {
            this.i.aft = stringToBrush(v);
        }
        /**
         * Gets or sets color of labels on the Y-axis
        *
        * To change the color of y-axis labels, set the `YAxisLabelTextColor` property to a color string.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelTextColor="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelTextColor="green";
        * ```
        */
        get yAxisLabelTextColor() {
            return brushToString(this.i.af0);
        }
        set yAxisLabelTextColor(v) {
            this.i.af0 = stringToBrush(v);
        }
        /**
         * Gets the actual color of labels on the X-axis
        */
        get actualXAxisLabelTextColor() {
            return brushToString(this.i.afr);
        }
        set actualXAxisLabelTextColor(v) {
            this.i.afr = stringToBrush(v);
        }
        /**
         * Gets the actual color of labels on the Y-axis
        */
        get actualYAxisLabelTextColor() {
            return brushToString(this.i.afs);
        }
        set actualYAxisLabelTextColor(v) {
            this.i.afs = stringToBrush(v);
        }
        /**
         * Gets or sets the margin around a title on the X-axis
        *
        * Use the `XAxisTitleMargin` property to set a margin around the y-axis title.
        */
        get xAxisTitleMargin() {
            return this.i.abg;
        }
        set xAxisTitleMargin(v) {
            this.i.abg = +v;
        }
        /**
         * Gets or sets the margin around a title on the Y-axis
        *
        * Use the `YAxisTitleMargin` property to set a margin around the y-axis title.
        */
        get yAxisTitleMargin() {
            return this.i.abx;
        }
        set yAxisTitleMargin(v) {
            this.i.abx = +v;
        }
        /**
         * Gets or sets the left margin of a title on the X-axis
        *
        * Use the `XAxisTitleLeftMargin` property to apply a margin left of the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleAlignment="left"
        *     xAxisTitleLeftMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleLeftMargin="150";
        * ```
        */
        get xAxisTitleLeftMargin() {
            return this.i.abf;
        }
        set xAxisTitleLeftMargin(v) {
            this.i.abf = +v;
        }
        /**
         * Gets or sets the left margin of a title on the Y-axis
        *
        * Use the `YAxisTitleLeftMargin` property to apply a margin left of the y-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleLeftMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleLeftMargin="150";
        * ```
        */
        get yAxisTitleLeftMargin() {
            return this.i.abw;
        }
        set yAxisTitleLeftMargin(v) {
            this.i.abw = +v;
        }
        /**
         * Gets or sets the top margin of a title on the X-axis
        *
        * Use the `XAxisTitleTopMargin` property to apply a margin above the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleTopMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTopMargin="150";
        * ```
        */
        get xAxisTitleTopMargin() {
            return this.i.abi;
        }
        set xAxisTitleTopMargin(v) {
            this.i.abi = +v;
        }
        /**
         * Gets or sets the top margin of a title on the Y-axis
        *
        * Use the `YAxisTitleTopMargin` property to apply a margin above the y-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleAlignment="top"
        *     yAxisTitleTopMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleTopMargin="150";
        * ```
        */
        get yAxisTitleTopMargin() {
            return this.i.abz;
        }
        set yAxisTitleTopMargin(v) {
            this.i.abz = +v;
        }
        /**
         * Gets or sets the right margin of a title on the X-axis
        *
        * Use the `XAxisTitleRightMargin` property to apply a margin right of the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleAlignment="right"
        *     xAxisTitleRightMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleRightMargin="100";
        * ```
        */
        get xAxisTitleRightMargin() {
            return this.i.abh;
        }
        set xAxisTitleRightMargin(v) {
            this.i.abh = +v;
        }
        /**
         * Gets or sets the right margin of a title on the Y-axis
        *
        * Use the `YAxisTitleRightMargin` property to apply a margin right of the y-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleRightMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleRightMargin="150";
        * ```
        */
        get yAxisTitleRightMargin() {
            return this.i.aby;
        }
        set yAxisTitleRightMargin(v) {
            this.i.aby = +v;
        }
        /**
         * Gets or sets the bottom margin of a title on the X-axis
        *
        * Use the `XAxisTitleBottomMargin` property to apply a margin below the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleBottomMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleBottomMargin="150";
        * ```
        */
        get xAxisTitleBottomMargin() {
            return this.i.abe;
        }
        set xAxisTitleBottomMargin(v) {
            this.i.abe = +v;
        }
        /**
         * Gets or sets the bottom margin of a title on the Y-axis
        *
        * Use the `YAxisTitleBottomMargin` property to apply a margin below the y-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleAlignment="bottom"
        *     yAxisTitleBottomMargin="100">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleBottomMargin="150";
        * ```
        */
        get yAxisTitleBottomMargin() {
            return this.i.abv;
        }
        set yAxisTitleBottomMargin(v) {
            this.i.abv = +v;
        }
        /**
         * Gets or sets color of title on the X-axis
        *
        * To change the color of the x-axis title, set the `XAxisTitleTextColor` property to a color string.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleTextColor="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTextColor="green";
        * ```
        */
        get xAxisTitleTextColor() {
            return brushToString(this.i.afz);
        }
        set xAxisTitleTextColor(v) {
            this.i.afz = stringToBrush(v);
        }
        /**
         * Gets or sets color of title on the Y-axis
        *
        * To change the color of the y-axis title, set the `YAxisTitleTextColor` property to a color string.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleTextColor="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleTextColor="green";
        * ```
        */
        get yAxisTitleTextColor() {
            return brushToString(this.i.af6);
        }
        set yAxisTitleTextColor(v) {
            this.i.af6 = stringToBrush(v);
        }
        /**
         * Gets or sets CSS font property for labels on X-axis
        *
        * To change the font of x-axis labels, set the `XAxisLabelTextStyle` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelTextStyle="italic 15px arial, sans-serif">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelTextStyle="italic 15px arial, sans-serif";
        * ```
        */
        get xAxisLabelTextStyle() {
            return this.i.act;
        }
        set xAxisLabelTextStyle(v) {
            this.i.act = v;
        }
        /**
         * Gets or sets CSS font property for labels on Y-axis
        *
        * To change the font of x-axis labels, set the `YAxisLabelTextStyle` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelTextStyle="italic 15px arial, sans-serif">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart. yAxisLabelTextStyle="italic 15px arial, sans-serif";
        * ```
        */
        get yAxisLabelTextStyle() {
            return this.i.ady;
        }
        set yAxisLabelTextStyle(v) {
            this.i.ady = v;
        }
        /**
         * Gets or sets CSS font property for title on X-axis
        *
        * To change the font of the x-axis title, set the `XAxisTitleTextStyle` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleTextStyle="italic 15px arial, sans-serif">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTextStyle="italic 15px arial, sans-serif";
        * ```
        */
        get xAxisTitleTextStyle() {
            return this.i.adh;
        }
        set xAxisTitleTextStyle(v) {
            this.i.adh = v;
        }
        /**
         * Gets or sets CSS font property for title on Y-axis
        *
        * To change the font of the x-axis title, set the `YAxisTitleTextStyle` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="y axis"
        *     yAxisTitleTextStyle="italic 15px arial, sans-serif">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleTextStyle="italic 15px arial, sans-serif";
        * ```
        */
        get yAxisTitleTextStyle() {
            return this.i.aem;
        }
        set yAxisTitleTextStyle(v) {
            this.i.aem = v;
        }
        /**
         * Gets or sets the format for labels along the X-axis.
        */
        get xAxisLabel() {
            return this.i.ab2;
        }
        set xAxisLabel(v) {
            this.i.ab2 = v;
        }
        /**
         * Gets or sets the property or string from which the labels are derived.
        */
        get yAxisLabel() {
            return this.i.ab3;
        }
        set yAxisLabel(v) {
            this.i.ab3 = v;
        }
        /**
         * Gets or sets the color to apply to major gridlines along the X-axis.
        *
        * Set `XAxisMajorStroke` to control the color of major gridlines extending vertically from the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisMajorStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisMajorStroke="green";
        * ```
        */
        get xAxisMajorStroke() {
            return brushToString(this.i.afu);
        }
        set xAxisMajorStroke(v) {
            this.i.afu = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to major gridlines along the Y-axis.
        *
        * Set `YAxisMajorStroke` to control the color of major gridlines extending horizontally from the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisMajorStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisMajorStroke="green";
        * ```
        */
        get yAxisMajorStroke() {
            return brushToString(this.i.af1);
        }
        set yAxisMajorStroke(v) {
            this.i.af1 = stringToBrush(v);
        }
        /**
         * Gets or sets the thickness to apply to major gridlines along the X-axis.
        *
        * Set `XAxisMajorStrokeThickness` to control the thickness of major gridlines extending vertically from the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisMajorStroke="green"
        *     xAxisMajorStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisMajorStrokeThickness="3" ;
        * ```
        */
        get xAxisMajorStrokeThickness() {
            return this.i.aa8;
        }
        set xAxisMajorStrokeThickness(v) {
            this.i.aa8 = +v;
        }
        /**
         * Gets or sets the thickness to apply to major gridlines along the Y-axis.
        *
        * Set `YAxisMajorStrokeThickness` to control the thickness of major gridlines extending horizontally from the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisMajorStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisMajorStrokeThickness="2";
        * ```
        */
        get yAxisMajorStrokeThickness() {
            return this.i.abp;
        }
        set yAxisMajorStrokeThickness(v) {
            this.i.abp = +v;
        }
        /**
         * Gets or sets the thickness to apply to minor gridlines along the X-axis.
        *
        * Set `XAxisMinorStrokeThickness` to control the thickness of minor gridlines extending vertically from the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisMinorStroke="green"
        *     xAxisMinorStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisMinorStrokeThickness="3";
        * ```
        */
        get xAxisMinorStrokeThickness() {
            return this.i.aa9;
        }
        set xAxisMinorStrokeThickness(v) {
            this.i.aa9 = +v;
        }
        /**
         * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
        *
        * Set `YAxisMinorStrokeThickness` to control the thickness of minor gridlines extending horizontally from the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisMinorStroke="green"
        *     yAxisMinorStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisMinorStrokeThickness="3";
        * ```
        */
        get yAxisMinorStrokeThickness() {
            return this.i.abq;
        }
        set yAxisMinorStrokeThickness(v) {
            this.i.abq = +v;
        }
        /**
         * Gets or sets the color to apply to stripes along the X-axis.
        *
        * Set `XAxisStrip` to control the alternating color of stripes extending vertically from the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisStrip="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisStrip="green";
        * ```
        */
        get xAxisStrip() {
            return brushToString(this.i.afw);
        }
        set xAxisStrip(v) {
            this.i.afw = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to stripes along the Y-axis.
        *
        * Set `YAxisStrip` to control the alternating color of stripes extending horizontally from the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisStrip="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisStrip="green";
        * ```
        */
        get yAxisStrip() {
            return brushToString(this.i.af3);
        }
        set yAxisStrip(v) {
            this.i.af3 = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to the X-axis line.
        *
        * Set `XAxisStroke` to control the color of the x-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisStroke="green"";
        * ```
        */
        get xAxisStroke() {
            return brushToString(this.i.afx);
        }
        set xAxisStroke(v) {
            this.i.afx = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to the Y-axis line.
        *
        * Set `YAxisStroke` to control the color of the y-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisStroke="green";
        * ```
        */
        get yAxisStroke() {
            return brushToString(this.i.af4);
        }
        set yAxisStroke(v) {
            this.i.af4 = stringToBrush(v);
        }
        /**
         * Gets or sets the thickness to apply to the X-axis line.
        *
        * Set `XAxisStrokeThickness` to control the thickness of the x-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisStrokeThickness="2";
        * ```
        */
        get xAxisStrokeThickness() {
            return this.i.aba;
        }
        set xAxisStrokeThickness(v) {
            this.i.aba = +v;
        }
        /**
         * Gets or sets the thickness to apply to the Y-axis line.
        *
        * Set `YAxisStrokeThickness` to control the thickness of the y-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisStroke="green"
        *     yAxisStrokeThickness="3">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart. yAxisStrokeThickness="2";
        * ```
        */
        get yAxisStrokeThickness() {
            return this.i.abr;
        }
        set yAxisStrokeThickness(v) {
            this.i.abr = +v;
        }
        /**
         * Gets or sets the length of tickmarks along the X-axis.
        *
        * Set `XAxisTickLength` to control the length of tickmarks extending vertically from the x-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTickLength="23">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTickLength="25";
        * ```
        */
        get xAxisTickLength() {
            return this.i.abb;
        }
        set xAxisTickLength(v) {
            this.i.abb = +v;
        }
        /**
         * Gets or sets the length of tickmarks along the Y-axis.
        *
        * Set `YAxisTickLength` to control the length of tickmarks extending horizontally from the y-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTickLength="23">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTickLength="25";
        * ```
        */
        get yAxisTickLength() {
            return this.i.abs;
        }
        set yAxisTickLength(v) {
            this.i.abs = +v;
        }
        /**
         * Gets or sets the color to apply to tickmarks along the X-axis.
        *
        * Set `XAxisTickStroke` to control the color of tickmarks extending vertically from the x-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTickStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart. xAxisTickStroke="green";
        * ```
        */
        get xAxisTickStroke() {
            return brushToString(this.i.afy);
        }
        set xAxisTickStroke(v) {
            this.i.afy = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to tickmarks along the Y-axis.
        *
        * Set `YAxisTickStroke` to control the color of tickmarks extending horizontally from the y-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTickLength="5"
        *     yAxisTickStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTickStroke="green";
        * ```
        */
        get yAxisTickStroke() {
            return brushToString(this.i.af5);
        }
        set yAxisTickStroke(v) {
            this.i.af5 = stringToBrush(v);
        }
        /**
         * Gets or sets the thickness to apply to tickmarks along the X-axis.
        *
        * Set `XAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the x-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTickStrokeThickness="10">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTickStrokeThickness="20";
        * ```
        */
        get xAxisTickStrokeThickness() {
            return this.i.abc;
        }
        set xAxisTickStrokeThickness(v) {
            this.i.abc = +v;
        }
        /**
         * Gets or sets the thickness to apply to tickmarks along the Y-axis.
        *
        * Set `YAxisTickStrokeThickness` to control the thickness of tickmarks extending vertically from the y-axis line.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTickLength="5"
        *     yAxisTickStrokeThickness="10">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTickStrokeThickness="25";
        * ```
        */
        get yAxisTickStrokeThickness() {
            return this.i.abt;
        }
        set yAxisTickStrokeThickness(v) {
            this.i.abt = +v;
        }
        /**
         * Gets or sets the Text to display below the X-axis.
        *
        * Set `XAxisTitle` to display a label adjacent to the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart. xAxisTitle="x axis";
        * ```
        */
        get xAxisTitle() {
            return this.i.ac8;
        }
        set xAxisTitle(v) {
            this.i.ac8 = v;
        }
        /**
         * Gets or sets the Text to display to the left of the Y-axis.
        *
        * Set `YAxisTitle` to display a label adjacent to the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitle="y axis";
        * ```
        */
        get yAxisTitle() {
            return this.i.aed;
        }
        set yAxisTitle(v) {
            this.i.aed = v;
        }
        /**
         * Gets or sets the color to apply to minor gridlines along the X-axis.
        *
        * Set `XAxisMinorStroke` to control the color of minor gridlines extending vertically from the x-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisMinorStroke="green">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisExtent="250";
        * ```
        */
        get xAxisMinorStroke() {
            return brushToString(this.i.afv);
        }
        set xAxisMinorStroke(v) {
            this.i.afv = stringToBrush(v);
        }
        /**
         * Gets or sets the color to apply to minor gridlines along the Y-axis.
        *
        * Set `YAxisMinorStroke` to control the color of minor gridlines extending horizontally from the y-axis.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisMinorStroke="green"
        *     yAxisMinorStrokeThickness="1">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisMinorStroke="green";
        * ```
        */
        get yAxisMinorStroke() {
            return brushToString(this.i.af2);
        }
        set yAxisMinorStroke(v) {
            this.i.af2 = stringToBrush(v);
        }
        /**
         * Gets or sets the angle of rotation for labels along the X-axis.
        *
        * To control the rotation of labels on the x-axis, set the `XAxisLabelAngle` property to a number of rotational degrees.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelAngle="45">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelAngle="45";
        * ```
        */
        get xAxisLabelAngle() {
            return this.i.aa3;
        }
        set xAxisLabelAngle(v) {
            this.i.aa3 = +v;
        }
        /**
         * Gets or sets the angle of rotation for labels along the Y-axis.
        *
        * To control the rotation of labels on the y-axis, set the `YAxisLabelAngle` property to a number of rotational degrees.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelAngle="45">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelAngle="25";
        * ```
        */
        get yAxisLabelAngle() {
            return this.i.abk;
        }
        set yAxisLabelAngle(v) {
            this.i.abk = +v;
        }
        /**
         * Gets or sets the distance between the X-axis and the bottom of the chart.
        *
        * To allocate space between the x-axis and the edge of the chart, set the `XAxisExtent` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisExtent="250">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisExtent="250";
        * ```
        */
        get xAxisExtent() {
            return this.i.aa2;
        }
        set xAxisExtent(v) {
            this.i.aa2 = +v;
        }
        /**
         * Gets or sets the distance between the Y-axis and the left edge of the chart.
        *
        * To allocate space between the x-axis and the edge of the chart, set the `XAxisExtent` property.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisExtent="250">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisExtent="250";
        * ```
        */
        get yAxisExtent() {
            return this.i.abj;
        }
        set yAxisExtent(v) {
            this.i.abj = +v;
        }
        /**
         * Gets or sets the angle of rotation for the X-axis title.
        *
        * Set `XAxisTitleAngle` to control the rotation of the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleAngle="45">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleAngle="50";
        * ```
        */
        get xAxisTitleAngle() {
            return this.i.abd;
        }
        set xAxisTitleAngle(v) {
            this.i.abd = +v;
        }
        /**
         * Gets or sets the angle of rotation for the Y-axis title.
        *
        * Set `YAxisTitleAngle` to control the rotation of the y-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleAngle="45">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleAngle="25";
        * ```
        */
        get yAxisTitleAngle() {
            return this.i.abu;
        }
        set yAxisTitleAngle(v) {
            this.i.abu = +v;
        }
        /**
         * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
        *
        * To reverse the direction of items along the x-axis, set the `XAxisInverted` property to true.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisInverted="true">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.XAxisInverted="True";
        * ```
        */
        get xAxisInverted() {
            return this.i.zy;
        }
        set xAxisInverted(v) {
            this.i.zy = ensureBool(v);
        }
        /**
         * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
        *
        * You can use `YAxisInverted` to invert the scale of the y axis like this:
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisInverted="true"
        * >
        *
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisInverted="true";
        * ```
        *
        * The default value of `YAxisInverted` is false.
        */
        get yAxisInverted() {
            return this.i.zz;
        }
        set yAxisInverted(v) {
            this.i.zz = ensureBool(v);
        }
        /**
         * Gets or sets Horizontal alignment of the X-axis title.
        *
        * Set `XAxisTitleAlignment` to control the horizontal alignment of the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisTitle="x axis"
        *     xAxisTitleAlignment="right">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleAlignment="right";
        * ```
        */
        get xAxisTitleAlignment() {
            return this.i.ae9;
        }
        set xAxisTitleAlignment(v) {
            this.i.ae9 = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets Vertical alignment of the Y-axis title.
        *
        * Set `YAxisTitleAlignment` to control the vertical alignment of the x-axis title.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisTitle="y axis"
        *     yAxisTitleAlignment="bottom">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisTitleAlignment="bottom";
        * ```
        */
        get yAxisTitleAlignment() {
            return this.i.agc;
        }
        set yAxisTitleAlignment(v) {
            this.i.agc = ensureEnum(VerticalAlignment_$type, v);
        }
        /**
         * Gets or sets Horizontal alignment of X-axis labels.
        */
        get xAxisLabelHorizontalAlignment() {
            return this.i.ae8;
        }
        set xAxisLabelHorizontalAlignment(v) {
            this.i.ae8 = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets Horizontal alignment of Y-axis labels.
        *
        * Set the `YAxisLabelHorizontalAlignment` property to change the horizontal alignment of y-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisExtent="250"
        *     yAxisLabelHorizontalAlignment="left">
        * </igx-category-chart>
        * ```
        */
        get yAxisLabelHorizontalAlignment() {
            return this.i.afa;
        }
        set yAxisLabelHorizontalAlignment(v) {
            this.i.afa = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets Vertical alignment of X-axis labels.
        *
        * Use the `XAxisLabelVerticalAlignment` property to change the vertical position of x-axis labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisExtent="250"
        *     xAxisLabelVerticalAlignment="bottom">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelVerticalAlignment="bottom";
        * ```
        */
        get xAxisLabelVerticalAlignment() {
            return this.i.aga;
        }
        set xAxisLabelVerticalAlignment(v) {
            this.i.aga = ensureEnum(VerticalAlignment_$type, v);
        }
        /**
         * Gets or sets Vertical alignment of Y-axis labels.
        */
        get yAxisLabelVerticalAlignment() {
            return this.i.agb;
        }
        set yAxisLabelVerticalAlignment(v) {
            this.i.agb = ensureEnum(VerticalAlignment_$type, v);
        }
        /**
         * Gets or sets Visibility of X-axis labels.
        *
        * To hide the x-axis labels, set `XAxisLabelVisibility` to collapsed.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     xAxisLabelVisibility="collapsed">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisLabelVisibility="collapsed";
        * ```
        */
        get xAxisLabelVisibility() {
            return this.i.agf;
        }
        set xAxisLabelVisibility(v) {
            this.i.agf = ensureEnum(Visibility_$type, v);
        }
        /**
         * Gets or sets Visibility of Y-axis labels.
        *
        * To hide the y-axis labels, set `YAxisLabelVisibility` to collapsed.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelVisibility="collapsed">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelVisibility="collapsed"";
        * ```
        */
        get yAxisLabelVisibility() {
            return this.i.agg;
        }
        set yAxisLabelVisibility(v) {
            this.i.agg = ensureEnum(Visibility_$type, v);
        }
        /**
         * Gets or sets location of Y-axis labels, relative to the plot area.
        *
        * Set the `YAxisLabelLocation` property to change the location of the y-axis and its labels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     yAxisLabelLocation="outsideRight">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.yAxisLabelLocation="outsideRight";
        * ```
        */
        get yAxisLabelLocation() {
            return this.i.zv;
        }
        set yAxisLabelLocation(v) {
            this.i.zv = ensureEnum(YAxisLabelLocation_$type, v);
        }
        /**
         * Gets or sets location of X-axis labels, relative to the plot area.
        */
        get xAxisLabelLocation() {
            return this.i.zt;
        }
        set xAxisLabelLocation(v) {
            this.i.zt = ensureEnum(XAxisLabelLocation_$type, v);
        }
        /**
         * Gets or sets the format string for the X axis label.
        */
        get xAxisLabelFormat() {
            return this.i.ack;
        }
        set xAxisLabelFormat(v) {
            this.i.ack = v;
        }
        /**
         * Gets or sets the format specifiers to use with the XAxisLabelFormat string.
        */
        get xAxisLabelFormatSpecifiers() {
            return this.i.zi;
        }
        set xAxisLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.zi = v;
        }
        /**
         * Gets or sets the format string for the Y axis label.
        */
        get yAxisLabelFormat() {
            return this.i.adp;
        }
        set yAxisLabelFormat(v) {
            this.i.adp = v;
        }
        /**
         * Gets or sets the format specifiers to use with the YAxisLabelFormat string.
        */
        get yAxisLabelFormatSpecifiers() {
            return this.i.zj;
        }
        set yAxisLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.zj = v;
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.xAxisLabelFormatSpecifiers != null && arrayFindByName(this.xAxisLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.xAxisLabelFormatSpecifiers, name);
            }
            if (this.yAxisLabelFormatSpecifiers != null && arrayFindByName(this.yAxisLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.yAxisLabelFormatSpecifiers, name);
            }
            return null;
        }
        /**
         * Called by the UI framework to provide a UI container for rendering this control.
        
        * @param container  * The UI container element.
        */
        provideContainer(container) {
            this.i.provideContainer(container);
        }
        /**
         * Converts the given visual location to a data value.
        
        * @param unscaledValue  * The x-coordinate of the location to scale.
        */
        getScaledValueX(unscaledValue) {
            let iv = this.i.aay(unscaledValue);
            return (iv);
        }
        /**
         * Converts the given data value to a visual location.
        
        * @param scaledValue  * The data value to un-scale.
        */
        getUnscaledValueX(scaledValue) {
            let iv = this.i.aa0(scaledValue);
            return (iv);
        }
        /**
         * Converts the given visual location to a data value.
        
        * @param unscaledValue  * The y-coordinate of the location to scale.
        */
        getScaledValueY(unscaledValue) {
            let iv = this.i.aaz(unscaledValue);
            return (iv);
        }
        /**
         * Converts the given data value to a visual location.
        
        * @param scaledValue  * The data value to un-scale.
        */
        getUnscaledValueY(scaledValue) {
            let iv = this.i.aa1(scaledValue);
            return (iv);
        }
    }
    IgxXYChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxXYChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxXYChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxXYChartComponent, selector: "ng-component", inputs: { xAxisFormatLabel: "xAxisFormatLabel", yAxisFormatLabel: "yAxisFormatLabel", xAxisLabelLeftMargin: "xAxisLabelLeftMargin", xAxisLabelTopMargin: "xAxisLabelTopMargin", xAxisLabelRightMargin: "xAxisLabelRightMargin", xAxisLabelBottomMargin: "xAxisLabelBottomMargin", yAxisLabelLeftMargin: "yAxisLabelLeftMargin", yAxisLabelTopMargin: "yAxisLabelTopMargin", yAxisLabelRightMargin: "yAxisLabelRightMargin", yAxisLabelBottomMargin: "yAxisLabelBottomMargin", xAxisLabelTextColor: "xAxisLabelTextColor", yAxisLabelTextColor: "yAxisLabelTextColor", actualXAxisLabelTextColor: "actualXAxisLabelTextColor", actualYAxisLabelTextColor: "actualYAxisLabelTextColor", xAxisTitleMargin: "xAxisTitleMargin", yAxisTitleMargin: "yAxisTitleMargin", xAxisTitleLeftMargin: "xAxisTitleLeftMargin", yAxisTitleLeftMargin: "yAxisTitleLeftMargin", xAxisTitleTopMargin: "xAxisTitleTopMargin", yAxisTitleTopMargin: "yAxisTitleTopMargin", xAxisTitleRightMargin: "xAxisTitleRightMargin", yAxisTitleRightMargin: "yAxisTitleRightMargin", xAxisTitleBottomMargin: "xAxisTitleBottomMargin", yAxisTitleBottomMargin: "yAxisTitleBottomMargin", xAxisTitleTextColor: "xAxisTitleTextColor", yAxisTitleTextColor: "yAxisTitleTextColor", xAxisLabelTextStyle: "xAxisLabelTextStyle", yAxisLabelTextStyle: "yAxisLabelTextStyle", xAxisTitleTextStyle: "xAxisTitleTextStyle", yAxisTitleTextStyle: "yAxisTitleTextStyle", xAxisLabel: "xAxisLabel", yAxisLabel: "yAxisLabel", xAxisMajorStroke: "xAxisMajorStroke", yAxisMajorStroke: "yAxisMajorStroke", xAxisMajorStrokeThickness: "xAxisMajorStrokeThickness", yAxisMajorStrokeThickness: "yAxisMajorStrokeThickness", xAxisMinorStrokeThickness: "xAxisMinorStrokeThickness", yAxisMinorStrokeThickness: "yAxisMinorStrokeThickness", xAxisStrip: "xAxisStrip", yAxisStrip: "yAxisStrip", xAxisStroke: "xAxisStroke", yAxisStroke: "yAxisStroke", xAxisStrokeThickness: "xAxisStrokeThickness", yAxisStrokeThickness: "yAxisStrokeThickness", xAxisTickLength: "xAxisTickLength", yAxisTickLength: "yAxisTickLength", xAxisTickStroke: "xAxisTickStroke", yAxisTickStroke: "yAxisTickStroke", xAxisTickStrokeThickness: "xAxisTickStrokeThickness", yAxisTickStrokeThickness: "yAxisTickStrokeThickness", xAxisTitle: "xAxisTitle", yAxisTitle: "yAxisTitle", xAxisMinorStroke: "xAxisMinorStroke", yAxisMinorStroke: "yAxisMinorStroke", xAxisLabelAngle: "xAxisLabelAngle", yAxisLabelAngle: "yAxisLabelAngle", xAxisExtent: "xAxisExtent", yAxisExtent: "yAxisExtent", xAxisTitleAngle: "xAxisTitleAngle", yAxisTitleAngle: "yAxisTitleAngle", xAxisInverted: "xAxisInverted", yAxisInverted: "yAxisInverted", xAxisTitleAlignment: "xAxisTitleAlignment", yAxisTitleAlignment: "yAxisTitleAlignment", xAxisLabelHorizontalAlignment: "xAxisLabelHorizontalAlignment", yAxisLabelHorizontalAlignment: "yAxisLabelHorizontalAlignment", xAxisLabelVerticalAlignment: "xAxisLabelVerticalAlignment", yAxisLabelVerticalAlignment: "yAxisLabelVerticalAlignment", xAxisLabelVisibility: "xAxisLabelVisibility", yAxisLabelVisibility: "yAxisLabelVisibility", yAxisLabelLocation: "yAxisLabelLocation", xAxisLabelLocation: "xAxisLabelLocation", xAxisLabelFormat: "xAxisLabelFormat", xAxisLabelFormatSpecifiers: "xAxisLabelFormatSpecifiers", yAxisLabelFormat: "yAxisLabelFormat", yAxisLabelFormatSpecifiers: "yAxisLabelFormatSpecifiers" }, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
    return IgxXYChartComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxXYChartComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { xAxisFormatLabel: [{
                type: Input
            }], yAxisFormatLabel: [{
                type: Input
            }], xAxisLabelLeftMargin: [{
                type: Input
            }], xAxisLabelTopMargin: [{
                type: Input
            }], xAxisLabelRightMargin: [{
                type: Input
            }], xAxisLabelBottomMargin: [{
                type: Input
            }], yAxisLabelLeftMargin: [{
                type: Input
            }], yAxisLabelTopMargin: [{
                type: Input
            }], yAxisLabelRightMargin: [{
                type: Input
            }], yAxisLabelBottomMargin: [{
                type: Input
            }], xAxisLabelTextColor: [{
                type: Input
            }], yAxisLabelTextColor: [{
                type: Input
            }], actualXAxisLabelTextColor: [{
                type: Input
            }], actualYAxisLabelTextColor: [{
                type: Input
            }], xAxisTitleMargin: [{
                type: Input
            }], yAxisTitleMargin: [{
                type: Input
            }], xAxisTitleLeftMargin: [{
                type: Input
            }], yAxisTitleLeftMargin: [{
                type: Input
            }], xAxisTitleTopMargin: [{
                type: Input
            }], yAxisTitleTopMargin: [{
                type: Input
            }], xAxisTitleRightMargin: [{
                type: Input
            }], yAxisTitleRightMargin: [{
                type: Input
            }], xAxisTitleBottomMargin: [{
                type: Input
            }], yAxisTitleBottomMargin: [{
                type: Input
            }], xAxisTitleTextColor: [{
                type: Input
            }], yAxisTitleTextColor: [{
                type: Input
            }], xAxisLabelTextStyle: [{
                type: Input
            }], yAxisLabelTextStyle: [{
                type: Input
            }], xAxisTitleTextStyle: [{
                type: Input
            }], yAxisTitleTextStyle: [{
                type: Input
            }], xAxisLabel: [{
                type: Input
            }], yAxisLabel: [{
                type: Input
            }], xAxisMajorStroke: [{
                type: Input
            }], yAxisMajorStroke: [{
                type: Input
            }], xAxisMajorStrokeThickness: [{
                type: Input
            }], yAxisMajorStrokeThickness: [{
                type: Input
            }], xAxisMinorStrokeThickness: [{
                type: Input
            }], yAxisMinorStrokeThickness: [{
                type: Input
            }], xAxisStrip: [{
                type: Input
            }], yAxisStrip: [{
                type: Input
            }], xAxisStroke: [{
                type: Input
            }], yAxisStroke: [{
                type: Input
            }], xAxisStrokeThickness: [{
                type: Input
            }], yAxisStrokeThickness: [{
                type: Input
            }], xAxisTickLength: [{
                type: Input
            }], yAxisTickLength: [{
                type: Input
            }], xAxisTickStroke: [{
                type: Input
            }], yAxisTickStroke: [{
                type: Input
            }], xAxisTickStrokeThickness: [{
                type: Input
            }], yAxisTickStrokeThickness: [{
                type: Input
            }], xAxisTitle: [{
                type: Input
            }], yAxisTitle: [{
                type: Input
            }], xAxisMinorStroke: [{
                type: Input
            }], yAxisMinorStroke: [{
                type: Input
            }], xAxisLabelAngle: [{
                type: Input
            }], yAxisLabelAngle: [{
                type: Input
            }], xAxisExtent: [{
                type: Input
            }], yAxisExtent: [{
                type: Input
            }], xAxisTitleAngle: [{
                type: Input
            }], yAxisTitleAngle: [{
                type: Input
            }], xAxisInverted: [{
                type: Input
            }], yAxisInverted: [{
                type: Input
            }], xAxisTitleAlignment: [{
                type: Input
            }], yAxisTitleAlignment: [{
                type: Input
            }], xAxisLabelHorizontalAlignment: [{
                type: Input
            }], yAxisLabelHorizontalAlignment: [{
                type: Input
            }], xAxisLabelVerticalAlignment: [{
                type: Input
            }], yAxisLabelVerticalAlignment: [{
                type: Input
            }], xAxisLabelVisibility: [{
                type: Input
            }], yAxisLabelVisibility: [{
                type: Input
            }], yAxisLabelLocation: [{
                type: Input
            }], xAxisLabelLocation: [{
                type: Input
            }], xAxisLabelFormat: [{
                type: Input
            }], xAxisLabelFormatSpecifiers: [{
                type: Input
            }], yAxisLabelFormat: [{
                type: Input
            }], yAxisLabelFormatSpecifiers: [{
                type: Input
            }] } });
