/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { runOn, delegateRemove, delegateCombine, typeCast, Point_$type, markType, markDep } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { FastItemIntColumn } from "igniteui-angular-core";
import { IFastItemsSource_$type } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { SeriesView } from "./SeriesView";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-angular-core";
import { Color } from "igniteui-angular-core";
import { ColorUtil } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { CustomPaletteColorScale } from "./CustomPaletteColorScale";
import { DataLegendSeriesValueInfo } from "igniteui-angular-core";
import { DataLegendSeriesContext } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { truncate, intDivide } from "igniteui-angular-core";
import { boxArray$1 } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
import { CanvasViewRenderer } from "igniteui-angular-core";
import { Rectangle } from "igniteui-angular-core";
import { stringIsNullOrEmpty } from "igniteui-angular-core";
/**
 * @hidden
 */
export let ScatterAreaSeries = /*@__PURE__*/ (() => {
    class ScatterAreaSeries extends ScatterTriangulationSeries {
        constructor() {
            super();
            this.yl = null;
            this.yq = null;
            this.yj = null;
            this.yk = null;
            FastItemIntColumn.m();
            this.ab = ScatterAreaSeries.$;
        }
        bi() {
            return new ScatterAreaSeries();
        }
        get_es() {
            return true;
        }
        get yn() {
            return this.yl;
        }
        set yn(a) {
            let b = this.yl != a;
            if (b) {
                let c = this.yl;
                if (this.yl != null) {
                    let d = this.yl;
                    d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.y4));
                }
                this.yl = a;
                if (this.yl != null) {
                    let e = this.yl;
                    e.propertyChanged = delegateCombine(e.propertyChanged, runOn(this, this.y4));
                }
                this.raisePropertyChanged("ColorScale", c, this.yl);
            }
        }
        y4(a, b) {
            this.y6();
            this.rn(false);
        }
        ko(a, b) {
            let c = this.nb(b);
            if (c == ScatterAreaSeries.$$p[3]) {
                return this.kp(a, b, this.yz);
            }
            return super.ko(a, b);
        }
        mb(a) {
            let b = this.nb(a);
            if (b == ScatterAreaSeries.$$p[3]) {
                return this.yz;
            }
            return super.mb(a);
        }
        get yr() {
            return this.yq;
        }
        set yr(a) {
            let b = this.yr != a;
            if (b) {
                let c = this.yr;
                this.yq = a;
                this.raisePropertyChanged("ColorColumn", c, this.yr);
            }
        }
        get_g5() {
            return true;
        }
        set_g5(a) {
            super.set_g5(a);
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case ScatterAreaSeries.$$p[1]:
                case ScatterAreaSeries.$$p[2]:
                    this.qb();
                    break;
                case "FastItemsSource":
                    let e = typeCast(IFastItemsSource_$type, c);
                    if (e != null) {
                        e.deregisterColumn(this.yr);
                        this.yr = null;
                    }
                    let f = typeCast(IFastItemsSource_$type, d);
                    if (f != null) {
                        this.yr = this.di(this.yz);
                    }
                    this.rn(this.ge && c != null);
                    break;
                case ScatterAreaSeries.$$p[3]:
                    if (this.dl != null) {
                        this.dl.deregisterColumn(this.yr);
                        this.yr = this.di(this.yz);
                    }
                    this.rn(false);
                    this.qh();
                    break;
                case "ColorScale":
                    this.y6();
                    this.rn(false);
                    this.qh();
                    break;
            }
        }
        ro(a) {
            super.ro(a);
            this.y5(this.ct);
        }
        rm(a, b, c, d, e) {
            super.rm(a, b, c, d, e);
            let f = this.a9.a$j.item(d);
            f.a3(c);
            if (this.d3(f)) {
                return;
            }
            this.y5(f);
        }
        y5(a) {
            if (this.d3(a)) {
                return;
            }
            let b;
            let c;
            let d = a.getViewInfo(c, b);
            c = d.p0;
            b = d.p1;
            let e = a;
            let f = null;
            let g = null;
            let h = this.wq;
            let i = this.wr;
            let j = this.getEffectiveViewport1(a);
            let k = new ScalerParams(1, b, c, h.ch);
            k.c = j;
            let l = new ScalerParams(1, b, c, i.ch);
            l.c = j;
            g = this.yp(a, k, l);
            if (g != null) {
                e.cb(g);
            }
            else {
                e.ce(f);
            }
        }
        y2(a) {
            let b;
            let c;
            let d = a.getViewInfo(b, c);
            b = d.p0;
            c = d.p1;
            let e = truncate(Math.round(b.width)) * truncate(Math.round(b.height));
            let f = a.b3;
            if (f == null || f.length != e) {
                f = new Array(e);
                for (let g = 0; g < e; g++) {
                    f[g] = 0;
                }
            }
            else {
                for (let h = 0; h < e; h++) {
                    f[h] = 0;
                }
            }
            a.b3 = f;
        }
        kl(a) {
            let b = truncate(Math.round(this.wl.width));
            let c = truncate(Math.round(this.wl.height));
            let d = this.ct.b3;
            if (d == null || d.length != (b * c) || this.w0 == null || this.w0.count < 1 || this.w1 == null || this.w1.count < 1 || this.w2 == null || this.w2.count < 1) {
                return null;
            }
            let e = this.c9.v1;
            let f = (a.x - e.left) / e.width;
            let g = (a.y - e.top) / e.height;
            let h = truncate(Math.round(b * f));
            let i = truncate(Math.round(c * g));
            let j = (b * i) + h;
            if (j < 0 || j > d.length - 1) {
                return null;
            }
            let k = d[j] - 1;
            if (k < 0 || k > this.w0.count) {
                return null;
            }
            let l = this.yj.length;
            let m = this.w0.item(k);
            let n = this.w1.item(k);
            let o = this.w2.item(k);
            if ((m >= l) || (n >= l) || (o >= l)) {
                return null;
            }
            let p = (this.yj[m] - this.wl.left) / this.wl.width;
            let q = (this.yk[m] - this.wl.top) / this.wl.height;
            let r = (this.yj[n] - this.wl.left) / this.wl.width;
            let s = (this.yk[n] - this.wl.top) / this.wl.height;
            let t = (this.yj[o] - this.wl.left) / this.wl.width;
            let u = (this.yk[o] - this.wl.top) / this.wl.height;
            let v = Math.pow(p - f, 2) + Math.pow(q - g, 2);
            let w = Math.pow(r - f, 2) + Math.pow(s - g, 2);
            let x = Math.pow(t - f, 2) + Math.pow(u - g, 2);
            if (v < w && v < x) {
                return this.dl.item(m);
            }
            if (w < v && w < x) {
                return this.dl.item(n);
            }
            if (x < v && x < w) {
                return this.dl.item(o);
            }
            return this.dl.item(m);
        }
        yp(a, b, c) {
            let d;
            let e;
            let f = a.getViewInfo(e, d);
            e = f.p0;
            d = f.p1;
            e = new Rect(0, 0, 0, e.width, e.height);
            b = new ScalerParams(0, b.e, e, b.a, b.c);
            c = new ScalerParams(0, c.e, e, c.a, c.c);
            c.b = this.iw();
            let g = a;
            let h = this.wq;
            let i = this.wr;
            let j = this.w0.count;
            let k;
            let xArr_ = this.w3.asArray();
            k = (xArr_.slice(0));
            let l;
            let yArr_ = this.w4.asArray();
            l = (yArr_.slice(0));
            let m = this.yr.asArray();
            let n = this.w0.asArray();
            let o = this.w1.asArray();
            let p = this.w2.asArray();
            this.yj = k;
            this.yk = l;
            h.ho(boxArray$1(k), 0, k.length, b);
            i.ho(boxArray$1(l), 0, l.length, c);
            let q = this.ym;
            let r = g.b5(b.d, q, this.yr);
            let s = e.top;
            let t = e.left;
            let u = e.right;
            let v = e.bottom;
            let w;
            let x;
            let y;
            let z;
            this.y2(g);
            let aa = g.b3;
            let ab = k.length;
            for (let ac = 0; ac < j; ac++) {
                let ad = n[ac];
                let ae = o[ac];
                let af = p[ac];
                if ((ad >= ab) || (ae >= ab) || (af >= ab) || (ad < 0) || (ae < 0) || (af < 0)) {
                    continue;
                }
                let ag = k[ad];
                let ah = l[ad];
                let ai = { $type: Point_$type, x: ag, y: ah };
                let aj = k[ae];
                let ak = l[ae];
                let al = { $type: Point_$type, x: aj, y: ak };
                let am = k[af];
                let an = l[af];
                let ao = { $type: Point_$type, x: am, y: an };
                w = al.y < ao.y ? al.y : ao.y;
                w = ai.y < w ? ai.y : w;
                x = al.y > ao.y ? al.y : ao.y;
                x = ai.y > x ? ai.y : x;
                y = al.x < ao.x ? al.x : ao.x;
                y = ai.x < y ? ai.x : y;
                z = al.x > ao.x ? al.x : ao.x;
                z = ai.x > z ? ai.x : z;
                if (w < v && x > s && y < u && z > t) {
                    let ap = m[ad];
                    let aq = m[ae];
                    let ar = m[af];
                    r.p(ac, aa, ai, al, ao, ap, aq, ar);
                }
            }
            return r;
        }
        ys() {
            let a = new Color();
            let b = this.u3;
            if (b == null) {
                a = ColorUtil.t("#000000");
            }
            else {
                a = ColorUtil.s(b);
            }
            let c = new ObservableColorCollection();
            c.add(ColorUtil.x(a, -0.5));
            c.add(a);
            return c;
        }
        y6() {
            let a = this.yn;
            if (a == null) {
                a = ((() => {
                    let $ret = new CustomPaletteColorScale();
                    $ret.palette = this.ys();
                    $ret.interpolationMode = 2;
                    return $ret;
                })());
            }
            else if (typeCast(CustomPaletteColorScale.$, a) !== null) {
                let b = a;
                if (b.palette == null || b.palette.count == 0) {
                    b.palette = this.ys();
                }
                a = b;
            }
            let c = new ObservableColorCollection();
            if (typeCast(CustomPaletteColorScale.$, a) !== null) {
                c = a.palette;
            }
            else {
                c = this.ys();
            }
            this.ym = a;
        }
        sb() {
            super.sb();
            this.y6();
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.ca();
        }
        cq() {
            return new ScatterAreaSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.yo = typeCast(ScatterAreaSeriesView.$, a);
        }
        y3(a) {
            if (this.yo != null) {
                this.yo.b9(a);
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = { $type: Point_$type, x: a, y: b };
            let d = this.kl(c);
            let e = d == null ? NaN : this.iv(d, "XMemberPath");
            let f = d == null ? NaN : this.iv(d, "YMemberPath");
            let g = d == null ? NaN : this.iv(d, "ColorMemberPath");
            let h = new DataLegendSeriesValueInfo();
            h.l = e;
            h.a = 13;
            h.q = "X";
            h.r = this.xs != null ? this.xs : "X";
            h.s = this.xo != null ? this.xo : "X:";
            h.t = this.xq != null ? this.xq : "";
            let i = new DataLegendSeriesValueInfo();
            i.l = f;
            i.a = 14;
            i.q = "Y";
            i.r = this.x0 != null ? this.x0 : "Y";
            i.s = this.xw != null ? this.xw : "Y:";
            i.t = this.xy != null ? this.xy : "";
            let j = new DataLegendSeriesValueInfo();
            j.l = g;
            j.a = 0;
            j.q = "Value";
            j.r = this.yz != null ? this.yz : "Value";
            j.s = this.yv != null ? this.yv : "V:";
            j.t = this.yx != null ? this.yx : "";
            let k = new DataLegendSeriesContext();
            k.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(h);
                $ret.add(i);
                $ret.add(j);
                return $ret;
            })());
            k.h = this.ma();
            return k;
        }
    }
    ScatterAreaSeries.$t = markType(ScatterAreaSeries, 'ScatterAreaSeries', ScatterTriangulationSeries.$);
    ScatterAreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterAreaSeries, 'raisePropertyChanged', ['ActualColorScale:ym:y7', [ColorScale.$, null], 'ColorMemberAsLegendLabel:yv:y8', [2, null], 'ColorMemberAsLegendUnit:yx:y9', [2, null], 'ColorMemberPath:yz:za', [2, null]]);
    return ScatterAreaSeries;
})();
/**
 * @hidden
 */
export let ScatterAreaSeriesView = /*@__PURE__*/ (() => {
    class ScatterAreaSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.b4 = null;
            this.b0 = null;
            this.b8 = null;
            this.b7 = null;
            this.b6 = null;
            this.b4 = a;
        }
        get b3() {
            return this.b0;
        }
        set b3(a) {
            this.b0 = a;
        }
        cd(a, b) {
        }
        b9(a) {
        }
        b1() {
            return this.b2(true);
        }
        b2(a) {
            this.cc();
            let b = truncate(Math.round(this.bx.left));
            let c = truncate(Math.round(this.bx.left));
            let d = truncate(Math.round(this.bx.width));
            let e = truncate(Math.round(this.bx.height));
            let f = d.toString();
            let g = e.toString();
            if (this.b7.getAttribute("width") != f) {
                this.b7.setAttribute("width", d.toString());
            }
            if (this.b7.getAttribute("height") != g) {
                this.b7.setAttribute("height", e.toString());
            }
            let h = this.b6.h();
            if (a) {
                h.clearRect(0, 0, d, e);
            }
            this.b8 = h.getImageData(0, 0, d, e);
            let imageDataArray_ = this.b8.data;
            return imageDataArray_;
        }
        cc() {
            if (this.b7 == null) {
                this.b7 = this.e.jx.createElement("canvas");
                let a = this.e.jx.get2DCanvasContext(this.b7);
                this.b6 = new RenderingContext(new CanvasViewRenderer(), a);
            }
        }
        b5(a, b, c) {
            let d = truncate(Math.round(this.bx.left));
            let e = truncate(Math.round(this.bx.left));
            let f = truncate(Math.round(this.bx.width));
            let g = truncate(Math.round(this.bx.height));
            return new TriangleRasterizer(this.b1(), b, c.minimum, c.maximum, c, f, g);
        }
        cb(a) {
            this.ce(null);
        }
        ca() {
            if (this.b6 != null) {
                this.b6.l(this.bx.left, this.bx.top, this.bx.width, this.bx.height);
            }
            this.as();
        }
        a8(a, b) {
            super.a8(a, b);
            if (this.b7 == null) {
                return;
            }
            if (b) {
                let c = new Rectangle();
                c.n = this.bx.left;
                c.o = this.bx.top;
                c.width = this.bx.width;
                c.height = this.bx.height;
                c._fill = this.br();
                a.w(c);
            }
            else {
                let d = truncate(Math.round(this.bx.left));
                let e = truncate(Math.round(this.bx.top));
                let f = truncate(Math.round(this.bx.width));
                let g = truncate(Math.round(this.bx.height));
                a.n(this.b7.getNativeElement(), 1, d, e, f, g);
            }
        }
        ce(a) {
            let b = truncate(Math.round(this.bx.left));
            let c = truncate(Math.round(this.bx.left));
            let d = truncate(Math.round(this.bx.width));
            let e = truncate(Math.round(this.bx.height));
            this.cc();
            this.b6.h().putImageData(this.b8, 0, 0);
            this.as();
        }
        an(a) {
            super.an(a);
            let b = truncate(Math.round(this.bx.width));
            let c = truncate(Math.round(this.bx.height));
            let d = this.b2(false);
            if (d == null || d.length == 0) {
                this.e.bb.exportSeriesPixelsData(a, null, b, c);
                return;
            }
            let e = new Array(intDivide(d.length, 4));
            let f;
            for (let g = 0; g < intDivide(d.length, 4); g++) {
                f = g * 4;
                e[g] = d[f + 3] << 24 | d[f] << 16 | d[f + 1] << 8 | d[f + 2];
            }
            this.e.bb.exportSeriesPixelsData(a, e, b, c);
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a9.a$u(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.b4.title + "</span><br/><span>" + "(${item." + this.b4.xs + "}, ${item." + this.b4.x0 + "})</span>";
            if (!stringIsNullOrEmpty(this.b4.yz)) {
                a += "<span>, Value: ${item." + this.b4.yz + "}</span>";
            }
            a += "</div>";
            return a;
        }
    }
    ScatterAreaSeriesView.$t = markType(ScatterAreaSeriesView, 'ScatterAreaSeriesView', SeriesView.$);
    return ScatterAreaSeriesView;
})();
