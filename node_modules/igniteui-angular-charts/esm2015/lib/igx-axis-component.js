/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Output, EventEmitter, Component, Input } from '@angular/core';
import { Visibility_$type } from "igniteui-angular-core";
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { VerticalAlignment_$type } from "igniteui-angular-core";
import { AxisLabelsLocation_$type } from './AxisLabelsLocation';
import { AxisLabelSettings } from './AxisLabelSettings';
import { TitleSettings } from './TitleSettings';
import { AxisTitlePosition_$type } from './AxisTitlePosition';
import { fromDoubleCollection, toDoubleCollection, ensureEnum, arrayFindByName, brushToString, stringToBrush, ensureBool, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-angular-core";
import { delegateCombine } from "igniteui-angular-core";
import { IgxRenderRequestedEventArgs } from './igx-render-requested-event-args';
import { TypeRegistrar } from "igniteui-angular-core";
import { IgxAxisRangeChangedEventArgs } from './igx-axis-range-changed-event-args';
import { IgxAxisAnnotationCollection } from './igx-axis-annotation-collection';
import { AxisAnnotationCollection as AxisAnnotationCollection_internal } from './AxisAnnotationCollection';
import { SyncableObservableCollection$1 } from "igniteui-angular-core";
import { IAxisAnnotation_$type } from './IAxisAnnotation';
import * as i0 from "@angular/core";
/**
 * Represents the base class from which all axis types are derived.
*
* The `Axis` is an array of axis objects.
*
* ```html
* <igx-data-chart
*     [dataSource]="data" >
*     <igx-category-x-axis
* 		label="label"
* 		#xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
* 		#yAxis>
*     </igx-numeric-y-axis>
* </igx-data-chart>
* ```
*/
export let IgxAxisComponent = /*@__PURE__*/ (() => {
    class IgxAxisComponent {
        constructor() {
            this._renderer = null;
            this._annotations = null;
            this.__p = null;
            this._hasUserValues = new Set();
            this._stylingContainer = null;
            this._stylingParent = null;
            this._inStyling = false;
            this._rangeChanged = null;
            this._renderRequested = null;
            this._zoneRunner = null;
            if (this._styling) {
                NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
            }
            this._implementation = this.createImplementation();
            this._implementation.externalObject = this;
            this.onImplementationCreated();
        }
        get i() {
            return this._implementation;
        }
        onImplementationCreated() {
        }
        get axisInternal() {
            return this.i;
        }
        createImplementation() {
            return null;
        }
        ngOnInit() {
        }
        set name(value) {
            //console.log("setting axis name: " + value);
            this.i.name = value;
            //console.log("checking axis anme: " + this.i.name)
        }
        get name() {
            //console.log("getting axis anme: " + this.i.name)
            return this.i.name;
        }
        provideData(data) {
        }
        _provideRenderer(renderer) {
            this._renderer = renderer;
            this._zoneRunner = (act) => renderer._ngZone.run(act);
        }
        static _createFromInternal(internal) {
            if (!internal) {
                return null;
            }
            if (!internal.$type) {
                return null;
            }
            let name = internal.$type.name;
            let externalName = "Igx" + name + "Component";
            if (!TypeRegistrar.isRegistered(externalName)) {
                return null;
            }
            return TypeRegistrar.create(externalName);
        }
        /**
     * Gets or sets if the current axis is of category axis type
    */
        get isCategory() {
            return this.i.cb;
        }
        /**
         * Gets or sets if the current axis is of numeric axis type
        *
        *     Gets or sets if the current axis is of numeric axis type
        */
        get isNumeric() {
            return this.i.cj;
        }
        /**
         * Gets if the current axis is of angular axis type
        */
        get isAngular() {
            return this.i.b9;
        }
        /**
         * Gets or sets if the current axis is of radial axis type
        */
        get isRadial() {
            return this.i.cm;
        }
        /**
         * Gets if the current axis is a vertical axis.
        */
        get isVertical() {
            return this.i.cp;
        }
        /**
         * Gets or sets if the current axis is sorting data items
        */
        get isSorting() {
            return this.i.cn;
        }
        /**
         * Gets or sets if the current axis is of date time axis type
        */
        get isDateTime() {
            return this.i.ce;
        }
        /**
         * Gets or sets if the current axis is of ordinal axis type
        */
        get isOrdinal() {
            return this.i.ck;
        }
        /**
         * Gets or sets if the axis is a piecewise scaling function.
        */
        get isPiecewise() {
            return this.i.cl;
        }
        /**
         * Gets if the current axis is of category date time axis type
        */
        get isCategoryDateTime() {
            return this.i.cc;
        }
        /**
         * Gets if the current axis is a continuous rather than a discrete scale
        */
        get isContinuous() {
            return this.i.cd;
        }
        /**
         * Sets or gets a function which takes an object that produces a formatted label for displaying in the chart.
        *
        * The `FormatLabel` function takes an object that produces a formatted label for displaying in the chart.
        *
        * ```html
        * <igx-data-chart [dataSource]="data" >
        *     <igx-category-x-axis
        * 		name="xAxis"
        * 		FormatLabel="xAxis_FormatLabel" />
        * </igx-data-chart>
        * ```
        */
        get formatLabel() {
            return this.i.au;
        }
        set formatLabel(v) {
            this.i.au = v;
        }
        /**
         * Gets or sets the Title property.
        *
        * Use `Title` property to display the title of the component.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get title() {
            return this.i.g7;
        }
        set title(v) {
            this.i.g7 = v;
        }
        /**
         * Gets or sets the Stroke property.
         * Null is treated as auto. The axis stroke will be displayed or not based on the axis type and series used with it.
        *
        * Use `Stroke` property to set the stroke of the chart.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		stroke="blue"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get stroke() {
            return brushToString(this.i.j0);
        }
        set stroke(v) {
            this.i.j0 = stringToBrush(v);
        }
        /**
         * Gets or sets the effective stroke used for the axis.
        */
        get actualStroke() {
            return brushToString(this.i.jw);
        }
        set actualStroke(v) {
            this.i.jw = stringToBrush(v);
        }
        /**
         * Gets or sets the StrokeThickness property.
        *
        * Use `StrokeThickness` property for the thickness of the stroke.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		strokeThickness= 5
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get strokeThickness() {
            return this.i.fh;
        }
        set strokeThickness(v) {
            this.i.fh = +v;
        }
        /**
         * Gets or sets the StrokeDashArray property.
        */
        get strokeDashArray() {
            return fromDoubleCollection(this.i.j4);
        }
        set strokeDashArray(v) {
            this.i.j4 = toDoubleCollection(v);
        }
        /**
         * Gets or sets the Strip property.
        *
        * Use `Strip` property to set the strip of the chart.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		 strip= "grey"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get strip() {
            return brushToString(this.i.jz);
        }
        set strip(v) {
            this.i.jz = stringToBrush(v);
        }
        /**
         * Gets or sets the MajorStroke property.
         * Null is treated as auto. Major lines will be displayed or not based on the axis type and series used with it.
        *
        * Gets or sets the `MajorStroke` using this property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	   majorStroke="black"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get majorStroke() {
            return brushToString(this.i.jx);
        }
        set majorStroke(v) {
            this.i.jx = stringToBrush(v);
        }
        /**
         * Gets or sets the ActualMajorStroke property.
        *
        * The `ActualMajorStroke` property is used for ActualMajorStroke of the axis.
        */
        get actualMajorStroke() {
            return brushToString(this.i.ju);
        }
        set actualMajorStroke(v) {
            this.i.ju = stringToBrush(v);
        }
        /**
         * Gets or sets the MajorStrokeThickness property.
        *
        * Gets or sets the `MajorStrokeThickness` using this property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	  majorStrokeThickness="1"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get majorStrokeThickness() {
            return this.i.es;
        }
        set majorStrokeThickness(v) {
            this.i.es = +v;
        }
        /**
         * Gets or sets the MajorStrokeDashArray property.
        */
        get majorStrokeDashArray() {
            return fromDoubleCollection(this.i.j2);
        }
        set majorStrokeDashArray(v) {
            this.i.j2 = toDoubleCollection(v);
        }
        /**
         * Gets or sets the MinorStroke property.
        *
        * Gets or sets the minorStroke thickness using `MinorStrokeThickness` property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 	 minorStrokeThickness="1"
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get minorStroke() {
            return brushToString(this.i.jy);
        }
        set minorStroke(v) {
            this.i.jy = stringToBrush(v);
        }
        /**
         * Gets or sets the ActualMinorStroke property.
        *
        * The `ActualMinorStroke` property is used for ActualMinorStroke of the axis.
        */
        get actualMinorStroke() {
            return brushToString(this.i.jv);
        }
        set actualMinorStroke(v) {
            this.i.jv = stringToBrush(v);
        }
        /**
         * Gets or sets the MinorStrokeThickness property.
        */
        get minorStrokeThickness() {
            return this.i.ev;
        }
        set minorStrokeThickness(v) {
            this.i.ev = +v;
        }
        /**
         * Gets or sets the MinorStrokeDashArray property.
        */
        get minorStrokeDashArray() {
            return fromDoubleCollection(this.i.j3);
        }
        set minorStrokeDashArray(v) {
            this.i.j3 = toDoubleCollection(v);
        }
        /**
         * Gets or sets the TickStroke property.
        *
        * Use `TickStroke` property for the color of the tickmarks.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickStroke="black"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get tickStroke() {
            return brushToString(this.i.j1);
        }
        set tickStroke(v) {
            this.i.j1 = stringToBrush(v);
        }
        /**
         * Gets or sets the TickStrokeThickness property.
        *
        * Use `TickStrokeThickness` property for thickness of the stroke tickmarks.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickStrokeThicknes="2"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get tickStrokeThickness() {
            return this.i.fj;
        }
        set tickStrokeThickness(v) {
            this.i.fj = +v;
        }
        /**
         * Gets or sets the TickStrokeDashArray property.
        */
        get tickStrokeDashArray() {
            return fromDoubleCollection(this.i.j5);
        }
        set tickStrokeDashArray(v) {
            this.i.j5 = toDoubleCollection(v);
        }
        /**
         * Gets or sets the TickLength property.
        *
        * Use `TickLength` property for The length of the tickmarks to display for this axis.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		tickLength="5"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get tickLength() {
            return this.i.fi;
        }
        set tickLength(v) {
            this.i.fi = +v;
        }
        /**
         * Gets or sets the IsDisabled property. If true, the axis will not be rendered.
        *
        * The `IsDisabled` property is used to decide if the axis will not be rendered.
        */
        get isDisabled() {
            return this.i.cf;
        }
        set isDisabled(v) {
            this.i.cf = ensureBool(v);
        }
        /**
         * Gets or sets the IsInverted property.
        *
        * Gets or sets the `IsInverted` property.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		isInverted= true
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get isInverted() {
            return this.i.ch;
        }
        set isInverted(v) {
            this.i.ch = ensureBool(v);
        }
        /**
         * Gets or sets whether annotations should be shifted to avoid collision, even if this would result in them appearing where they shouldn't be along the scale.
        */
        get shouldAvoidAnnotationCollisions() {
            return this.i.cu;
        }
        set shouldAvoidAnnotationCollisions(v) {
            this.i.cu = ensureBool(v);
        }
        /**
         * ets or sets whether annotations should be kept in view, even if they aren't positioned where they should appear on the scale.
        */
        get shouldKeepAnnotationsInView() {
            return this.i.cw;
        }
        set shouldKeepAnnotationsInView(v) {
            this.i.cw = ensureBool(v);
        }
        /**
         * Gets or sets whether to use label height measurement when determining the initial number of labels to render, before resolving collisions, etc.
        */
        get usePerLabelHeightMeasurement() {
            return this.i.c5;
        }
        set usePerLabelHeightMeasurement(v) {
            this.i.c5 = ensureBool(v);
        }
        /**
         * Gets or sets whether to use more advanced heuristics when determining the initial number of labels to render, before resolving collisions, etc.
        *
        * Use `UseEnhancedIntervalManagement` property to gets/sets whether to use more advanced heuristics when determining the initial number of labels to render,
        * before resolving collisions, etc.
        */
        get useEnhancedIntervalManagement() {
            return this.i.c4;
        }
        set useEnhancedIntervalManagement(v) {
            this.i.c4 = ensureBool(v);
        }
        /**
         * Gets or sets the minimum desired characters to be displayed for horizontal axes when using advanced label heuristics. -1 will attempt to adjust the interval to precisely fit the horizontal labels.
        *
        * The `EnhancedIntervalMinimumCharacters` property is used to set the mininum desired characters to be displayed for horizontal axes when using advanced label heuristics.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		enhancedIntervalMinimumCharacters=5
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        *
        * </igx-data-chart>
        * ```
        */
        get enhancedIntervalMinimumCharacters() {
            return this.i.fr;
        }
        set enhancedIntervalMinimumCharacters(v) {
            this.i.fr = +v;
        }
        /**
         * Gets or sets whether the enhanced interval management should prefer to show all the labels if possible without collisions for supported types of category axes. This is for use with EnhancedIntervalMinimumCharacters = -1 and axes that have an integral interval.
        */
        get enhancedIntervalPreferMoreCategoryLabels() {
            return this.i.b1;
        }
        set enhancedIntervalPreferMoreCategoryLabels(v) {
            this.i.b1 = ensureBool(v);
        }
        /**
         * Gets or sets the text style to use for axis labels.
        *
        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
        */
        get labelTextStyle() {
            return this.i.az ? this.i.az.textStyle : null;
        }
        set labelTextStyle(v) {
            this.ensureLabelSettings();
            this.i.az.textStyle = v;
        }
        /**
         * The color of the {0}.
        *
        * The `labelTextColor` property Overrides the color of the text used for the axis labels.
        */
        get labelTextColor() {
            return brushToString(this.i.az ? this.i.az.textColor : null);
        }
        set labelTextColor(v) {
            this.ensureLabelSettings();
            this.i.az.textColor = stringToBrush(v);
        }
        /**
         * Gets or sets the location of the {0}.
        *
        * The `Location` property is used for the location.
        */
        get labelLocation() {
            return this.i.az ? this.i.az.location : 0;
        }
        set labelLocation(v) {
            this.ensureLabelSettings();
            this.i.az.location = ensureEnum(AxisLabelsLocation_$type, v);
        }
        /**
         * Gets or sets the visibility of the {0}.
        *
        * The `Visibility` property is used for the visibility of the axis.
        */
        get labelVisibility() {
            return this.i.az ? this.i.az.visibility : 0;
        }
        set labelVisibility(v) {
            this.ensureLabelSettings();
            this.i.az.visibility = ensureEnum(Visibility_$type, v);
        }
        /**
         * Gets or sets whether the first label is displayed when the zoom level is set to 1.
        *
        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
        */
        get labelShowFirstLabel() {
            return this.i.az ? this.i.az.showFirstLabel : false;
        }
        set labelShowFirstLabel(v) {
            this.ensureLabelSettings();
            this.i.az.showFirstLabel = ensureBool(v);
        }
        /**
         * Gets or sets the angle of the {0}.
        *
        * The `Angle` property is used to set the angle of the axis.
        */
        get labelAngle() {
            return this.i.az ? this.i.az.angle : NaN;
        }
        set labelAngle(v) {
            this.ensureLabelSettings();
            this.i.az.angle = +v;
        }
        /**
         * Distance between the axis and the edge of the control.
        *
        * The `Extent` property is used for the extent.
        */
        get labelExtent() {
            return this.i.az ? this.i.az.extent : NaN;
        }
        set labelExtent(v) {
            this.ensureLabelSettings();
            this.i.az.extent = +v;
        }
        /**
         * Margin applied to the left of the {0}.
        *
        * The `labelLeftMargin` property is used for the left margin of the labels.
        */
        get labelLeftMargin() {
            return this.i.az ? this.i.az.leftMargin : NaN;
        }
        set labelLeftMargin(v) {
            this.ensureLabelSettings();
            this.i.az.leftMargin = +v;
        }
        /**
         * Margin applied to the right of the {0}.
        *
        * The `labelRightMargin` property is used for the right margin of the labels.
        */
        get labelRightMargin() {
            return this.i.az ? this.i.az.rightMargin : NaN;
        }
        set labelRightMargin(v) {
            this.ensureLabelSettings();
            this.i.az.rightMargin = +v;
        }
        /**
         * Margin applied above the {0}.
        *
        * The `labelTopMargin` property is used for the top margin of the labels.
        */
        get labelTopMargin() {
            return this.i.az ? this.i.az.topMargin : NaN;
        }
        set labelTopMargin(v) {
            this.ensureLabelSettings();
            this.i.az.topMargin = +v;
        }
        /**
         * Margin applied below the {0}.
        *
        * The `labelBottomMargin` is used to set the bottom margin of the labels.
        */
        get labelBottomMargin() {
            return this.i.az ? this.i.az.bottomMargin : NaN;
        }
        set labelBottomMargin(v) {
            this.ensureLabelSettings();
            this.i.az.bottomMargin = +v;
        }
        /**
         * Gets or sets the horizontal alignment of the {0}.
        *
        * The `HorizontalAlignment` property is used for the horizontal alignment.
        */
        get labelHorizontalAlignment() {
            return this.i.az ? this.i.az.horizontalAlignment : 0;
        }
        set labelHorizontalAlignment(v) {
            this.ensureLabelSettings();
            this.i.az.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets the vertical alignment of the {0}.
        *
        * The `VerticalAlignment` property is used for the vertical alignment of the axis.
        */
        get labelVerticalAlignment() {
            return this.i.az ? this.i.az.verticalAlignment : 0;
        }
        set labelVerticalAlignment(v) {
            this.ensureLabelSettings();
            this.i.az.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);
        }
        ensureLabelSettings() {
            if (this.i.az) {
                return;
            }
            this.i.az = new AxisLabelSettings();
            this.i.az.location = this.i.a0();
            this.i.az.angle = this.i.d6();
            this.i.az.leftMargin = this.i.d8();
            this.i.az.rightMargin = this.i.d9();
            this.i.az.topMargin = this.i.ea();
            this.i.az.bottomMargin = this.i.d7();
            this.i.az.horizontalAlignment = this.i.js();
            this.i.az.verticalAlignment = this.i.kl();
        }
        /**
         * Gets or sets the CrossingAxis property.
        *
        * The `CrossingAxis` property is used for CrossingAxis .
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		crossingAxis= "xAxis"
        * 		crossingValue= 700
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get crossingAxis() {
            const r = this.i.aj;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set crossingAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.aj = null : this.i.aj = v.i;
        }
        /**
         * Gets or sets the CrossingValue property.
        *
        * The `CrossingValue` property is used for CrossingValue of the axis.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data" >
        *     <igx-category-x-axis
        * 		label="label"
        * 		#xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        * 		crossingAxis= "xAxis"
        * 		crossingValue= 700
        * 		#yAxis>
        *     </igx-numeric-y-axis>
        * </igx-data-chart>
        * ```
        */
        get crossingValue() {
            return this.i.fw;
        }
        set crossingValue(v) {
            this.i.fw = v;
        }
        /**
         * Gets or sets the title position relative to the axis labels.
        */
        get titlePosition() {
            return this.i.bf ? this.i.bf.position : 0;
        }
        set titlePosition(v) {
            this.ensureTitleSettings();
            this.i.bf.position = ensureEnum(AxisTitlePosition_$type, v);
        }
        /**
         * Gets or sets the text style to use for axis labels.
        *
        * The `labelTextStyle` property Overrides the style of the text used for the axis labels.
        */
        get titleTextStyle() {
            return this.i.bf ? this.i.bf.textStyle : null;
        }
        set titleTextStyle(v) {
            this.ensureTitleSettings();
            this.i.bf.textStyle = v;
        }
        /**
         * The color of the {0}.
        *
        * The `labelTextColor` property Overrides the color of the text used for the axis labels.
        */
        get titleTextColor() {
            return brushToString(this.i.bf ? this.i.bf.textColor : null);
        }
        set titleTextColor(v) {
            this.ensureTitleSettings();
            this.i.bf.textColor = stringToBrush(v);
        }
        /**
         * Gets or sets the location of the {0}.
        *
        * The `Location` property is used for the location.
        */
        get titleLocation() {
            return this.i.bf ? this.i.bf.location : 0;
        }
        set titleLocation(v) {
            this.ensureTitleSettings();
            this.i.bf.location = ensureEnum(AxisLabelsLocation_$type, v);
        }
        /**
         * Gets or sets the visibility of the {0}.
        *
        * The `Visibility` property is used for the visibility of the axis.
        */
        get titleVisibility() {
            return this.i.bf ? this.i.bf.visibility : 0;
        }
        set titleVisibility(v) {
            this.ensureTitleSettings();
            this.i.bf.visibility = ensureEnum(Visibility_$type, v);
        }
        /**
         * Gets or sets whether the first label is displayed when the zoom level is set to 1.
        *
        * The `ShowFirstLabel` is used to check whether the first label is displayed when the zoom level is set to 1.
        */
        get titleShowFirstLabel() {
            return this.i.bf ? this.i.bf.showFirstLabel : false;
        }
        set titleShowFirstLabel(v) {
            this.ensureTitleSettings();
            this.i.bf.showFirstLabel = ensureBool(v);
        }
        /**
         * Gets or sets the angle of the {0}.
        *
        * The `Angle` property is used to set the angle of the axis.
        */
        get titleAngle() {
            return this.i.bf ? this.i.bf.angle : NaN;
        }
        set titleAngle(v) {
            this.ensureTitleSettings();
            this.i.bf.angle = +v;
        }
        /**
         * Distance between the axis and the edge of the control.
        *
        * The `Extent` property is used for the extent.
        */
        get titleExtent() {
            return this.i.bf ? this.i.bf.extent : NaN;
        }
        set titleExtent(v) {
            this.ensureTitleSettings();
            this.i.bf.extent = +v;
        }
        /**
         * Margin applied to the left of the {0}.
        *
        * The `labelLeftMargin` property is used for the left margin of the labels.
        */
        get titleLeftMargin() {
            return this.i.bf ? this.i.bf.leftMargin : NaN;
        }
        set titleLeftMargin(v) {
            this.ensureTitleSettings();
            this.i.bf.leftMargin = +v;
        }
        /**
         * Margin applied to the right of the {0}.
        *
        * The `labelRightMargin` property is used for the right margin of the labels.
        */
        get titleRightMargin() {
            return this.i.bf ? this.i.bf.rightMargin : NaN;
        }
        set titleRightMargin(v) {
            this.ensureTitleSettings();
            this.i.bf.rightMargin = +v;
        }
        /**
         * Margin applied above the {0}.
        *
        * The `labelTopMargin` property is used for the top margin of the labels.
        */
        get titleTopMargin() {
            return this.i.bf ? this.i.bf.topMargin : NaN;
        }
        set titleTopMargin(v) {
            this.ensureTitleSettings();
            this.i.bf.topMargin = +v;
        }
        /**
         * Margin applied below the {0}.
        *
        * The `labelBottomMargin` is used to set the bottom margin of the labels.
        */
        get titleBottomMargin() {
            return this.i.bf ? this.i.bf.bottomMargin : NaN;
        }
        set titleBottomMargin(v) {
            this.ensureTitleSettings();
            this.i.bf.bottomMargin = +v;
        }
        /**
         * Gets or sets the horizontal alignment of the {0}.
        *
        * The `HorizontalAlignment` property is used for the horizontal alignment.
        */
        get titleHorizontalAlignment() {
            return this.i.bf ? this.i.bf.horizontalAlignment : 0;
        }
        set titleHorizontalAlignment(v) {
            this.ensureTitleSettings();
            this.i.bf.horizontalAlignment = ensureEnum(HorizontalAlignment_$type, v);
        }
        /**
         * Gets or sets the vertical alignment of the {0}.
        *
        * The `VerticalAlignment` property is used for the vertical alignment of the axis.
        */
        get titleVerticalAlignment() {
            return this.i.bf ? this.i.bf.verticalAlignment : 0;
        }
        set titleVerticalAlignment(v) {
            this.ensureTitleSettings();
            this.i.bf.verticalAlignment = ensureEnum(VerticalAlignment_$type, v);
        }
        ensureTitleSettings() {
            if (this.i.bf) {
                return;
            }
            this.i.bf = new TitleSettings();
            this.i.bf.location = this.i.a1();
            this.i.bf.angle = this.i.eb();
            this.i.bf.leftMargin = this.i.ed();
            this.i.bf.rightMargin = this.i.ee();
            this.i.bf.topMargin = this.i.ef();
            this.i.bf.bottomMargin = this.i.ec();
            this.i.bf.horizontalAlignment = this.i.jt();
            this.i.bf.verticalAlignment = this.i.km();
        }
        /**
         * Gets the current annotations for the axis.
        */
        get annotations() {
            if (this._annotations === null) {
                let coll = new IgxAxisAnnotationCollection();
                let innerColl = this.i.an;
                if (!innerColl) {
                    innerColl = new AxisAnnotationCollection_internal();
                }
                this._annotations = coll._fromInner(innerColl);
            }
            return this._annotations;
        }
        set annotations(v) {
            if (this._annotations !== null) {
                this._annotations._setSyncTarget(null);
                this._annotations = null;
            }
            let coll = new IgxAxisAnnotationCollection();
            this._annotations = coll._fromOuter(v);
            let syncColl = new SyncableObservableCollection$1(IAxisAnnotation_$type);
            let innerColl = this.i.an;
            if (!innerColl) {
                innerColl = new AxisAnnotationCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._annotations._setSyncTarget(syncColl);
        }
        /**
         * Gets or sets the coercion methods to use when loading data from data sources.
         * Should be specified before setting any member paths, if being used. Setting it later
         * will not cause data to be re-imported into the chart.
        *
        * The	`coercionMethods` methods is to use when loading data from data sources. Should be specified before setting any member paths, if being used.
        * Setting it later will not cause data to be reimported into the chart.
        */
        get coercionMethods() {
            return this.i.coercionMethods;
        }
        set coercionMethods(v) {
            this.i.coercionMethods = v;
        }
        /**
         * Gets or sets whether the series should expect that properties in its items source may be functions that need to be
         * evaluated to yield their value. This defaults to false, as there will be a subtle performance impact to using this feature.
         * This value must be set before assigning an item's source to take effect.
        */
        get expectFunctions() {
            return this.i.expectFunctions;
        }
        set expectFunctions(v) {
            this.i.expectFunctions = ensureBool(v);
        }
        /**
         * Gets or sets the axis label format string.
        *
        * The `Label` property is used for label mapping of the axis labels.
        */
        get label() {
            return this.i.f1;
        }
        set label(v) {
            this.i.f1 = v;
        }
        /**
         * Gets or sets the label format string to use for the label.
        */
        get labelFormat() {
            return this.i.gh;
        }
        set labelFormat(v) {
            this.i.gh = v;
        }
        /**
         * Gets or sets the format specifiers to use with the LabelFormat string.
        */
        get labelFormatSpecifiers() {
            return this.i.ah;
        }
        set labelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ah = v;
        }
        findByName(name) {
            if (this.findEphemera) {
                if (name && name.indexOf("@@e:") == 0) {
                    return this.findEphemera(name);
                }
            }
            if (this.crossingAxis && this.crossingAxis.name && this.crossingAxis.name == name) {
                return this.crossingAxis;
            }
            if (this.annotations != null && this.annotations.findByName && this.annotations.findByName(name)) {
                return this.annotations.findByName(name);
            }
            if (this.labelFormatSpecifiers != null && arrayFindByName(this.labelFormatSpecifiers, name)) {
                return arrayFindByName(this.labelFormatSpecifiers, name);
            }
            return null;
        }
        get hasUserValues() {
            return this._hasUserValues;
        }
        __m(propertyName) {
            if (!this._inStyling) {
                this._hasUserValues.add(propertyName);
            }
        }
        _styling(container, component, parent) {
            if (this._inStyling) {
                return;
            }
            this._inStyling = true;
            this._stylingContainer = container;
            this._stylingParent = component;
            let genericPrefix = "";
            let typeName = this.i.$type.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            genericPrefix = toSpinal("AxisComponent");
            let additionalPrefixes = [];
            let prefix = toSpinal(typeName);
            additionalPrefixes.push(prefix + "-");
            let b = this.i.$type.baseType;
            while (b && b.name != "Object" &&
                b.name != "Base" &&
                b.name != "Control" &&
                b.Name != "DependencyObject" &&
                b.Name != "FrameworkElement") {
                typeName = b.name;
                if (typeName.indexOf("Xam") === 0) {
                    typeName = typeName.substring(3);
                }
                let basePrefix = toSpinal(typeName);
                additionalPrefixes.push(basePrefix + "-");
                b = b.baseType;
            }
            if (parent) {
                let parentTypeName = parent.i.$type.name;
                if (parentTypeName.indexOf("Xam") === 0) {
                    parentTypeName = parentTypeName.substring(3);
                }
                let parentPrefix = toSpinal(parentTypeName);
                additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
                additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
            }
            initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
            if (this.crossingAxis && this.crossingAxis._styling) {
                this.crossingAxis._styling(container, component, this);
            }
            if (this._otherStyling) {
                this._otherStyling(container, component, parent);
            }
            this._inStyling = false;
        }
        getFullRange() {
            let iv = this.i.ag();
            return (iv);
        }
        /**
         * Renders the axis with no animation.
        
        */
        renderAxis() {
            this.i.h8();
        }
        /**
         * If using enhanced interval management and precise interval fitting, this will reset the cached maximum label width, and recalculate using the current labels.
        
        */
        resetCachedEnhancedInterval() {
            this.i.ic();
        }
        getItemValue(item, memberPathName) {
            let iv = this.i.fy(item, memberPathName);
            return (iv);
        }
        /**
         * Gets the label for a data item.
        
        * @param value  * The unscaled value to get a label for.
        */
        getValueLabel(value) {
            let iv = this.i.ge(value);
            return (iv);
        }
        /**
         * Scales a value from axis space into screen space.
        
        * @param unscaledValue  * The unscaled axis value to scale.
        */
        scaleValue(unscaledValue) {
            let iv = this.i.e5(unscaledValue);
            return (iv);
        }
        /**
         * Occurs when the axis range changes.
        */
        get rangeChanged() {
            if (this._rangeChanged == null) {
                this._rangeChanged = new EventEmitter();
                this.i.rangeChanged = delegateCombine(this.i.rangeChanged, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxAxisRangeChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeRangeChanged) {
                            this.beforeRangeChanged(this, outerArgs);
                        }
                        this._rangeChanged.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._rangeChanged;
        }
        /**
         * This event is raised every time a render has been requested from a series.
        */
        get renderRequested() {
            if (this._renderRequested == null) {
                this._renderRequested = new EventEmitter();
                this.i.renderRequested = delegateCombine(this.i.renderRequested, (o, e) => {
                    this._runInZone(() => {
                        let outerArgs = new IgxRenderRequestedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (this.beforeRenderRequested) {
                            this.beforeRenderRequested(this, outerArgs);
                        }
                        this._renderRequested.emit({
                            sender: this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._renderRequested;
        }
        _runInZone(act) {
            if (this._zoneRunner != null) {
                this._zoneRunner(act);
            }
            else {
                act();
            }
        }
    }
    IgxAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxAxisComponent, selector: "ng-component", inputs: { name: "name", formatLabel: "formatLabel", title: "title", stroke: "stroke", actualStroke: "actualStroke", strokeThickness: "strokeThickness", strokeDashArray: "strokeDashArray", strip: "strip", majorStroke: "majorStroke", actualMajorStroke: "actualMajorStroke", majorStrokeThickness: "majorStrokeThickness", majorStrokeDashArray: "majorStrokeDashArray", minorStroke: "minorStroke", actualMinorStroke: "actualMinorStroke", minorStrokeThickness: "minorStrokeThickness", minorStrokeDashArray: "minorStrokeDashArray", tickStroke: "tickStroke", tickStrokeThickness: "tickStrokeThickness", tickStrokeDashArray: "tickStrokeDashArray", tickLength: "tickLength", isDisabled: "isDisabled", isInverted: "isInverted", shouldAvoidAnnotationCollisions: "shouldAvoidAnnotationCollisions", shouldKeepAnnotationsInView: "shouldKeepAnnotationsInView", usePerLabelHeightMeasurement: "usePerLabelHeightMeasurement", useEnhancedIntervalManagement: "useEnhancedIntervalManagement", enhancedIntervalMinimumCharacters: "enhancedIntervalMinimumCharacters", enhancedIntervalPreferMoreCategoryLabels: "enhancedIntervalPreferMoreCategoryLabels", labelTextStyle: "labelTextStyle", labelTextColor: "labelTextColor", labelLocation: "labelLocation", labelVisibility: "labelVisibility", labelShowFirstLabel: "labelShowFirstLabel", labelAngle: "labelAngle", labelExtent: "labelExtent", labelLeftMargin: "labelLeftMargin", labelRightMargin: "labelRightMargin", labelTopMargin: "labelTopMargin", labelBottomMargin: "labelBottomMargin", labelHorizontalAlignment: "labelHorizontalAlignment", labelVerticalAlignment: "labelVerticalAlignment", crossingAxis: "crossingAxis", crossingValue: "crossingValue", titlePosition: "titlePosition", titleTextStyle: "titleTextStyle", titleTextColor: "titleTextColor", titleLocation: "titleLocation", titleVisibility: "titleVisibility", titleShowFirstLabel: "titleShowFirstLabel", titleAngle: "titleAngle", titleExtent: "titleExtent", titleLeftMargin: "titleLeftMargin", titleRightMargin: "titleRightMargin", titleTopMargin: "titleTopMargin", titleBottomMargin: "titleBottomMargin", titleHorizontalAlignment: "titleHorizontalAlignment", titleVerticalAlignment: "titleVerticalAlignment", annotations: "annotations", coercionMethods: "coercionMethods", expectFunctions: "expectFunctions", label: "label", labelFormat: "labelFormat", labelFormatSpecifiers: "labelFormatSpecifiers" }, outputs: { rangeChanged: "rangeChanged", renderRequested: "renderRequested" }, ngImport: i0, template: ``, isInline: true });
    return IgxAxisComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAxisComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { name: [{
                type: Input
            }], formatLabel: [{
                type: Input
            }], title: [{
                type: Input
            }], stroke: [{
                type: Input
            }], actualStroke: [{
                type: Input
            }], strokeThickness: [{
                type: Input
            }], strokeDashArray: [{
                type: Input
            }], strip: [{
                type: Input
            }], majorStroke: [{
                type: Input
            }], actualMajorStroke: [{
                type: Input
            }], majorStrokeThickness: [{
                type: Input
            }], majorStrokeDashArray: [{
                type: Input
            }], minorStroke: [{
                type: Input
            }], actualMinorStroke: [{
                type: Input
            }], minorStrokeThickness: [{
                type: Input
            }], minorStrokeDashArray: [{
                type: Input
            }], tickStroke: [{
                type: Input
            }], tickStrokeThickness: [{
                type: Input
            }], tickStrokeDashArray: [{
                type: Input
            }], tickLength: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], isInverted: [{
                type: Input
            }], shouldAvoidAnnotationCollisions: [{
                type: Input
            }], shouldKeepAnnotationsInView: [{
                type: Input
            }], usePerLabelHeightMeasurement: [{
                type: Input
            }], useEnhancedIntervalManagement: [{
                type: Input
            }], enhancedIntervalMinimumCharacters: [{
                type: Input
            }], enhancedIntervalPreferMoreCategoryLabels: [{
                type: Input
            }], labelTextStyle: [{
                type: Input
            }], labelTextColor: [{
                type: Input
            }], labelLocation: [{
                type: Input
            }], labelVisibility: [{
                type: Input
            }], labelShowFirstLabel: [{
                type: Input
            }], labelAngle: [{
                type: Input
            }], labelExtent: [{
                type: Input
            }], labelLeftMargin: [{
                type: Input
            }], labelRightMargin: [{
                type: Input
            }], labelTopMargin: [{
                type: Input
            }], labelBottomMargin: [{
                type: Input
            }], labelHorizontalAlignment: [{
                type: Input
            }], labelVerticalAlignment: [{
                type: Input
            }], crossingAxis: [{
                type: Input
            }], crossingValue: [{
                type: Input
            }], titlePosition: [{
                type: Input
            }], titleTextStyle: [{
                type: Input
            }], titleTextColor: [{
                type: Input
            }], titleLocation: [{
                type: Input
            }], titleVisibility: [{
                type: Input
            }], titleShowFirstLabel: [{
                type: Input
            }], titleAngle: [{
                type: Input
            }], titleExtent: [{
                type: Input
            }], titleLeftMargin: [{
                type: Input
            }], titleRightMargin: [{
                type: Input
            }], titleTopMargin: [{
                type: Input
            }], titleBottomMargin: [{
                type: Input
            }], titleHorizontalAlignment: [{
                type: Input
            }], titleVerticalAlignment: [{
                type: Input
            }], annotations: [{
                type: Input
            }], coercionMethods: [{
                type: Input
            }], expectFunctions: [{
                type: Input
            }], label: [{
                type: Input
            }], labelFormat: [{
                type: Input
            }], labelFormatSpecifiers: [{
                type: Input
            }], rangeChanged: [{
                type: Output
            }], renderRequested: [{
                type: Output
            }] } });
