/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-angular-core";
import { Style } from "igniteui-angular-core";
import { markType, markDep, typeCast } from "igniteui-angular-core";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { PropertyMetadata } from "igniteui-angular-core";
import { Defaults } from "./Defaults";
import { Path } from "igniteui-angular-core";
import { stringIsNullOrEmpty } from "igniteui-angular-core";
/**
 * @hidden
 */
export let ScatterPolylineSeries = /*@__PURE__*/ (() => {
    class ScatterPolylineSeries extends ShapeSeriesBase {
        constructor() {
            super();
            this.ab = ScatterPolylineSeries.$;
        }
        bi() {
            return new ScatterPolylineSeries();
        }
        get_fp() {
            return true;
        }
        cq() {
            return new ScatterPolylineSeriesView(this);
        }
        get_xk() {
            return false;
        }
        qx(a) {
            super.qx(a);
            this.zh = a;
        }
        get_xp() {
            return false;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case ScatterPolylineSeries.$$p[0]:
                    this.zh.cy(this.zn);
                    this.rn(false);
                    this.qh();
                    break;
                case ScatterPolylineSeries.$$p[1]:
                    this.zh.cz(this.zi);
                    this.rn(false);
                    this.qh();
                    break;
            }
        }
        y0(a) {
            let b = a;
            b.cy(this.zn);
            b.cz(this.zi);
            super.y0(a);
        }
        a1(a, b) {
            let c = this.zh.c3(a, b, true);
            if (c != null) {
                return c.dataContext;
            }
            return super.a1(a, b);
        }
    }
    ScatterPolylineSeries.$t = markType(ScatterPolylineSeries, 'ScatterPolylineSeries', ShapeSeriesBase.$);
    ScatterPolylineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, ScatterPolylineSeries, 'raisePropertyChanged', ['ShapeStyle:zn:zl', [Style.$, null], 'ShapeStyleSelector:zi:zm', [StyleSelector.$, null]]);
    return ScatterPolylineSeries;
})();
/**
 * @hidden
 */
export let ScatterPolylineSeriesView = /*@__PURE__*/ (() => {
    class ScatterPolylineSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
        }
        au() {
            super.au();
            if (!this.q) {
                this.b6.jn = Defaults.aa;
            }
        }
        c5(a, b) {
            return this.c6(a, b, false);
        }
        cm(a, b, c) {
            super.cm(a, b, c);
            ShapeSeriesViewBase.cl(this, a, b);
        }
        ck(a, b) {
            let c = typeCast(Path.$, a);
            if (c == null) {
                return;
            }
            c.an = b;
        }
        ac(a) {
            let b = super.ac(a);
            b._fill = null;
            return b;
        }
        ab(a) {
            let b = super.ab(a);
            b._fill = null;
            return b;
        }
        cb(a) {
            return a.width >= this.b6.x6 || a.height >= this.b6.x6;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a9.a$u(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.b6.title + "</span><br/>";
            a += "</div>";
            return a;
        }
    }
    ScatterPolylineSeriesView.$t = markType(ScatterPolylineSeriesView, 'ScatterPolylineSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolylineSeriesView;
})();
