import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { ColorScaleInterpolationMode_$type } from "./ColorScaleInterpolationMode";
import { IgxColorScaleComponent } from "./igx-color-scale-component";
import { CustomPaletteColorScale } from "./CustomPaletteColorScale";
import { toColorCollection, fromColorCollection, ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * ColorScale class for selecting a color from a given palette, or interpolating between adjacent colors in that palette.
*/
export let IgxCustomPaletteColorScaleComponent = /*@__PURE__*/ (() => {
    class IgxCustomPaletteColorScaleComponent extends IgxColorScaleComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new CustomPaletteColorScale();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * The lowest value to assign a color.  Any given value less than this value will be made Transparent.
        */
        get minimumValue() {
            return this.i.minimumValue;
        }
        set minimumValue(v) {
            this.i.minimumValue = +v;
        }
        /**
         * The highest value to assign a color.  Any given value greater than this value will be made Transparent.
        */
        get maximumValue() {
            return this.i.maximumValue;
        }
        set maximumValue(v) {
            this.i.maximumValue = +v;
        }
        /**
         * A list of colors to select from or interpolate between.
        */
        get palette() {
            return fromColorCollection(this.i.palette);
        }
        set palette(v) {
            this.i.palette = toColorCollection(v);
        }
        /**
         * The approach to use when getting a color from the palette.
        */
        get interpolationMode() {
            return this.i.interpolationMode;
        }
        set interpolationMode(v) {
            this.i.interpolationMode = ensureEnum(ColorScaleInterpolationMode_$type, v);
        }
        providePalette(colors) {
            this.i.providePalette(colors);
        }
    }
    IgxCustomPaletteColorScaleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxCustomPaletteColorScaleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxCustomPaletteColorScaleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxCustomPaletteColorScaleComponent, selector: "igx-custom-palette-color-scale", inputs: { minimumValue: "minimumValue", maximumValue: "maximumValue", palette: "palette", interpolationMode: "interpolationMode" }, providers: [{ provide: IgxColorScaleComponent, useExisting: forwardRef(() => IgxCustomPaletteColorScaleComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxCustomPaletteColorScaleComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxCustomPaletteColorScaleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-custom-palette-color-scale',
                    template: ``,
                    providers: [{ provide: IgxColorScaleComponent, useExisting: forwardRef(() => IgxCustomPaletteColorScaleComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { minimumValue: [{
                type: Input
            }], maximumValue: [{
                type: Input
            }], palette: [{
                type: Input
            }], interpolationMode: [{
                type: Input
            }] } });
