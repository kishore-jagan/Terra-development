/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { markType } from "igniteui-angular-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { Color } from "igniteui-angular-core";
/**
 * @hidden
 */
export let PointSeries = /*@__PURE__*/ (() => {
    class PointSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ab = PointSeries.$;
        }
        bi() {
            return new PointSeries();
        }
        get_eg() {
            return true;
        }
        cq() {
            return new PointSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.acd = a;
        }
        jj() {
            return 0.7;
        }
        wt() {
            if (this.ws == 0) {
                return 2;
            }
            return super.wt();
        }
        gu(a, b) {
            let c = this.v6(this.wb(a), true, false);
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    PointSeries.$t = markType(PointSeries, 'PointSeries', HorizontalAnchoredCategorySeries.$);
    return PointSeries;
})();
/**
 * @hidden
 */
export let PointSeriesView = /*@__PURE__*/ (() => {
    class PointSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.df = null;
            this.df = a;
        }
        au() {
            super.au();
            if (!this.q) {
                this.b4.w2 = Defaults.e;
            }
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.vv = a;
            this.e.jk = 3;
            this.e.jl = 2;
            this.e.jm = 2;
            this.e.ha = false;
        }
    }
    PointSeriesView.$t = markType(PointSeriesView, 'PointSeriesView', AnchoredCategorySeriesView.$);
    return PointSeriesView;
})();
