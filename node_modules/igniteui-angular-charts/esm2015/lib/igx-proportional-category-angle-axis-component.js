import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { OthersCategoryType_$type } from "igniteui-angular-core";
import { IgxCategoryAngleAxisComponent } from "./igx-category-angle-axis-component";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*/
export let IgxProportionalCategoryAngleAxisComponent = /*@__PURE__*/ (() => {
    class IgxProportionalCategoryAngleAxisComponent extends IgxCategoryAngleAxisComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new ProportionalCategoryAngleAxis();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets the Value mapping property for the axis.
        */
        get valueMemberPath() {
            return this.i.og;
        }
        set valueMemberPath(v) {
            this.i.og = v;
        }
        get normalizationMayContainUnknowns() {
            return this.i.normalizationMayContainUnknowns;
        }
        /**
         * Gets or sets the threshold value that determines if categories are grouped into the Others category.
        */
        get othersCategoryThreshold() {
            return this.i.n7;
        }
        set othersCategoryThreshold(v) {
            this.i.n7 = +v;
        }
        /**
         * Gets or sets whether to use numeric or percent-based threshold value.
        */
        get othersCategoryType() {
            return this.i.nu;
        }
        set othersCategoryType(v) {
            this.i.nu = ensureEnum(OthersCategoryType_$type, v);
        }
        /**
         * Gets or sets the label of the Others slice.
        */
        get othersCategoryText() {
            return this.i.oa;
        }
        set othersCategoryText(v) {
            this.i.oa = v;
        }
        get isPiecewise() {
            return this.i.cl;
        }
        get othersValue() {
            return this.i.othersValue;
        }
        get othersIndex() {
            return this.i.othersIndex;
        }
        get hasOthersCategory() {
            return this.i.hasOthersCategory;
        }
        getItemValue(item, memberPathName) {
            let iv = this.i.fy(item, memberPathName);
            return (iv);
        }
        /**
         * Gets a scaled value inside the viewport.
        
        * @param unscaledValue  * Value to scale.
        * @param p  * Scaler parameters
        */
        getScaledAngle(unscaledAngle) {
            let iv = this.i.getScaledAngle(unscaledAngle);
            return (iv);
        }
        /**
         * Returns an unscaled value from a scaled value based on the amount of data.
        
        * @param scaledValue  * Scaled value.
        * @param p  * Scaler parameters
        */
        getUnscaledAngle(scaledAngle) {
            let iv = this.i.getUnscaledAngle(scaledAngle);
            return (iv);
        }
        isOthersValue(index) {
            let iv = this.i.isOthersValue(index);
            return (iv);
        }
        getValueLabel(value) {
            let iv = this.i.ge(value);
            return (iv);
        }
        getNormalizingValueAtIndex(index, fallbackValue) {
            let iv = this.i.getNormalizingValueAtIndex(index, fallbackValue);
            return (iv);
        }
        getPercentageValue(labelIndex) {
            let iv = this.i.n6(labelIndex);
            return (iv);
        }
    }
    IgxProportionalCategoryAngleAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxProportionalCategoryAngleAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxProportionalCategoryAngleAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxProportionalCategoryAngleAxisComponent, selector: "igx-proportional-category-angle-axis", inputs: { valueMemberPath: "valueMemberPath", othersCategoryThreshold: "othersCategoryThreshold", othersCategoryType: "othersCategoryType", othersCategoryText: "othersCategoryText" }, providers: [{ provide: IgxCategoryAngleAxisComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxProportionalCategoryAngleAxisComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxProportionalCategoryAngleAxisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-proportional-category-angle-axis',
                    template: ``,
                    providers: [{ provide: IgxCategoryAngleAxisComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxProportionalCategoryAngleAxisComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { valueMemberPath: [{
                type: Input
            }], othersCategoryThreshold: [{
                type: Input
            }], othersCategoryType: [{
                type: Input
            }], othersCategoryText: [{
                type: Input
            }] } });
