/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasSingleValueCategory_$type } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline_$type } from "./IHasCategoryTrendline";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager_$type } from "./IAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-angular-core";
import { Point_$type, enumGetBox, typeCast, runOn, delegateCombine, markType, markDep } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap_$type } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { CategoryFrame } from "./CategoryFrame";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { DataLegendSeriesValueInfo } from "igniteui-angular-core";
import { DataLegendSeriesContext } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-angular-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { NumericYAxis } from "./NumericYAxis";
import { ScalerParams } from "./ScalerParams";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { CollisionAvoider } from "./CollisionAvoider";
import { NonCollisionAvoider } from "./NonCollisionAvoider";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { PropertyMetadata } from "igniteui-angular-core";
import { truncate, isNaN_, isInfinity } from "igniteui-angular-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
/**
 * @hidden
 */
export let AnchoredCategorySeries = /*@__PURE__*/ (() => {
    class AnchoredCategorySeries extends CategorySeries {
        constructor() {
            super();
            this.aai = null;
            this.aan = false;
            this.aak = null;
            this.aaf = null;
            this.aau = null;
            this.aat = null;
            this.aam = true;
            this.aao = 0;
            this.aap = 0;
            this.yq = new CategoryFramePreparer(1, this, this.yu, this, this, this.yu.cw);
        }
        get aaj() {
            if (this.aai == null) {
                this.aai = DVContainer.instance.createInstance(IAnchoredCategorySeriesInteractionManager_$type, () => this.dp.n);
            }
            return this.aai;
        }
        getHostReferenceValue() {
            return this.iw();
        }
        mc() {
            return AnchoredCategorySeries.$$p[5];
        }
        cq() {
            let a = new AnchoredCategorySeriesView(this);
            return a;
        }
        qx(a) {
            super.qx(a);
            this.aae = a;
        }
        ko(a, b) {
            let c = this.nb(b);
            if (c == AnchoredCategorySeries.$$p[5]) {
                return this.kp(a, b, this.aa4);
            }
            if (c == AnchoredCategorySeries.$$p[1]) {
                return this.kp(a, b, this.aaw);
            }
            return super.ko(a, b);
        }
        mb(a) {
            let b = this.nb(a);
            if (b == AnchoredCategorySeries.$$p[5]) {
                return this.aa4;
            }
            if (b == AnchoredCategorySeries.$$p[1]) {
                return this.aaw;
            }
            return super.mb(a);
        }
        get valueColumn() {
            return this.aak;
        }
        set valueColumn(a) {
            if (this.aak != a) {
                let b = this.aak;
                this.aak = a;
                if (!this.aan) {
                    this.raisePropertyChanged("ValueColumn", b, this.aak);
                }
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.a = 0;
            c.l = this.i3({ $type: Point_$type, x: a, y: b }, false, false);
            c.r = this.aa4 != null ? this.aa4 : "Value";
            c.q = "Value";
            c.s = this.aa0 != null ? this.aa0 : "V:";
            c.t = this.aa2 != null ? this.aa2 : "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.ma();
            return d;
        }
        get abr() {
            return this.c(AnchoredCategorySeries.abd);
        }
        set abr(a) {
            this.h(AnchoredCategorySeries.abd, a);
        }
        gb(a) {
            let b = new Rect(0, 0, 0, 1, 1);
            let c = this.fetchXAxis();
            let d = this.fetchYAxis();
            let e = this.wf(this.ct);
            let f = c != null ? this.yq.r(typeCast(ICategoryScaler_$type, c), b, b, e) : 0;
            return this.aaj.c$a(this, this.valueColumn, c, d, f, a);
        }
        aab(a, b, c) {
            if (b < a || a < 0 || a > this.valueColumn.count || b < 0 || b > this.valueColumn.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cn;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.dl.item(g);
            }
            return d;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            if (this.aae.c8 && this.aae.c7.g$b(a, b, c, d)) {
                let e = false;
                if (b == "FastItemsSource") {
                    e = this.ge && c != null;
                }
                this.rn(e);
                this.qh();
            }
            switch (b) {
                case AnchoredCategorySeries.$$p[3]:
                case AnchoredCategorySeries.$$p[4]:
                    this.qb();
                    break;
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.valueColumn);
                        this.valueColumn = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.valueColumn = this.di(this.aa4);
                    }
                    let f = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (f != null && !f.c1()) {
                        this.aae.cw.g(this.ib);
                        this.rn(this.ge && c != null);
                    }
                    break;
                case AnchoredCategorySeries.$$p[5]:
                    if (this.dl != null) {
                        this.dl.deregisterColumn(this.valueColumn);
                        this.valueColumn = this.di(this.aa4);
                    }
                    this.aau = this.aa4;
                    break;
                case AnchoredCategorySeries.$$p[1]:
                    this.aat = this.aaw;
                    this.rn(true);
                    break;
                case "ValueColumn":
                    if (this.aae.c8) {
                        this.aae.c7.g$i();
                    }
                    let g = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (g != null && !g.c1()) {
                        this.aae.cw.g(this.ib);
                        this.rn(this.ge && this.d5);
                    }
                    this.abc();
                    this.sh();
                    break;
                case "TrendLineBrush":
                    this.rb(b);
                    break;
                case "ErrorBarSettings":
                    this.rn(false);
                    break;
                case "TrendLineType":
                    this.qh();
                    break;
                case AnchoredCategorySeries.$$p[2]:
                    this.rn(false);
                    break;
            }
        }
        ax(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                return new AxisRange(0, this.valueColumn.count - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
            }
            return null;
        }
        o9(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.aae.cw.g(this.ib);
                    break;
            }
            if (this.aae.c8) {
                this.aae.c7.g$e(a, b, c, d);
            }
            this.abc();
            this.sh();
            if (a == 0 || a == 2 || a == 3 || a == 4) {
                this.aam = true;
            }
            else if (a == 1) {
                for (let e = b; e < b + c; e++) {
                    this.aao += this.valueColumn.item(e);
                }
                this.aap = this.aao / this.valueColumn.count;
            }
        }
        zl() {
            return this.aaq(this.yu);
        }
        aaq(a) {
            let b = 0;
            let c = a.by;
            let d = a.bx;
            let e = this.getEffectiveViewport1(a);
            let f = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!c.isEmpty && !d.isEmpty && f != null) {
                let g = new ScalerParams(0, c, d, f.ch, e);
                if (f.cp) {
                    g.b = this.iw();
                }
                b = f.ek(f.l8, g);
            }
            return b;
        }
        aba(a, b, c) {
            let d = this.aaq(c);
            if (a.count > 0) {
                let e = d;
                a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
            }
        }
        aac(a, b, c, d) {
            return this.aad(a, b, c, d, false);
        }
        aad(a, b, c, d, e) {
            return CategorySeries.yf(a, b, c, d, e);
        }
        f9() {
            return this.highlightedItemsSource != null || this.aaw != null;
        }
        hr() {
            let a = super.hr();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "ValueMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedValueMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.aa6));
                a.add(b);
            }
            return a;
        }
        aa6(a, b) {
            if (this.aaw != null) {
                b.value = this.aaw;
                return;
            }
            b.value = this.aa4;
        }
        hc(a, b, c) {
            let d = super.hc(a, b, c);
            let e = c;
            if (this.valueColumn == null || this.valueColumn.count == 0 || e.cw.d < 1) {
                d = false;
            }
            return d;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.c2();
            if (c.c8) {
                c.c7.g$d();
            }
        }
        z1(a, b) {
            super.z1(a, b);
            this.yr(b).d(a, b);
        }
        z4(a, b) {
            super.z4(a, b);
            let c = typeCast(AnchoredCategorySeriesView.$, b);
            c.b7 = true;
            if (c.c8) {
                c.c7.g$g(a.q);
            }
            if (this.w8()) {
                CategoryMarkerManager.e(this, a.n, b.cz, this.xa);
                this.zy(b, a);
                b.cr();
            }
            this.aa7(a, b);
        }
        rm(a, b, c, d, e) {
            super.rm(a, b, c, d, e);
            let f = this.a9.a$j.item(d);
            let g = f;
            g.cw.g(this.ib);
            f.a3(c);
            if (this.d3(g)) {
                return;
            }
            if (this.aaf == null) {
                this.aaf = new CategoryFrame(3);
            }
            this.aaf.v();
            this.z1(this.aaf, g);
            this.z4(this.aaf, g);
        }
        aa7(a, b) {
        }
        sb() {
            super.sb();
            if (this.index < 0) {
                return;
            }
            this.aae.dc();
            if (this.trendLineBrush != null) {
                this.aae.da();
            }
            else {
                this.aae.c9();
            }
        }
        kv(a, b) {
            if (this.aae.c8 && a == this.aae.c7.g$j) {
                return null;
            }
            return super.kv(a, b);
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.yk()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.yk());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.y0());
        }
        get bucketizer() {
            return this.aae.cw;
        }
        get currentMode2Index() {
            return this.zp();
        }
        provideCollisionDetector() {
            if (this.aag == 1) {
                return new CollisionAvoider();
            }
            return NonCollisionAvoider.b;
        }
        get trendlinePreparer() {
            return this.aae.c8 ? this.aae.c7 : null;
        }
        pv(a) {
            super.pv(a);
            if (this.aae.c8) {
                this.bb.exportTrendlineData(this, a, this.aae.c7.g$j);
            }
        }
        kl(a) {
            let b = this.fetchXAxis();
            let c = this.fetchYAxis();
            return this.aaj.c$b(this, a, this.zm(this.ct), this.valueColumn, b, c, this.aah == 1, (d) => super.kl(d));
        }
        get mayContainUnknowns() {
            return this.valueColumn == null || this.valueColumn.mayContainUnknowns;
        }
        iw() {
            return Series.ix(this.valueColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
        }
        get_aas() {
            return 0;
        }
        get aas() {
            return this.get_aas();
        }
        ay(a) {
            if (a.isEmpty && this.c9 != null) {
                a = this.c9.vl;
            }
            if (this.valueColumn == null) {
                return null;
            }
            let b = this.wd(this.ct);
            let c = this.yk();
            let d = new ScalerParams(0, a, this.c9.v0, c.ch, this.getEffectiveViewport());
            let e = (c.en(b.left, d));
            let f = (c.en(b.right, d));
            if (c.ch) {
                let g = e;
                e = f;
                f = g;
            }
            e -= this.aas;
            f += this.aas;
            let h = null;
            if (c.cn) {
                h = c;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            if (isNaN_(e) || isNaN_(f)) {
                return null;
            }
            e = Math.max(0, Math.min(this.valueColumn.count - 1, e));
            f = Math.max(0, Math.min(this.valueColumn.count - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            if (truncate(e) <= truncate(f)) {
                for (let k = truncate(e); k <= truncate(f); k++) {
                    let l = k;
                    if (h != null) {
                        l = h.i$b._inner[k];
                    }
                    let m = this.valueColumn.item(l);
                    if (this.valueColumn.mayContainUnknowns) {
                        if (isInfinity(m) || isNaN_(m)) {
                            continue;
                        }
                    }
                    i = Math.min(i, m);
                    j = Math.max(j, m);
                }
            }
            let n = new AxisRange(i, j);
            n = this.aw(n, this.y0(), a);
            return n;
        }
        abc() {
            this.ik = this.valueColumn == null || this.valueColumn.count == 0 ? NaN : this.valueColumn.item(this.valueColumn.count - 1);
        }
        abb() {
            if (this.aam) {
                this.aao = 0;
                for (let a = 0; a < this.valueColumn.count; a++) {
                    this.aao += this.valueColumn.item(a);
                }
                this.aap = this.aao / this.valueColumn.count;
                this.aam = false;
            }
        }
        i6(a, b) {
            if (b == null || !b.cj) {
                return NaN;
            }
            let c = this.y0();
            if (b != c) {
                return NaN;
            }
            let d = this.ap(a);
            if (c.cp) {
                return d[1];
            }
            else {
                return d[0];
            }
        }
        ap(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.aam) {
                        this.abb();
                    }
                    b = this.aap;
                    break;
            }
            let c = this.y0();
            if (c.cp) {
                return [NaN, b];
            }
            else {
                return [b, NaN];
            }
        }
        v9(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.aam) {
                        this.abb();
                    }
                    b = this.aap;
                    break;
            }
            if (isNaN_(b)) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let c = this.y0();
            let d = this.getEffectiveViewport1(this.ct);
            let e = new ScalerParams(0, this.ct.by, this.ct.bx, c.ch, d);
            if (c.cp) {
                e.b = this.iw();
            }
            e.c = d;
            if (c.cp) {
                return { $type: Point_$type, x: NaN, y: c.ek(b, e) };
            }
            else {
                return { $type: Point_$type, x: c.ek(b, e), y: NaN };
            }
        }
        wa(a) {
            let b = this.y0();
            let c = this.getEffectiveViewport1(this.ct);
            let d = new ScalerParams(0, this.ct.by, this.ct.bx, b.ch, c);
            if (b.cp) {
                d.b = this.iw();
            }
            d.c = c;
            if (b.cp) {
                return { $type: Point_$type, x: NaN, y: b.ek(a[1], d) };
            }
            else {
                return { $type: Point_$type, x: b.ek(a[0], d), y: NaN };
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    AnchoredCategorySeries.$t = markType(AnchoredCategorySeries, 'AnchoredCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasSingleValueCategory_$type, IHasCategoryTrendline_$type, ITrendLineSeries_$type]);
    AnchoredCategorySeries.abd = DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredCategorySeries.$, new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredCategorySeries.$$p = markDep(DependencyProperty, PropertyMetadata, AnchoredCategorySeries, 'raisePropertyChanged', ['ConsolidatedItemHitTestBehavior:aah:abe', [ConsolidatedItemHitTestBehavior_$type, enumGetBox(ConsolidatedItemHitTestBehavior_$type, 0)], 'HighlightedValueMemberPath:aaw:abf', [2, null], 'MarkerCollisionAvoidance:aag:abg', [CategorySeriesMarkerCollisionAvoidance_$type, enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, 1)], 'ValueMemberAsLegendLabel:aa0:abo', [2, null], 'ValueMemberAsLegendUnit:aa2:abp', [2, null], 'ValueMemberPath:aa4:abq', [2, null], 'TrendLineType::abm', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::abl', [1, 1.5], 'TrendLinePeriod::abk', [1, 7], 'TrendLineBrush::abh', [Brush.$, null], 'TrendLineZIndex:aar:abn', [1, 1001], 'TrendLineDashArray:abs:abi', [DoubleCollection.$], 'TrendLineDashCap:abt:abj', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredCategorySeries;
})();
/**
 * @hidden
 */
export let AnchoredCategoryBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
            this.i = null;
            this.h = null;
            this.j = 0;
            this.i = a;
        }
        getBucketWithoutUnknowns(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 1.7976931348623157E+308;
            let h = -1.7976931348623157E+308;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                g = g < k ? g : k;
                h = h > k ? h : k;
                i = false;
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        getBucket(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 0;
            let h = 0;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                if (!i) {
                    if (!isNaN_(k)) {
                        g = g < k ? g : k;
                        h = h > k ? h : k;
                    }
                }
                else {
                    if (!isNaN_(k)) {
                        g = k;
                        h = k;
                        i = false;
                    }
                }
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        cacheValues() {
            this.j = this.i.c5.valueColumn.count;
            this.h = this.i.c5.valueColumn.asArray();
        }
        unCacheValues() {
            this.h = null;
        }
    }
    AnchoredCategoryBucketCalculator.$t = markType(AnchoredCategoryBucketCalculator, 'AnchoredCategoryBucketCalculator', CategoryBucketCalculator.$);
    return AnchoredCategoryBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredCategorySeriesView = /*@__PURE__*/ (() => {
    class AnchoredCategorySeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c6 = null;
            this.c5 = a;
        }
        get c7() {
            if (this.c6 == null) {
                this.c6 = CategoryTrendLineManagerFactory.a(this.c6, this.e.az(), this.e.sp, this.e, this.e.dp);
            }
            return this.c6;
        }
        set c7(a) {
            this.c6 = a;
        }
        get c8() {
            return this.c6 != null;
        }
        dc() {
            this.c5.abr = null;
        }
        da() {
            this.c5.abr = this.c5.trendLineBrush;
        }
        c9() {
            this.c5.abr = this.c5.u3;
        }
        cx() {
            return new AnchoredCategoryBucketCalculator(this);
        }
        db() {
            this.cw.cacheValues();
        }
        dd() {
            this.cw.unCacheValues();
        }
        de(a) {
            let b = this.cz.item(a);
            return this.cu(b);
        }
        a7(a, b) {
            if (a.d) {
                if (this.c5.trendLineType != 0 && !b) {
                    let c = this.c7.g$j;
                    c.ad = this.c5.trendLineThickness;
                    c._stroke = this.c5.abr;
                    c.ai = this.c5.abs;
                    c.aj = this.c5.abt;
                    a.v(c);
                }
            }
            super.a7(a, b);
        }
        getDefaultTooltipTemplate() {
            return this.c5.aaj.c$c(this.e, this.c5.aa4);
        }
    }
    AnchoredCategorySeriesView.$t = markType(AnchoredCategorySeriesView, 'AnchoredCategorySeriesView', CategorySeriesView.$);
    return AnchoredCategorySeriesView;
})();
