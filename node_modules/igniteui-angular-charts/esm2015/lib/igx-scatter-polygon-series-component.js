import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStyle } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { IgxShapeSeriesBaseComponent } from "./igx-shape-series-base-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterPolygonSeries } from "./ScatterPolygonSeries";
import { ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Series class which renders polygons as Paths based on lists of points in the ItemsSource.
*/
export let IgxScatterPolygonSeriesComponent = /*@__PURE__*/ (() => {
    class IgxScatterPolygonSeriesComponent extends IgxShapeSeriesBaseComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new ScatterPolygonSeries();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the current series shows a polygon shape.
        */
        get isPolygon() {
            return this.i.fo;
        }
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get isMarkerlessDisplayPreferred() {
            return this.i.fj;
        }
        /**
         * Returns whether the current series supports visual markers.
        */
        get hasMarkers() {
            return this.i.hasMarkers;
        }
        get hasVisibleMarkers() {
            return this.i.ej;
        }
        /**
         * The default style to apply to all Shapes in the series.
        */
        get shapeStyle() {
            const r = this.i.aa3;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = new IgxStyle();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set shapeStyle(v) {
            v == null ? this.i.aa3 = null : this.i.aa3 = v.i;
        }
        /**
         * Gets or sets the marker type for the current series object.
         * If the MarkerTemplate property is set, the setting of the MarkerType property will be ignored.
        */
        get markerType() {
            return this.i.zr;
        }
        set markerType(v) {
            this.i.zr = ensureEnum(MarkerType_$type, v);
        }
        /**
         * Gets or sets the MarkerTemplate for the current series object.
        */
        get markerTemplate() {
            return this.i.aai;
        }
        set markerTemplate(v) {
            this.i.aai = v;
        }
        /**
         * Gets or sets thickness of the marker outline
        */
        get markerThickness() {
            return this.i.zz;
        }
        set markerThickness(v) {
            this.i.zz = +v;
        }
        /**
         * Gets the effective marker template for the current series object.
        */
        get actualMarkerTemplate() {
            return this.i.aag;
        }
        set actualMarkerTemplate(v) {
            this.i.aag = v;
        }
        /**
         * Gets or sets the brush that specifies how the current series object's marker interiors are painted.
        */
        get markerBrush() {
            return brushToString(this.i.aaz);
        }
        set markerBrush(v) {
            this.i.aaz = stringToBrush(v);
        }
        /**
         * Gets the effective marker brush for the current series object.
        */
        get actualMarkerBrush() {
            return brushToString(this.i.aax);
        }
        set actualMarkerBrush(v) {
            this.i.aax = stringToBrush(v);
        }
        /**
         * Gets or sets the brush that specifies how the current series object's marker outlines are painted.
        */
        get markerOutline() {
            return brushToString(this.i.aa0);
        }
        set markerOutline(v) {
            this.i.aa0 = stringToBrush(v);
        }
        /**
         * Gets the effective marker outline for the current series object.
        */
        get actualMarkerOutline() {
            return brushToString(this.i.aay);
        }
        set actualMarkerOutline(v) {
            this.i.aay = stringToBrush(v);
        }
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        */
        get markerCollisionAvoidance() {
            return this.i.zi;
        }
        set markerCollisionAvoidance(v) {
            this.i.zi = ensureEnum(CollisionAvoidanceType_$type, v);
        }
        /**
         * Gets or sets whether the marker outline is based on the marker brush of the series rather than the marker outlines collection.
        */
        get markerOutlineMode() {
            return this.i.zp;
        }
        set markerOutlineMode(v) {
            this.i.zp = ensureEnum(MarkerOutlineMode_$type, v);
        }
        /**
         * Gets or sets whether the marker fill is based on the marker outline of the series rather than the marker brushes collection.
        */
        get markerFillMode() {
            return this.i.zl;
        }
        set markerFillMode(v) {
            this.i.zl = ensureEnum(MarkerFillMode_$type, v);
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
                return this.shapeStyle;
            }
            return null;
        }
    }
    IgxScatterPolygonSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolygonSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxScatterPolygonSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxScatterPolygonSeriesComponent, selector: "igx-scatter-polygon-series", inputs: { shapeStyle: "shapeStyle", markerType: "markerType", markerTemplate: "markerTemplate", markerThickness: "markerThickness", actualMarkerTemplate: "actualMarkerTemplate", markerBrush: "markerBrush", actualMarkerBrush: "actualMarkerBrush", markerOutline: "markerOutline", actualMarkerOutline: "actualMarkerOutline", markerCollisionAvoidance: "markerCollisionAvoidance", markerOutlineMode: "markerOutlineMode", markerFillMode: "markerFillMode" }, providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxScatterPolygonSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolygonSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-scatter-polygon-series',
                    template: ``,
                    providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxScatterPolygonSeriesComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { shapeStyle: [{
                type: Input
            }], markerType: [{
                type: Input
            }], markerTemplate: [{
                type: Input
            }], markerThickness: [{
                type: Input
            }], actualMarkerTemplate: [{
                type: Input
            }], markerBrush: [{
                type: Input
            }], actualMarkerBrush: [{
                type: Input
            }], markerOutline: [{
                type: Input
            }], actualMarkerOutline: [{
                type: Input
            }], markerCollisionAvoidance: [{
                type: Input
            }], markerOutlineMode: [{
                type: Input
            }], markerFillMode: [{
                type: Input
            }] } });
