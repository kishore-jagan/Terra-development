/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Control } from "igniteui-angular-core";
import { INotifyPropertyChanged_$type, Base, Type, EventArgs, PropertyChangedEventArgs, IEnumerable_$type, callStaticConstructors, Point_$type, runOn, delegateCombine, fromEnum, delegateRemove, fromEn, typeCast, enumGetBox, EnumUtil, Boolean_$type, Number_$type, typeGetValue, toEnum, String_$type, markType, markDep, PointUtil, TypeRegistrar, Delegate_$type, Array_$type, Date_$type, getInstanceType } from "igniteui-angular-core";
import { ILegendOwner_$type } from "igniteui-angular-core";
import { IInternalLegendOwner_$type } from "igniteui-angular-core";
import { IDataLegendTarget_$type } from "igniteui-angular-core";
import { IToolbarTarget_$type } from "igniteui-angular-core";
import { ISupportsAnimation_$type } from "igniteui-angular-core";
import { SRProvider } from "igniteui-angular-core";
import { DVContainer } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { DoubleAnimator } from "igniteui-angular-core";
import { BrushCollection } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { DependencyObject } from "igniteui-angular-core";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { IChartLegend_$type } from "igniteui-angular-core";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesSelectionMode_$type } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior_$type } from "./SeriesSelectionBehavior";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Brush } from "igniteui-angular-core";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { LegendItemBadgeMode_$type } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { ChartHitTestMode_$type } from "./ChartHitTestMode";
import { InteractionState_$type } from "igniteui-angular-core";
import { WindowResponse_$type } from "./WindowResponse";
import { Visibility_$type } from "igniteui-angular-core";
import { SeriesViewerComponentsFromView } from "./SeriesViewerComponentsFromView";
import { ZoomCoercionMode_$type } from "./ZoomCoercionMode";
import { ModifierKeys_$type } from "igniteui-angular-core";
import { SeriesHighlightedValuesDisplayMode_$type } from "./SeriesHighlightedValuesDisplayMode";
import { DataTemplate } from "igniteui-angular-core";
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { CanvasRenderScheduler } from "igniteui-angular-core";
import { SyncSettings } from "./SyncSettings";
import { PropertyMetadata } from "igniteui-angular-core";
import { ICommandStateChangedListener_$type } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { SeriesViewerComponentsForView } from "./SeriesViewerComponentsForView";
import { VersionQueueHelper } from "igniteui-angular-core";
import { Dictionary$2 } from "igniteui-angular-core";
import { IDataLegend_$type } from "igniteui-angular-core";
import { PropertyUpdatedEventArgs } from "igniteui-angular-core";
import { NotifyCollectionChangedEventArgs } from "igniteui-angular-core";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { Size } from "igniteui-angular-core";
import { FrameworkElement } from "igniteui-angular-core";
import { MouseEventArgs } from "igniteui-angular-core";
import { MouseButtonEventArgs } from "igniteui-angular-core";
import { Tuple$2 } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesViewerManipulationEventArgs } from "./SeriesViewerManipulationEventArgs";
import { IFastItemsSource_$type } from "igniteui-angular-core";
import { HashSet$1 } from "igniteui-angular-core";
import { RectChangedEventArgs } from "igniteui-angular-core";
import { MathUtil } from "igniteui-angular-core";
import { DeviceUtils } from "igniteui-angular-core";
import { RefreshCompletedEventArgs } from "./RefreshCompletedEventArgs";
import { Thickness } from "igniteui-angular-core";
import { AxisTitlePosition_$type } from "./AxisTitlePosition";
import { CoercionInfo } from "./CoercionInfo";
import { FastItemsSource } from "igniteui-angular-core";
import { FontUtil } from "igniteui-angular-core";
import { IDataLegendSeries_$type } from "igniteui-angular-core";
import { CaptureImageSettings } from "igniteui-angular-core";
import { ImageCapturedEventArgs } from "igniteui-angular-core";
import { truncate, intDivide, isNaN_, isInfinity, logBase, log10 } from "igniteui-angular-core";
import { ChartContentType_$type } from "./ChartContentType";
import { defaultDVDateParse, dateNow } from "igniteui-angular-core";
import { stringIsNullOrEmpty, stringEmpty, stringEndsWith, stringStartsWith, stringIsNullOrWhiteSpace } from "igniteui-angular-core";
import { ISchedulableRender_$type } from "igniteui-angular-core";
import { Rectangle } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { Line } from "igniteui-angular-core";
import { RenderingContext } from "igniteui-angular-core";
import { TextBlock } from "igniteui-angular-core";
import { ITileZoomTile_$type } from "./ITileZoomTile";
import { DOMExecutionContext } from "igniteui-angular-core";
import { RenderSurface } from "./RenderSurface";
import { PathFigureCollection } from "igniteui-angular-core";
import { PathFigure } from "igniteui-angular-core";
import { LineSegment } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { GeometryGroup } from "igniteui-angular-core";
import { DataContext } from "igniteui-angular-core";
import { LabelPanelsArrangeState } from "./LabelPanelsArrangeState";
import { MarkerTemplates } from "./MarkerTemplates";
import { DataTemplateRenderInfo } from "igniteui-angular-core";
import { DataTemplateMeasureInfo } from "igniteui-angular-core";
import { AxisLabelsLocation_$type } from "./AxisLabelsLocation";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ArgumentNullException } from "igniteui-angular-core";
import { ActualLegendItemBadgeShape_$type } from "./ActualLegendItemBadgeShape";
import { CanvasViewRenderer } from "igniteui-angular-core";
import { Defaults } from "./Defaults";
import { EllipseGeometry } from "igniteui-angular-core";
import { DataTemplatePassInfo } from "igniteui-angular-core";
import { BrushUtil } from "igniteui-angular-core";
import { LegendItemHelper } from "igniteui-angular-core";
import { DomWrapper_$type } from "igniteui-angular-core";
import { PointerTooltipStyle } from "./PointerTooltipStyle";
import { DefaultPaletteInfo } from "./DefaultPaletteInfo";
import { CssGradientUtil } from "igniteui-angular-core";
import { AxisDefaults } from "./AxisDefaults";
import { BrushUtilCore } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { LinearNumericSnapper } from "./LinearNumericSnapper";
import { AxisAnnotationCollection } from "./AxisAnnotationCollection";
import { VerticalAlignment_$type } from "igniteui-angular-core";
import { Canvas } from "igniteui-angular-core";
import { IFastItemsSourceProvider_$type } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { LabelPosition } from "./LabelPosition";
import { BindingFormatter } from "igniteui-angular-core";
import { LabelFontHeuristics } from "./LabelFontHeuristics";
import { Pool$1 } from "igniteui-angular-core";
import { AxisComponentsFromView } from "./AxisComponentsFromView";
import { FastReflectionHelper } from "igniteui-angular-core";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { RectangleGeometry } from "igniteui-angular-core";
import { PathRenderingInfo } from "./PathRenderingInfo";
import { LineGeometry } from "igniteui-angular-core";
import { RenderRequestedEventArgs } from "./RenderRequestedEventArgs";
import { CategoryMode_$type } from "./CategoryMode";
import { GridMode_$type } from "./GridMode";
import { Panel } from "igniteui-angular-core";
import { UIElement } from "igniteui-angular-core";
import { RectUtil } from "igniteui-angular-core";
import { TickmarkValues } from "./TickmarkValues";
import { TransformGroup } from "igniteui-angular-core";
import { RotateTransform } from "igniteui-angular-core";
import { TranslateTransform } from "igniteui-angular-core";
import { AngleSimplifier } from "igniteui-angular-core";
import { TransformMatrixHelpler } from "igniteui-angular-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { AxisRangeBufferMode_$type } from "./AxisRangeBufferMode";
import { NumericAxisRenderingParameters } from "./NumericAxisRenderingParameters";
import { LogarithmicTickmarkValues } from "./LogarithmicTickmarkValues";
import { LinearTickmarkValues } from "./LinearTickmarkValues";
import { CategoryAxisRenderingParameters } from "./CategoryAxisRenderingParameters";
import { TickmarkValuesInitializationParameters } from "./TickmarkValuesInitializationParameters";
import { NumberAbbreviatorFactory } from "./NumberAbbreviatorFactory";
import { AutomaticSeriesPurpose_$type } from "./AutomaticSeriesPurpose";
import { SeriesMatcher } from "./SeriesMatcher";
import { Stack$1 } from "igniteui-angular-core";
import { RenderValidEventArgs } from "./RenderValidEventArgs";
import { ArrayExtension } from "igniteui-angular-core";
import { SeriesLayerPropertyOverlayValueResolvingEventArgs } from "./SeriesLayerPropertyOverlayValueResolvingEventArgs";
import { PlatformAPIHelper } from "igniteui-angular-core";
import { Marker } from "./Marker";
import { ContentControl } from "igniteui-angular-core";
import { AutoMarginsAndAngleUpdateMode_$type } from "./AutoMarginsAndAngleUpdateMode";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { PolygonUtil } from "igniteui-angular-core";
import { ILegendSeries_$type } from "igniteui-angular-core";
import { ILegendSeriesInternal_$type } from "igniteui-angular-core";
import { ILegendTemplateProvider_$type } from "igniteui-angular-core";
import { PenLineJoin_$type } from "igniteui-angular-core";
import { PenLineCap_$type } from "igniteui-angular-core";
import { Color } from "igniteui-angular-core";
import { SeriesVisibleRangeMode_$type } from "./SeriesVisibleRangeMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { TransitionOutSpeedType_$type } from "./TransitionOutSpeedType";
import { SeriesHitTestMode_$type } from "./SeriesHitTestMode";
import { SeriesComponentsForView } from "./SeriesComponentsForView";
import { Binding } from "igniteui-angular-core";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { FastItemColumn } from "igniteui-angular-core";
import { TransitionOutCompletedEventArgs } from "./TransitionOutCompletedEventArgs";
import { IChartItemLegend_$type } from "igniteui-angular-core";
import { SeriesComponentsFromView } from "./SeriesComponentsFromView";
import { DataLegendSeriesValueInfo } from "igniteui-angular-core";
import { DataLegendSeriesContext } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { Style } from "igniteui-angular-core";
import { FastItemsSourceReference } from "igniteui-angular-core";
import { stringFormat } from "igniteui-angular-core";
import { EasingFunctions } from "igniteui-angular-core";
/**
 * @hidden
 */
export let SeriesViewer = /*@__PURE__*/ (() => {
    class SeriesViewer extends Control {
        constructor() {
            super();
            this._widget = null;
            this.c8 = null;
            this.dr = null;
            this.an = null;
            this.gh = new List$1(ICommandStateChangedListener_$type, 0);
            this._commandCompleted = null;
            this._invalidateActions = null;
            this.a8 = null;
            this.ba = null;
            this.d9 = false;
            this.d8 = false;
            this.c0 = null;
            this.br = new SeriesCollection();
            this.ir = 0;
            this.bz = 0;
            this.b1 = 0;
            this._skipDataCleanup = false;
            this.da = null;
            this.dc = null;
            this.c9 = null;
            this.db = null;
            this.ar = null;
            this.vb = null;
            this.plotAreaMouseLeftButtonDown = null;
            this.plotAreaMouseLeftButtonUp = null;
            this.plotAreaClicked = null;
            this.plotAreaMouseEnter = null;
            this.plotAreaMouseLeave = null;
            this.plotAreaMouseOver = null;
            this.cf = 0;
            this.cg = 0;
            this.bu = 1;
            this.b7 = 1;
            this.b3 = 3;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.i3 = null;
            this.d4 = false;
            this.seriesCursorMouseMove = null;
            this.seriesMouseLeftButtonDown = null;
            this.seriesMouseLeftButtonUp = null;
            this.seriesClick = null;
            this.seriesMouseMove = null;
            this.seriesMouseEnter = null;
            this.seriesMouseLeave = null;
            this.dy = false;
            this.vk = Rect.empty;
            this.vi = Rect.empty;
            this.dw = true;
            this.vh = null;
            this.ee = false;
            this.iq = 30;
            this.fm = false;
            this.eg = false;
            this.cc = new SeriesViewerComponentsForView();
            this.d2 = false;
            this.at = 0;
            this.as = 1;
            this.seriesAnimating = null;
            this.dt = new VersionQueueHelper();
            this.d1 = false;
            this.dz = false;
            this.cv = 0;
            this.d6 = false;
            this.eo = false;
            this.dx = false;
            this.l2 = null;
            this.viewerManipulationStarting = null;
            this.viewerManipulationEnding = null;
            this.ec = false;
            this.d7 = false;
            this.windowRectChanged = null;
            this.sizeChanged = null;
            this.ey = false;
            this.actualWindowRectChanged = null;
            this.gridAreaRectChanged = null;
            this.eq = false;
            this.gt = 0.0001;
            this.gs = 0.0001;
            this._syncChannel = null;
            this.cm = null;
            this.f5 = false;
            this.eb = false;
            this.ex = false;
            this.gb = false;
            this.cq = 1;
            this.v2 = null;
            this.it = 0;
            this.bq = null;
            this.ea = false;
            this.f6 = false;
            this.vj = Rect.empty;
            this._selectedSeriesItems = null;
            this._focusedSeriesItems = null;
            this.selectedSeriesItemsChanged = null;
            this.focusedSeriesItemsChanged = null;
            this.gn = new Date();
            this.ge = false;
            this.refreshCompleted = null;
            this.i8 = null;
            this.i7 = null;
            this.um = null;
            this.ul = null;
            this.g8 = NaN;
            this.g6 = NaN;
            this.g7 = NaN;
            this.g5 = NaN;
            this.g4 = NaN;
            this.g2 = NaN;
            this.g3 = NaN;
            this.g1 = NaN;
            this.i5 = null;
            this.al = null;
            this.am = null;
            this.ak = null;
            this.d5 = false;
            this.dv = false;
            this._syncSettings = null;
            this.destroyed = false;
            this.i2 = null;
            this.gf = new Dictionary$2(String_$type, Base.$, 0);
            this.fk = false;
            this.g9 = NaN;
            this.gy = NaN;
            this.g0 = NaN;
            this.gw = NaN;
            this.gv = 30;
            this.gu = NaN;
            this.d0 = true;
            this.gz = NaN;
            this.gx = NaN;
            this.i6 = null;
            this.gp = 1;
            this.go = NaN;
            this.vg = null;
            this.ew = false;
            this.gq = 0;
            this.gr = 0;
            this.rx = null;
            this.az = null;
            this.e1 = false;
            this.e2 = false;
            this.ez = false;
            this.d3 = false;
            this.is = 0;
            this.em = false;
            this.e5 = false;
            this.seriesDataUpdated = null;
            this.gi = new List$1(IDataLegend_$type, 0);
            this.du = null;
            this.gl = null;
            this.imageCaptured = null;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("DataChartToolbarFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.vg = Rect.empty;
            this.vb = { $type: Point_$type, x: NaN, y: NaN };
            this.gn = dateNow();
            this.e1 = false;
            this.e2 = false;
            this.al = new CanvasRenderScheduler();
            this.al.a = runOn(this, this.m2);
            this.am = new CanvasRenderScheduler();
            this.ak = new CanvasRenderScheduler();
            SeriesViewer.vx = new Rect(0, 0, 0, 1, 1);
            this.syncSettings = ((() => {
                let $ret = new SyncSettings();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = true;
                return $ret;
            })());
            this.c8 = this.c7();
            this.pr(this.c8);
            this.c8.c4();
            this.q8();
            this.nn();
            this.actualSyncLink = new SyncLink();
            this.rf(null, this.actualSyncLink);
            this.ar = new ChartContentManager(this);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.p3(a, b.propertyName, b.oldValue, b.newValue));
            this.selectedSeriesItems = new ChartSelectedItemCollection();
            let a = this.selectedSeriesItems;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.pe));
            let b = this.selectedSeriesItems;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.qv));
            this.focusedSeriesItems = new ChartSelectedItemCollection();
            let c = this.focusedSeriesItems;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.or));
            let d = this.focusedSeriesItems;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.ng));
            let e = this.series;
            e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.qx));
            let f = this.series;
            f.collectionResetting = delegateCombine(f.collectionResetting, runOn(this, this.qy));
            this.db = new DoubleAnimator(0, 1, this.iz);
            this.da = new DoubleAnimator(0, 1, this.iy);
            let g = this.da;
            g.propertyChanged = delegateCombine(g.propertyChanged, runOn(this, this.nm));
            this.dc = new DoubleAnimator(0, 1, this.i0);
            this.c9 = new DoubleAnimator(0, 1, this.iw);
            let h = this.dc;
            h.propertyChanged = delegateCombine(h.propertyChanged, runOn(this, this.qw));
            let i = this.c9;
            i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.nh));
            this.c8.bx();
            this.np();
            this.no();
        }
        get widget() {
            return this._widget;
        }
        set widget(a) {
            this._widget = a;
        }
        static staticInit() {
            SeriesViewer.vx = new Rect(0, 0, 0, 1, 1);
        }
        get ds() {
            if (this.dr == null) {
                this.dr = new SRProvider(this.c8.j.ae);
            }
            return this.dr;
        }
        ao(a) {
            if (this.an == null) {
                this.an = new AutomaticSeriesManager(this);
            }
            return this.an;
        }
        getDesiredToolbarActions() {
            if (!this.fe) {
                return null;
            }
            return this.a9.getDesiredToolbarActions(this);
        }
        onToolCommandExecuting(a) {
            if (!this.fe) {
                return 1;
            }
            return this.a9.onToolCommandExecuting(this, a);
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        addCommandStateChangedListener(a) {
            if (!this.gh.contains(a)) {
                this.gh.add(a);
            }
        }
        removeCommandStateChangedListener(a) {
            if (this.gh.contains(a)) {
                this.gh.remove(a);
            }
        }
        get commandCompleted() {
            return this._commandCompleted;
        }
        set commandCompleted(a) {
            this._commandCompleted = a;
        }
        get invalidateActions() {
            return this._invalidateActions;
        }
        set invalidateActions(a) {
            this._invalidateActions = a;
        }
        ns() {
            if (this.invalidateActions != null) {
                this.invalidateActions();
            }
        }
        get a9() {
            if (this.a8 == null) {
                this.a8 = DVContainer.instance.createInstance(IDataChartToolbarProvider_$type, () => this.ds.n);
                this.a8.container = this.c8.bi;
            }
            return this.a8;
        }
        get fe() {
            return DVContainer.instance.checkLoaded("DataChartToolbarFactoryManager");
        }
        get bb() {
            if (this.ba == null) {
                this.ba = DVContainer.instance.createInstance(ISeriesViewerInteractionManager_$type, () => this.ds.n);
            }
            return this.ba;
        }
        get e7() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        qv(a, b) {
            for (let c = 0; c < this.selectedSeriesItems.count; c++) {
                this.ox(this.selectedSeriesItems._inner[c]);
            }
        }
        ng(a, b) {
            for (let c = 0; c < this.focusedSeriesItems.count; c++) {
                this.ow(this.focusedSeriesItems._inner[c]);
            }
        }
        pe(a, b) {
            if (b.action == 4 && b.newItems == null && b.oldItems == null) {
                return;
            }
            if (this.d9) {
                return;
            }
            if (b.oldItems != null) {
                for (let c = 0; c < b.oldItems.count; c++) {
                    let d = b.oldItems.item(c);
                    this.ox(d);
                }
            }
            if (b.newItems != null) {
                for (let e = 0; e < b.newItems.count; e++) {
                    let f = b.newItems.item(e);
                    f.g(this);
                }
                for (let g = 0; g < b.newItems.count; g++) {
                    let h = b.newItems.item(g);
                    this.oz(h);
                }
            }
            let i = new ChartSelectedItemCollection();
            if (b.oldItems != null) {
                for (let j = 0; j < b.oldItems.count; j++) {
                    i.add(b.oldItems.item(j));
                }
            }
            let k = new ChartSelectedItemCollection();
            if (b.newItems != null) {
                for (let l = 0; l < b.newItems.count; l++) {
                    k.add(b.newItems.item(l));
                }
            }
            let m = this.selectedSeriesItems;
            this.pd(this, new SeriesViewerSelectedSeriesItemsChangedEventArgs(i, k, m));
        }
        or(a, b) {
            if (b.action == 4 && b.newItems == null && b.oldItems == null) {
                return;
            }
            if (this.d8) {
                return;
            }
            if (b.oldItems != null) {
                for (let c = 0; c < b.oldItems.count; c++) {
                    let d = b.oldItems.item(c);
                    this.ow(d);
                }
            }
            if (b.newItems != null) {
                for (let e = 0; e < b.newItems.count; e++) {
                    let f = b.newItems.item(e);
                    this.oy(f);
                }
            }
            let g = new ChartSelectedItemCollection();
            if (b.oldItems != null) {
                for (let h = 0; h < b.oldItems.count; h++) {
                    g.add(b.oldItems.item(h));
                }
            }
            let i = new ChartSelectedItemCollection();
            if (b.newItems != null) {
                for (let j = 0; j < b.newItems.count; j++) {
                    i.add(b.newItems.item(j));
                }
            }
            let k = this.selectedSeriesItems;
            this.oq(this, new SeriesViewerSelectedSeriesItemsChangedEventArgs(g, i, k));
        }
        oy(a) {
            this.ni((b) => {
                let c = a;
                if (c.series != null && c.series != b) {
                    return;
                }
                b.po(c.item);
            });
        }
        ow(a) {
            this.ni((b) => {
                let c = a;
                if (c.series != null && c.series != b) {
                    return;
                }
                b.pm(c.item);
            });
        }
        ni(a) {
            for (let b of fromEnum(this.series)) {
                a(b);
                if (b.isStacked) {
                    b.pz((c) => {
                        a(c);
                        if (c.ee) {
                            c.px((d) => {
                                a(d);
                                return true;
                            });
                        }
                        return true;
                    });
                }
                if (b.ee) {
                    b.px((c) => {
                        a(c);
                        return true;
                    });
                }
            }
        }
        oz(a) {
            this.ni((b) => {
                let c = a;
                if (c.series != null && c.series != b) {
                    return;
                }
                if (c.item == null) {
                    b.pt();
                }
                else {
                    b.pp(c.item);
                }
            });
        }
        ox(a) {
            this.ni((b) => {
                let c = a;
                if (c.series != null && c.series != b) {
                    return;
                }
                if (c.item == null) {
                    b.ps();
                }
                else {
                    b.pn(c.item);
                }
            });
        }
        nn() {
            if (this.c0 != null && this.c1 == null) {
                let a = this.c1;
                a.thumbnailSizeChanged = delegateRemove(a.thumbnailSizeChanged, runOn(this, this.pz));
            }
            if (this.c1 != null) {
                let b = this.c1;
                b.thumbnailSizeChanged = delegateCombine(b.thumbnailSizeChanged, runOn(this, this.pz));
            }
            if (this.i6 != null) {
                this.c1.backgroundImageUri = this.i6;
            }
            if (this.c1 != null) {
                this.c1.initializeScalingRatio(this.hb);
            }
            if (this.c0 == null && this.c1 != null) {
                this.n6();
            }
            this.c0 = this.c1;
        }
        pz(a, b) {
            this.c1.surfaceIsDirty = true;
            for (let c of fromEnum(this.series)) {
                c.gy = true;
            }
        }
        get_fp() {
            return false;
        }
        get fp() {
            return this.get_fp();
        }
        get_fo() {
            return false;
        }
        get fo() {
            return this.get_fo();
        }
        no() {
            this.c8.co();
            if (this.c1 != null) {
                this.c1.initializeScalingRatio(this.hb);
            }
        }
        get series() {
            return this.br;
        }
        qx(a, b) {
            let c = this.em;
            this.em = this.es();
            if (b.oldItems != null) {
                for (let d of fromEn(b.oldItems)) {
                    if (d != null && d.em) {
                        this.ir--;
                        if (this.ir < 0) {
                            this.ir = 0;
                        }
                    }
                    d.c1 = null;
                    d.c9 = null;
                    this.qp(d);
                    this.c8.dy(d);
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    if (e != null && e.em) {
                        this.ir++;
                    }
                    if (!this.c8.aq(e)) {
                        this.q9(e);
                        this.c8.bp(e);
                        e.c9 = this;
                        e.c1 = this.actualSyncLink;
                        e.sj();
                    }
                }
            }
            if (this.em != c && !this.v0.isEmpty) {
                this.p2(this.v0, this.v0);
            }
            this.n5();
            this.oc();
            this.ou();
            this.nz();
        }
        get b0() {
            return this.bz;
        }
        set b0(a) {
            this.bz = a;
        }
        get b2() {
            return this.b1;
        }
        set b2(a) {
            this.b1 = a;
        }
        nq() {
            this.oc();
        }
        oc() {
        }
        get skipDataCleanup() {
            return this._skipDataCleanup;
        }
        set skipDataCleanup(a) {
            this._skipDataCleanup = a;
        }
        qp(a) {
            if (!this.skipDataCleanup) {
                if (typeCast(Series.$, a) !== null) {
                    a.itemsSource = null;
                }
                else if (typeCast(CategoryAxisBase.$, a) !== null) {
                    a.itemsSource = null;
                }
            }
            this.qr(a.name, true);
        }
        get et() {
            return this.ir > 0;
        }
        qy(a, b) {
            this.em = this.es();
            for (let c of fromEnum(this.series)) {
                c.c1 = null;
                c.c9 = null;
                this.qp(c);
                this.c8.dy(c);
            }
            this.ir = 0;
            this.nz();
        }
        nu(a, b, c, d) {
            let e = this.v0;
            let f = e.width;
            let g = e.height;
            let h = 1;
            let i = a / b;
            if (isNaN_(h)) {
                return {
                    p0: a,
                    p1: b
                };
            }
            if (isNaN_(i) || c || d || Math.abs(h - i) > 0.0001) {
                if (c && d) {
                    if (a > b) {
                        b = a / h;
                    }
                    else {
                        a = b * h;
                    }
                }
                else if (c) {
                    b = a / h;
                }
                else {
                    a = b * h;
                }
            }
            if (b > 1) {
                let j = 1 / b;
                b = 1;
                a = a * j;
            }
            if (a > 1) {
                let k = 1 / a;
                a = 1;
                b = b * k;
            }
            return {
                p0: a,
                p1: b
            };
        }
        es() {
            return false;
        }
        get f2() {
            return this.ff;
        }
        get e3() {
            return this.ba != null;
        }
        get el() {
            return this.ba != null;
        }
        get ek() {
            return this.cf != 0 || this.cg != 0;
        }
        get ej() {
            return this.el && this.ek;
        }
        get dj() {
            let a = this.bb.f$e;
            if (a.executionContext == null) {
                a.executionContext = this.c8.l();
            }
            if (a.ensureAnimator == null) {
                a.ensureAnimator = runOn(this, this.nc);
            }
            return a;
        }
        get dk() {
            let a = this.bb.f$f;
            if (a.executionContext == null) {
                a.executionContext = this.c8.l();
            }
            if (a.ensureAnimator == null) {
                a.ensureAnimator = runOn(this, this.nd);
            }
            return a;
        }
        get di() {
            let a = this.bb.f$d;
            if (a.executionContext == null) {
                a.executionContext = this.c8.l();
            }
            if (a.ensureAnimator == null) {
                a.ensureAnimator = runOn(this, this.nb);
            }
            return a;
        }
        get bc() {
            let a = this.bb.f$b;
            if (a.executionContext == null) {
                a.executionContext = this.c8.l();
            }
            if (a.animator == null) {
                a.animator = this.db;
                a.owner = this;
            }
            return a;
        }
        nc() {
            {
                let a = this.da;
                if (!a.f() && a.r > 0) {
                    a.v();
                }
                if (a.r == 0) {
                    let b = this.f8(1);
                    while (b) {
                        b = this.f8(0);
                        b = this.f8(1);
                    }
                }
            }
        }
        nd() {
            {
                let a = this.dc;
                if (!a.f() && a.r > 0) {
                    a.v();
                }
                if (a.r == 0) {
                    let b = this.f9(1);
                    while (b) {
                        b = this.f9(0);
                        b = this.f9(1);
                    }
                }
            }
        }
        nb() {
            {
                let a = this.c9;
                if (!a.f() && a.r > 0) {
                    a.v();
                }
                if (a.r == 0) {
                    let b = this.f7(1);
                    while (b) {
                        b = this.f7(0);
                        b = this.f7(1);
                    }
                }
            }
        }
        nm(a, b) {
            this.f8(this.da.o);
        }
        qw(a, b) {
            this.f9(this.dc.o);
        }
        nh(a, b) {
            this.f7(this.c9.o);
        }
        f8(a) {
            let b = this.dj.tick(a);
            if (a == 1 && b && this.da.r > 0) {
                this.da.v();
            }
            let c = this.dj.dirtyContexts;
            if (this.dj.allDirty) {
                let d = this.series;
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.q0();
                }
            }
            else {
                for (let g = 0; g < c.count; g++) {
                    let h = c._inner[g];
                    h.q0();
                }
            }
            if (!b) {
                this.da.w();
                this.ot();
            }
            return b;
        }
        f9(a) {
            let b = this.dk.tick(a);
            if (a == 1 && b && this.dc.r > 0) {
                this.dc.v();
            }
            let c = this.dk.dirtyContexts;
            if (this.dk.allDirty) {
                let d = this.series;
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.q0();
                }
            }
            else {
                for (let g = 0; g < c.count; g++) {
                    let h = c._inner[g];
                    h.q0();
                }
            }
            if (!b) {
                this.dc.w();
            }
            return b;
        }
        f7(a) {
            let b = this.di.tick(a);
            if (a == 1 && b && this.c9.r > 0) {
                this.c9.v();
            }
            let c = this.di.dirtyContexts;
            if (this.di.allDirty) {
                let d = this.series;
                for (let e = 0; e < d.count; e++) {
                    let f = d._inner[e];
                    f.q0();
                }
            }
            else {
                for (let g = 0; g < c.count; g++) {
                    let h = c._inner[g];
                    h.q0();
                }
            }
            if (!b) {
                this.c9.w();
            }
            return b;
        }
        nl() {
            this.c8.ck();
            this.nk();
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].eq) {
                    this.series._inner[a].p2();
                }
            }
        }
        ur(a) {
            return this.uq(this.ag, a);
        }
        ux(a) {
            return this.uq(this.aj, a);
        }
        uv(a) {
            return this.uq(this.ah, a);
        }
        uw(a) {
            return this.uq(this.ai, a);
        }
        uq(a, b) {
            if (a == null || a.count == 0) {
                return null;
            }
            else {
                return a.item(b % a.count);
            }
        }
        get vc() {
            return this.vb;
        }
        set vc(a) {
            if (PointUtil.notEquals(this.vb, a)) {
                let b = this.vb;
                this.vb = a;
                this.p8("CrosshairPoint", b, this.vb);
            }
        }
        ql() {
        }
        get e6() {
            return this.cz == 1 || this.cz == 2;
        }
        get legend() {
            return this.c(SeriesViewer.sy);
        }
        set legend(a) {
            this.h(SeriesViewer.sy, a);
        }
        get eh() {
            return this.c(SeriesViewer.rz);
        }
        set eh(a) {
            this.h(SeriesViewer.rz, a);
        }
        o9(a, b) {
            this.d4 = false;
            let c = false;
            c = false;
            if (this.c8.k.al) {
                return;
            }
            if (this.plotAreaMouseLeftButtonDown != null) {
                let d = this.bh(a, b, c);
                this.plotAreaMouseLeftButtonDown(this, d);
            }
        }
        bh(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.v0.isEmpty) {
                if (c) {
                    e.x -= this.v0.left;
                    e.y -= this.v0.top;
                }
                else {
                    d.x += this.v0.left;
                    d.y += this.v0.top;
                }
            }
            let f = new PlotAreaMouseButtonEventArgs(this, d, e);
            f.manipulationOccurred = this.d4;
            return f;
        }
        bl(a, b, c) {
            let d = { $type: Point_$type, x: a.x, y: a.y };
            let e = { $type: Point_$type, x: a.x, y: a.y };
            if (!this.v0.isEmpty) {
                if (c) {
                    e.x -= this.v0.left;
                    e.y -= this.v0.top;
                }
                else {
                    d.x += this.v0.left;
                    d.y += this.v0.top;
                }
            }
            let f = new PlotAreaMouseEventArgs(this, d, e);
            return f;
        }
        pa(a, b, c) {
            let d = false;
            d = false;
            if (this.c8.k.al) {
                return;
            }
            if (this.plotAreaMouseLeftButtonUp != null) {
                let e = this.bh(a, b, d);
                this.plotAreaMouseLeftButtonUp(this, e);
            }
            if (!this.d4 && !c) {
                if (this.plotAreaClicked != null) {
                    let f = this.bh(a, b, d);
                    this.plotAreaClicked(this, f);
                }
            }
            this.d4 = false;
        }
        get ff() {
            return this.c(SeriesViewer.su);
        }
        set ff(a) {
            this.h(SeriesViewer.su, a);
        }
        get f1() {
            return this.c(SeriesViewer.tl);
        }
        set f1(a) {
            this.h(SeriesViewer.tl, a);
        }
        get by() {
            return EnumUtil.getEnumValue(SeriesHighlightingMode_$type, this.c(SeriesViewer.sd));
        }
        set by(a) {
            this.h(SeriesViewer.sd, enumGetBox(SeriesHighlightingMode_$type, a));
        }
        get cb() {
            return EnumUtil.getEnumValue(SeriesSelectionMode_$type, this.c(SeriesViewer.ti));
        }
        set cb(a) {
            this.h(SeriesViewer.ti, enumGetBox(SeriesSelectionMode_$type, a));
        }
        get b6() {
            return EnumUtil.getEnumValue(SeriesSelectionBehavior_$type, this.c(SeriesViewer.tg));
        }
        set b6(a) {
            this.h(SeriesViewer.tg, enumGetBox(SeriesSelectionBehavior_$type, a));
        }
        get b9() {
            return EnumUtil.getEnumValue(SeriesSelectionMode_$type, this.c(SeriesViewer.r7));
        }
        set b9(a) {
            this.h(SeriesViewer.r7, enumGetBox(SeriesSelectionMode_$type, a));
        }
        get ch() {
            return EnumUtil.getEnumValue(SeriesViewerScrollbarMode_$type, this.c(SeriesViewer.sl));
        }
        set ch(a) {
            this.h(SeriesViewer.sl, enumGetBox(SeriesViewerScrollbarMode_$type, a));
        }
        get ci() {
            return EnumUtil.getEnumValue(SeriesViewerScrollbarMode_$type, this.c(SeriesViewer.tz));
        }
        set ci(a) {
            this.h(SeriesViewer.tz, enumGetBox(SeriesViewerScrollbarMode_$type, a));
        }
        get ce() {
            return EnumUtil.getEnumValue(SeriesViewerHorizontalScrollbarPosition_$type, this.c(SeriesViewer.sn));
        }
        set ce(a) {
            this.h(SeriesViewer.sn, enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, a));
        }
        get cl() {
            return EnumUtil.getEnumValue(SeriesViewerVerticalScrollbarPosition_$type, this.c(SeriesViewer.t1));
        }
        set cl(a) {
            this.h(SeriesViewer.t1, enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, a));
        }
        get uz() {
            return this.c(SeriesViewer.sh);
        }
        set uz(a) {
            this.h(SeriesViewer.sh, a);
        }
        get u0() {
            return this.c(SeriesViewer.sm);
        }
        set u0(a) {
            this.h(SeriesViewer.sm, a);
        }
        get hr() {
            return this.c(SeriesViewer.sp);
        }
        set hr(a) {
            this.h(SeriesViewer.sp, a);
        }
        get hq() {
            return this.c(SeriesViewer.sk);
        }
        set hq(a) {
            this.h(SeriesViewer.sk, a);
        }
        get hn() {
            return this.c(SeriesViewer.sg);
        }
        set hn(a) {
            this.h(SeriesViewer.sg, a);
        }
        get ho() {
            return this.c(SeriesViewer.si);
        }
        set ho(a) {
            this.h(SeriesViewer.si, a);
        }
        get hp() {
            return this.c(SeriesViewer.sj);
        }
        set hp(a) {
            this.h(SeriesViewer.sj, a);
        }
        get ht() {
            return this.c(SeriesViewer.sr);
        }
        set ht(a) {
            this.h(SeriesViewer.sr, a);
        }
        get hs() {
            return this.c(SeriesViewer.sq);
        }
        set hs(a) {
            this.h(SeriesViewer.sq, a);
        }
        get ev() {
            return this.c(SeriesViewer.so);
        }
        set ev(a) {
            this.h(SeriesViewer.so, a);
        }
        get u9() {
            return this.c(SeriesViewer.tw);
        }
        set u9(a) {
            this.h(SeriesViewer.tw, a);
        }
        get va() {
            return this.c(SeriesViewer.t0);
        }
        set va(a) {
            this.h(SeriesViewer.t0, a);
        }
        get id() {
            return this.c(SeriesViewer.t3);
        }
        set id(a) {
            this.h(SeriesViewer.t3, a);
        }
        get ic() {
            return this.c(SeriesViewer.ty);
        }
        set ic(a) {
            this.h(SeriesViewer.ty, a);
        }
        get ia() {
            return this.c(SeriesViewer.tv);
        }
        set ia(a) {
            this.h(SeriesViewer.tv, a);
        }
        get ih() {
            return this.c(SeriesViewer.t6);
        }
        set ih(a) {
            this.h(SeriesViewer.t6, a);
        }
        m2() {
            if (!this.al.g && !this.al.f && !this.c8.a.g && !this.c8.a.f) {
                this.pc();
            }
        }
        pc() {
            this.m0();
        }
        get ib() {
            return this.c(SeriesViewer.tx);
        }
        set ib(a) {
            this.h(SeriesViewer.tx, a);
        }
        get ig() {
            return this.c(SeriesViewer.t5);
        }
        set ig(a) {
            this.h(SeriesViewer.t5, a);
        }
        get ie() {
            return this.c(SeriesViewer.t4);
        }
        set ie(a) {
            this.h(SeriesViewer.t4, a);
        }
        get gd() {
            return this.c(SeriesViewer.t2);
        }
        set gd(a) {
            this.h(SeriesViewer.t2, a);
        }
        ca() {
            if (this.cb == 0) {
                return 1;
            }
            return this.cb;
        }
        b5() {
            if (this.b6 == 0) {
                return 3;
            }
            return this.b6;
        }
        bx() {
            if (this.bw == 0) {
                return 1;
            }
            if (this.by == 3 || this.by == 5) {
                if (this.bw == 2) {
                    return 4;
                }
            }
            return this.bw;
        }
        get bv() {
            return this.bu;
        }
        get b8() {
            return this.b7;
        }
        get b4() {
            return this.b3;
        }
        get bw() {
            return EnumUtil.getEnumValue(SeriesHighlightingBehavior_$type, this.c(SeriesViewer.sc));
        }
        set bw(a) {
            this.h(SeriesViewer.sc, enumGetBox(SeriesHighlightingBehavior_$type, a));
        }
        get bd() {
            return EnumUtil.getEnumValue(LegendHighlightingMode_$type, this.c(SeriesViewer.sv));
        }
        set bd(a) {
            this.h(SeriesViewer.sv, enumGetBox(LegendHighlightingMode_$type, a));
        }
        get bf() {
            return EnumUtil.getEnumValue(LegendItemBadgeShape_$type, this.c(SeriesViewer.sx));
        }
        set bf(a) {
            this.h(SeriesViewer.sx, enumGetBox(LegendItemBadgeShape_$type, a));
        }
        get be() {
            return EnumUtil.getEnumValue(LegendItemBadgeMode_$type, this.c(SeriesViewer.sw));
        }
        set be(a) {
            this.h(SeriesViewer.sw, enumGetBox(LegendItemBadgeMode_$type, a));
        }
        p8(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        o0() {
            this.o1(this.series);
        }
        o1(a) {
            for (let b of fromEn(a)) {
                let c = b.a4;
                if (c == null) {
                    continue;
                }
                let d = b.so;
                if (d == null) {
                    continue;
                }
                if (c.containsChild(d)) {
                    c.removeChild(d);
                }
                if (!c.containsChild(d) && b.legendItemVisibility != 1) {
                    c.addChildInOrder(d, b);
                }
            }
        }
        ph(a, b, c, d) {
            this.qe(a, b, typeCast(MouseEventArgs.$, c), d);
        }
        pl(a, b, c, d) {
            this.qi(a, b, typeCast(MouseEventArgs.$, c), d);
        }
        pi(a, b, c, d) {
            this.qf(a, b, typeCast(MouseEventArgs.$, c), d);
        }
        pj(a, b, c, d) {
            this.qg(a, b, typeCast(MouseButtonEventArgs.$, c), d);
        }
        pk(a, b, c, d) {
            let e = typeCast(MouseButtonEventArgs.$, c);
            if (e != null) {
                this.qh(a, b, typeCast(MouseButtonEventArgs.$, c), d);
            }
            if (e != null) {
                if (!this.d4) {
                    this.qb(a, b, typeCast(MouseButtonEventArgs.$, c), d);
                }
            }
        }
        mt(a, b) {
            return null;
        }
        get fl() {
            return this.d4;
        }
        ob(a) {
            if (!this.dy && a) {
                this.m5({ $type: Point_$type, x: NaN, y: NaN });
                this.dy = true;
                this.d4 = true;
                if (this.viewerManipulationStarting != null) {
                    let b = new SeriesViewerManipulationEventArgs();
                    b.isDragZoom = true;
                    this.viewerManipulationStarting(this, b);
                }
            }
        }
        pm(a, b, c, d) {
        }
        pn(a, b, c, d) {
        }
        qc(a, b) {
            if (this.seriesCursorMouseMove != null && this.eo) {
                this.seriesCursorMouseMove(this, new ChartCursorEventArgs(this, a, b));
            }
        }
        qg(a, b, c, d) {
            if (this.seriesMouseLeftButtonDown != null) {
                this.seriesMouseLeftButtonDown(this, new DataChartMouseButtonEventArgs(this, a, b, c, d));
            }
        }
        qh(a, b, c, d) {
            if (this.seriesMouseLeftButtonUp != null) {
                this.seriesMouseLeftButtonUp(this, new DataChartMouseButtonEventArgs(this, a, b, c, d));
            }
        }
        qb(a, b, c, d) {
            if (this.seriesClick != null) {
                this.seriesClick(this, new DataChartMouseButtonEventArgs(this, a, b, c, d));
            }
            if (a.isStacked) {
                return;
            }
            this.pf(a, b);
        }
        pf(a, b) {
            if (b != null && this.b8 != 1) {
                if (a != null) {
                    if (!a.ec(b)) {
                        return;
                    }
                    if (a.bl != null) {
                        if (a.dl != null) {
                            let c = a.dl.indexOf(b);
                            if (c >= 0 && a.bl.dl != null) {
                                b = a.bl.dl.item(c);
                                a = a.bl;
                            }
                        }
                    }
                }
                let d = this.gk(a, b, this.b4);
                d = this.gm(d, this.b4);
                let e = this.gj(d, this.b4);
                for (let f = 0; f < e.count; f++) {
                    this.selectedSeriesItems.remove(e._inner[f]);
                }
                for (let g = 0; g < d.count; g++) {
                    this.selectedSeriesItems.add(d._inner[g]);
                }
            }
        }
        gm(a, b) {
            let c = new List$1(ChartSelection.$, 0);
            let d = new List$1(ChartSelection.$, 0);
            for (let e of fromEnum(a)) {
                if (this.selectedSeriesItems.contains(e)) {
                    c.add(e);
                }
                else {
                    d.add(e);
                }
            }
            for (let f of fromEnum(c)) {
                this.selectedSeriesItems.remove(f);
            }
            return d;
        }
        gj(a, b) {
            let c = new List$1(ChartSelection.$, 0);
            let d = new HashSet$1(ChartSelection.$, 0);
            for (let e of fromEnum(a)) {
                this.nj(d, c, e, b);
            }
            return c;
        }
        nj(a, b, c, d) {
            switch (d) {
                case 1:
                    for (let e of fromEnum(this.selectedSeriesItems)) {
                        if (e.series != null) {
                            if (!a.contains(e)) {
                                a.add_1(e);
                                b.add(e);
                            }
                        }
                    }
                    break;
                case 2:
                    for (let f of fromEnum(this.selectedSeriesItems)) {
                        if (f.series != null || (f.item != null && !Base.equalsStatic(f.item, c.item))) {
                            if (!a.contains(f)) {
                                a.add_1(f);
                                b.add(f);
                            }
                        }
                    }
                    break;
                case 3:
                    for (let g of fromEnum(this.selectedSeriesItems)) {
                        if (g.item == null) {
                            if (!a.contains(g)) {
                                a.add_1(g);
                                b.add(g);
                            }
                        }
                    }
                    break;
                case 4:
                    for (let h of fromEnum(this.selectedSeriesItems)) {
                        if (h.item == null || (h.series == c.series && h.item != null && !Base.equalsStatic(h.item, c.item))) {
                            if (!a.contains(h)) {
                                a.add_1(h);
                                b.add(h);
                            }
                        }
                    }
                    break;
                case 5:
                    for (let i of fromEnum(this.selectedSeriesItems)) {
                        if (i.item == null || (i.series != null && i.series != c.series) || (i.item != null && !Base.equalsStatic(i.item, c.item))) {
                            if (!a.contains(i)) {
                                a.add_1(i);
                                b.add(i);
                            }
                        }
                    }
                    break;
                case 6:
                    for (let j of fromEnum(this.selectedSeriesItems)) {
                        if (j.item != null) {
                            if (!a.contains(j)) {
                                a.add_1(j);
                                b.add(j);
                            }
                        }
                    }
                    break;
                case 7:
                    for (let k of fromEnum(this.selectedSeriesItems)) {
                        if (k.item != null || k.series != c.series) {
                            if (!a.contains(k)) {
                                a.add_1(k);
                                b.add(k);
                            }
                        }
                    }
                    break;
            }
        }
        gk(a, b, c) {
            let d = new List$1(ChartSelection.$, 0);
            switch (c) {
                case 1:
                case 2:
                    d.add(((() => {
                        let $ret = new ChartSelection();
                        $ret.item = b;
                        return $ret;
                    })()));
                    break;
                case 3:
                case 4:
                case 5:
                    d.add(((() => {
                        let $ret = new ChartSelection();
                        $ret.item = b;
                        $ret.series = a;
                        return $ret;
                    })()));
                    break;
                case 6:
                case 7:
                    d.add(((() => {
                        let $ret = new ChartSelection();
                        $ret.series = a;
                        return $ret;
                    })()));
                    break;
            }
            return d;
        }
        q2(a) {
            this.bb.f$as(this, a);
        }
        q3(a) {
            a = { $type: Point_$type, x: a.x - this.v0.left, y: a.y - this.v0.top };
            let b = this.vf(a);
            if (this.f1) {
                this.m5(b);
            }
            else {
                let c = this.bv;
                let d = c == 2 || c == 3 || c == 4;
                if (d) {
                    this.rb(b);
                    for (let e = 0; e < this.series.count; e++) {
                        let f = this.series._inner[e];
                        f.si(b);
                        if (f.isStacked) {
                            f.pz((g) => {
                                if (g.ee) {
                                    g.px((h) => {
                                        h.si(b);
                                        return true;
                                    });
                                }
                                g.si(b);
                                return true;
                            });
                        }
                        if (f.ee) {
                            f.px((g) => {
                                g.si(b);
                                return true;
                            });
                        }
                    }
                }
            }
        }
        qi(a, b, c, d) {
            if (this.seriesMouseMove != null) {
                this.seriesMouseMove(this, new ChartMouseEventArgs(this, a, b, c, d));
            }
        }
        qe(a, b, c, d) {
            if (this.seriesMouseEnter != null) {
                this.seriesMouseEnter(this, new ChartMouseEventArgs(this, a, b, c, d));
            }
        }
        qf(a, b, c, d) {
            if (this.seriesMouseLeave != null) {
                this.seriesMouseLeave(this, new ChartMouseEventArgs(this, a, b, c, d));
            }
        }
        oa() {
            if (this.dy) {
                this.dy = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isDragZoom = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
        }
        get_v0() {
            return this.vk;
        }
        get v0() {
            return this.get_v0();
        }
        get vp() {
            return this.vi;
        }
        set vp(a) {
            this.vi = a;
        }
        get_eu() {
            return false;
        }
        get eu() {
            return this.get_eu();
        }
        vu(a, b, c) {
            if (c.isEmpty) {
                return c;
            }
            let d = c;
            let e = b;
            let f = (d.left - e.left) / e.width;
            let g = (d.top - e.top) / e.height;
            let h = (d.right - e.left) / e.width;
            let i = (d.bottom - e.top) / e.height;
            f = a.left + f * a.width;
            g = a.top + g * a.height;
            h = a.left + h * a.width;
            i = a.top + i * a.height;
            return new Rect(0, f, g, h - f, i - g);
        }
        get_vo() {
            if (this.dw) {
                this.dw = false;
                let a = this.vs(this.v0, this.vp, this.vl);
                this.vh = a;
            }
            return this.vh;
        }
        get vo() {
            return this.get_vo();
        }
        vs(a, b, c) {
            let d = b;
            let e = c;
            let f = a;
            if (f.isEmpty) {
                return Rect.empty;
            }
            if (d.isEmpty) {
                return a;
            }
            let g = (d.left - f.left) / f.width;
            let h = (d.right - f.left) / f.width;
            let i = (d.top - f.top) / f.height;
            let j = (d.bottom - f.top) / f.height;
            g = f.left + (g - e.left) / e.width * f.width;
            h = f.left + (h - e.left) / e.width * f.width;
            i = f.top + (i - e.top) / e.height * f.height;
            j = f.top + (j - e.top) / e.height * f.height;
            let k = new Rect(0, g, i, h - g, j - i);
            k.intersect(f);
            return k;
        }
        vn(a) {
            this.dw = true;
            if (this.es()) {
                if (a.isEmpty) {
                    return Rect.empty;
                }
                let b;
                if (a.width > a.height) {
                    let c = intDivide(truncate((a.width - a.height)), 2);
                    b = new Rect(0, a.left + c, a.top, a.height, a.height);
                }
                else {
                    let d = intDivide(truncate((a.height - a.width)), 2);
                    b = new Rect(0, a.left, a.top + d, a.width, a.width);
                }
                return b;
            }
            return Rect.empty;
        }
        vt() {
            return this.v0;
        }
        q7(a) {
            a.ke = this.v0;
        }
        get iu() {
            return this.iq;
        }
        set iu(a) {
            this.iq = a;
        }
        p2(a, b) {
            if (!b.isEmpty) {
                this.vk = b;
                this.vi = this.vn(this.vk);
                this.c8.eq(this.vk);
            }
            if (this.es()) {
                if (this.actualSyncLink != null) {
                    this.rj(this.vl, false);
                }
            }
            this.pb(a, b);
            if (this.ej) {
                this.bc.updateScrollbars(this, this.vl, this.vl, a, b);
            }
        }
        cd() {
            return this.cc;
        }
        m1(a, b) {
            let c = false;
            c = true;
            if (this.v0.containsPoint(a)) {
                if (!this.d2) {
                    this.d2 = true;
                    if (this.plotAreaMouseEnter != null) {
                        let d = this.bl(a, false, c);
                        d.isDuringManipulation = b;
                        this.plotAreaMouseEnter(this, d);
                    }
                }
                else {
                    this.d2 = true;
                    if (this.plotAreaMouseOver != null) {
                        let e = this.bl(a, false, c);
                        e.isDuringManipulation = b;
                        this.plotAreaMouseOver(this, e);
                    }
                }
            }
            else {
                if (this.d2) {
                    this.d2 = false;
                    if (this.plotAreaMouseLeave != null) {
                        let f = this.bl(a, false, c);
                        f.isDuringManipulation = b;
                        this.plotAreaMouseLeave(this, f);
                    }
                }
            }
        }
        get av() {
            return this.at;
        }
        set av(a) {
            let b = this.at;
            this.at = a;
            if (b != this.at) {
                this.p8("ContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.at));
            }
        }
        qk() {
            this.au = this.aw();
        }
        aw() {
            if (!this.e7) {
                return 1;
            }
            return this.bb.f$a(this);
        }
        get au() {
            return this.as;
        }
        set au(a) {
            let b = this.as;
            this.as = a;
            if (b != this.as) {
                this.p8("ActualContentHitTestMode", enumGetBox(ChartHitTestMode_$type, b), enumGetBox(ChartHitTestMode_$type, this.as));
            }
        }
        queueForAnimationIdle(a, b) {
            this.dt.f(a, b);
        }
        getAnimationIdleVersionNumber() {
            return this.dt.d();
        }
        isAnimationActive() {
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].d1()) {
                    return true;
                }
            }
            if (this.da.f()) {
                return true;
            }
            return false;
        }
        pg(a) {
            this.po();
        }
        ot() {
            this.po();
        }
        po() {
            if (!this.isAnimationActive()) {
                this.dt.e();
            }
        }
        qa(a) {
            if (this.seriesAnimating != null) {
                this.seriesAnimating(a);
            }
        }
        fg() {
            return this.fh() || this.fi();
        }
        onDetachedFromUI() {
            this.d1 = true;
            this.c8.c2();
            SyncManager.e(this);
        }
        onAttachedToUI() {
            this.d1 = false;
            this.c8.cw();
            SyncManager.c(this);
        }
        get cz() {
            return this.cv;
        }
        set cz(a) {
            if (this.cz != a) {
                let b = this.cv;
                this.cv = a;
                if (this.e7) {
                    this.bb.f$aj(this);
                }
                if (b == 1 && this.cv != 1) {
                    this.oa();
                }
            }
        }
        o3(a) {
            this.m5(this.vf(a));
        }
        o4(a, b) {
            let c = false;
            c = false;
            this.m5({ $type: Point_$type, x: NaN, y: NaN });
            if (this.d2) {
                this.d2 = false;
                if (this.plotAreaMouseLeave != null) {
                    let d = this.bl(a, false, c);
                    d.isDuringManipulation = b;
                    this.plotAreaMouseLeave(this, d);
                }
            }
        }
        ft(a, b) {
            return this.bb.f$h(this, a, b);
        }
        om(a) {
            this.bb.f$r(this, a);
        }
        fs(a) {
            return this.bb.f$g(this, a);
        }
        get ei() {
            return this.dx;
        }
        set ei(a) {
            this.dx = a;
        }
        get_e8() {
            return this.em || this.ga();
        }
        get e8() {
            return this.get_e8();
        }
        oo(a) {
            this.bb.f$t(this, a);
        }
        get er() {
            return this.dx;
        }
        o8(a) {
            this.bb.f$ah(this, a);
        }
        op(a, b) {
            this.bb.f$u(this, a, b);
        }
        on(a) {
            this.bb.f$s(this, a);
        }
        get fu() {
            return this.d6;
        }
        set fu(a) {
            this.d6 = a;
        }
        px() {
            this.bb.f$ao(this);
        }
        o7(a) {
            this.bb.f$ag(this, a);
        }
        py(a, b, c, d) {
            this.bb.f$ap(this, a, b, c, d);
        }
        o6(a) {
            this.bb.f$af(this, a);
        }
        pu(a, b, c, d) {
            this.bb.f$al(this, a, b, c, d);
        }
        o2(a) {
            this.bb.f$ac(this, a);
        }
        o5(a) {
            this.bb.f$ae(this, a);
        }
        os(a) {
            this.bb.f$v(this, a);
        }
        pt(a, b, c, d) {
            this.bb.f$ak(this, a, b, c, d);
        }
        pq() {
            this.d4 = false;
        }
        ov(a) {
            this.c8.ej(a.height);
        }
        nk() {
            if (this.dx) {
                this.m5({ $type: Point_$type, x: NaN, y: NaN });
                this.c8.ch();
            }
            this.dx = false;
        }
        of(a, b) {
            this.bb.f$q(this, a, b);
        }
        cx(a) {
            let b = this.c8.k != null && this.c8.k.al ? this.cy : this.cw;
            if (b != 3) {
                return b;
            }
            return this.c8.m(a);
        }
        pw(a) {
            this.eb = false;
            if (!this.ec) {
                this.m5({ $type: Point_$type, x: NaN, y: NaN });
                if (a) {
                    this.ec = true;
                    this.d4 = true;
                    if (this.viewerManipulationStarting != null) {
                        let b = new SeriesViewerManipulationEventArgs();
                        b.isZoomPan = true;
                        this.viewerManipulationStarting(this, b);
                    }
                }
            }
            this.bb.f$an(this);
        }
        pv() {
            if (this.ec) {
                this.ec = false;
                if (this.viewerManipulationEnding != null) {
                    let a = new SeriesViewerManipulationEventArgs();
                    a.isZoomPan = true;
                    this.viewerManipulationEnding(this, a);
                }
            }
            this.bb.f$am(this);
        }
        q4() {
            this.bb.f$at(this);
        }
        m9() {
            if (this.eb) {
                this.oj();
            }
            this.bb.f$n(this);
        }
        m4() {
            this.m3();
        }
        m3() {
            if (this.e7) {
                this.bb.f$k(this);
            }
        }
        p0() {
        }
        qo() {
        }
        qm() {
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].rn(false);
            }
            this.nf(false, false, true);
        }
        oe(a, b) {
            this.bb.f$p(this, a, b);
        }
        fz() {
            return false;
        }
        get f4() {
            return this.d7;
        }
        set f4(a) {
            this.d7 = a;
        }
        od(a, b, c) {
            this.bb.f$o(this, a, b, c);
        }
        rg(a, b) {
            if (b.propertyName == SyncSettings.$$p[0]) {
                SyncManager.b(this, b.oldValue, b.newValue);
            }
        }
        rf(a, b) {
            if (a != null) {
                a.as(this);
                a.propertyUpdated = delegateRemove(a.propertyUpdated, this.propertyUpdated);
            }
            if (b != null) {
                b.al(this);
                b.propertyUpdated = delegateCombine(b.propertyUpdated, this.propertyUpdated);
            }
            for (let c of fromEnum(this.series)) {
                c.c1 = this.actualSyncLink;
                c.c9 = this;
            }
        }
        m5(a) {
            if (this.ej) {
                this.bc.onCrosshairMoved(this.vd(a));
            }
            this.actualSyncLink.an(this, a);
        }
        rj(a, b) {
            this.rk(a, b, !b);
        }
        rk(a, b, c) {
            if (!b) {
                this.actualSyncLink.au(this, a, c);
            }
            else {
                if (!this.fh() && !this.fi()) {
                    return;
                }
                let d = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let e = a;
                if (d && !this.f0) {
                    if (e.width < this.hf) {
                        return;
                    }
                    else if (e.height < this.he) {
                        return;
                    }
                }
                if (d && !this.fh()) {
                    e = new Rect(0, 0, a.y, 1, a.height);
                }
                if (d && !this.fi()) {
                    e = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.at(this, e);
            }
        }
        p1(a, b) {
            if (!b) {
                this.actualSyncLink.ap(this, a);
            }
            else {
                if (!this.fh() && !this.fi()) {
                    return;
                }
                let c = !a.isEmpty && !isNaN_(a.x) && !isNaN_(a.y) && !isNaN_(a.width) && !isNaN_(a.height);
                let d = a;
                if (c && !this.fh()) {
                    d = new Rect(0, 0, a.y, 1, a.height);
                }
                if (c && !this.fi()) {
                    d = new Rect(0, a.x, 0, a.width, 1);
                }
                this.actualSyncLink.ap(this, d);
            }
        }
        get fc() {
            return this.actualSyncLink != null;
        }
        *_gg() {
            if (this.actualSyncLink == null) {
                return undefined;
            }
            for (let a of fromEnum(this.actualSyncLink.ai)) {
                yield a;
            }
        }
        gg() {
            return toEnum(() => this._gg());
        }
        vf(a) {
            a = { $type: Point_$type, x: a.x + this.v0.left, y: a.y + this.v0.top };
            let b = this.vo;
            let c = ViewportUtils.b(a.x, this.vl, this.v0, this.vp);
            let d = ViewportUtils.g(a.y, this.vl, this.v0, this.vp);
            return { $type: Point_$type, x: c, y: d };
        }
        vd(a) {
            let b = this.vo;
            let c = ViewportUtils.e(a.x, this.vl, this.v0, this.vp);
            let d = ViewportUtils.i(a.y, this.vl, this.v0, this.vp);
            return { $type: Point_$type, x: c, y: d };
        }
        vz(a) {
            let b = this.vf({ $type: Point_$type, x: a.left, y: a.top });
            let c = this.vf({ $type: Point_$type, x: a.right, y: a.bottom });
            return new Rect(0, b.x, b.y, c.x - b.x, c.y - b.y);
        }
        qj(a, b) {
            if (this.windowRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.windowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        ps(a, b) {
            this.qj(a, b);
        }
        pp(a, b) {
            if (this.sizeChanged != null && Size.l_op_Inequality(a, b)) {
                this.sizeChanged(this, new RectChangedEventArgs(new Rect(1, 0, 0, a), new Rect(1, 0, 0, b)));
            }
        }
        fw(a, b) {
            if (a.width != b.width || a.height != b.height || a.x != b.x || a.y != b.y) {
                return true;
            }
            return false;
        }
        p5(a, b) {
            if (this.actualWindowRectChanged != null && this.fw(a, b)) {
                this.actualWindowRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        rl(a) {
            if (isNaN_(a) || isInfinity(a)) {
                a = 0.05;
            }
            let b = this.hl() - a;
            let c = this.hl() - a;
            let d = this.hc + (a / 2);
            let e = this.hd + (a / 2);
            this.v1 = new Rect(0, d, e, b, c);
        }
        rm(a) {
            this.rl(a * -1);
        }
        qu() {
            this.c8.d2();
        }
        p6(a, b) {
            if (this.gridAreaRectChanged != null && Rect.l_op_Inequality(a, b)) {
                this.gridAreaRectChanged(this, new RectChangedEventArgs(a, b));
            }
        }
        get_e9() {
            return false;
        }
        get e9() {
            return this.get_e9();
        }
        pb(a, b) {
            this.p6(a, b);
            if (this.e7) {
                this.bb.f$ar(this);
            }
            if (this.e9 && (Rect.l_op_Equality(a, null) || a.isEmpty || a.width == 0 || a.height == 0)) {
                this.rj(this.v1, false);
            }
            else {
                this.np();
            }
            if (a.isEmpty || a.width == 0 || a.height == 0) {
                this.nz();
            }
        }
        nt() {
            this.np();
        }
        get hf() {
            return this.gt;
        }
        set hf(a) {
            let b = this.gt;
            this.gt = a;
            this.p8("ActualWindowRectMinWidth", b, this.gt);
        }
        get he() {
            return this.gs;
        }
        set he(a) {
            let b = this.gs;
            this.gs = a;
            this.p8("ActualWindowRectMinHeight", b, this.gs);
        }
        get syncChannel() {
            return this._syncChannel;
        }
        set syncChannel(a) {
            this._syncChannel = a;
        }
        get actualSyncLink() {
            return this.cm;
        }
        set actualSyncLink(a) {
            let b = this.cm;
            this.cm = a;
            this.p8("ActualSyncLink", b, this.cm);
        }
        nr() {
            this.c8.d3();
        }
        ok() {
            this.eb = true;
        }
        oi() {
            this.eb = false;
        }
        oj() {
            if (this.eb) {
                if (this.ec) {
                    this.ec = false;
                    if (!this.dy) {
                        if (this.viewerManipulationEnding != null) {
                            let a = new SeriesViewerManipulationEventArgs();
                            a.isZoomPan = true;
                            this.viewerManipulationEnding(this, a);
                        }
                        this.d4 = false;
                    }
                }
            }
        }
        get c1() {
            return this.c8.i().a;
        }
        rc(a) {
            if (this.c1 != null) {
                this.c1.mobileMode = a;
            }
        }
        get cr() {
            return this.cq;
        }
        set cr(a) {
            this.cq = a;
        }
        cs() {
            if (this.ct == 0) {
                return 1;
            }
            return this.ct;
        }
        en() {
            return this.cz == 0 && !this.d6 && !this.d7;
        }
        ef() {
            if (this.actualSyncLink != null && this.actualSyncLink.ai.count > 0) {
                let a = true;
                a = this.en();
                if (!a) {
                    return false;
                }
                for (let b = 0; b < this.actualSyncLink.ai.count; b++) {
                    if (!this.actualSyncLink.ai.item(b).en()) {
                        return false;
                    }
                }
                return true;
            }
            else {
                return this.en();
            }
        }
        my() {
            if (this.cz == 2) {
                this.c8.bt();
                this.cz = 0;
                this.pv();
                this.p1(Rect.empty, true);
                if (this.cp == 1) {
                    this.rj(this.v2, true);
                }
            }
            if (this.cz == 1) {
                this.c8.bt();
                this.cz = 0;
                this.pv();
                this.c8.cf();
                this.p1(Rect.empty, true);
            }
        }
        notifyCrosshairUpdate() {
        }
        rh(a, b) {
            let c = this.hf;
            let d = this.he;
            this.v1 = new Rect(0, this.hc, this.hd, MathUtil.d(a, c, 1), MathUtil.d(b, d, 1));
        }
        ri(a, b, c, d) {
            if (!MathUtil.a(a) || a < 0 || a >= 1) {
                a = this.hc;
            }
            if (!MathUtil.a(b) || b < 0 || b >= 1) {
                b = this.hd;
            }
            if (!MathUtil.a(d)) {
                d = this.hm();
            }
            if (!MathUtil.a(c)) {
                c = this.hl();
            }
            this.v1 = new Rect(0, a, b, MathUtil.d(c, this.hf, 1), MathUtil.d(d, this.he, 1));
        }
        hl() {
            return 1;
        }
        hm() {
            return 1;
        }
        hz() {
            if (this.il > 0) {
                return this.il;
            }
            let a = Rect.l_op_Inequality(this.v0, null) && !this.v0.isEmpty && MathUtil.a(this.v0.width);
            let b = MathUtil.a(this.io);
            if (b && a) {
                let c = this.io / this.v0.width;
                if (c <= 0 || c >= 1) {
                    c = 0.0001;
                }
                return c;
            }
            return 0.0001;
        }
        hy() {
            if (this.ik > 0) {
                return this.ik;
            }
            let a = Rect.l_op_Inequality(this.v0, null) && !this.v0.isEmpty && MathUtil.a(this.v0.height);
            let b = MathUtil.a(this.im);
            if (b && a) {
                let c = this.im / this.v0.height;
                if (c <= 0 || c >= 1) {
                    c = 0.0001;
                }
                return c;
            }
            return 0.0001;
        }
        p3(a, b, c, d) {
            switch (b) {
                case SeriesViewer.$$p[41]:
                    this.c8.dj();
                    break;
                case SeriesViewer.$$p[38]:
                    this.c8.dj();
                    break;
                case SeriesViewer.$$p[53]:
                    this.cr = this.cs();
                    break;
                case "HorizontalViewScrollbarMode":
                    this.cf = this.ch;
                    if (this.el || this.e7) {
                        this.bc.onHorizontalScrollbarModeChanged(this.cf);
                    }
                    break;
                case "VerticalViewScrollbarMode":
                    this.cg = this.ci;
                    if (this.el || this.e7) {
                        this.bc.onVerticalScrollbarModeChanged(this.cg);
                    }
                    break;
                case "ActualContentHitTestMode":
                    this.n7();
                    break;
                case "ContentHitTestMode":
                    this.qk();
                    break;
                case SeriesViewer.$$p[40]:
                    this.c8.dh(c, d);
                    this.c8.dj();
                    break;
                case SeriesViewer.$$p[37]:
                    this.c8.dd(c, d);
                    this.c8.dj();
                    break;
                case "TitleTextStyle":
                case "TitleTextColor":
                case "SubtitleTextStyle":
                case "SubtitleTextColor":
                case "TitleTopMargin":
                case "TitleLeftMargin":
                case "TitleRightMargin":
                case "TitleBottomMargin":
                case "SubtitleTopMargin":
                case "SubtitleLeftMargin":
                case "SubtitleRightMargin":
                case "SubtitleBottomMargin":
                    this.c8.dj();
                    break;
                case SeriesViewer.$$p[27]:
                case SeriesViewer.$$p[28]:
                case SeriesViewer.$$p[29]:
                    this.c8.db();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.hw))) {
                        this.no();
                    }
                    else {
                        this.hb = DeviceUtils.a(this.hw);
                    }
                    break;
                case "InteractionPixelScalingRatio":
                    this.ha = this.hu;
                    break;
                case "ActualPixelScalingRatio":
                    this.c8.dq();
                    break;
                case SeriesViewer.$$p[14]:
                    this.c8.cp();
                    break;
                case "ActualSyncLink":
                    this.rf(typeCast(SyncLink.$, c), typeCast(SyncLink.$, d));
                    break;
                case SeriesViewer.$$p[3]:
                    if (!this.ex) {
                        this.gb = true;
                    }
                    if (this.v5 == 0) {
                        this.eo = true;
                    }
                    else {
                        this.eo = this.ed;
                    }
                    if (this.e7) {
                        this.bb.f$ar(this);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.e7) {
                        if (this.fr) {
                            this.rb(this.vc);
                        }
                        this.bb.f$ar(this);
                    }
                    this.notifyCrosshairUpdate();
                    break;
                case SeriesViewer.$$p[49]:
                    if (this.actualSyncLink != null) {
                        this.it++;
                        this.rj(d, false);
                        this.it--;
                    }
                    if (!this.v1.equals1(c) && this.it == 0) {
                        this.ps(c, this.v1);
                    }
                    this.np();
                    break;
                case SeriesViewer.$$p[45]:
                    this.hc = this.ii;
                    break;
                case SeriesViewer.$$p[46]:
                    this.hd = this.ij;
                    break;
                case "ActualWindowPositionVertical":
                case "ActualWindowPositionHorizontal":
                    if (!this.f6) {
                        this.rh(this.hl(), this.hm());
                    }
                    break;
                case SeriesViewer.$$p[48]:
                case SeriesViewer.$$p[52]:
                    this.hf = this.hz();
                    break;
                case SeriesViewer.$$p[47]:
                case SeriesViewer.$$p[51]:
                    this.he = this.hy();
                    break;
                case SeriesViewer.$$p[15]:
                    this.c8.c5();
                    break;
                case SeriesViewer.$$p[12]:
                    this.da.r = this.iy;
                    break;
                case SeriesViewer.$$p[34]:
                    this.dc.r = this.i0;
                    break;
                case SeriesViewer.$$p[8]:
                    this.c9.r = this.iw;
                    break;
                case SeriesViewer.$$p[20]:
                    this.re();
                    break;
                case "ActualWindowRect":
                    this.dw = true;
                    if (this.fw(c, d)) {
                        this.mu(c, d);
                    }
                    if (d.width == 1 && d.height == 1 && c.isEmpty) {
                        this.ge = true;
                    }
                    this.p5(c, d);
                    break;
                case SeriesViewer.$$p[24]:
                    this.c8.da(d);
                    break;
                case SeriesViewer.$$p[43]:
                    this.ee = this.gc;
                    break;
                case SeriesViewer.$$p[54]:
                    this.iu = this.i1;
                    this.m3();
                    break;
                case SeriesViewer.$$p[26]:
                    this.bb.f$ai(this);
                    break;
                case "HighlightingMode":
                case "HighlightingBehavior":
                    this.bu = this.bx();
                    if (this.e7) {
                        let e = this.dj;
                        e.retainMainShapes = this.bv == 3;
                        e.isExclusiveHighlight = this.bv == 1;
                    }
                    break;
                case "SelectionMode":
                    this.b7 = this.ca();
                    if (this.b7 == 1 && this.selectedSeriesItems.count > 0) {
                        this.selectedSeriesItems.clear();
                    }
                    if (this.e7) {
                        let f = this.dk;
                    }
                    break;
                case "SelectionBehavior":
                    this.b3 = this.b5();
                    if (this.e7) {
                        let g = this.dk;
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let h of fromEnum(this.series)) {
                        h.legendItemBadgeShape = this.bf;
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let i of fromEnum(this.series)) {
                        i.bc = this.be;
                    }
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[19]:
                case SeriesViewer.$$p[17]:
                case SeriesViewer.$$p[18]:
                case SeriesViewer.$$p[16]:
                    for (let j of fromEnum(this.series)) {
                        j.qc();
                    }
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                case "HorizontalViewScrollbarFill":
                case "HorizontalViewScrollbarMaxOpacity":
                case "HorizontalViewScrollbarOutline":
                case "HorizontalViewScrollbarStrokeThickness":
                case "VerticalViewScrollbarCornerRadius":
                case "VerticalViewScrollbarFill":
                case "VerticalViewScrollbarMaxOpacity":
                case "VerticalViewScrollbarOutline":
                case "VerticalViewScrollbarStrokeThickness":
                    if (this.e7) {
                        this.bc.updateBarAppearance(this, this.uz, this.u9, this.u0, this.va, this.hr, this.id, this.hq, this.ic);
                    }
                    break;
                case "HorizontalViewScrollbarHeight":
                case "HorizontalViewScrollbarInset":
                case SeriesViewer.kc:
                case "HorizontalViewScrollbarTrackStartInset":
                case "HorizontalViewScrollbarTrackEndInset":
                    if (this.e7) {
                        this.bc.updateBarDimensions(this, this.ho, this.hn, this.hp, this.ev, this.ht, this.hs, this.ih, this.ia, this.ib, this.gd, this.ig, this.ie);
                    }
                    break;
                case "VerticalViewScrollbarPosition":
                    if (this.e7) {
                        this.bc.updateVerticalScrollbarPosition(this.cl);
                    }
                    break;
                case "HorizontalViewScrollbarPosition":
                    if (this.e7) {
                        this.bc.updateHorizontalScrollbarPosition(this.ce);
                    }
                    break;
            }
        }
        get e4() {
            return this.bv == 2 || this.bv == 3 || this.bv == 4;
        }
        get fr() {
            return this.bv == 2 || this.bv == 3 || this.bv == 4;
        }
        rb(a) {
            let b = 1.7976931348623157E+308;
            let c = null;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.eq) {
                    continue;
                }
                if (e.eb && e.eh) {
                    continue;
                }
                if (e.isStacked) {
                    e.pz((f) => {
                        let g = this.ms(f, b, c, a);
                        if (g == null) {
                            return true;
                        }
                        b = g.c;
                        c = g.d;
                        if (f.ee) {
                            f.px((h) => {
                                let i = this.ms(h, b, c, a);
                                if (i == null) {
                                    return true;
                                }
                                b = i.c;
                                c = i.d;
                                return true;
                            });
                        }
                        return true;
                    });
                }
                if (e.ee) {
                    e.px((f) => {
                        let g = this.ms(f, b, c, a);
                        if (g == null) {
                            return true;
                        }
                        b = g.c;
                        c = g.d;
                        return true;
                    });
                }
                let f = this.ms(e, b, c, a);
                if (f == null) {
                    continue;
                }
                b = f.c;
                c = f.d;
            }
            this.bq = c;
        }
        ms(a, b, c, d) {
            let e = a.v1(d);
            let f = a.v6(d, true, true);
            if (isNaN_(f.x) || isNaN_(f.y)) {
                return null;
            }
            let g = (e.x - f.x) * (e.x - f.x) + (e.y - f.y) * (e.y - f.y);
            if (g < b) {
                b = g;
                c = a;
            }
            return new Tuple$2(Number_$type, Series.$, b, c);
        }
        re() {
            this.ea = this.v6 == 0;
            this.c8.dp();
            this.rd();
            this.c8.em();
            this.nr();
            this.n5();
        }
        n7() {
            this.c8.cv();
        }
        rd() {
            if (this.c1 == null) {
                return;
            }
            this.c1.visibility = this.v6;
            this.c1.isZoomable = this.fg();
        }
        get vv() {
            return this.vj;
        }
        set vv(a) {
            let b = this.vj;
            this.vj = a;
            if (this.vj.isEmpty) {
                this.c8.cj();
            }
            else {
                this.c8.en(this.v0, this.vy(this.vv));
                this.c8.ec();
                this.p8("PreviewRect", b, this.vj);
            }
        }
        get selectedSeriesItems() {
            return this._selectedSeriesItems;
        }
        set selectedSeriesItems(a) {
            this._selectedSeriesItems = a;
        }
        get focusedSeriesItems() {
            return this._focusedSeriesItems;
        }
        set focusedSeriesItems(a) {
            this._focusedSeriesItems = a;
        }
        pd(a, b) {
            if (this.selectedSeriesItemsChanged != null) {
                this.selectedSeriesItemsChanged(a, b);
            }
        }
        oq(a, b) {
            if (this.focusedSeriesItemsChanged != null) {
                this.focusedSeriesItemsChanged(a, b);
            }
        }
        q6() {
            this.hc = this.vl.x;
            this.hd = this.vl.y;
        }
        mu(a, b) {
            this.ge = false;
            this.gn = dateNow();
            if (this.e3) {
                for (let c = 0; c < this.series.count; c++) {
                    this.series._inner[c].o1();
                }
                this.dj.clear();
            }
            if (this.da.f()) {
                this.da.w();
            }
            let d = this.f6;
            this.f6 = true;
            this.q6();
            this.f6 = d;
            this.c8.ck();
            this.c8.ep(this.vl);
            if (this.ej) {
                this.bc.updateScrollbars(this, a, this.vl, this.v0, this.v0);
            }
            this.n8(a, b);
        }
        fx() {
            return this.b8 != 1;
        }
        n8(a, b) {
        }
        vy(a) {
            if (this.v0.isEmpty) {
                return Rect.empty;
            }
            let b = this.v0;
            let c = b.left + (b.width * (a.left - this.vl.left) / this.vl.width);
            let d = b.top + (b.height * (a.top - this.vl.top) / this.vl.height);
            let e = b.left + (b.width * (a.right - this.vl.left) / this.vl.width);
            let f = b.top + (b.height * (a.bottom - this.vl.top) / this.vl.height);
            return new Rect(0, c, d, e - c, f - d);
        }
        p9() {
            if (this.refreshCompleted != null && !this.destroyed) {
                this.refreshCompleted(this, new RefreshCompletedEventArgs());
            }
        }
        pr(a) {
            this.rd();
        }
        get lz() {
            return this.i8;
        }
        set lz(a) {
            let b = this.i8;
            this.i8 = a;
            this.p8("TitleTextStyle", b, a);
        }
        get ln() {
            return this.i7;
        }
        set ln(a) {
            let b = this.i7;
            this.i7 = a;
            this.p8("SubtitleTextStyle", b, a);
        }
        get u7() {
            return this.um;
        }
        set u7(a) {
            let b = this.um;
            this.um = a;
            this.p8("TitleTextColor", b, a);
        }
        get u6() {
            return this.ul;
        }
        set u6(a) {
            let b = this.ul;
            this.ul = a;
            this.p8("SubtitleTextColor", b, a);
        }
        get h8() {
            return this.g8;
        }
        set h8(a) {
            let b = this.g8;
            this.g8 = a;
            this.p8("TitleTopMargin", b, a);
        }
        get h6() {
            return this.g6;
        }
        set h6(a) {
            let b = this.g6;
            this.g6 = a;
            this.p8("TitleLeftMargin", b, a);
        }
        get h7() {
            return this.g7;
        }
        set h7(a) {
            let b = this.g7;
            this.g7 = a;
            this.p8("TitleRightMargin", b, a);
        }
        get h5() {
            return this.g5;
        }
        set h5(a) {
            let b = this.g5;
            this.g5 = a;
            this.p8("TitleBottomMargin", b, a);
        }
        get h4() {
            return this.g4;
        }
        set h4(a) {
            let b = this.g4;
            this.g4 = a;
            this.p8("SubtitleTopMargin", b, a);
        }
        get h2() {
            return this.g2;
        }
        set h2(a) {
            let b = this.g2;
            this.g2 = a;
            this.p8("SubtitleLeftMargin", b, a);
        }
        get h3() {
            return this.g3;
        }
        set h3(a) {
            let b = this.g3;
            this.g3 = a;
            this.p8("SubtitleRightMargin", b, a);
        }
        get h1() {
            return this.g1;
        }
        set h1(a) {
            let b = this.g1;
            this.g1 = a;
            this.p8("SubtitleBottomMargin", b, a);
        }
        v3() {
            return this.c8.fj();
        }
        v4() {
            return this.c8.fk();
        }
        ap(a) {
            return this.c8.c(a);
        }
        aq(a) {
            return this.c8.d(a);
        }
        getFontHeight() {
            return this.c8.a9;
        }
        get_fq() {
            return false;
        }
        get fq() {
            return this.get_fq();
        }
        oh() {
        }
        provideContainer(a) {
            this.c8.c0(a);
        }
        og(a, b) {
            this.c8.c1(a, b);
        }
        notifyContainerResized() {
            this.c8.cu();
            this.oh();
        }
        vq() {
            return this.c8.fb();
        }
        na() {
            this.c8.b5();
        }
        ve() {
            return this.c8.e8();
        }
        de() {
            return this.c8.t();
        }
        dd() {
            return this.c8.q();
        }
        us() {
            return this.c8.e0();
        }
        ut() {
            return this.c8.e3();
        }
        mw(a) {
            this.c8.bp(a);
        }
        qq(a) {
            this.c8.dy(a);
        }
        get fn() {
            return this.d5;
        }
        set fn(a) {
            let b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.c8.cr(this.d5);
            }
        }
        get ed() {
            return this.dv;
        }
        set ed(a) {
            let b = this.dv;
            this.dv = a;
            if (b != this.dv) {
                this.c8.bk(this.dv);
            }
        }
        get syncSettings() {
            return this._syncSettings;
        }
        set syncSettings(a) {
            this._syncSettings = a;
        }
        mv(a) {
            this.c8.bn(a);
        }
        qs(a) {
            this.c8.dz(a);
        }
        n4(source_, a, b, c) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let d = this.actualSyncLink.ag(source_);
            if (d == null) {
                return;
            }
            d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        nv(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let a = this.actualSyncLink.ag(source_);
            if (a == null) {
                return;
            }
            a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
        }
        n2(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ag(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        n3(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            let c = this.actualSyncLink.ag(source_);
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        destroy() {
            this.destroyed = true;
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.series.count; b++) {
                a.add(this.series._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                if (a._inner[c].ct != null) {
                    a._inner[c].ct.ak();
                }
                this.series.remove(a._inner[c]);
                this.qr(a._inner[c].name, true);
                a._inner[c].itemsSource = null;
                a._inner[c].q6(null, null);
            }
            this.m8();
            this.qt();
            this.onDetachedFromUI();
            this.c8.c0(null);
        }
        m8() {
        }
        q1(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            this.i2 = source_;
            this.ra();
        }
        qt() {
            this.i2 = null;
            this.ra();
        }
        q0(a, source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (stringIsNullOrEmpty(a) == false) {
                if (!this.gf.containsKey(a)) {
                    this.gf.addItem(a, source_);
                }
                else {
                    this.gf.item(a, source_);
                }
            }
            this.ra();
        }
        qr(a, b) {
            if (stringIsNullOrEmpty(a) == false) {
                if (this.gf.containsKey(a)) {
                    this.gf.removeItem(a);
                }
            }
            if (!b) {
                this.ra();
            }
        }
        qz(a, b) {
            if (a.itemsSource != b) {
                a.itemsSource = b;
            }
        }
        q9(a) {
            if (!this.fk) {
                return;
            }
            if (typeCast(Series.$, a) !== null) {
                let b = a;
                if (this.gf.containsKey(b.name)) {
                    let c = this.gf.item(b.name);
                    this.qz(b, c);
                }
                else {
                    this.qz(b, this.i2);
                }
            }
            if (typeCast(CategoryAxisBase.$, a) !== null) {
                let d = a;
                if (this.gf.containsKey(d.name)) {
                    let e = this.gf.item(d.name);
                    if (d.itemsSource != e) {
                        d.itemsSource = e;
                    }
                }
                else {
                    if (d.itemsSource != this.i2) {
                        d.itemsSource = this.i2;
                    }
                }
            }
        }
        ra() {
            if (!this.fk) {
                return;
            }
            for (let a of fromEnum(this.series)) {
                this.q9(a);
            }
        }
        get h9() {
            return this.g9;
        }
        set h9(a) {
            this.g9 = a;
            this.nr();
        }
        get hv() {
            return this.gy;
        }
        set hv(a) {
            this.gy = a;
            this.nr();
        }
        get h0() {
            return this.g0;
        }
        set h0(a) {
            this.g0 = a;
            this.nr();
        }
        get hi() {
            return this.gw;
        }
        set hi(a) {
            this.gw = a;
            this.nr();
        }
        get hh() {
            return this.gv;
        }
        set hh(a) {
            this.gv = a;
            this.nr();
        }
        get hg() {
            return this.gu;
        }
        set hg(a) {
            this.gu = a;
            this.nr();
        }
        fy() {
            return false;
        }
        get e0() {
            return this.d0;
        }
        set e0(a) {
            let b = this.d0;
            this.d0 = a;
            this.p8("IsAntiAliasingEnabledDuringInteraction", b, this.d0);
        }
        get hw() {
            return this.gz;
        }
        set hw(a) {
            let b = this.gz;
            this.gz = a;
            this.p8("PixelScalingRatio", b, this.gz);
        }
        get hu() {
            return this.gx;
        }
        set hu(a) {
            let b = this.gx;
            this.gx = a;
            this.p8("InteractionPixelScalingRatio", b, this.gx);
        }
        static cu(a, b) {
            let c = new CoercionInfo();
            c.b = a;
            c.a = null;
            let d = FastItemsSource.f(a);
            if (d.d == null) {
                return c;
            }
            if (b != null) {
                let methods_ = b;
                let key_ = d.d;
                let val_ = null;
                if (typeof methods_[key_] != 'undefined') {
                    val_ = methods_[key_];
                }
                ;
                c.b = d.c;
                c.a = val_;
            }
            else if (d.d == "defaultDateParse") {
                let e = defaultDVDateParse;
                c.b = d.c;
                c.a = e;
            }
            return c;
        }
        get kt() {
            return this.i6;
        }
        set kt(a) {
            this.i6 = a;
            if (this.c1 == null) {
                return;
            }
            this.c1.backgroundImageUri = this.i6;
        }
        get hb() {
            return this.gp;
        }
        set hb(a) {
            let b = this.gp;
            this.gp = a;
            this.p8("ActualPixelScalingRatio", b, this.gp);
        }
        get ha() {
            return this.go;
        }
        set ha(a) {
            let b = this.go;
            this.go = a;
            this.p8("ActualInteractionPixelScalingRatio", b, this.go);
        }
        get vl() {
            return this.vg;
        }
        set vl(a) {
            let b = Rect.l_op_Inequality(this.vg, a);
            if (b) {
                let c = this.vg;
                this.vg = a;
                this.p8("ActualWindowRect", c, a);
            }
        }
        vr() {
            return this.vl;
        }
        np() {
            if (this.ew) {
                return;
            }
            this.vl = this.vm();
        }
        vw() {
            return Rect.empty;
        }
        vm() {
            let a = this.v1.left;
            let b = this.v1.top;
            let c = this.v1.width;
            let d = this.v1.height;
            if (this.cr == 1) {
                a = Math.min(1, Math.max(0, this.v1.left));
                c = Math.min(1, Math.max(0, this.v1.width));
            }
            if (this.cr == 1) {
                b = Math.min(1, Math.max(0, this.v1.top));
                d = Math.min(1, Math.max(0, this.v1.height));
            }
            return new Rect(0, a, b, c, d);
        }
        i4(a, b) {
            return this.c8.bj(a, b, this.hb);
        }
        get hc() {
            return this.gq;
        }
        set hc(a) {
            let b = this.gq;
            this.gq = a;
            this.p8("ActualWindowPositionHorizontal", b, this.gq);
        }
        get hd() {
            return this.gr;
        }
        set hd(a) {
            let b = this.gr;
            this.gr = a;
            this.p8("ActualWindowPositionVertical", b, this.gr);
        }
        n6() {
            if (this.ea && this.c1 != null) {
                this.c1.surfaceIsDirty = true;
                this.c1.doRefresh(false);
            }
            this.m4();
            this.n0();
        }
        n5() {
            if (this.ea && this.c1 != null) {
                this.c1.surfaceIsDirty = true;
                this.c1.doRefresh(false);
            }
            this.m4();
        }
        flush() {
            this.nf(true, true, true);
        }
        nf(a, b, c) {
            this.ar.y();
            if (a) {
                this.c8.b7();
                this.ar.y();
            }
            if (c) {
                this.al.l();
            }
            if (b) {
                this.c8.a.l();
            }
            this.ge = true;
        }
        ga() {
            return false;
        }
        qn(a, b) {
            if (this.rx != null) {
                this.q5(this.rx);
                this.rx = null;
                this.az = null;
            }
            this.rx = a;
            this.az = this.ar.k(2, a, b);
        }
        q5(a) {
            this.ar.ad(2, a);
            this.rx = null;
            this.az = null;
        }
        m6() {
            this.ar.ac(2, this.rx, this.az, false);
        }
        ou() {
            let a = false;
            let b = false;
            let c = false;
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                if (e.ez) {
                    a = true;
                }
                if (e.e0) {
                    b = true;
                }
                if (e.eq) {
                    c = true;
                }
            }
            this.e1 = a;
            this.e2 = b;
            this.ez = c;
        }
        get fd() {
            return this.ea;
        }
        mx() {
            this.c8.bq();
            for (let a = 0; a < this.series.count; a++) {
                this.series._inner[a].ql();
            }
        }
        fj() {
            return this.c8.am();
        }
        ix() {
            let a = this.is;
            this.is++;
            return a;
        }
        dh() {
            if (this.lz == null || this.c8.j.ae == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.c8.j.ae, this.lz);
        }
        dg() {
            if (this.ln == null || this.c8.j.ae == null) {
                return null;
            }
            return FontUtil.toFontInfo(this.c8.j.ae, this.ln);
        }
        q8() {
            let a = false;
            a = this.ed;
            this.ex = true;
            this.eo = (a && !this.gb) || this.v5 == 0;
            this.ex = false;
        }
        qd() {
            if (this.seriesDataUpdated != null) {
                this.seriesDataUpdated(this, EventArgs.empty);
            }
        }
        nz() {
            for (let a = 0; a < this.gi.count; a++) {
                this.gi._inner[a].notifySeriesCollectionChanged();
            }
        }
        n0() {
            for (let a = 0; a < this.gi.count; a++) {
                this.gi._inner[a].notifySeriesDataChanged();
            }
        }
        n1(a) {
            for (let b = 0; b < this.gi.count; b++) {
                this.gi._inner[b].notifyVisualPropertiesChanged(a);
            }
        }
        ny(a) {
            for (let b = 0; b < this.gi.count; b++) {
                this.gi._inner[b].notifyCursorPositionChanged(a);
            }
        }
        attachDataLegend(a) {
            this.gi.add(a);
        }
        detachDataLegend(a) {
            this.gi.remove(a);
        }
        get isDetached() {
            return this.destroyed || this.d1;
        }
        getDataLegendSeries() {
            let a = 0;
            for (let b = 0; b < this.series.count; b++) {
                if (this.series._inner[b].isStacked) {
                    this.series._inner[b].pz((c) => {
                        if (c.isUsableInLegend) {
                            a++;
                        }
                        if (c.ee) {
                            c.px((d) => {
                                if (d.isUsableInLegend) {
                                    a++;
                                }
                                return true;
                            });
                        }
                        return true;
                    });
                }
                else if (this.series._inner[b].ee) {
                    if (this.series._inner[b].isUsableInLegend) {
                        a++;
                    }
                    this.series._inner[b].px((c) => {
                        if (c.isUsableInLegend) {
                            a++;
                        }
                        return true;
                    });
                }
                else {
                    if (this.series._inner[b].isUsableInLegend) {
                        a++;
                    }
                }
            }
            let c = new Array(a);
            let d = 0;
            for (let e = 0; e < this.series.count; e++) {
                if (this.series._inner[e].isStacked) {
                    this.series._inner[e].pz((f) => {
                        if (f.isUsableInLegend) {
                            c[d] = f;
                            d++;
                        }
                        if (f.ee) {
                            f.px((g) => {
                                if (g.isUsableInLegend) {
                                    c[d] = g;
                                    d++;
                                }
                                return true;
                            });
                        }
                        return true;
                    });
                }
                else if (this.series._inner[e].ee) {
                    if (this.series._inner[e].isUsableInLegend) {
                        c[d] = this.series._inner[e];
                        d++;
                    }
                    this.series._inner[e].px((f) => {
                        if (f.isUsableInLegend) {
                            c[d] = f;
                            d++;
                        }
                        return true;
                    });
                }
                else {
                    if (this.series._inner[e].isUsableInLegend) {
                        c[d] = this.series._inner[e];
                        d++;
                    }
                }
            }
            return c;
        }
        mz(a) {
            if (this.gl == null) {
                this.gl = new List$1(CaptureImageSettings.$, 0);
            }
            this.gl.add(a);
            this.ar.z();
        }
        m0() {
            if (this.gl != null && this.gl.count > 0) {
                let a = this.gl.toArray();
                this.gl.clear();
                for (let c = 0; c < a.length; c++) {
                    let b = a[c];
                    this.jl(b, (d, e) => {
                        if (d != null) {
                            this.p7(b, d, e);
                        }
                    });
                }
            }
        }
        jl(a, b) {
            let c = "image/png";
            switch (a.a) {
                case 0:
                    c = "image/png";
                    break;
                case 1:
                    c = "image/jpeg";
                    break;
                default: return null;
            }
            let d = null;
            d = this.c8.j.at(this.c8.a8, this.c8.a7, this.hb, c, (e, f) => {
                if (a.b) {
                    let b_ = f;
                    if ((window.ClipboardItem)) {
                        navigator.clipboard.write([new window.ClipboardItem({ [b_.type]: b_ })]);
                    }
                }
                if (b != null) {
                    b(e, f);
                }
            });
            return d;
        }
        p7(a, b, c = null) {
            if (this.imageCaptured != null) {
                let d = new ImageCapturedEventArgs(b, c, a);
                this.imageCaptured(this, d);
            }
        }
    }
    SeriesViewer.$t = markType(SeriesViewer, 'SeriesViewer', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, IInternalLegendOwner_$type, IDataLegendTarget_$type, IToolbarTarget_$type, ISupportsAnimation_$type]);
    SeriesViewer.sy = DependencyProperty.i("Legend", IChartLegend_$type, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("Legend", b.oldValue, b.newValue);
    }));
    SeriesViewer.rz = DependencyProperty.i("AnimateSeriesWhenAxisRangeChanges", Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("AnimateSeriesWhenAxisRangeChanges", b.oldValue, b.newValue);
    }));
    SeriesViewer.su = DependencyProperty.i("IsWindowSyncedToVisibleRange", Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("IsWindowSyncedToVisibleRange", b.oldValue, b.newValue);
    }));
    SeriesViewer.tl = DependencyProperty.i("ShouldSimulateHoverMoveCrosshairPoint", Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("ShouldSimulateHoverMoveCrosshairPoint", b.oldValue, b.newValue);
    }));
    SeriesViewer.sd = DependencyProperty.i("HighlightingMode", SeriesHighlightingMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.ti = DependencyProperty.i("SelectionMode", SeriesSelectionMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesSelectionMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("SelectionMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.tg = DependencyProperty.i("SelectionBehavior", SeriesSelectionBehavior_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesSelectionBehavior_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("SelectionBehavior", b.oldValue, b.newValue);
    }));
    SeriesViewer.r7 = DependencyProperty.i("FocusMode", SeriesSelectionMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesSelectionMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("FocusMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.sl = DependencyProperty.i("HorizontalViewScrollbarMode", SeriesViewerScrollbarMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesViewerScrollbarMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.tz = DependencyProperty.i("VerticalViewScrollbarMode", SeriesViewerScrollbarMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesViewerScrollbarMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.sn = DependencyProperty.i("HorizontalViewScrollbarPosition", SeriesViewerHorizontalScrollbarPosition_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarPosition", b.oldValue, b.newValue);
    }));
    SeriesViewer.t1 = DependencyProperty.i("VerticalViewScrollbarPosition", SeriesViewerVerticalScrollbarPosition_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarPosition", b.oldValue, b.newValue);
    }));
    SeriesViewer.sh = DependencyProperty.i("HorizontalViewScrollbarFill", Brush.$, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarFill", b.oldValue, b.newValue);
    }));
    SeriesViewer.sm = DependencyProperty.i("HorizontalViewScrollbarOutline", Brush.$, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarOutline", b.oldValue, b.newValue);
    }));
    SeriesViewer.sp = DependencyProperty.i("HorizontalViewScrollbarStrokeThickness", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarStrokeThickness", b.oldValue, b.newValue);
    }));
    SeriesViewer.sk = DependencyProperty.i("HorizontalViewScrollbarMaxOpacity", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarMaxOpacity", b.oldValue, b.newValue);
    }));
    SeriesViewer.sg = DependencyProperty.i("HorizontalViewScrollbarCornerRadius", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarCornerRadius", b.oldValue, b.newValue);
    }));
    SeriesViewer.si = DependencyProperty.i("HorizontalViewScrollbarHeight", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarHeight", b.oldValue, b.newValue);
    }));
    SeriesViewer.sj = DependencyProperty.i("HorizontalViewScrollbarInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.sr = DependencyProperty.i("HorizontalViewScrollbarTrackStartInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarTrackStartInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.sq = DependencyProperty.i("HorizontalViewScrollbarTrackEndInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HorizontalViewScrollbarTrackEndInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.kc = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    SeriesViewer.so = DependencyProperty.i(SeriesViewer.kc, Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, true, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8(SeriesViewer.kc, b.oldValue, b.newValue);
    }));
    SeriesViewer.tw = DependencyProperty.i("VerticalViewScrollbarFill", Brush.$, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarFill", b.oldValue, b.newValue);
    }));
    SeriesViewer.t0 = DependencyProperty.i("VerticalViewScrollbarOutline", Brush.$, SeriesViewer.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarOutline", b.oldValue, b.newValue);
    }));
    SeriesViewer.t3 = DependencyProperty.i("VerticalViewScrollbarStrokeThickness", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarStrokeThickness", b.oldValue, b.newValue);
    }));
    SeriesViewer.ty = DependencyProperty.i("VerticalViewScrollbarMaxOpacity", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarMaxOpacity", b.oldValue, b.newValue);
    }));
    SeriesViewer.tv = DependencyProperty.i("VerticalViewScrollbarCornerRadius", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarCornerRadius", b.oldValue, b.newValue);
    }));
    SeriesViewer.t6 = DependencyProperty.i("VerticalViewScrollbarWidth", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarWidth", b.oldValue, b.newValue);
    }));
    SeriesViewer.tx = DependencyProperty.i("VerticalViewScrollbarInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.t5 = DependencyProperty.i("VerticalViewScrollbarTrackStartInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarTrackStartInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.t4 = DependencyProperty.i("VerticalViewScrollbarTrackEndInset", Number_$type, SeriesViewer.$, new PropertyMetadata(2, NaN, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("VerticalViewScrollbarTrackEndInset", b.oldValue, b.newValue);
    }));
    SeriesViewer.md = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    SeriesViewer.t2 = DependencyProperty.i(SeriesViewer.md, Boolean_$type, SeriesViewer.$, new PropertyMetadata(2, true, (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8(SeriesViewer.md, b.oldValue, b.newValue);
    }));
    SeriesViewer.sc = DependencyProperty.i("HighlightingBehavior", SeriesHighlightingBehavior_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(SeriesHighlightingBehavior_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("HighlightingBehavior", b.oldValue, b.newValue);
    }));
    SeriesViewer.sv = DependencyProperty.i("LegendHighlightingMode", LegendHighlightingMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(LegendHighlightingMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("LegendHighlightingMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.sx = DependencyProperty.i("LegendItemBadgeShape", LegendItemBadgeShape_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(LegendItemBadgeShape_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("LegendItemBadgeShape", b.oldValue, b.newValue);
    }));
    SeriesViewer.sw = DependencyProperty.i("LegendItemBadgeMode", LegendItemBadgeMode_$type, SeriesViewer.$, new PropertyMetadata(2, enumGetBox(LegendItemBadgeMode_$type, 0), (a, b) => {
        let c = typeCast(SeriesViewer.$, a);
        c.p8("LegendItemBadgeMode", b.oldValue, b.newValue);
    }));
    SeriesViewer.vx = Rect.empty;
    SeriesViewer.$$p = markDep(DependencyProperty, PropertyMetadata, SeriesViewer, 'p8', ['ActualPlotAreaBorderBrush:un:ry', [Brush.$, null], 'Brushes:ag:r0', [BrushCollection.$, null], 'CircleMarkerTemplate:rn:r1', [DataTemplate.$, null], 'CrosshairVisibility:v5:r2', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'DefaultInteraction:cw:r3', [InteractionState_$type, enumGetBox(InteractionState_$type, 3)], 'DiamondMarkerTemplate:ro:r4', [DataTemplate.$, null], 'DragModifier:uj:r5', [ModifierKeys_$type, enumGetBox(ModifierKeys_$type, 2)], 'FocusBrush:uo:r6', [Brush.$, null], 'FocusTransitionDuration:iw:r8', [1, 100], 'HexagonMarkerTemplate:rp:r9', [DataTemplate.$, null], 'HexagramMarkerTemplate:rq:sa', [DataTemplate.$, null], 'HighlightedValuesDisplayMode:bt:sb', [SeriesHighlightedValuesDisplayMode_$type, enumGetBox(SeriesHighlightedValuesDisplayMode_$type, 0)], 'HighlightingTransitionDuration:iy:se', [1, 300], 'HorizontalCrosshairBrush:uy:sf', [Brush.$, null], 'IsPagePanningAllowed:fa:ss', [0, true], 'IsSurfaceInteractionDisabled:fb:st', [0, false], 'MarkerAutomaticBehavior:bg:sz', [MarkerAutomaticBehavior_$type, enumGetBox(MarkerAutomaticBehavior_$type, 4)], 'MarkerBrushes:ah:s0', [BrushCollection.$, null], 'MarkerOutlines:ai:s1', [BrushCollection.$, null], 'Outlines:aj:s2', [BrushCollection.$, null], 'OverviewPlusDetailPaneVisibility:v6:s3', [Visibility_$type, enumGetBox(Visibility_$type, 1)], 'PanModifier:uk:s4', [ModifierKeys_$type, enumGetBox(ModifierKeys_$type, 4)], 'PentagonMarkerTemplate:rr:s5', [DataTemplate.$, null], 'PentagramMarkerTemplate:rs:s6', [DataTemplate.$, null], 'PlotAreaBackground:u1:s7', [Brush.$, null], 'PlotAreaBorderBrush:u2:s8', [Brush.$, null], 'PreferHigherResolutionTiles:fv:s9', [0, false], 'PreviewPathFill:u3:ta', [Brush.$, null], 'PreviewPathOpacity:hx:tb', [1, NaN], 'PreviewPathStroke:u4:tc', [Brush.$, null], 'PyramidMarkerTemplate:rt:td', [DataTemplate.$, null], 'RightButtonDefaultInteraction:cy:te', [InteractionState_$type, enumGetBox(InteractionState_$type, 3)], 'ScrollbarsAnimationDuration:iz:tf', [1, 300], 'SelectionBrush:u5:th', [Brush.$, null], 'SelectionTransitionDuration:i0:tj', [1, 300], 'ShouldPanOnMaximumZoom:f0:tk', [0, true], 'SquareMarkerTemplate:ru:tm', [DataTemplate.$, null], 'SubtitleHorizontalAlignment:uh:tn', [HorizontalAlignment_$type, enumGetBox(HorizontalAlignment_$type, 1)], 'Subtitle:lg:to', [2, null], 'TetragramMarkerTemplate:rv:tp', [DataTemplate.$, null], 'TitleHorizontalAlignment:ui:tq', [HorizontalAlignment_$type, enumGetBox(HorizontalAlignment_$type, 1)], 'Title:ls:tr', [2, null], 'TriangleMarkerTemplate:rw:ts', [DataTemplate.$, null], 'UseTiledZooming:gc:tt', [0, false], 'VerticalCrosshairBrush:u8:tu', [Brush.$, null], 'WindowPositionHorizontal:ii:t7', [1, NaN], 'WindowPositionVertical:ij:t8', [1, NaN], 'WindowRectMinHeight:ik:t9', [1, NaN], 'WindowRectMinWidth:il:ua', [1, NaN], 'WindowRect:v1:ub', [Rect.$, new Rect(0, 0, 0, 1, 1)], 'WindowResponse:cp:uc', [WindowResponse_$type, enumGetBox(WindowResponse_$type, 1)], 'WindowSizeMinHeight:im:ud', [1, NaN], 'WindowSizeMinWidth:io:ue', [1, NaN], 'ZoomCoercionMode:ct:uf', [ZoomCoercionMode_$type, enumGetBox(ZoomCoercionMode_$type, 0)], 'ZoomTileCacheSize:i1:ug', [1, 30]]);
    return SeriesViewer;
})();
/**
 * @hidden
 */
export let SeriesViewerView = /*@__PURE__*/ (() => {
    class SeriesViewerView extends Base {
        constructor(a) {
            super();
            this.p = null;
            this.a = null;
            this.n = null;
            this.o = null;
            this.g = null;
            this.b = null;
            this.ai = false;
            this.fi = null;
            this.ff = null;
            this.fe = null;
            this.fd = null;
            this.h = new SeriesViewerComponentsFromView();
            this.j = null;
            this.w = null;
            this.z = null;
            this.y = null;
            this.x = null;
            this.an = false;
            this.ao = false;
            this.bi = null;
            this.k = null;
            this.a9 = 0;
            this.a8 = 0;
            this.a7 = 0;
            this.e9 = Rect.empty;
            this.aj = false;
            this.fg = null;
            this.fh = null;
            this.a1 = 0;
            this.az = 0;
            this.a0 = 0;
            this.ay = 0;
            this.ak = true;
            this.aa = false;
            this.a2 = NaN;
            this.fa = Rect.empty;
            this.ab = false;
            this.af = false;
            this.ae = false;
            this.av = false;
            this.et = null;
            this.es = null;
            this.ad = false;
            this.ac = false;
            this.ag = true;
            this.ax = null;
            this.ar = false;
            this.bg = 0;
            this.ah = true;
            this.a8 = 0;
            this.a7 = 0;
            this.p = a;
            this.p.vc = { $type: Point_$type, x: NaN, y: NaN };
            this.p.cp = 1;
            this.j = new SeriesViewerViewManager(this);
            this.fd = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
            this.fe = ((() => {
                let $ret = new Line();
                $ret.visibility = 1;
                return $ret;
            })());
        }
        l() {
            return new DOMExecutionContext(this.j.ae);
        }
        co() {
            this.j.ba();
        }
        c4() {
            this.p.ex = true;
            this.p.v5 = 1;
            this.p.ex = false;
            this.ff = new Path();
            this.fi = new Rectangle();
            this.fi._visibility = 1;
            this.d6();
            this.g = new SeriesCollection();
            this.b = new AxisCollection();
            this.a = new CanvasRenderScheduler();
            this.a.o(this);
            this.a.h.add(this.p.am);
            if (this.p.v6 == 0) {
                this.cn();
            }
            let a = this.p;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, runOn(this, this.ct));
            let b = this.p;
            b.gridAreaRectChanged = delegateCombine(b.gridAreaRectChanged, runOn(this, this.cs));
            this.o = new OverviewPlusDetailViewportHost(this);
            this.dp();
        }
        e() {
            for (let a = 0; a < this.g.count; a++) {
                if (this.g._inner[a].a9.a$e) {
                    return this.g._inner[a];
                }
            }
            return null;
        }
        cn() {
            if (this.n == null) {
                this.n = this.j.g();
            }
            this.p.c1.provideContext(this.z);
            this.p.c1.provideContainer(this.bi);
            this.p.c1.provideEventSource(this.k);
            this.n.world = new Rect(0, 0, 0, 1, 1);
            this.n.window = this.p.v1;
            this.n.surfaceViewer = TypeRegistrar.create("SeriesViewerSurfaceViewer", this.p, this);
            this.n.viewScheduler = this.a;
            this.em();
            let a = this.n;
            a.windowChanging = delegateCombine(a.windowChanging, runOn(this, this.dn));
            let b = this.n;
            b.windowChanged = delegateCombine(b.windowChanged, runOn(this, this.dm));
        }
        dn(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.fh(), this.p.fi(), this.n.world);
            }
            if (c.isEmpty) {
                this.n.window = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            if (this.p.cp == 1) {
                let d = this.p.v0.width / this.p.v0.height;
                c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
                this.p.v1 = c;
            }
        }
        dm(a, b) {
            let c = b.newValue;
            if (this.n != null) {
                c = this.n.changeRect(b.oldValue, b.newValue, this.p.fh(), this.p.fi(), this.n.world);
            }
            if (c.isEmpty) {
                c = b.oldValue;
            }
            else if (!c.equals1(b.newValue)) {
                this.n.window = c;
            }
            let d = this.p.v0.width / this.p.v0.height;
            c = new Rect(0, c.left / d, c.top, c.width / d, c.height);
            this.p.v1 = c;
        }
        em() {
            if (this.n == null) {
                return;
            }
            if (this.p.v6 != 0) {
                return;
            }
            let a = 1;
            if (this.p.v0.isEmpty == false) {
                a = this.p.v0.width / this.p.v0.height;
            }
            let b = this.n.world;
            let c = new Rect(0, 0, 0, a, 1);
            this.n.world = c;
            if (b.width != c.width || b.height != c.height || b.x != c.x || b.y != c.y) {
                this.n.surfaceViewer.isDirty = true;
            }
            this.n.window = new Rect(0, this.p.v1.left * a, this.p.v1.top, this.p.v1.width * a, this.p.v1.height);
        }
        ct(a, b) {
            this.em();
        }
        cs(a, b) {
            this.em();
        }
        cb(a, b, c) {
            let d = true;
            for (let e of fromEnum(this.p.series)) {
                if (d && e.gy) {
                    d = false;
                    if (!c.a.e) {
                        c.a.l(0, 0, a, b);
                    }
                }
                e.rp(new Rect(0, 0, 0, a, b), c);
            }
        }
        d5() {
            this.j.bm();
        }
        cd() {
        }
        d7() {
            this.j.bn();
        }
        ck() {
            for (let a = 0; a < this.p.series.count; a++) {
                this.p.series._inner[a].ct.ar();
            }
        }
        cc() {
        }
        ce() {
        }
        dy(a) {
            let b = this.g.indexOf(a);
            if (b >= 0) {
                this.g.removeAt(b);
            }
            if (a.isStacked) {
                a.pz((c) => {
                    c.c9 = null;
                    b = this.g.indexOf(c);
                    if (b >= 0) {
                        this.g.removeAt(b);
                    }
                    if (c.ee) {
                        c.px((d) => {
                            d.c9 = null;
                            b = this.g.indexOf(d);
                            if (b >= 0) {
                                this.g.removeAt(b);
                            }
                            return true;
                        });
                    }
                    return true;
                });
            }
            if (a.ee) {
                a.px((c) => {
                    c.c9 = null;
                    b = this.g.indexOf(c);
                    if (b >= 0) {
                        this.g.removeAt(b);
                    }
                    return true;
                });
            }
            this.p.qk();
            a.q6(null, null);
            this.dc();
        }
        dc() {
            if (this.p.destroyed) {
                return;
            }
            if (this.g.count == 0) {
                if (this.y != null && Rect.l_op_Inequality(this.p.v0, null) && !this.p.v0.isEmpty) {
                    this.er();
                }
            }
            this.p.al.r(this.y, this.x);
        }
        er() {
            if (this.g.count > 0) {
                return;
            }
            if (this.y != null && Rect.l_op_Inequality(this.p.v0, null) && !this.p.v0.isEmpty) {
                if (this.p.hb != 1) {
                    this.y.aa();
                    this.y.ab(this.p.hb, this.p.hb);
                }
                if (!this.y.e) {
                    this.y.l(this.p.v0.left, this.p.v0.top, this.p.v0.width, this.p.v0.height);
                }
                if (this.p.hb != 1) {
                    this.y.z();
                }
            }
        }
        aq(a) {
            a.qy(a.ct.bx, this.e9);
            return this.g.contains(a);
        }
        get au() {
            return this.ai;
        }
        set au(a) {
            this.ai = a;
        }
        bp(a) {
            if (!this.g.contains(a)) {
                this.g.add(a);
                if (a.isStacked) {
                    a.pz((b) => {
                        this.g.add(b);
                        if (b.ee) {
                            b.px((c) => {
                                if (!this.g.contains(c)) {
                                    this.g.add(c);
                                }
                                return true;
                            });
                        }
                        return true;
                    });
                }
                if (a.ee) {
                    a.px((b) => {
                        if (!this.g.contains(b)) {
                            this.g.add(b);
                        }
                        return true;
                    });
                }
                this.p.qk();
            }
            a.q6(this.y, this.x);
            this.p.nr();
        }
        dt(a) {
            this.x = a;
            for (let b = 0; b < this.g.count; b++) {
                this.g._inner[b].q6(this.y, this.x);
            }
            for (let c = 0; c < this.b.count; c++) {
                this.b._inner[c].hy(this.y, this.x);
            }
        }
        bx() {
        }
        bt() {
            this.cf();
            this.ck();
        }
        cf() {
            this.fi._visibility = 1;
            this.cq();
        }
        ca() {
        }
        dr() {
        }
        d8() {
            this.fi._visibility = 0;
            this.cq();
        }
        eg(a) {
            this.fi.o = a.top + this.p.v0.top;
            this.fi.n = a.left + this.p.v0.left;
            this.fi.width = a.width;
            this.fi.height = a.height;
            this.db();
            this.fi._fill = null;
            this.fi.ad = 0.5;
            this.cq();
        }
        bw() {
        }
        df() {
        }
        eo(a, b, c, d) {
            this.fe.an = a;
            this.fe.ap = b;
            this.fe.ao = c;
            this.fe.aq = d;
            this.cq();
        }
        ed() {
            this.fe._visibility = 0;
            this.cq();
        }
        cl() {
            if (this.fe._visibility == 0) {
                this.fe._visibility = 1;
                this.cq();
            }
        }
        eh(a, b, c, d) {
            this.fd.an = a;
            this.fd.ap = b;
            this.fd.ao = c;
            this.fd.aq = d;
            this.cq();
        }
        d9() {
            this.fd._visibility = 0;
            this.cq();
        }
        cg() {
            if (this.fd._visibility == 0) {
                this.fd._visibility = 1;
                this.cq();
            }
        }
        cj() {
            this.ff._visibility = 1;
            this.cq();
        }
        e6(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        e7(a) {
            let b = new PathFigureCollection();
            let c = new PathFigure();
            c._isClosed = true;
            c._startPoint = { $type: Point_$type, x: a.left, y: a.top };
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.top }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.right, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.bottom }));
            c._segments.add(new LineSegment(0, { $type: Point_$type, x: a.left, y: a.top }));
            b.add(c);
            return b;
        }
        en(a, b) {
            b.intersect(a);
            let c = new PathGeometry();
            c.c = this.e7(a);
            let d = new PathGeometry();
            d.c = this.e6(b);
            let e = new GeometryGroup();
            e.d.add(c);
            e.d.add(d);
            this.ff.an = e;
            this.db();
            this.cq();
        }
        ec() {
            this.ff._visibility = 0;
            this.cq();
        }
        ep(a) {
        }
        dw(a) {
            let b = this.b.indexOf(a);
            this.b.removeAt(b);
            a.hy(null, null);
            this.d3();
            this.p.qr(a.name, true);
        }
        dx(a) {
        }
        bo(a) {
            if (!this.b.contains(a)) {
                this.b.add(a);
            }
            a.hy(this.y, this.x);
            this.d3();
        }
        bl(a) {
        }
        i() {
            this.h.a = this.n;
            return this.h;
        }
        static aw(a) {
            let b = a.c9.series;
            let c = new List$1(Series.$, 0);
            for (let d = 0; d < b.count; d++) {
                c.add(b._inner[d]);
                if (b._inner[d].isStacked) {
                    b._inner[d].pz((e) => {
                        c.add(e);
                        return true;
                    });
                }
            }
            return c;
        }
        d2() {
            this.p.v1 = new Rect(0, 0, 0, 1, 1);
        }
        c0(a) {
            if (a == this.bi) {
                return;
            }
            if (a == null) {
                if (this.k != null) {
                    this.k.av();
                }
                this.j.bg(null);
                this.w = null;
                this.z = null;
                this.y = null;
                this.x = null;
                this.k = null;
                if (this.p.c1 != null) {
                    this.p.c1.provideContext(null);
                    this.p.c1.provideContainer(null);
                    this.p.c1.provideEventSource(null);
                }
                return;
            }
            this.bi = a;
            if (this.au) {
                this.a.h.add(this.p.al);
            }
            this.j.bg(a);
            this.w = this.j.t;
            this.z = this.j.w;
            this.y = this.j.v;
            this.x = this.j.u;
            this.an = false;
            try {
                this.an = (window.navigator.msPointerEnabled && window.MSGesture !== undefined);
            }
            catch (b) {
            }
            this.ao = false;
            try {
                this.ao = (window.PointerEvent !== undefined);
            }
            catch (c) {
            }
            if (this.an || this.ao) {
                this.av = true;
            }
            this.k = this.j.f;
            if (this.k != null) {
                this.k.bl = this.p.v0;
                this.k.ao = runOn(this, this.as);
                let d = this.k;
                d.onContactCompleted = delegateCombine(d.onContactCompleted, (d, e) => this.cx(d, e, this.k.am));
                let e = this.k;
                e.onContactMoved = delegateCombine(e.onContactMoved, runOn(this, this.cy));
                let f = this.k;
                f.onContactStarted = delegateCombine(f.onContactStarted, runOn(this, this.cz));
                let g = this.k;
                g.onDragCompleted = delegateCombine(g.onDragCompleted, runOn(this.p, this.p.on));
                let h = this.k;
                h.onFlingStarted = delegateCombine(h.onFlingStarted, runOn(this, this.al));
                let i = this.k;
                i.onDragDelta = delegateCombine(i.onDragDelta, (i) => this.p.oo(i));
                let j = this.k;
                j.onDragStarted = delegateCombine(j.onDragStarted, (j) => this.p.op(j, true));
                let k = this.k;
                k.onKeyDown = delegateCombine(k.onKeyDown, runOn(this.p, this.p.fs));
                let l = this.k;
                l.onMouseDown = delegateCombine(l.onMouseDown, runOn(this, this.c6));
                let m = this.k;
                m.onMouseLeave = delegateCombine(m.onMouseLeave, runOn(this, this.c7));
                let n = this.k;
                n.onMouseOver = delegateCombine(n.onMouseOver, runOn(this, this.c8));
                let o = this.k;
                o.onMouseUp = delegateCombine(o.onMouseUp, runOn(this, this.c9));
                let p = this.k;
                p.onMouseWheel = delegateCombine(p.onMouseWheel, runOn(this.p, this.p.ft));
                if (this.k.an) {
                    let q = this.k;
                    q.onZoomDelta = delegateCombine(q.onZoomDelta, (q, r, s, t) => this.p.pu(q, r, s, t));
                    let r = this.k;
                    r.onZoomStarted = delegateCombine(r.onZoomStarted, (r, s, t, u) => this.p.py(r, s, t, u));
                    let s = this.k;
                    s.onZoomCompleted = delegateCombine(s.onZoomCompleted, (s, t, u, v) => {
                        if (this.k.af) {
                            this.p.pq();
                        }
                        this.p.pt(s, t, u, v);
                    });
                }
                else {
                    let t = this.k;
                    t.onPinchDelta = delegateCombine(t.onPinchDelta, (t, u) => this.p.o6(u));
                    let u = this.k;
                    u.onPinchStarted = delegateCombine(u.onPinchStarted, (u, v) => this.p.o7(u));
                    let v = this.k;
                    v.onGestureCompleted = delegateCombine(v.onGestureCompleted, (v, w) => this.p.os(v));
                }
                let w = this.k;
                w.onDoubleTap = delegateCombine(w.onDoubleTap, (w) => this.p.om(w));
                let x = this.k;
                x.onHold = delegateCombine(x.onHold, runOn(this, this.c3));
            }
            if (this.p.c1 != null) {
                this.p.c1.provideContext(this.z);
                this.p.c1.provideContainer(a);
                this.p.c1.provideEventSource(this.k);
            }
            for (let y of fromEnum(this.b)) {
                y.a5.a2();
                this.bo(y);
            }
            for (let z of fromEnum(this.g)) {
                this.bp(z);
            }
        }
        al(a, b, c) {
            if (this.p.ei) {
                return false;
            }
            return true;
        }
        cy(a, b) {
            this.p.oe(a, b);
        }
        cz(a, b) {
            this.p.bb.f$w(this.p, a, b);
        }
        c3(a) {
            this.p.o8(a);
        }
        cx(a, b, c) {
            this.p.od(a, b, c);
        }
        du(a) {
        }
        get_ap() {
            return false;
        }
        get ap() {
            return this.get_ap();
        }
        ef() {
            this.a9 = FontUtil.getCurrentFontHeight(this.j.ae, this.p.getFontInfo());
        }
        f(a, b, c, d) {
            return {
                ret: ((() => { let e = this.p.bb.f$c(this.p, this.g, this.x, a, b, c, d); c = e.p5; return e.ret; })()),
                p2: c
            };
        }
        bd() {
            return this.a8;
        }
        bc() {
            return this.a7;
        }
        cu() {
            this.j.bd();
        }
        c1(a, b) {
            let c = this.a8;
            let d = this.a7;
            if (this.a8 != a) {
                this.aj = true;
            }
            this.a8 = a;
            if (this.a7 != b) {
                this.aj = true;
            }
            this.a7 = b;
            if (this.aj) {
                let e = new Size(1, c, d);
                let f = new Size(1, a, b);
                this.p.pp(e, f);
            }
            this.dj();
            this.d3();
            this.p.al.r(this.y, this.x);
        }
        b6(a) {
            this.fg = a;
        }
        b9(a) {
            this.fh = a;
        }
        b8() {
            this.a.r(this.z, null);
        }
        d3() {
            if (this.p.destroyed) {
                return;
            }
            this.ag = true;
            this.p.ar.z();
        }
        b2() {
            if (this.a8 == 0 || this.a7 == 0) {
                return;
            }
            this.ag = false;
            this.aa = false;
            if (this.ak) {
                this.di();
                this.de();
                this.ak = false;
                this.cq();
            }
            let a = this.a8;
            let b = this.a7;
            let c = this.p.hv;
            let d = this.p.h0;
            let e = this.p.hi;
            let f = this.p.h9;
            let g = this.p.hg;
            let h = this.p.hh;
            if (isNaN_(g)) {
                g = this.a9 / 2;
            }
            if (isNaN_(h)) {
                h = 0;
            }
            let i = this.p.fy();
            let j = new List$1(AxisLabelPanelBase.$, 0);
            for (let k of fromEnum(this.b)) {
                if (k.aw != null) {
                    j.add(k.aw);
                    k.aw.bx = () => this.aj;
                }
            }
            if (i) {
                let l = false;
                let m = false;
                let n = false;
                let o = false;
                for (let p of fromEnum(j)) {
                    if (LabelPanelArranger.b(p) == 2 && (p.ad.az == null || p.ad.az.visibility == 0)) {
                        l = true;
                    }
                    if (LabelPanelArranger.b(p) == 3 && (p.ad.az == null || p.ad.az.visibility == 0)) {
                        m = true;
                    }
                    if (LabelPanelArranger.b(p) == 0 && (p.ad.az == null || p.ad.az.visibility == 0)) {
                        n = true;
                    }
                    if (LabelPanelArranger.b(p) == 1 && (p.ad.az == null || p.ad.az.visibility == 0)) {
                        o = true;
                    }
                    if (p.ad != null && p.ad.az != null) {
                        p.ad.az.c = p.ad.az.location;
                    }
                }
                if (l || m) {
                    if (!n && isNaN_(f)) {
                        f = g;
                    }
                    if (!o && isNaN_(e)) {
                        e = g;
                    }
                }
                if (o || n) {
                    if (!l && isNaN_(c)) {
                        c = h;
                    }
                    if (!m && isNaN_(d)) {
                        d = h;
                    }
                }
            }
            if (isNaN_(f)) {
                f = 0;
            }
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = 0;
            }
            if (isNaN_(e)) {
                e = 0;
            }
            let q = this.bf();
            f += q;
            let r = this.be();
            f += r;
            let s = new Rect(0, c, f, a - (c + d), b - (f + e));
            s = LabelPanelArranger.e(j, s);
            let t = new Size(1, Math.max(0, a - (c + d)), Math.max(0, b - (f + e)));
            this.a1 = f - (q + r);
            this.az = c;
            this.a0 = d;
            this.ay = e;
            this.e9 = s;
            let u = ((() => {
                let $ret = new LabelPanelsArrangeState();
                $ret.f = c;
                $ret.c = c;
                $ret.a = f + t.height;
                $ret.b = f + t.height;
                $ret.g = c + t.width;
                $ret.d = c + t.width;
                $ret.h = f;
                $ret.e = f;
                return $ret;
            })());
            LabelPanelArranger.d(j, u, this.e9, (v, w) => {
                if (!v.c1.equals1(w)) {
                    if (v.ad != null) {
                        v.ad.cr = true;
                    }
                    v.c1 = w;
                    v.ad.a5.ai();
                }
            });
            let v = false;
            if (this.aj) {
                this.aj = false;
                v = true;
            }
            this.p.p2(this.p.v0, this.e9);
            for (let w of fromEnum(this.b)) {
                if (Rect.l_op_Equality(w.ke, null) || w.ke.isEmpty) {
                    this.aa = true;
                }
                if (w.ke.equals1(this.e9) && !this.j.y()) {
                    continue;
                }
                w.hq(w.ke, this.e9);
            }
            for (let x of fromEnum(this.g)) {
                if (Rect.l_op_Equality(x.ct.bx, null) || x.ct.bx.isEmpty) {
                    this.aa = true;
                }
                if (x.ct.bx.equals1(this.e9) && !this.j.y()) {
                    continue;
                }
                x.qy(x.ct.bx, this.e9);
            }
            this.ek();
            this.dv(this.e9);
            this.j.bc(false);
        }
        ek() {
            if (this.p.c1 != null && !this.e9.isEmpty) {
                let a = this.p.c1;
                let b = (this.p.ed) ? this.e9.width : Number.POSITIVE_INFINITY;
                let c = (this.p.ed) ? this.e9.height : Number.POSITIVE_INFINITY;
                let d = a.getDesiredSize(new Size(1, b, c));
                this.p.c1.arrange(new Rect(0, this.e9.right - d.width, this.e9.bottom - d.height, d.width, d.height));
                this.em();
            }
        }
        v() {
            let a = this.p.getFontInfo();
            let b = this.s();
            if (this.p.dh() != null) {
                a = this.p.dh();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        u() {
            let a = this.p.getFontInfo();
            let b = this.r();
            if (this.p.dg() != null) {
                a = this.p.dg();
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e5() {
            let a = this.p.getFontBrush();
            let b = this.e2();
            if (this.p.u7 != null) {
                a = this.p.u7;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        e4() {
            let a = this.p.getFontBrush();
            let b = this.e1();
            if (this.p.u6 != null) {
                a = this.p.u6;
            }
            else if (b != null) {
                a = b;
            }
            return a;
        }
        bf() {
            if (this.p.ls == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            let a = this.v();
            let b = 0;
            b = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let c = this.fm();
            b += c.top + c.bottom;
            return b;
        }
        be() {
            if (this.p.lg == null || !(typeCast(XamDataChart.$, this.p) !== null)) {
                return 0;
            }
            if (!isNaN_(this.a2)) {
                return this.a2;
            }
            let a = this.u();
            this.a2 = FontUtil.getCurrentFontHeight(this.j.ae, a);
            let b = this.fl();
            this.a2 += b.top + b.bottom;
            return this.a2;
        }
        fm() {
            let a = this.j.ce();
            let b = isNaN_(this.p.h8) ? a.top : this.p.h8;
            let c = isNaN_(this.p.h6) ? a.left : this.p.h6;
            let d = isNaN_(this.p.h7) ? a.right : this.p.h7;
            let e = isNaN_(this.p.h5) ? a.bottom : this.p.h5;
            return new Thickness(1, c, b, d, e);
        }
        fl() {
            let a = this.j.cd();
            let b = isNaN_(this.p.h4) ? a.top : this.p.h4;
            let c = isNaN_(this.p.h2) ? a.left : this.p.h2;
            let d = isNaN_(this.p.h3) ? a.right : this.p.h3;
            let e = isNaN_(this.p.h1) ? a.bottom : this.p.h1;
            return new Thickness(1, c, b, d, e);
        }
        dv(a) {
        }
        cq() {
            if (!this.af) {
                if (this.z != null) {
                    this.af = true;
                    this.a.r(this.z, null);
                }
            }
        }
        d0() {
            if (this.z == null) {
                return;
            }
            if (this.z.d) {
                if (this.p.hb != 1) {
                    this.z.aa();
                    this.z.ab(this.p.hb, this.p.hb);
                }
                if (!this.fa.isEmpty) {
                    if (!this.au) {
                        if (!this.z.e) {
                            this.z.l(this.fa.left, this.fa.top, this.fa.width, this.fa.height);
                        }
                    }
                }
            }
            this.d1();
            if (this.z.d) {
                if (this.p.hb != 1) {
                    this.z.z();
                }
            }
        }
        isValid() {
            return true;
        }
        preRender() {
            this.j.a6(this.a8, this.a7);
            this.ds();
        }
        ds() {
        }
        d1() {
            if (this.z.d) {
                this.fa = new Rect(0, 0, 0, this.a8, this.a7);
                if (this.ax != null && this.ax.count > 0) {
                    this.ci();
                    this.z.aa();
                    this.z.af(this.p.v0);
                    if (!this.au) {
                        if (!this.z.e) {
                            this.z.l(this.p.v0.left, this.p.v0.top, this.p.v0.width, this.p.v0.height);
                        }
                    }
                }
                this.z.s(this.fd);
                this.z.s(this.fe);
                this.z.t(this.ff);
                this.z.w(this.fi);
                this.z.ad(this.v());
                if (this.et != null) {
                    this.et.ao = this.e5();
                    this.z.x(this.et);
                }
                this.z.ad(this.u());
                if (this.es != null) {
                    this.es.ao = this.e4();
                    this.z.x(this.es);
                }
                if (this.ax != null && this.ax.count > 0) {
                    this.j.bl(this.ax);
                    this.z.z();
                }
                if (this.ar) {
                    this.eb();
                    this.ar = false;
                    this.ax.clear();
                    this.p.bb.f$l(this.p);
                    this.cq();
                }
                if (this.p.ej) {
                    if (this.fh != null) {
                        this.z.w(this.fh);
                    }
                    if (this.fg != null) {
                        this.z.w(this.fg);
                    }
                }
            }
        }
        c2() {
            this.j.bh();
        }
        cw() {
            this.j.bf();
        }
        fb() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        e8() {
            return this.j.b8();
        }
        d6() {
            this.p.rn = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.d;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rw = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.m;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rt = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.j;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.ru = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.k;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.ro = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.e;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rr = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.h;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rp = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.f;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rv = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.l;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rs = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.i;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
            this.p.rq = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.g;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        ee() {
            this.j.bp();
            this.d4();
            let a = this.a9;
            this.ef();
            if (a != this.a9) {
                this.p.nr();
            }
        }
        dp() {
            if (this.p.v6 == 0) {
                this.cn();
                this.p.nn();
            }
            if (this.p.c1 != null) {
                let a = this.p.v6;
                this.p.c1.visibility = a;
                this.p.c1.doRefresh(false);
            }
        }
        as(a) {
            return this.p.bb.f$i(this.p, a);
        }
        c8(a, b, c) {
            this.p.bb.f$z(this.p, this.g, this.x, a, b, c);
            this.p.m1(a, this.p.cz != 0 || this.p.fl);
        }
        c7(a) {
            this.p.bb.f$y(this.p, a);
        }
        c6(a) {
            this.p.bb.f$x(this.p, this.k, a);
        }
        c9(a) {
            this.p.bb.f$aa(this.p, this.k, a);
        }
        d4() {
        }
        get ez() {
            return this.k.bi;
        }
        eq(a) {
            if (this.k != null) {
                this.k.bl = this.p.v0;
            }
        }
        cr(a) {
            this.p.bb.f$ad(this.p, a);
            this.p.ed = a;
        }
        bk(a) {
            this.p.q8();
            this.j.bw(a);
            if (this.p.c1 != null) {
                this.p.c1.mobileMode = a;
            }
            this.el();
        }
        el() {
            this.p.re();
        }
        get isDirty() {
            return this.af;
        }
        set isDirty(a) {
            this.af = a;
        }
        undirty(a) {
            this.af = false;
            this.d0();
        }
        get index() {
            return 10;
        }
        postRender() {
        }
        b7() {
            this.d3();
        }
        ch() {
            this.j.a9();
        }
        ea() {
            this.j.bo();
        }
        bv(a) {
            this.j.ay();
        }
        bm(a) {
            this.j.au(a);
        }
        ei(a) {
            this.j.bu(a);
        }
        ej(a) {
            this.j.bv(a);
        }
        bn(a) {
            this.j.av(a);
        }
        dz(a) {
            this.j.bk(a);
        }
        da(a) {
            this.p.al.r(this.y, this.z);
        }
        bu(a) {
        }
        m(a) {
            if (this.p.ed) {
                return 2;
            }
            else {
                return 1;
            }
        }
        c5() {
            if (this.k != null) {
                this.k.ae = this.p.fb;
            }
            if (this.n != null) {
                this.n.isSurfaceInteractionDisabled = this.p.fb;
            }
        }
        bb(a, b) {
            if (a == null || this.z == null) {
                return 0;
            }
            this.z.ad(b);
            return this.z.f(a);
        }
        ba(a, b) {
            if (a == null) {
                return 0;
            }
            let c = 0;
            c = FontUtil.getCurrentFontHeight(this.j.ae, b);
            return c;
        }
        dj() {
            this.ak = true;
            this.d3();
            this.cq();
        }
        eu(a, b, c, d) {
            if (a == null) {
                return null;
            }
            let e = ((() => {
                let $ret = new TextBlock();
                $ret.al = a;
                $ret.o = b.top;
                return $ret;
            })());
            let f = this.bb(e, c);
            e.o = b.top;
            let g = this.ba(a, c);
            e.m = f;
            e.l = g;
            switch (d) {
                case 0:
                    e.n = b.left;
                    break;
                case 2:
                    e.n = Math.max((this.a8 - b.right) - f, b.left);
                    break;
                case 1:
                case 3:
                default:
                    let h = (this.a8 / 2) - (f / 2);
                    h += b.left;
                    h -= b.right;
                    e.n = h;
                    break;
            }
            return e;
        }
        di() {
            this.et = typeCast(XamDataChart.$, this.p) !== null ? this.eu(this.p.ls, this.fm(), this.v(), this.ey()) : null;
        }
        de() {
            this.a2 = NaN;
            this.es = typeCast(XamDataChart.$, this.p) !== null ? this.eu(this.p.lg, this.fl(), this.u(), this.ex()) : null;
            if (this.es != null) {
                this.es.o += this.bf();
            }
        }
        c(a) {
            let b = this.j.c();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.aw);
                if (a.aj == null) {
                    if (c == 4) {
                        return 4;
                    }
                    if (c == 5) {
                        return 3;
                    }
                }
                else {
                    if (c == 4) {
                        return 3;
                    }
                    if (c == 5) {
                        return 4;
                    }
                }
                if (c == 0) {
                    return 3;
                }
                return 4;
            }
            return b;
        }
        d(a) {
            let b = this.j.d();
            if (b == 0) {
                let c = LabelPanelArranger.b(a.aw);
                if (a.aj == null) {
                    if (c == 7) {
                        return 1;
                    }
                    if (c == 6) {
                        return 2;
                    }
                }
                else {
                    if (c == 7) {
                        return 2;
                    }
                    if (c == 6) {
                        return 1;
                    }
                }
                if (c == 3) {
                    return 2;
                }
                return 1;
            }
            return b;
        }
        dk() {
            if (!isNaN_(this.p.ha)) {
                if (!isNaN_(DeviceUtils.a(this.p.hw))) {
                    this.p.hb = DeviceUtils.a(this.p.hw);
                }
                else {
                    this.co();
                }
            }
            if (!this.p.e0) {
                this.j.a5();
            }
        }
        dl() {
            if (!isNaN_(DeviceUtils.a(this.p.ha))) {
                this.p.hb = DeviceUtils.a(this.p.ha);
            }
            if (!this.p.e0) {
                this.j.a4();
            }
        }
        t() {
            return this.j.r();
        }
        e3() {
            return this.j.b7();
        }
        q() {
            return this.j.q();
        }
        e0() {
            return this.j.b6();
        }
        s() {
            return this.j.p();
        }
        r() {
            return this.j.o();
        }
        e2() {
            return this.j.b5();
        }
        e1() {
            return this.j.b4();
        }
        get a4() {
            return this.az;
        }
        get a5() {
            return this.a0;
        }
        get a6() {
            return this.a1;
        }
        get a3() {
            return this.ay;
        }
        get ew() {
            return this.et;
        }
        get ev() {
            return this.es;
        }
        fc() {
            return new Rect(0, 0, 0, this.a8, this.a7);
        }
        fk() {
            return this.j.cg();
        }
        fj() {
            return this.j.cf();
        }
        dd(a, b) {
            this.ac = true;
        }
        dh(a, b) {
            this.ad = true;
        }
        ey() {
            if (this.ad) {
                return this.p.ui;
            }
            else {
                let a = 1;
                switch (this.j.as()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        ex() {
            if (this.ac) {
                return this.p.uh;
            }
            else {
                let a = 1;
                switch (this.j.ar()) {
                    case "left":
                        a = 0;
                        break;
                    case "right":
                        a = 2;
                        break;
                }
                return a;
            }
        }
        bq() {
            if (this.ag) {
                this.b2();
                if (this.aa) {
                    this.p.ar.y();
                }
                if (this.ag) {
                    this.b2();
                }
            }
        }
        am() {
            if (this.p.ge) {
                return false;
            }
            if ((dateNow().getTime() - this.p.gn.getTime()) < 300) {
                return true;
            }
            return false;
        }
        b5() {
            this.j.a6(this.a8, this.a7);
        }
        cp() {
            this.j.bb(this.p.fa);
        }
        at(a) {
            let b = this.p.vl;
            let c = b.top > 0;
            let d = b.left > 0;
            let e = b.right < 1;
            let f = b.bottom < 1;
            let g = a.y < 0;
            let h = a.y > 0;
            let i = a.x < 0;
            let j = a.x > 0;
            if (c && g) {
                return true;
            }
            if (d && i) {
                return true;
            }
            if (f && h) {
                return true;
            }
            if (j && e) {
                return true;
            }
            return false;
        }
        dq() {
            this.j.bj();
            this.p.al.r(this.y, this.x);
            this.p.am.r(this.y, null);
            this.p.ak.r(this.y, this.x);
            this.a.r(this.z, null);
        }
        b3(a, b, c) {
            this.ar = false;
            if (this.ax == null) {
                this.ax = new List$1(ITileZoomTile_$type, 0);
            }
            for (let d = 0; d < this.ax.count; d++) {
                while (d < this.ax.count && !a.containsKey(this.ax._inner[d].content)) {
                    this.ax.removeAt(d);
                }
            }
            for (let e = 0; e < b.count; e++) {
                this.ax.add(b._inner[e]);
            }
            this.cq();
        }
        bh(a, b, c) {
            return this.j.an(a, b, c);
        }
        b0() {
            this.j.a2();
        }
        b1(a) {
            this.j.a3(a);
        }
        cm() {
            if (this.ax == null) {
                return;
            }
            this.ar = true;
            this.cq();
        }
        by() {
            this.j.a0();
        }
        br() {
            this.j.aw();
        }
        bz(a) {
            this.j.a1(a);
            this.p.ok();
        }
        bs() {
            this.j.ax();
            this.p.oi();
        }
        ci() {
            if (this.ah) {
                this.ah = false;
                if (!this.y.e) {
                    this.y.l(this.p.v0.left, this.p.v0.top, this.p.v0.width, this.p.v0.height);
                }
                this.p.al.e = true;
            }
        }
        eb() {
            if (!this.ah) {
                this.ah = true;
                this.p.al.e = false;
                this.p.al.r(this.y, this.x);
            }
        }
        dg() {
        }
        cv() {
            this.j.be();
        }
        db() {
            this.ff._fill = this.p.u3 == null ? this.j.b3() : this.p.u3;
            this.ff._opacity = isNaN_(this.p.hx) ? 0.1 : this.p.hx;
            this.fi._stroke = this.p.u4 == null ? this.j.b3() : this.p.u4;
        }
        b4(a) {
            if (this.j.ae == null || (this.j.ae != a)) {
                this.p.provideContainer(a);
            }
        }
        bj(a, b, c) {
            return this.j.ao(a, b, c);
        }
    }
    SeriesViewerView.$t = markType(SeriesViewerView, 'SeriesViewerView', Base.$, [ISchedulableRender_$type]);
    return SeriesViewerView;
})();
/**
 * @hidden
 */
export let OverviewPlusDetailViewportHost = /*@__PURE__*/ (() => {
    class OverviewPlusDetailViewportHost extends Base {
        constructor(a) {
            super();
            this.a = null;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.a = a;
        }
        getViewInfo(a, b) {
            a = new Rect(0, 0, 0, this.a.n.worldRectViewport.width, this.a.n.worldRectViewport.height);
            b = SeriesViewer.vx;
            return {
                p0: a,
                p1: b
            };
        }
        getEffectiveViewport() {
            if (!this.a.p.e9) {
                if (this.a.p.vp.isEmpty) {
                    return this.a.p.vp;
                }
                return this.a.p.vu(this.a.n.previewViewportdRect, this.a.p.v0, this.a.p.vp);
            }
            return Rect.empty;
        }
        getMainContentViewport() {
            if (!this.a.p.e9) {
                if (this.a.p.vo.isEmpty) {
                    return this.a.p.vo;
                }
                return Rect.empty;
            }
            return Rect.empty;
        }
    }
    OverviewPlusDetailViewportHost.$t = markType(OverviewPlusDetailViewportHost, 'OverviewPlusDetailViewportHost', Base.$, [IProvidesViewport_$type]);
    return OverviewPlusDetailViewportHost;
})();
/**
 * @hidden
 */
export let LegendTemplates = /*@__PURE__*/ (() => {
    class LegendTemplates extends Base {
        static af(a) {
            let b = a.au();
            switch (b) {
                case 3: return LegendTemplates.y;
                case 4: return LegendTemplates.aa;
                case 0: return LegendTemplates.z;
                case 8: return LegendTemplates.ae;
                case 9: return LegendTemplates.ac;
                case 5: return LegendTemplates.ah;
                case 1:
                case 2: return LegendTemplates.ad;
                case 6:
                case 7: return LegendTemplates.ab;
            }
            return LegendTemplates.ah;
        }
        static a(a) {
            return new RenderingContext(new CanvasViewRenderer(), a.context);
        }
        static v(a) {
            let b = typeCast(Series.$, a.series);
            if (b == null || b.bc == 0) {
                a.thickness = Defaults.v;
            }
            else {
                a.thickness = b.ic;
            }
            if (a.itemBrush != null) {
                a.actualItemBrush = a.itemBrush;
            }
            else {
                if (b != null) {
                    a.actualItemBrush = b.u5;
                }
            }
            if (a.outline == null) {
                if (b != null) {
                    a.m = a.outline;
                    a.outline = b.u6;
                }
            }
        }
        static b(a, b, c) {
            let d = (c - b) / 2;
            return a + d;
        }
        static c(a, b, c) {
            let d = (c - b) / 2;
            return a + d;
        }
        static u(a, b, c, d, e, f, g, h) {
            let i = DeviceUtils.g(Defaults.w);
            let j = DeviceUtils.g(Defaults.u);
            let k = LegendTemplates.c(f, j, a.availableHeight);
            let l = LegendTemplates.c(h, j, a.availableHeight);
            let m = LegendTemplates.b(e, i, a.availableWidth);
            let n = LegendTemplates.b(g, i, a.availableWidth);
            let o = ((() => {
                let $ret = new PathFigure();
                $ret.isClosed = true;
                $ret.isFilled = true;
                return $ret;
            })());
            o._startPoint = { $type: Point_$type, x: m, y: l };
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: m, y: l }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: n, y: l }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: n, y: k }));
            o._segments.add(new LineSegment(0, { $type: Point_$type, x: m, y: k }));
            let p = new PathGeometry();
            p.c.add(o);
            let q = new Path();
            q.an = p;
            q.ad = b;
            q._stroke = c;
            q._fill = d;
            let r = LegendTemplates.a(a);
            r.t(q);
        }
        static s(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.v(b);
            let d = DeviceUtils.g(Defaults.w);
            let e = DeviceUtils.g(Defaults.u);
            let f = new Line();
            f.an = LegendTemplates.b(0, d, a.availableWidth);
            f.ap = a.availableHeight / 2;
            f.ao = LegendTemplates.b(d, d, a.availableWidth);
            f.aq = a.availableHeight / 2;
            f._stroke = b.actualItemBrush;
            if (c.bc == 0) {
                f.ad = Defaults.v;
            }
            else {
                f.ad = c.ic;
                f.al = c.vy;
                f.ak = c.vy;
                f.ai = c.vw;
                f.ac = c.jf;
                f.am = c.vz;
            }
            let g = LegendTemplates.a(a);
            g.s(f);
        }
        static r(a, b, c) {
            let d = a.data;
            LegendTemplates.v(d);
            let e = DeviceUtils.g(Defaults.w);
            let f = DeviceUtils.g(Defaults.u);
            let g = e / 2;
            let h = f / 2;
            let i = LegendTemplates.b(g, e, a.availableWidth);
            let j = LegendTemplates.c(h, f, a.availableHeight);
            let k = new EllipseGeometry();
            k.e = { $type: Point_$type, x: i, y: j };
            k.c = g;
            k.d = h;
            let l = new Path();
            l.an = k;
            l.ad = d.thickness;
            l._stroke = d.outline;
            l._fill = d.actualItemBrush;
            let m = LegendTemplates.a(a);
            m.t(l);
        }
        static t(a, b = 0) {
            let c = a.data;
            let d = DeviceUtils.g(Defaults.w - b);
            let e = DeviceUtils.g(Defaults.u - b);
            let f = new DataTemplateMeasureInfo();
            f.passInfo = a.passInfo;
            f.width = d;
            f.height = e;
            f.data = a.data;
            f.context = a.context;
            f.renderContext = a.renderContext;
            let g = c.actualItemBrush;
            let h = c.itemBrush;
            let i = c.outline;
            let j = c.series;
            let k = j.st();
            c.actualItemBrush = j.vf();
            c.outline = j.vg();
            if (c.itemBrush != null) {
                c.actualItemBrush = c.itemBrush;
            }
            if (c.m != null) {
                c.outline = c.m;
            }
            if (j.bc == 1) {
                c.thickness = j.il();
            }
            else {
                c.thickness = Defaults.ab;
            }
            if (k != null && k.measure != null && k.render != null) {
                let l = new DataTemplateRenderInfo();
                l.passInfo = a.passInfo;
                l.availableWidth = f.width;
                l.availableHeight = f.height;
                l.xPosition = (a.availableWidth / 2);
                l.yPosition = (a.availableHeight / 2);
                l.data = a.data;
                l.context = a.context;
                l.renderContext = a.renderContext;
                k.render(l);
            }
            c.itemBrush = h;
            c.actualItemBrush = g;
            c.outline = i;
        }
        static j(a) {
            let b = a.data;
            LegendTemplates.v(b);
            LegendTemplates.r(a, Defaults.w, Defaults.u);
        }
        static n(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.s(a);
            if (c.bc == 1) {
                LegendTemplates.t(a, Defaults.t);
            }
        }
        static o(a) {
            LegendTemplates.t(a, 0);
        }
        static q(a) {
            let b = a.data;
            LegendTemplates.v(b);
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, 0, 0, Defaults.w, Defaults.u);
        }
        static p(a) {
            let b = a.data;
            let c = b.series;
            LegendTemplates.v(b);
            if (c.bc == 0) {
                let d = Defaults.v;
                let e = b.actualItemBrush;
                let f = c.u6;
                let g = Defaults.w;
                let h = Defaults.u;
                LegendTemplates.u(a, d, f, e, 0, 0, g, h);
            }
            else {
                let i = Defaults.v;
                let j = b.actualItemBrush;
                let k = c.vq();
                let l = Defaults.w / 2;
                let m = Defaults.w;
                let n = Defaults.u;
                LegendTemplates.u(a, i, j, j, 0, 0, l, n);
                LegendTemplates.u(a, i, k, k, l, 0, m, n);
            }
        }
        static i(a) {
            let b = a.data;
            LegendTemplates.v(b);
            let c = 0;
            let d = Defaults.w;
            let e = (Defaults.u * 0.25);
            let f = (Defaults.u * 0.75);
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, c, e, d, f);
        }
        static l(a) {
            let b = a.data;
            LegendTemplates.v(b);
            let c = (Defaults.w * 0.25);
            let d = (Defaults.w * 0.75);
            let e = Defaults.u;
            let f = 0;
            LegendTemplates.u(a, b.thickness, b.outline, b.actualItemBrush, c, f, d, e);
        }
        static m(a) {
            let b = a.data;
            let c = BrushUtil.h(0, 0, 0, 0);
            let d = BrushUtil.h(0, 0, 0, 0);
            LegendTemplates.u(a, Defaults.v, c, d, 0, 0, Defaults.w, Defaults.u);
        }
        static k(a) {
        }
        static g(a) {
            let b = a.data;
            let c = b.series;
            let d = c.legendItemBadgeTemplate;
            if (d == null) {
                d = LegendTemplates.af(c);
            }
            let e = c.title;
            if (e == null) {
                e = "Series Title";
            }
            LegendItemHelper.d(a.context, a.xPosition, a.yPosition, a.availableWidth, a.availableHeight, a.data, e.toString(), d, a.passInfo, c.a4 != null && c.a4.isFinancial, c.ik, c.jg);
        }
        static resolveLegendItemTemplate(a) {
            switch (a) {
                case 0: return LegendTemplates.w;
                case 1: return LegendTemplates.x;
            }
            return LegendTemplates.w;
        }
        static e(a) {
            let b = a.data;
            let c = b.series;
            let d = c.legendItemBadgeTemplate;
            if (d == null) {
                d = LegendTemplates.af(c);
            }
            let e = b.legendLabel != null ? b.legendLabel : b.itemLabel;
            if (e == null) {
                e = "Series Item";
            }
            LegendItemHelper.c(a.context, a.xPosition, a.yPosition, a.availableWidth, a.availableHeight, a.data, e.toString(), d, a.passInfo);
        }
        static f(a) {
        }
        static d(a) {
        }
        static h(a) {
        }
    }
    LegendTemplates.$t = markType(LegendTemplates, 'LegendTemplates');
    LegendTemplates.z = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.j;
        return $ret;
    })());
    LegendTemplates.ae = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.o;
        return $ret;
    })());
    LegendTemplates.ad = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.n;
        return $ret;
    })());
    LegendTemplates.ah = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.q;
        return $ret;
    })());
    LegendTemplates.ab = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.p;
        return $ret;
    })());
    LegendTemplates.y = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.i;
        return $ret;
    })());
    LegendTemplates.aa = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.l;
        return $ret;
    })());
    LegendTemplates.ac = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.m;
        return $ret;
    })());
    LegendTemplates.w = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.f;
        $ret.render = LegendTemplates.g;
        return $ret;
    })());
    LegendTemplates.x = ((() => {
        let $ret = new DataTemplate();
        $ret.measure = LegendTemplates.d;
        $ret.render = LegendTemplates.e;
        return $ret;
    })());
    return LegendTemplates;
})();
/**
 * @hidden
 */
export let SeriesViewerViewManager = /*@__PURE__*/ (() => {
    class SeriesViewerViewManager extends Base {
        constructor(a) {
            super();
            this.ae = null;
            this.af = null;
            this.aj = null;
            this.ai = null;
            this.ag = null;
            this.ak = null;
            this.t = null;
            this.w = null;
            this.v = null;
            this.u = null;
            this.x = null;
            this.f = null;
            this.j = null;
            this.ah = null;
            this.ab = 0;
            this.aa = 0;
            this.ac = 1;
            this.ad = 0;
            this.l = null;
            this.ca = new Thickness(0, 0);
            this.aq = null;
            this.ap = stringEmpty();
            this.b9 = new Thickness(0, 0);
            this.b0 = null;
            this.bz = null;
            this.k = null;
            this.a = 0;
            this.b = 0;
            this.n = null;
            this.b2 = null;
            this.m = null;
            this.b1 = null;
            this.cb = new Thickness(0, 0);
            this.cc = new Thickness(0, 0);
            this.h = null;
            this.z = new Dictionary$2(String_$type, Tuple$2.$.specialize(DomWrapper_$type, RenderingContext.$), 0);
            this.al = -1;
            this.am = -1;
            this.s = null;
            this.j = a;
        }
        bj() {
        }
        bg(a) {
            if (a == null) {
                if (this.f != null) {
                    this.f.av();
                }
                this.ae = null;
                if (this.af != null) {
                    this.af.remove();
                }
                this.af = null;
                if (this.aj != null) {
                    this.aj.remove();
                }
                this.aj = null;
                if (this.ai != null) {
                    this.ai.remove();
                }
                this.ai = null;
                if (this.ag != null) {
                    this.ag.remove();
                }
                this.ag = null;
                if (this.ak != null) {
                    this.ak.remove();
                }
                this.ak = null;
                this.t = null;
                this.w = null;
                this.v = null;
                this.u = null;
                if (this.ah != null) {
                    this.ah.remove();
                }
                this.ah = null;
                this.f = null;
                this.j.p.da.u(null);
                this.j.p.dc.u(null);
                this.j.p.c9.u(null);
                this.j.p.db.u(null);
                this.j.p.al.m(null);
                this.j.p.am.m(null);
                this.j.p.ak.m(null);
                this.j.a.m(null);
                return;
            }
            this.ae = a;
            this.j.p.da.u(this.ae);
            this.j.p.dc.u(this.ae);
            this.j.p.c9.u(this.ae);
            this.j.p.db.u(this.ae);
            this.j.p.al.m(this.ae);
            this.j.p.am.m(this.ae);
            this.j.p.ak.m(this.ae);
            this.j.a.m(this.ae);
            this.j.p.ar.aa(this.ae);
            this.bi();
            this.ae.rootWrapper.setStyleProperty("position", "relative");
            this.af = this.ae.createElement("canvas");
            this.af.setStyleProperty("position", "absolute");
            this.af.setStyleProperty("top", "0px");
            this.af.setStyleProperty("left", "0px");
            this.aj = this.ae.createElement("canvas");
            this.aj.setStyleProperty("position", "absolute");
            this.aj.setStyleProperty("top", "0px");
            this.aj.setStyleProperty("left", "0px");
            this.ai = this.ae.createElement("canvas");
            this.ai.setStyleProperty("position", "absolute");
            this.ai.setStyleProperty("top", "0px");
            this.ai.setStyleProperty("left", "0px");
            this.ag = this.ae.createElement("canvas");
            this.ag.setStyleProperty("position", "absolute");
            this.ag.setStyleProperty("top", "0px");
            this.ag.setStyleProperty("left", "0px");
            this.ak = this.ae.createElement("canvas");
            this.ak.setStyleProperty("position", "absolute");
            this.ak.setStyleProperty("top", "0px");
            this.ak.setStyleProperty("left", "0px");
            this.ae.append(this.af);
            this.ae.append(this.ai);
            this.ae.append(this.aj);
            this.t = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.af));
            this.w = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.aj));
            this.v = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ai));
            if (this.j.p.au != 1) {
                this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                this.s = this.u;
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.x = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ak));
            this.j.du(this.t);
            this.j.c1(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
            {
                if ((TypeRegistrar.isRegistered('CanvasGestureDOMEventProxy'))) {
                    let overlayCanvas_ = this.aj;
                    let container_ = this.ae;
                    this.f = (TypeRegistrar.create('CanvasGestureDOMEventProxy', overlayCanvas_, container_, false));
                }
                else {
                    this.f = null;
                }
                if (this.f != null) {
                    this.f.ap = runOn(this.j, this.j.at);
                }
            }
            this.ah = this.ae.createElement("div");
            this.ah.hide();
            this.ah.setStyleProperty("position", "absolute");
            this.ah.setStyleProperty("z-index", "10000");
            this.ah.addClass(this.j.p.l2);
            this.ae.append(this.ah);
        }
        static by(a, b) {
            b();
            return;
        }
        bi() {
            this.j.d4();
            this.j.ef();
            this.bp();
        }
        ba() {
            let a = this.j.p.hw;
            let b = this.j.p.hb;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.j.p.hb = window.devicePixelRatio;
            }
        }
        g() {
            if ((TypeRegistrar.isRegistered('XamOverviewPlusDetailPane'))) {
                let overlayCanvas_ = this.aj;
                let container_ = this.ae;
                return (TypeRegistrar.create('XamOverviewPlusDetailPane'));
            }
            return null;
        }
        bm() {
            this.aj.setStyleProperty("cursor", "default");
        }
        bn() {
            this.aj.setStyleProperty("cursor", "pointer");
        }
        b3() {
            return ((() => {
                let $ret = new Brush();
                $ret.fill = "#000000";
                return $ret;
            })());
        }
        az(a, b, c) {
            this.ab = a;
            this.aa = b;
            this.ac = c;
            let d = a;
            let e = b;
            if (c != 1) {
                d = Math.round(a * c);
                e = Math.round(b * c);
            }
            if (this.af != null) {
                this.af.setAttribute("width", d.toString());
                this.af.setAttribute("height", e.toString());
                this.af.setStyleProperty("width", a.toString() + "px");
                this.af.setStyleProperty("height", b.toString() + "px");
            }
            if (this.aj != null) {
                this.aj.setAttribute("width", d.toString());
                this.aj.setAttribute("height", e.toString());
                this.aj.setStyleProperty("width", a.toString() + "px");
                this.aj.setStyleProperty("height", b.toString() + "px");
                this.aj.setAttribute("tabindex", "0");
                this.aj.setStyleProperty("outline", "0");
            }
            if (this.ai != null) {
                this.ai.setAttribute("width", d.toString());
                this.ai.setAttribute("height", e.toString());
                this.ai.setStyleProperty("width", a.toString() + "px");
                this.ai.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ag != null) {
                this.ag.setAttribute("width", d.toString());
                this.ag.setAttribute("height", e.toString());
                this.ag.setStyleProperty("width", a.toString() + "px");
                this.ag.setStyleProperty("height", b.toString() + "px");
            }
            if (this.ak != null) {
                this.ak.setAttribute("width", d.toString());
                this.ak.setAttribute("height", e.toString());
                this.ak.setStyleProperty("width", a.toString() + "px");
                this.ak.setStyleProperty("height", b.toString() + "px");
            }
            this.j.p.al.q();
            this.j.p.am.q();
            this.j.p.ak.q();
        }
        b8() {
            if (this.f == null) {
                return { $type: Point_$type, x: 0, y: 0 };
            }
            let a = this.f.bk(this.ae.rootWrapper);
            return { $type: Point_$type, x: a.left, y: a.top };
        }
        y() {
            return false;
        }
        bc(a) {
        }
        a8(a, b, c, d, e) {
            let f = this.e();
            a = f.a;
            b = f.f;
            c = f.k;
            d = f.h;
            e = f.i;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e
            };
        }
        e() {
            let a = new DefaultPaletteInfo();
            a.a = new BrushCollection();
            a.f = new BrushCollection();
            a.b = new BrushCollection();
            a.c = new BrushCollection();
            let b = new List$1(String_$type, 0);
            b.add("background-image");
            this.ae.startCSSQuery();
            let c = this.ae.getCssDefaultValuesForClassCollection("ui-chart-fill-palette-", b.toArray());
            let d = c.length;
            let e = this.ae.getCssDefaultValuesForClassCollection("ui-chart-outline-palette-", b.toArray());
            let f = e.length;
            let g = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-fill-palette-", b.toArray());
            let h = g.length;
            let i = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-outline-palette-", b.toArray());
            let j = i.length;
            for (let k = 0; k < d; k++) {
                a.a.add(CssGradientUtil.brushFromGradientString(c[k][0]));
            }
            for (let l = 0; l < f; l++) {
                a.f.add(CssGradientUtil.brushFromGradientString(e[l][0]));
            }
            for (let m = 0; m < h; m++) {
                a.b.add(CssGradientUtil.brushFromGradientString(g[m][0]));
            }
            for (let n = 0; n < j; n++) {
                a.c.add(CssGradientUtil.brushFromGradientString(i[n][0]));
            }
            b.clear();
            let o = 0;
            let p = 0;
            let q = Math.min(d, f);
            let r = null;
            if (d == 0) {
                b.add("background-color");
            }
            if (f == 0) {
                b.add("border-top-color");
                p = d == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-palette-", b.toArray());
                q = r.length;
            }
            if (d == 0) {
                if (q > 0) {
                    for (let s = 0; s < q; s++) {
                        let t = new Brush();
                        t._fill = r[s][o];
                        a.a.add(t);
                    }
                }
                else {
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.a.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            if (f == 0) {
                if (q > 0) {
                    for (let u = 0; u < q; u++) {
                        let v = new Brush();
                        v._fill = r[u][p];
                        a.f.add(v);
                    }
                }
                else {
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8BDC5C";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#8961A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#6DB1FF";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#82E9D9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#EA3C63";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#735656";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#F8CE4F";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#A8A8B7";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#E051A9";
                        return $ret;
                    })()));
                    a.f.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FF903B";
                        return $ret;
                    })()));
                }
            }
            b.clear();
            let w = Math.min(h, j);
            if (h == 0) {
                b.add("background-color");
            }
            if (j == 0) {
                b.add("border-top-color");
                p = h == 0 ? 1 : 0;
            }
            if (b.count > 0) {
                r = this.ae.getCssDefaultValuesForClassCollection("ui-chart-marker-palette-", b.toArray());
                w = r.length;
            }
            if (h == 0) {
                if (w > 0) {
                    for (let x = 0; x < w; x++) {
                        let y = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[x][o];
                            return $ret;
                        })());
                        a.b.add(y);
                    }
                }
                else {
                    a.b.add(((() => {
                        let $ret = new Brush();
                        $ret.fill = "#FFFFFF";
                        return $ret;
                    })()));
                }
            }
            if (j == 0) {
                if (w > 0) {
                    for (let z = 0; z < w; z++) {
                        let aa = ((() => {
                            let $ret = new Brush();
                            $ret.fill = r[z][p];
                            return $ret;
                        })());
                        a.c.add(aa);
                    }
                }
                else {
                    for (let ab of fromEnum(a.a)) {
                        a.c.add(ab);
                    }
                }
            }
            let ac = this.ae.getCssDefaultPropertyValue("ui-chart-axis", "border-top-color");
            if (ac != null) {
                a.i = new Brush();
                a.i._fill = ac;
            }
            else {
                a.i = AxisDefaults.g;
            }
            a.k = new Brush();
            a.k._fill = this.ae.getCssDefaultPropertyValue("", "color");
            a.j = Defaults.ae;
            let ad = this.ae.getCssDefaultPropertyValue("ui-chart-crosshair", "border-top-color");
            if (ad != null) {
                a.j = new Brush();
                a.j._fill = ad;
            }
            this.ae.endCSSQuery();
            a.h = FontUtil.getFont(this.ae);
            let ae = ((() => {
                let $ret = new Brush();
                $ret.fill = "#ee5879";
                return $ret;
            })());
            a.d = new BrushCollection();
            a.d.add(ae);
            a.e = new BrushCollection();
            a.e.add(ae);
            return a;
        }
        a7(a, b, c, d, e, f) {
            this.ae.startCSSQuery();
            let g = this.ae.getCssDefaultPropertyValue("ui-chart-area-fill-opacity", "opacity");
            a = g != null ? parseFloat(g) : 1;
            b = new Array(4);
            let h = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-top");
            let i = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-right");
            let j = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-bottom");
            let k = this.ae.getCssDefaultPropertyValue("ui-chart-render-margins", "margin-left");
            b[0] = h != null ? parseFloat(h) : NaN;
            b[1] = i != null ? parseFloat(i) : NaN;
            b[2] = j != null ? parseFloat(j) : NaN;
            b[3] = k != null ? parseFloat(k) : NaN;
            c = d = null;
            let l = this.ae.getCssDefaultPropertyValue("ui-chart-axis-stroke", "border-top-color");
            if (l != null) {
                let m = new Brush();
                m._fill = l;
                c = m;
            }
            let n = this.ae.getCssDefaultPropertyValue("ui-chart-axis-major-line", "border-top-color");
            if (n != null) {
                let o = new Brush();
                o._fill = n;
                d = o;
            }
            let p = this.ae.getCssDefaultPropertyValue("ui-chart-aligned-gridlines", "visibility");
            f = p != null && p == "visible";
            let q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "height");
            if (q != null) {
                e = parseFloat(q);
                if (Math.abs(e) > 4000) {
                    e = 0;
                }
            }
            else {
                q = this.ae.getCssDefaultPropertyValue("ui-chart-category-axis-tick", "width");
                e = q != null ? parseFloat(q) : 0;
            }
            this.ae.endCSSQuery();
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d,
                p4: e,
                p5: f
            };
        }
        ay() {
            this.ah.removeChildren();
        }
        bu(x_) {
            let box_ = this.ah;
            let offset_ = this.f.bk(this.ah);
            let a = this.b8();
            x_ = a.x + this.j.p.v0.left + x_;
            box_.setOffset(x_, this.j.p.v0.top + this.ad + a.y);
        }
        bv(y_) {
            this.ad = y_;
            let box_ = this.ah;
            let offset_ = this.ah.getOffset();
            let a = this.b8();
            y_ = this.j.p.v0.top + this.ad + a.y;
            box_.setOffset(offset_.left, y_);
        }
        au(a) {
            let b = a;
            b.show();
            this.ah.append(b);
        }
        a9() {
            this.ah.hide();
        }
        bo() {
            this.ah.show();
        }
        av(a) {
            this.ae.appendToBody(a);
        }
        bk(a) {
            a.remove();
        }
        bd() {
            if (this.ae == null) {
                return;
            }
            this.ba();
            this.j.c1(this.ae.rootWrapper.width(), this.ae.rootWrapper.height());
        }
        p() {
            return this.l;
        }
        ce() {
            return this.ca;
        }
        as() {
            return this.aq;
        }
        ar() {
            return this.ap;
        }
        cd() {
            return this.b9;
        }
        b5() {
            return this.b0;
        }
        b4() {
            return this.bz;
        }
        o() {
            return this.k;
        }
        c() {
            return this.a;
        }
        d() {
            return this.b;
        }
        r() {
            return this.n;
        }
        b7() {
            return this.b2;
        }
        q() {
            return this.m;
        }
        b6() {
            return this.b1;
        }
        cf() {
            return this.cb;
        }
        cg() {
            return this.cc;
        }
        bp() {
            this.ae.startCSSQuery();
            this.br();
            this.bq();
            this.bt();
            this.bs();
            this.bx();
            this.ae.endCSSQuery();
        }
        bx() {
            let a = "ui-chart-pointer-tooltip";
            let b = this.ae.getCssDefaultPropertyValue(a, "background-color");
            let c = this.ae.getCssDefaultPropertyValue(a, "border-top-color");
            let d = this.ae.getCssDefaultPropertyValue(a, "border-top-left-radius");
            let e = this.ae.getCssDefaultPropertyValue(a, "border-top-width");
            let f = new PointerTooltipStyle();
            f.a = d != null ? parseFloat(d) : 0;
            f.c = b != null ? Brush.create(b) : ((() => {
                let $ret = new Brush();
                $ret.fill = "white";
                return $ret;
            })());
            f.d = c != null ? Brush.create(c) : ((() => {
                let $ret = new Brush();
                $ret.fill = "gray";
                return $ret;
            })());
            f.b = e != null ? parseFloat(e) : 0;
            this.h = f;
        }
        br() {
            let a = "ui-chart-title";
            this.l = FontUtil.getFontForClass(this.ae, a);
            this.b0 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.aq = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.aq == null) {
                this.aq = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.ca = new Thickness(1, h, f, i, g);
        }
        bq() {
            let a = "ui-chart-subtitle";
            this.k = FontUtil.getFontForClass(this.ae, a);
            this.bz = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            this.ap = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (this.ap == null) {
                this.ap = "center";
            }
            let b = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let f = b != null ? parseFloat(b) : 0;
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            this.b9 = new Thickness(1, h, f, i, g);
        }
        bs() {
            let a = "ui-chart-horizontal-axis-title";
            this.m = FontUtil.getFontForClass(this.ae, a);
            this.b1 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "vertical-align");
            if (b == null) {
                this.a = 0;
            }
            else if (b.toLowerCase() == "bottom") {
                this.a = 4;
            }
            else {
                this.a = 3;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 2;
            let h = d != null ? parseFloat(d) : 2;
            let i = e != null ? parseFloat(e) : 2;
            let j = f != null ? parseFloat(f) : 2;
            this.cb = new Thickness(1, i, g, j, h);
        }
        bt() {
            let a = "ui-chart-vertical-axis-title";
            this.n = FontUtil.getFontForClass(this.ae, a);
            this.b2 = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.getCssDefaultPropertyValue(a, "color");
                return $ret;
            })());
            let b = this.ae.getCssDefaultPropertyValue(a, "text-align");
            if (b == null) {
                this.b = 0;
            }
            else if (b.toLowerCase() == "right") {
                this.b = 2;
            }
            else {
                this.b = 1;
            }
            let c = this.ae.getCssDefaultPropertyValue(a, "margin-top");
            let d = this.ae.getCssDefaultPropertyValue(a, "margin-bottom");
            let e = this.ae.getCssDefaultPropertyValue(a, "margin-left");
            let f = this.ae.getCssDefaultPropertyValue(a, "margin-right");
            let g = c != null ? parseFloat(c) : 0;
            let h = d != null ? parseFloat(d) : 0;
            let i = e != null ? parseFloat(e) : 0;
            let j = f != null ? parseFloat(f) : 0;
            this.cc = new Thickness(1, i, g, j, h);
        }
        a6(a, b) {
            let c = this.j.p.hb;
            if (a != this.ab || b != this.aa || c != this.ac) {
                this.az(a, b, this.j.p.hb);
                this.j.p.al.l();
                this.j.a.l();
            }
        }
        i() {
            return this.h;
        }
        bb(a) {
            if (this.f == null) {
                return;
            }
            this.f.ab = a;
            this.f.ap = runOn(this.j, this.j.at);
        }
        an(a, b, c) {
            let d;
            if (!((() => { let e = this.z.tryGetValue(b.iD.toString(), d); d = e.p1; return e.ret; })())) {
                let e = this.ae.createElement("canvas");
                e.setAttribute("width", c.toString());
                e.setAttribute("height", c.toString());
                e.setStyleProperty("width", c.toString() + "px");
                e.setStyleProperty("height", c.toString() + "px");
                let f = this.ae.get2DCanvasContext(e);
                let g = new RenderingContext(new CanvasViewRenderer(), f);
                let h = new Tuple$2(DomWrapper_$type, RenderingContext.$, e, g);
                d = h;
                this.z.addItem(b.iD.toString(), d);
            }
            let i = new Rect(0, 0, 0, c, c);
            let j = new RenderSurface();
            j.a = d.d;
            for (let k = 0; k < this.j.p.series.count; k++) {
                let l = this.j.p.series._inner[k];
                l.rm(i, a, j, "tile", 1);
            }
            this.j.p.ak.l();
            return d.c;
        }
        a3(a) {
            this.z.removeItem(a.iD.toString());
        }
        a2() {
            this.z.clear();
        }
        bl(a) {
            for (let b = 0; b < a.count; b++) {
                let c = a._inner[b];
                let d = c.content;
                this.j.z.n(d.getNativeElement(), 1, c.xPosition + this.j.p.v0.left, c.yPosition + this.j.p.v0.top, c.width, c.height);
            }
        }
        a0() {
            if (this.al != -1) {
                this.aw();
            }
            if (this.ae != null) {
                this.al = this.ae.setTimeout(() => this.j.p.bb.f$m(this.j.p), 5000);
            }
            else {
                this.al = window.setTimeout(() => this.j.p.bb.f$m(this.j.p), 5000);
            }
        }
        aw() {
            if (this.al != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.al);
                }
                else {
                    window.clearTimeout(this.al);
                }
                this.al = -1;
            }
        }
        a1(a) {
            if (this.am != -1) {
                this.ax();
            }
            if (this.ae != null) {
                this.am = this.ae.setTimeout(() => this.j.p.m9(), a);
            }
            else {
                this.am = window.setTimeout(() => this.j.p.m9(), a);
            }
        }
        ax() {
            if (this.am != -1) {
                if (this.ae != null) {
                    this.ae.clearTimeout(this.am);
                }
                else {
                    window.clearTimeout(this.am);
                }
                this.am = -1;
            }
        }
        be() {
            if (this.j.p.au != 1) {
                if (this.s == null) {
                    this.u = new RenderingContext(new CanvasViewRenderer(), this.ae.get2DCanvasContext(this.ag));
                    this.s = this.u;
                }
                else {
                    this.u = this.s;
                }
            }
            else {
                this.u = new RenderingContext(null, null);
            }
            this.j.dt(this.u);
        }
        bw(a) {
            if (this.ae != null) {
                let b = "igTouch";
                if (a) {
                    this.ae.rootWrapper.addClass(b);
                }
                else {
                    this.ae.rootWrapper.removeClass(b);
                }
            }
        }
        a4() {
        }
        a5() {
        }
        bh() {
            if (this.f != null) {
                this.f.bh(this.aj, "");
            }
        }
        bf() {
            this.ba();
            if (this.f != null) {
                this.f.at(this.aj, "");
            }
        }
        ao(a, b, c) {
            let d = this.ae.createElement("img");
            d.setProperty("src", this.at(a, b, c, "image/png"));
            return d.getNativeElement();
        }
        at(a, b, c, d, e = null) {
            let f = a * c;
            let g = b * c;
            let h = this.ae.createElement("canvas");
            h.setStyleProperty("width", a + "px");
            h.setStyleProperty("height", b + "px");
            h.setProperty("width", f);
            h.setProperty("height", g);
            let i = this.ae.get2DCanvasContext(h);
            let j = ((() => {
                let $ret = new Brush();
                $ret.fill = this.ae.rootWrapper.getStyleProperty("background-color");
                return $ret;
            })());
            if (BrushUtilCore.a(j)) {
                j._fill = this.ae.rootWrapper.parent().getStyleProperty("background-color");
                if (BrushUtilCore.a(j)) {
                    j._fill = "rgb(255, 255, 255)";
                }
            }
            if (c != 1) {
                i.save();
                i.scale(c, c);
            }
            i.fillStyle = j._fill;
            i.fillRect(0, 0, a, b);
            if (this.t != null && this.t != this.v) {
                i.drawImage(this.af.getNativeElement(), 0, 0, a, b);
            }
            if (this.v != null) {
                i.drawImage(this.ai.getNativeElement(), 0, 0, a, b);
            }
            if (this.w != null && this.w != this.v) {
                i.drawImage(this.aj.getNativeElement(), 0, 0, a, b);
            }
            if (c != 1) {
                i.restore();
            }
            let format_ = d;
            let sCanv_ = h.getNativeElement();
            let url_ = (sCanv_.toDataURL(format_));
            if (e != null) {
                let cb_ = e;
                sCanv_.toBlob((blob) => { cb_(url_, blob); }, format_);
            }
            return url_;
        }
    }
    SeriesViewerViewManager.$t = markType(SeriesViewerViewManager, 'SeriesViewerViewManager');
    return SeriesViewerViewManager;
})();
/**
 * @hidden
 */
export let AutoRangeCalculator = /*@__PURE__*/ (() => {
    class AutoRangeCalculator extends Base {
        static a(a, b, c, d, e, f, g) {
            f = !isNaN_(b) && !isInfinity(b) ? b : Number.POSITIVE_INFINITY;
            g = !isNaN_(c) && !isInfinity(c) ? c : Number.NEGATIVE_INFINITY;
            let h = f;
            let i = g;
            if (isInfinity(h) || isInfinity(i)) {
                if (a != null) {
                    let j = a.ks();
                    if (j != null) {
                        h = Math.min(h, j.c);
                        i = Math.max(i, j.b);
                    }
                }
            }
            if (!isInfinity(h) && !isInfinity(i)) {
                if (h == i && h != 0) {
                    h *= h > 0 ? 0.9 : 1.1;
                    i *= i > 0 ? 1.1 : 0.9;
                }
                if (h == i && h == 0) {
                    i = 1;
                }
                if (b > c) {
                    let k = c;
                    c = b;
                    b = k;
                }
                let l = isNaN_(b) || isInfinity(b) ? h : b;
                let m = isNaN_(c) || isInfinity(c) ? i : c;
                if (d) {
                    if (l <= 0) {
                        if (m > 1) {
                            l = 1;
                        }
                        else {
                            l = Math.pow(e, Math.floor(logBase(m, e)));
                        }
                    }
                    if (isNaN_(b) || isInfinity(b)) {
                        let n = logBase(l, e);
                        h = Math.pow(e, Math.floor(n));
                    }
                    else {
                        h = l;
                    }
                    if (isNaN_(c) || isInfinity(c)) {
                        i = Math.pow(e, Math.ceil(logBase(m, e)));
                    }
                    else {
                        i = m;
                    }
                }
                else {
                    let o = Math.pow(10, Math.floor(log10(m - l)) - 1);
                    let p = a.ej();
                    if (a != null && p > 0 && (!a.lh && !a.lg)) {
                        let q = new LinearNumericSnapper(0, h, i, p, a.ez());
                        o = q.g;
                    }
                    else if (a.ld && p > 0 && (!a.lh || !a.lg)) {
                        let r = h;
                        let s = i;
                        if (a.lh) {
                            r = b;
                        }
                        if (a.lg) {
                            s = c;
                        }
                        let t = new LinearNumericSnapper(0, r, s, p, a.ez());
                        o = t.g;
                    }
                    if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                        {
                            h = o * Math.floor(h / o);
                        }
                    }
                    else {
                        h = l;
                    }
                    if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                        let u = Math.ceil(i / o);
                        {
                            i = o * u;
                        }
                    }
                    else {
                        i = m;
                    }
                    if (a.ld) {
                        if (a.ld && p > 0 && (!a.lh || !a.lg)) {
                            let v = new LinearNumericSnapper(0, h, i, p, a.ez());
                            let w = v.g;
                            if (w != o) {
                                o = w;
                                if ((isNaN_(b) || isInfinity(b)) && !isNaN_(h) && !isNaN_(o) && o != 0) {
                                    {
                                        h = o * Math.floor(h / o);
                                    }
                                }
                                else {
                                    h = l;
                                }
                                if ((isNaN_(c) || isInfinity(c)) && !isNaN_(i) && !isNaN_(o) && o != 0) {
                                    let x = Math.ceil(i / o);
                                    {
                                        i = o * x;
                                    }
                                }
                                else {
                                    i = m;
                                }
                            }
                        }
                    }
                }
            }
            f = h;
            g = i;
            return {
                p5: f,
                p6: g
            };
        }
    }
    AutoRangeCalculator.$t = markType(AutoRangeCalculator, 'AutoRangeCalculator');
    return AutoRangeCalculator;
})();
/**
 * @hidden
 */
export let IAxisAnnotationManager_$type = new Type(null, 'IAxisAnnotationManager');
/**
 * @hidden
 */
export let AxisLabelSettings = /*@__PURE__*/ (() => {
    class AxisLabelSettings extends Base {
        constructor() {
            super();
            this.ab = null;
            this.ay = null;
            this.b = 1;
            this.a3 = 0;
            this.i = true;
            this.c = 0;
            this.a = null;
            this.n = 0;
            this.p = NaN;
            this.q = 2;
            this.r = 2;
            this.s = 2;
            this.o = 2;
            this.av = 0;
            this.a0 = 1;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.f = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.ar(a, b.propertyName, b.oldValue, b.newValue));
        }
        get textStyle() {
            return this.ab;
        }
        set textStyle(a) {
            let b = this.ab;
            this.ab = a;
            if (this.ab != b) {
                this.f = null;
                this.as("TextStyle", b, a);
            }
        }
        get textColor() {
            return this.ay;
        }
        set textColor(a) {
            let b = this.ay;
            this.ay = a;
            this.as("TextColor", b, a);
        }
        get location() {
            return this.b;
        }
        set location(a) {
            let b = this.b;
            this.b = a;
            this.as("Location", enumGetBox(AxisLabelsLocation_$type, b), enumGetBox(AxisLabelsLocation_$type, a));
        }
        get visibility() {
            return this.a3;
        }
        set visibility(a) {
            let b = this.a3;
            this.a3 = a;
            this.as("Visibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, a));
        }
        get showFirstLabel() {
            return this.i;
        }
        set showFirstLabel(a) {
            let b = this.i;
            this.i = a;
            this.as("ShowFirstLabel", b, a);
        }
        registerAxis(a) {
            this.a = a;
        }
        unregisterAxis(a) {
            this.a = null;
        }
        get angle() {
            return this.n;
        }
        set angle(a) {
            let b = this.n;
            this.n = a;
            this.as("Angle", b, a);
        }
        get extent() {
            return this.p;
        }
        set extent(a) {
            let b = this.p;
            this.p = a;
            this.as("Extent", b, a);
        }
        set margin(a) {
            this.leftMargin = a;
            this.bottomMargin = a;
            this.rightMargin = a;
            this.topMargin = a;
        }
        get leftMargin() {
            return this.q;
        }
        set leftMargin(a) {
            let b = this.q;
            this.q = a;
            this.as("LeftMargin", b, a);
        }
        get rightMargin() {
            return this.r;
        }
        set rightMargin(a) {
            let b = this.r;
            this.r = a;
            this.as("RightMargin", b, a);
        }
        get topMargin() {
            return this.s;
        }
        set topMargin(a) {
            let b = this.s;
            this.s = a;
            this.as("TopMargin", b, a);
        }
        get bottomMargin() {
            return this.o;
        }
        set bottomMargin(a) {
            let b = this.o;
            this.o = a;
            this.as("BottomMargin", b, a);
        }
        get horizontalAlignment() {
            return this.av;
        }
        set horizontalAlignment(a) {
            let b = this.av;
            this.av = a;
            this.as("HorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, a));
        }
        get verticalAlignment() {
            return this.a0;
        }
        set verticalAlignment(a) {
            let b = this.a0;
            this.a0 = a;
            this.as("VerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, a));
        }
        as(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ar(a, b, c, d) {
            switch (b) {
                case "Location":
                    this.c = this.location;
                    break;
            }
            if (this.a == null || this.a.bg == null) {
                return;
            }
            switch (b) {
                case "Angle":
                    this.a.cq = true;
                    this.a.h8();
                    break;
                case "TextStyle":
                    this.f = null;
                    this.a.cq = true;
                    if (this.a.bi != null) {
                        this.a.bi.nr();
                    }
                    this.a.h8();
                    break;
                case "Location":
                case "Extent":
                case "Visibility":
                case "HorizontalAlignment":
                case "VerticalAlignment":
                case "TopMargin":
                case "RightMargin":
                case "BottomMargin":
                case "LeftMargin":
                case "ShowFirstLabel":
                    this.a.cq = true;
                    if (this.a.bi != null) {
                        this.a.bi.nr();
                    }
                    this.a.h8();
                    break;
                case "TextColor":
                    this.a.h8();
                    break;
            }
        }
        k() {
            return this.n != 0;
        }
        l() {
            return !isNaN_(this.p);
        }
        get j() {
            return this.textStyle != null || this.f != null;
        }
        get g() {
            return this.f;
        }
        set g(a) {
            this.f = a;
        }
        h(a) {
            if (this.f == null) {
                this.f = FontUtil.toFontInfo(a, this.textStyle);
            }
            return this.f;
        }
    }
    AxisLabelSettings.$t = markType(AxisLabelSettings, 'AxisLabelSettings', Base.$, [INotifyPropertyChanged_$type]);
    AxisLabelSettings.extentPropertyDefault = NaN;
    return AxisLabelSettings;
})();
/**
 * @hidden
 */
export let TitleSettings = /*@__PURE__*/ (() => {
    class TitleSettings extends AxisLabelSettings {
        constructor() {
            super();
            this.a5 = 0;
            this.horizontalAlignment = 1;
            this.leftMargin = NaN;
            this.rightMargin = NaN;
            this.topMargin = NaN;
            this.bottomMargin = NaN;
        }
        get position() {
            return this.a5;
        }
        set position(a) {
            let b = this.a5;
            this.a5 = a;
            this.as("AxisTitlePosition", enumGetBox(AxisTitlePosition_$type, b), enumGetBox(AxisTitlePosition_$type, a));
        }
        ar(a, b, c, d) {
            super.ar(a, b, c, d);
            if (this.a == null || this.a.bi == null) {
                return;
            }
            switch (b) {
                case "AxisTitlePosition":
                    this.a.cq = true;
                    this.a.h8();
                    break;
            }
        }
    }
    TitleSettings.$t = markType(TitleSettings, 'TitleSettings', AxisLabelSettings.$);
    return TitleSettings;
})();
/**
 * @hidden
 */
export let Axis = /*@__PURE__*/ (() => {
    class Axis extends Control {
        constructor() {
            super();
            this.a5 = null;
            this.bt = null;
            this.a9 = null;
            this.a7 = null;
            this.is = null;
            this.bn = null;
            this.bh = null;
            this.bs = null;
            this.by = false;
            this.dl = NaN;
            this.df = 50;
            this.ds = 0;
            this.dp = 150;
            this.as = 0;
            this.dk = NaN;
            this.dw = 0;
            this.dr = 0;
            this.dn = 180;
            this.bk = null;
            this.bj = null;
            this.f4 = "Verdana";
            this.dm = NaN;
            this.dy = 0;
            this.dt = 8;
            this.dq = 16;
            this.fp = -1;
            this.fo = 1;
            this.fn = 3;
            this.fq = 0;
            this.kk = 0;
            this.dv = 0;
            this.du = 2;
            this.it = null;
            this.dz = 0;
            this.ci = false;
            this.bw = false;
            this.dg = 0;
            this.cv = false;
            this.cx = false;
            this.bz = false;
            this.rangeChanged = null;
            this.al = new AxisAnnotationCollection();
            this.am = new AxisAnnotationCollection();
            this.j7 = Rect.empty;
            this.kd = null;
            this.dc = null;
            this.dd = null;
            this.aw = null;
            this.bx = false;
            this.a6 = null;
            this.fm = null;
            this.ai = null;
            this._coercionMethods = null;
            this.bv = false;
            this.cy = false;
            this.c7 = false;
            this.renderRequested = null;
            this.bc = null;
            this.cr = false;
            this.di = NaN;
            this.dj = -1;
            this.cs = false;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.de = null;
            this.da = new Dictionary$2(String_$type, String_$type, 0);
            this.c9 = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.kj = new Size();
            this.ap = new AxisComponentsForView();
            this.d3 = 0;
            this.dh = 0;
            this.br = null;
            this.bq = null;
            this.bp = null;
            this.ax = new AxisLabelSettings();
            this.fl = null;
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            this.bz = true;
            this.d3 = NaN;
            this.a5 = this.a4();
            this.ht(this.a5);
            this.a5.al();
            this.br = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a5, this.a5.a3);
                $ret.activate = runOn(this.a5, this.a5.aw);
                $ret.disactivate = runOn(this.a5, this.a5.ay);
                $ret.destroy = runOn(this.a5, this.a5.ax);
                return $ret;
            })());
            this.bq = ((() => {
                let $ret = new Pool$1(TextBlock.$);
                $ret.create = runOn(this.a5, this.a5.a3);
                $ret.activate = runOn(this.a5, this.a5.aw);
                $ret.disactivate = runOn(this.a5, this.a5.ay);
                $ret.destroy = runOn(this.a5, this.a5.ax);
                return $ret;
            })());
            this.bp = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this.a5, this.a5.bi);
                $ret.activate = runOn(this.a5, this.a5.t);
                $ret.disactivate = runOn(this.a5, this.a5.v);
                $ret.destroy = runOn(this.a5, this.a5.u);
                return $ret;
            })());
            this.kd = Rect.empty;
            this.dc = new List$1(Base.$, 0);
            this.dd = new List$1(LabelPosition.$, 0);
            this.aw = this.av();
            this.aw.ag = this.az;
            this.aw.ad = this;
            this.de = new List$1(Series.$, 0);
            let a = this.al;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.hd));
            let b = this.al;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.hc));
            let c = this.am;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.hf));
            let d = this.am;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.he));
            this.ab = Axis.$;
            if (this.az != null) {
                this.ax = this.az;
            }
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (e, f) => this.hx(e, f.propertyName, f.oldValue, f.newValue));
            this.bs = (e, f) => {
                if (this.bi == null || !this.bi.ey) {
                    this.ir(f.oldRect, f.newRect);
                }
            };
            this.a5.aa();
        }
        a4() {
            return new AxisView(this);
        }
        ht(a) {
        }
        hg() {
            if (this.ca) {
                this.a8.onAddAnnotations(this);
            }
        }
        get bu() {
            if (this.bt == null) {
                this.bt = new SRProvider(this.fm);
            }
            if (this.bt.l == null) {
                this.bt.l = this.fm;
            }
            return this.bt;
        }
        get ba() {
            if (this.a9 == null) {
                this.a9 = DVContainer.instance.createInstance(IAxisVisualDataManager_$type, () => this.bu.q);
            }
            return this.a9;
        }
        ej() {
            return this.j8().width;
        }
        f3() {
            return null;
        }
        f2() {
            return null;
        }
        get_cb() {
            return false;
        }
        get cb() {
            return this.get_cb();
        }
        get_cj() {
            return false;
        }
        get cj() {
            return this.get_cj();
        }
        get_b9() {
            return false;
        }
        get b9() {
            return this.get_b9();
        }
        get_cm() {
            return false;
        }
        get cm() {
            return this.get_cm();
        }
        get_cp() {
            return false;
        }
        get cp() {
            return this.get_cp();
        }
        get_cn() {
            return false;
        }
        get cn() {
            return this.get_cn();
        }
        d4(a) {
            return NaN;
        }
        get_ce() {
            return false;
        }
        get ce() {
            return this.get_ce();
        }
        get_ck() {
            return false;
        }
        get ck() {
            return this.get_ck();
        }
        get_cl() {
            return false;
        }
        get cl() {
            return this.get_cl();
        }
        get_cc() {
            return false;
        }
        get cc() {
            return this.get_cc();
        }
        get_cd() {
            return true;
        }
        get cd() {
            return this.get_cd();
        }
        ak() {
            return this.aj;
        }
        get a8() {
            if (this.a7 == null) {
                this.a7 = DVContainer.instance.createInstance(IAxisAnnotationManager_$type, () => this.bu.n);
                this.a7.owner = this;
            }
            return this.a7;
        }
        get ca() {
            return DVContainer.instance.checkLoaded("AnnotationFactoryManager");
        }
        he(a, b) {
            if (!this.ca) {
                return;
            }
            this.a8.onAutoAnnotionsChanged(this, this.am, b);
        }
        hf(a, b) {
            if (!this.ca) {
                return;
            }
            this.a8.onAutoAnnotionsReset(this, this.am, b);
        }
        hc(a, b) {
            if (!this.ca) {
                return;
            }
            this.a8.onAnnotionsChanged(this, this.al, b);
        }
        hd(a, b) {
            if (!this.ca) {
                return;
            }
            this.a8.onAnnotionsReset(this, this.al, b);
        }
        provideRenderer(a) {
            this.fm = a;
            this.hh();
            this.aw.ag = this.az;
        }
        hq(a, b) {
            if (!a.equals1(b)) {
                this.iq(a, b);
            }
        }
        ac() {
            super.ac();
            this.a5.ao();
        }
        get bo() {
            return this.bn;
        }
        set bo(a) {
            if (this.bo != a) {
                let b = this.bo;
                this.bn = a;
                this.h3("FastItemsSourceProvider", b, this.bn);
            }
        }
        get bi() {
            return this.bh;
        }
        set bi(a) {
            if (this.bi != a) {
                let b = this.bi;
                this.bh = a;
                this.h3("SeriesViewer", b, this.bh);
            }
        }
        get bg() {
            return typeCast(XamDataChart.$, this.bi);
        }
        set bg(a) {
            this.bi = a;
        }
        get c6() {
            return this.by;
        }
        set c6(a) {
            if (this.by == a) {
                return;
            }
            this.by = a;
            let b = null;
            if (this.aw != null && Rect.l_op_Inequality(this.aw.c1, null)) {
                b = this.aw.c1;
            }
            this.aw = this.av();
            this.aw.ad = this;
            this.aw.ag = this.az;
            if (Rect.l_op_Inequality(b, null)) {
                this.aw.c1 = b;
            }
            if (this.bi != null && this.bi.c8 != null) {
                this.aw.af.al(this.bi.c8.y);
                this.h7(true);
            }
        }
        get e7() {
            return this.dl;
        }
        set e7(a) {
            let b = this.dl;
            if (b != a) {
                this.dl = a;
                this.dx = a;
                this.h7(true);
            }
        }
        get dx() {
            return this.df;
        }
        set dx(a) {
            this.df = a;
        }
        get fd() {
            return this.ds;
        }
        set fd(a) {
            this.ds = a;
            this.h7(true);
        }
        get fa() {
            return this.dp;
        }
        set fa(a) {
            this.dp = a;
            this.h7(true);
        }
        get at() {
            return this.as;
        }
        set at(a) {
            let b = this.as;
            if (b != a) {
                this.as = a;
                this.h7(true);
            }
        }
        get e6() {
            return this.dk;
        }
        set e6(a) {
            this.dk = a;
            this.h6();
        }
        get fc() {
            return this.dr;
        }
        set fc(a) {
            this.dr = a;
            this.h6();
        }
        get e9() {
            return this.dn;
        }
        set e9(a) {
            this.dn = a;
            this.h6();
        }
        get bm() {
            if (this.bk == null) {
                if (this.bj == null) {
                    this.bj = this.a5.i();
                }
                return this.bj;
            }
            return this.bk;
        }
        set bm(a) {
            this.bk = a;
            this.dm = FontUtil.getFontSize(this.bk);
            this.h6();
        }
        get gy() {
            return this.f4;
        }
        set gy(a) {
            this.f4 = a;
            let b = this.dm;
            if (isNaN_(b)) {
                b = 12;
            }
            this.bm.q = a;
            this.bm.f = b;
            this.aw.b8();
            this.h6();
        }
        get e8() {
            return this.dm;
        }
        set e8(a) {
            this.dm = a;
            this.bm = FontUtil.getFontWithNewFontSize(this.bm, this.dm);
            this.h6();
        }
        get fe() {
            return this.dt;
        }
        set fe(a) {
            this.dt = a;
            this.h6();
        }
        get fb() {
            return this.dq;
        }
        set fb(a) {
            this.dq = a;
            this.h6();
        }
        get fu() {
            return this.fp;
        }
        set fu(a) {
            this.fp = a;
            this.h6();
        }
        get ft() {
            return this.fo;
        }
        set ft(a) {
            this.fo = a;
            this.h6();
        }
        get fs() {
            return this.fn;
        }
        set fs(a) {
            this.fn = a;
            this.h6();
        }
        get kn() {
            return this.kk;
        }
        set kn(a) {
            this.kk = a;
            this.h6();
        }
        get fg() {
            return this.dv;
        }
        set fg(a) {
            this.dv = a;
            this.h6();
        }
        get ff() {
            return this.du;
        }
        set ff(a) {
            this.du = a;
            this.h6();
        }
        ii() {
            this.aw.cp();
        }
        h6() {
            this.h7(false);
        }
        h7(a) {
            if (a) {
                this.aw.co();
            }
            this.cq = true;
            this.h5();
        }
        il() {
            if (this.fi > 0) {
                this.dz = this.fi;
                return;
            }
            let a = typeCast(XamDataChart.$, this.bi);
            if (a != null && isNaN_(this.fi) && this.cb && (this.cp || this.a2 == 0)) {
                this.dz = a.wl.fq;
                return;
            }
            this.dz = 0;
        }
        get b4() {
            return this.bw;
        }
        get b7() {
            return this.az != null && this.az.k();
        }
        ih(a) {
            this.bw = true;
            if (this.dg != a) {
                this.dg = a;
                this.h9(false);
            }
        }
        ib() {
            this.bw = false;
            this.dg = 0;
            this.h9(false);
        }
        eg() {
            if (this.b4 && (!this.b7 || (this.b7 && this.az.angle == 0))) {
                return this.ex();
            }
            if (this.b7) {
                return this.az.angle;
            }
            return 0;
        }
        ex() {
            return this.dg;
        }
        get c4() {
            return this.c(Axis.jq);
        }
        set c4(a) {
            this.h(Axis.jq, a);
        }
        d6() {
            return 0;
        }
        js() {
            if (this.cp) {
                return 2;
            }
            return 0;
        }
        kl() {
            return 1;
        }
        jt() {
            return 1;
        }
        km() {
            return 1;
        }
        d8() {
            if (this.cp) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        ea() {
            if (!this.cp && !this.b9) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d9() {
            if (this.cp) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        d7() {
            if (!this.cp && !this.b9) {
                return DeviceUtils.g(5);
            }
            return 0;
        }
        ed() {
            return NaN;
        }
        ef() {
            return NaN;
        }
        ee() {
            return NaN;
        }
        ec() {
            return NaN;
        }
        a0() {
            if (this.cp) {
                return 2;
            }
            if (this.cm) {
                return 5;
            }
            return 1;
        }
        a1() {
            return 1;
        }
        h4(a) {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, a);
            }
        }
        eb() {
            if (this.cp) {
                return -90;
            }
            return 0;
        }
        d5() {
            return NaN;
        }
        get an() {
            return this.al;
        }
        get ao() {
            return this.am;
        }
        get ke() {
            if (this.kd.isEmpty) {
                return this.j7;
            }
            return this.kd;
        }
        set ke(a) {
            this.j7 = a;
        }
        im() {
            let a = 0;
            let b = typeCast(XamDataChart.$, this.bi);
            if (b != null && b.wc == 0) {
                a = 1;
            }
            this.a5.a1(a);
        }
        c8(a, b, c) {
            return this.bi != null;
        }
        co() {
            let a = Rect.empty;
            if (this.bi != null) {
                a = this.bi.v1;
            }
            return this.c8(this.ke, a, this.a5);
        }
        iq(a, b) {
            this.cr = false;
            this.ke = b;
            this.cq = true;
            this.c1();
            this.h9(false);
            if (this.bi != null) {
                this.bi.ar.ae(1, this, this.a6, b);
            }
        }
        get cq() {
            return this.bx;
        }
        set cq(a) {
            this.bx = a;
        }
        kb() {
            if (this.bi == null || this.bi.vp.isEmpty) {
                return Rect.empty;
            }
            let a = this.bi.vp;
            let b = this.ke;
            let c = (a.left - b.left) / b.width;
            let d = (a.top - b.top) / b.height;
            let e = (a.right - b.left) / b.width;
            let f = (a.bottom - b.top) / b.height;
            return new Rect(0, c, d, e - c, f - d);
        }
        ir(a, b) {
            this.cq = true;
            this.h9(true);
        }
        h5() {
            this.h9(false);
        }
        hx(a, b, c, d) {
            switch (b) {
                case Axis.$$p[10]:
                case Axis.$$p[11]:
                    if (this.gh != null) {
                        this.ai = new BindingFormatter();
                        this.ai.j = this.gh;
                        this.ai.d = this.ah;
                    }
                    else {
                        this.ai = null;
                    }
                    break;
                case "SeriesViewer":
                    let e = typeCast(SeriesViewer.$, c);
                    if (e != null) {
                        this.fm = null;
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, this.bs);
                        e.ar.ad(1, this);
                        this.a5.af(e);
                    }
                    let f = typeCast(SeriesViewer.$, d);
                    if (f != null) {
                        this.fm = f.c8.j.ae;
                        f.actualWindowRectChanged = delegateCombine(f.actualWindowRectChanged, this.bs);
                        this.a6 = f.ar.k(1, this, runOn(this, this.hl));
                        if (this.az == null && this.fm != null) {
                            this.provideRenderer(this.fm);
                        }
                        this.a5.y(f);
                        if (this.cs && !this.a6.e) {
                            this.cs = false;
                            this.c1();
                        }
                        this.ik();
                        this.il();
                    }
                    break;
                case Axis.$$p[8]:
                    this.h9(false);
                    break;
                case Axis.$$p[21]:
                    this.cx = this.cw;
                    this.h9(false);
                    break;
                case Axis.$$p[20]:
                    this.cv = this.cu;
                    this.h9(false);
                    break;
                case Axis.$$p[9]:
                    this.ci = this.ch;
                    let g = new AxisRangeChangedEventArgs(0, 0, 0, 1, 1);
                    this.hk(g);
                    for (let h of fromEnum(this.de)) {
                        h.p6();
                        if (h.c9 != null) {
                            h.qh();
                        }
                    }
                    break;
                case Axis.$$p[12]:
                    this.a5.am();
                    if (typeCast(DataTemplate.$, d) !== null) {
                        this.c7 = true;
                    }
                    else {
                        this.c7 = false;
                    }
                    this.cq = true;
                    this.id();
                    this.h9(false);
                    break;
                case Axis.$$p[16]:
                case Axis.$$p[19]:
                case Axis.$$p[25]:
                    this.h9(false);
                    break;
                case Axis.$$p[13]:
                    let i = typeCast(AxisLabelSettings.$, d);
                    if (i != null) {
                        i.registerAxis(this);
                        this.ax = i;
                    }
                    else {
                        this.ax = new AxisLabelSettings();
                    }
                    if (this.aw != null) {
                        this.aw.ag = this.ax;
                    }
                    this.hv();
                    this.cq = true;
                    this.h9(false);
                    break;
                case Axis.$$p[30]:
                    this.a5.ap();
                    break;
                case Axis.$$p[31]:
                    let j = typeCast(TitleSettings.$, d);
                    if (j != null) {
                        j.registerAxis(this);
                    }
                    else {
                        j = new TitleSettings();
                    }
                    if (this.it != null) {
                        this.it.dataContext = j;
                    }
                    this.hw();
                    this.h9(false);
                    break;
                case Axis.$$p[26]:
                    this.cq = true;
                    this.il();
                    this.a5.ai();
                    this.h9(false);
                    break;
                case Axis.$$p[32]:
                case Axis.$$p[5]:
                case "UseEnhancedIntervalManagement":
                case Axis.$$p[6]:
                    this.bz = this.c5;
                    this.cq = true;
                    this.h9(false);
                    break;
                case Axis.$$p[3]:
                    if (this.bi != null) {
                        this.bi.nr();
                    }
                    break;
                case Axis.$$p[18]:
                    this.ik();
                    if (d != null) {
                        this.cy = true;
                        this.h9(false);
                    }
                    else {
                        this.cy = false;
                    }
                    break;
                case Axis.$$p[4]:
                    if (this.aj != null) {
                        this.aj.h8();
                    }
                    break;
                case Axis.$$p[24]:
                case Axis.$$p[15]:
                    this.ik();
                    this.h9(false);
                    break;
                case Axis.$$p[23]:
                case Axis.$$p[14]:
                case Axis.$$p[17]:
                case Axis.$$p[7]:
                case Axis.$$p[28]:
                case Axis.$$p[29]:
                case Axis.$$p[27]:
                case Axis.$$p[2]:
                case Axis.$$p[0]:
                case Axis.$$p[1]:
                case Axis.$$p[22]:
                    this.h9(false);
                    break;
                case "MinExtent":
                    this.a5.ai();
                    break;
            }
        }
        hv() {
            if (this.a5.p()) {
                this.a5.ab(this.ax);
            }
        }
        hw() {
            this.a5.ap();
        }
        get coercionMethods() {
            return this._coercionMethods;
        }
        set coercionMethods(a) {
            this._coercionMethods = a;
        }
        get_expectFunctions() {
            return this.bv;
        }
        set_expectFunctions(a) {
            this.bv = a;
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        id() {
            this.br.count = 0;
            this.bq.count = 0;
            this.bp.count = 0;
            if (this.a5.p()) {
                this.a5.at();
            }
        }
        hs(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (e < d.bottom && f > d.top) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, d.left, e, d.width, f - e);
                a.add(g);
            }
        }
        hr(a, b, c, d, e) {
            let f = b <= c.bottom && b >= c.top;
            if (!e && f) {
                f = !this.cg(b, d.c, c, false);
            }
            if (f) {
                if (d.a) {
                    b = this.d0(b, c.top, c.bottom, d);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c.left, y: b };
                g.c = { $type: Point_$type, x: c.right, y: b };
                a.add(g);
            }
        }
        ip(a, b, c, d) {
            let e = Math.min(b, c);
            let f = Math.max(b, c);
            if (f > d.left && e < d.right) {
                let g = new RectangleGeometry();
                g.e = new Rect(0, e, d.top, f - e, d.height);
                a.add(g);
            }
        }
        io(a, b, c, d, e) {
            let f = b >= c.left && b <= c.right;
            if (!f) {
                let g = truncate(Math.round(b));
                let h = truncate(Math.round(c.left));
                let i = truncate(Math.round(c.right));
                if (g >= h && g <= i) {
                    f = true;
                }
            }
            if (!e && f) {
                f = !this.cg(b, d.c, c, true);
            }
            if (f) {
                if (d.a) {
                    b = this.d0(b, c.left, c.right, d);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c.top };
                j.c = { $type: Point_$type, x: b, y: c.bottom };
                a.add(j);
            }
        }
        cg(a, b, c, d) {
            let e = false;
            let f = typeCast(XamDataChart.$, this.bi);
            if (f != null && (f.w3 || f.w4) && !c.isEmpty) {
                let g = this.bi.vl.width == 1 && this.bi.vl.height == 1;
                for (let h of fromEnum(f.axes)) {
                    if (h._visibility != 0 || h.fh < 1 || h.jw == null || BrushUtilCore.a(h.jw) || h.ke.isEmpty) {
                        continue;
                    }
                    if (h.aj != null && h.b5()) {
                        if (f.w3) {
                            let i = this.cp ? c.left : c.top;
                            let j = 0;
                            let k = h.ig(i, j, h.bi.v1, c, h.j9(), d ? c.left : c.top, d ? c.right : c.bottom);
                            i = k.p0;
                            j = k.p1;
                            let l = Rect.empty;
                            let m = Rect.empty;
                            if (d && h.cp) {
                                l = new Rect(0, i - (h.fh / 2), h.ke.top, h.fh, h.ke.height);
                                m = new Rect(0, a - (b / 2), c.top, b, c.height);
                            }
                            else if (!d && !h.cp) {
                                l = new Rect(0, h.ke.left, i - (h.fh / 2), h.ke.width, h.fh);
                                m = new Rect(0, c.left, a - (b / 2), c.width, b);
                            }
                            if (l.left <= m.right && m.left <= l.right && l.top <= m.bottom && m.top <= l.bottom) {
                                e = true;
                                break;
                            }
                        }
                    }
                    else {
                        let n = Rect.empty;
                        let o = Rect.empty;
                        if (d && h.cp) {
                            n = new Rect(0, h.ke.left, h.ke.top, h.fh, h.ke.height);
                            o = new Rect(0, a - (b / 2), c.top, b, c.height);
                        }
                        else if (!d && !h.cp) {
                            n = new Rect(0, h.ke.left, h.ke.bottom - (h.fh / 2), h.ke.width, h.fh);
                            o = new Rect(0, c.left, a - (b / 2), c.width, b);
                        }
                        if (n.left <= o.right && o.left <= n.right && n.top <= o.bottom && o.top <= n.bottom) {
                            e = true;
                            break;
                        }
                        if (g && f.w4) {
                            let p = f.xx;
                            if (isNaN_(p)) {
                                if (d && h.cp) {
                                    p = 0;
                                    p = Math.max(p, f.xp);
                                    p = Math.max(p, f.xm);
                                }
                                else if (!d && !h.cp) {
                                    p = 0;
                                    p = Math.max(p, f.xn);
                                    p = Math.max(p, f.xo);
                                }
                                p += 1;
                            }
                            p *= 2;
                            if (d && h.cp) {
                                n = new Rect(0, h.ke.left, h.ke.top, h.fh, h.ke.height);
                                o = new Rect(0, a - (p / 2), c.top, p, c.height);
                            }
                            else if (!d && !h.cp) {
                                n = new Rect(0, h.ke.left, h.ke.bottom - (h.fh / 2), h.ke.width, h.fh);
                                o = new Rect(0, c.left, a - (p / 2), c.width, p);
                            }
                            if (n.left <= o.right && o.left <= n.right && n.top <= o.bottom && o.top <= n.bottom) {
                                e = true;
                                break;
                            }
                        }
                    }
                }
            }
            return e;
        }
        ig(a, b, c, d, e, f, g) {
            let h = Math.abs(f - g);
            a = this.fw;
            a = this.aj.e5(a);
            let i = typeCast(CategoryAxisBase.$, this.aj);
            if (i != null && i.categoryMode == 2) {
                let j = 0.5 * i.getCategorySize(c, d, e);
                let k = i.a2 == 0;
                if (i.ch == k) {
                    j = -j;
                }
                a = a + j;
            }
            b = a - f;
            if (a < f) {
                a = f;
            }
            else if (a > g) {
                a = g;
            }
            if (b < 0) {
                b = 0;
            }
            else if (b > h) {
                b = h;
            }
            return {
                p0: a,
                p1: b
            };
        }
        d0(a, b, c, d) {
            let e = a;
            if (d != null && d.c > 0) {
                let f = d.c % 2;
                if (f == 0 || f == 1) {
                    let g = 1;
                    e = Math.floor(a);
                    if (e + 0.5 < a) {
                        g = -1;
                        e = Math.ceil(a);
                    }
                    if (f == 1) {
                        e += 0.5 * g;
                    }
                    if (e >= c) {
                        e -= 1;
                    }
                    else if (e <= b) {
                        e += 1;
                    }
                }
            }
            return e;
        }
        hj(a) {
            this.a5.ae(a);
        }
        hi() {
            this.br.count = 0;
            this.bq.count = 0;
            this.bp.count = 0;
            this.a5.ac();
            this.dc.clear();
            this.dd.clear();
        }
        h8() {
            this.h9(false);
        }
        h9(a) {
            if (this.bi != null) {
                this.bi.ar.ac(1, this, this.a6, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        e0() {
            if (this.bc == null) {
                return -1;
            }
            if (isNaN_(this.bc.b)) {
                return -1;
            }
            if (this.eg() != 0) {
                return -1;
            }
            let a = this.bc.b;
            let b = this.e4();
            let c = this.e1();
            a = a + b + c;
            return Math.max(Axis.eu, a);
        }
        e4() {
            if (this.az == null) {
                return 0;
            }
            else {
                return this.az.topMargin;
            }
        }
        e2() {
            if (this.az == null) {
                return 0;
            }
            else {
                return this.az.leftMargin;
            }
        }
        e3() {
            if (this.az == null) {
                return 0;
            }
            else {
                return this.az.rightMargin;
            }
        }
        e1() {
            if (this.az == null) {
                return 0;
            }
            else {
                return this.az.bottomMargin;
            }
        }
        ey() {
            if (this.bc == null) {
                return -1;
            }
            if (isNaN_(this.bc.d) && isNaN_(this.di)) {
                return -1;
            }
            if (this.az != null && (this.az.angle != 0)) {
                return -1;
            }
            let a = this.bc.d;
            if (!isNaN_(this.di) && this.fr == -1) {
                return this.di;
            }
            return Math.max(Axis.eu, this.bc.d);
        }
        d2(a, b, c, d, e) {
            if (a == 1) {
                return 1;
            }
            if (b) {
                return a;
            }
            let f = 0;
            let g = this.er(a, b, c, d, e);
            if (!b && f < 10 && this.cz(g, a, c, d, e)) {
                a = g;
                g = a - 1;
                f += 1;
                while (!b && f < 10 && this.cz(g, a, c, d, e)) {
                    a = g;
                    g = a - 1;
                    f += 1;
                }
            }
            return a;
        }
        er(a, b, c, d, e) {
            let f = false;
            if (this.cp) {
                f = this.cb && this.b1 && this.bc != null;
            }
            else {
                f = this.cb && this.b1 && this.b6();
            }
            if (f) {
                let g = this.eh(a, c, d, e);
                if (isNaN_(g)) {
                    return a;
                }
                let h = this.ei(a, c, d, e);
                if (g <= h) {
                    return a;
                }
                let i = Math.ceil((h / g) * a) + 1;
                if (f && i == a) {
                    i--;
                }
                return i;
            }
            return a;
        }
        ei(a, b, c, d) {
            if (this.cp) {
                let e = this.bc.b;
                return e;
            }
            else {
                let f = this.di;
                if (this.bi != null && this.bi.fp) {
                    f = this.bc.b;
                }
                return f;
            }
        }
        cz(a, b, c, d, e) {
            if (this.cp) {
                if (this.cb && this.b1 && this.bc != null) {
                    let f = this.bc.b;
                    if (a >= 1) {
                        let g = a;
                        if (g < 1) {
                            return false;
                        }
                        let h = this.eh(g, c, d, e);
                        if (isNaN_(h)) {
                            return false;
                        }
                        if (h > f) {
                            return true;
                        }
                    }
                }
            }
            else {
                if (this.cb && this.b1 && this.b6()) {
                    if (a >= 1) {
                        let i = a;
                        if (i < 1) {
                            return false;
                        }
                        let j = this.eh(i, c, d, e);
                        if (isNaN_(j)) {
                            return false;
                        }
                        let k = this.di;
                        if (this.bi != null && this.bi.fp) {
                            k = this.bc.b;
                        }
                        if (j > k) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        eh(a, b, c, d) {
            return NaN;
        }
        ez() {
            if (this.cp) {
                return this.e0();
            }
            else {
                return this.ey();
            }
        }
        get c0() {
            return this.fr == -1;
        }
        hl(a) {
            if (this.a5.n()) {
                return;
            }
            let b = 0;
            let c = 0;
            if (this.dd != null && this.dd.count > 0) {
                b = this.dd._inner[this.dd.count - 1].c;
                c = this.dd.count;
            }
            if (this.cq && this.c4) {
                this.bc = this.bb();
            }
            this.a5.z();
            this.ia(a);
            this.a5.aq();
            if (!this.cp && this.cq && this.c4 && this.c0) {
                if (this.b2()) {
                    this.a5.z();
                    this.ia(a);
                    this.a5.aq();
                }
            }
            let d = 1;
            let e = 0;
            if (this.dd != null && this.dd.count > 0) {
                d = this.dd._inner[this.dd.count - 1].c;
                e = this.dd.count;
            }
            if (this.c6) {
                this.cq = true;
            }
            let f = false;
            if (d != b || e != c || this.cq) {
                this.cq = false;
                if (this.a5.p()) {
                    this.a5.ai();
                    f = true;
                }
            }
            this.a5.ah();
            if (!f) {
                this.hm();
            }
        }
        b2() {
            if (!isNaN_(this.di) || this.dc == null || this.dc.count == 0) {
                return false;
            }
            let a = this.bl();
            if (a == null) {
                return false;
            }
            let b = -1.7976931348623157E+308;
            for (let c = 0; c < this.dc.count; c++) {
                let d = this.dc._inner[c];
                if (typeof d === 'string') {
                    let e = FontUtil.measureStringWidth(d, a, this.a5.j);
                    b = Math.max(e, b);
                }
            }
            b += 5;
            if (this.az != null) {
                b += this.az.leftMargin + this.az.rightMargin;
            }
            this.di = b;
            return true;
        }
        ic() {
            this.di = NaN;
            this.h9(false);
        }
        b6() {
            return !isNaN_(this.di) && this.fr == -1;
        }
        d1(a, b) {
            return a;
        }
        ie() {
            this.di = NaN;
        }
        bb() {
            let a = this.bl();
            if (a == null) {
                return null;
            }
            if (a.f == 0) {
                return null;
            }
            let b = "W";
            if (this.a5.j == null) {
                return null;
            }
            let c = FontUtil.measureStringWidth(b, a, this.a5.j);
            if (this.dj != c || this.bc == null) {
                this.dj = c;
                let d = FontUtil.getCurrentFontHeight(this.bi.c8.j.ae, a);
                if (this.bc == null) {
                    this.bc = new LabelFontHeuristics();
                }
                this.bc.b = d;
                this.bc.c = this.fr;
                this.bc.a = this.b1;
                this.bc.e = c;
                this.bc.d = this.bc.e * this.bc.c;
            }
            return this.bc;
        }
        bl() {
            let a = null;
            if (this.bi != null) {
                a = this.bi.getFontInfo();
            }
            if (this.az != null && this.az.j) {
                if (this.bi != null) {
                    a = this.az.h(this.bi.c8.j.ae);
                }
            }
            return a;
        }
        hm() {
            if (!this.a5.p()) {
                return;
            }
            if (!this.b8()) {
                this.a5.ag();
            }
        }
        c1() {
            return this.c2(false);
        }
        c2(a) {
            if (a || this.bi == null) {
                let b = this.c3();
                if (b) {
                    this.cq = true;
                }
                this.cs = false;
                return b;
            }
            if (!this.cs) {
                this.cs = true;
                this.bi.ar.ab(this, this.a6);
            }
            return false;
        }
        c3() {
            return false;
        }
        ia(a) {
            if (this.it != null) {
                if ((this.bf == null || this.bf.visibility == 0) && (this.az == null || this.az.visibility == 0) && this.g7 != null) {
                    this.it._visibility = 0;
                }
                else {
                    this.it._visibility = 1;
                }
            }
        }
        ik() {
            let a = typeCast(XamDataChart.$, this.bi);
            if (a == null) {
                return;
            }
            let b = null, c = null, d = null;
            if (this.cb && !this.b9) {
                b = a.z8;
                for (let e of fromEnum(this.de)) {
                    if (e.fu || e.fr || e.fn || e.fr) {
                        c = a.z6;
                        d = a.z7;
                        break;
                    }
                }
            }
            else if (this.cj && !this.b9) {
                c = a.z6;
                d = a.z7;
                b = this.aj != null ? a.z8 : null;
                for (let f of fromEnum(this.de)) {
                    if (f.fu || f.fr || f.fn || f.fr) {
                        b = a.z8;
                        break;
                    }
                }
            }
            else if (this.b9 || this.a2 == 3) {
                b = a.z8;
                c = a.z6;
                d = a.z7;
            }
            this.jw = this.j0 != null ? this.j0 : b;
            this.ju = this.jx != null ? this.jx : c;
            this.jv = this.jy != null ? this.jy : d;
        }
        h3(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ct(a) {
            let b = this.de.contains(a);
            if (!b) {
                this.de.add(a);
            }
            this.ik();
            return !b;
        }
        b0(a) {
            let b = this.de.contains(a);
            if (b) {
                this.de.remove(a);
            }
            this.ik();
            return b;
        }
        fy(a, b) {
            let c = this.gt(b);
            if (c == Axis.$$p[12]) {
                return this.fz(a, b, this.f1);
            }
            return null;
        }
        gt(a) {
            if (!this.da.containsKey(a)) {
                let b = a.charAt(0).toUpperCase() + a.substr(1);
                this.da.addItem(a, b);
            }
            return this.da.item(a);
        }
        fz(a, b, c) {
            let d = null;
            if (!this.c9.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.c9.addItem(b, d);
            }
            else {
                d = this.c9.item(b);
            }
            d.propertyName = c;
            return d.getPropertyValue(a);
        }
        f0(a) {
            return this.a5.q(a);
        }
        ge(a) {
            return this.a5.s(a);
        }
        ew() {
            return NaN;
        }
        ek(a, b) {
            return 0;
        }
        el(a, b, c) {
            return 0;
        }
        ka(a) {
            if (this.bi == null) {
                return Rect.empty;
            }
            if (!a.equals1(this.ke)) {
                return Rect.empty;
            }
            return this.bi.vp;
        }
        j9() {
            if (this.bi == null) {
                return Rect.empty;
            }
            return this.bi.vp;
        }
        j8() {
            if (this.bi == null || this.bi.vo.isEmpty) {
                return this.ke;
            }
            return this.bi.vo;
        }
        kc(a, b) {
            if (b.isEmpty) {
                return a;
            }
            return b;
        }
        em(a, b, c) {
            let d = this.ka(c);
            let e = new ScalerParams(0, b, c, this.ch, d);
            return this.ek(a, e);
        }
        ho(a, b, c, d) {
        }
        hn(a, b, c, d, e) {
        }
        en(a, b) {
            return 0;
        }
        eo(a, b, c) {
            return 0;
        }
        ep(a, b, c) {
            let d = this.ka(c);
            let e = new ScalerParams(0, b, c, this.ch, d);
            return this.en(a, e);
        }
        hp(a, b, c, d) {
        }
        e5(a) {
            let b = this.j9();
            let c = new ScalerParams(0, this.bi.vl, this.ke, this.ch, b);
            return this.ek(a, c);
        }
        hu(a) {
            let b = false;
            if (this.kj.width == 0 || this.kj.height == 0) {
                this.kd = new Rect(0, 0, 0, a.width, a.height);
            }
            else {
                b = true;
                this.kd = new Rect(0, 0, 0, this.kj.width, this.kj.height);
            }
            if (b) {
                this.a6.c = true;
                this.cq = true;
                this.aw.ci();
                this.c2(true);
            }
        }
        ij() {
            this.kd = Rect.empty;
            this.aw.cq();
        }
        aq() {
            this.ap.a = this.aw;
            return this.ap;
        }
        get et() {
            return this.dh;
        }
        set et(a) {
            let b = this.et;
            if (a != b) {
                this.dh = a;
                this.h3("MinExtent", b, this.et);
            }
        }
        b8() {
            if (!isNaN_(this.d3)) {
                return true;
            }
            if (this.az == null) {
                return false;
            }
            else {
                return this.az.l();
            }
        }
        eq() {
            if (!isNaN_(this.d3)) {
                return this.d3;
            }
            if (this.az == null) {
                return 50;
            }
            return this.az.extent;
        }
        hh() {
            this.a5.x();
        }
        hk(a) {
            this.h4(a);
        }
        get kf() {
            return this.ar().a;
        }
        get kg() {
            return this.ar().b;
        }
        get ki() {
            return this.a5.c().d;
        }
        get kh() {
            return this.ar().c;
        }
        be() {
            return SyncManager.a(this.bh);
        }
        ar() {
            return this.a5.c();
        }
        get ay() {
            return this.ax;
        }
        hy(a, b) {
            if (this.aw != null) {
                this.aw.cj(a);
            }
            this.a5.ak(a, b);
        }
        b5() {
            return this.fw != null;
        }
        fx() {
            return this.ba.exportVisualData(this);
        }
        *_db() {
            for (let a = 0; a < this.de.count; a++) {
                let b = this.de._inner[a];
                yield b;
            }
        }
        db() {
            return toEnum(() => this._db());
        }
        hz(a) {
        }
        h2(a) {
        }
        h1(a) {
        }
        j6(a, b, c, d, e) {
            if (this.cp) {
                let f = new LineGeometry();
                f.d = { $type: Point_$type, x: c.left, y: a };
                f.c = { $type: Point_$type, x: c.right, y: a };
                return f;
            }
            else {
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: a, y: c.bottom };
                g.c = { $type: Point_$type, x: a, y: c.top };
                return g;
            }
        }
    }
    Axis.$t = markType(Axis, 'Axis', Control.$, [INotifyPropertyChanged_$type]);
    Axis.jq = DependencyProperty.i("UseEnhancedIntervalManagement", Boolean_$type, Axis.$, new PropertyMetadata(2, false, (a, b) => a.h3("UseEnhancedIntervalManagement", b.oldValue, b.newValue)));
    Axis.eu = 7;
    Axis.$$p = markDep(DependencyProperty, PropertyMetadata, Axis, 'h3', ['ActualMajorStroke:ju:iu', [Brush.$], 'ActualMinorStroke:jv:iv', [Brush.$], 'ActualStroke:jw:iw', [Brush.$], 'CrossingAxis:aj:ix', [Axis.$], 'CrossingValue:fw:iy', [4, null], 'EnhancedIntervalMinimumCharacters:fr:iz', [1, -1], 'EnhancedIntervalPreferMoreCategoryLabels:b1:i0', [0, false], 'FormatLabel:au:i1', [Delegate_$type], 'IsDisabled:cf:i2', [0, false], 'IsInverted:ch:i3', [0, false], 'LabelFormat:gh:i4', [2, null], 'LabelFormatSpecifiers:ah:i5', [Array_$type, null], 'Label:f1:i6', [4, null], 'LabelSettings:az:i7', [AxisLabelSettings.$, null], 'MajorStrokeDashArray:j2:i8', [DoubleCollection.$], 'MajorStroke:jx:i9', [Brush.$], 'MajorStrokeThickness:es:ja', [1, 1], 'MinorStrokeDashArray:j3:jb', [DoubleCollection.$], 'MinorStroke:jy:jc', [Brush.$], 'MinorStrokeThickness:ev:jd', [1, 1], 'ShouldAvoidAnnotationCollisions:cu:je', [0, false], 'ShouldKeepAnnotationsInView:cw:jf', [0, false], 'Strip:jz:jg', [Brush.$], 'StrokeDashArray:j4:jh', [DoubleCollection.$], 'Stroke:j0:ji', [Brush.$], 'StrokeThickness:fh:jj', [1, DeviceUtils.g(2)], 'TickLength:fi:jk', [1, NaN], 'TickStrokeDashArray:j5:jl', [DoubleCollection.$], 'TickStroke:j1:jm', [Brush.$], 'TickStrokeThickness:fj:jn', [1, DeviceUtils.g(2)], 'Title:g7:jo', [2], 'TitleSettings:bf:jp', [TitleSettings.$, null], 'UsePerLabelHeightMeasurement:c5:jr', [0, true]]);
    return Axis;
})();
/**
 * @hidden
 */
export let AxisCollection = /*@__PURE__*/ (() => {
    class AxisCollection extends ObservableCollection$1 {
        constructor() {
            super(Axis.$, 0);
            this.collectionResetting = null;
            this.propertyChanged = delegateCombine(this.propertyChanged, (a, b) => {
                if (b.propertyName == "Name") {
                    for (let c = 0; c < this.count; ++c) {
                        if (this._inner[c].name == b.propertyName) {
                            this.ac(new NotifyCollectionChangedEventArgs(2, 2, this._inner[c], this._inner[c], c));
                        }
                    }
                }
            });
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    AxisCollection.$t = markType(AxisCollection, 'AxisCollection', ObservableCollection$1.$.specialize(Axis.$));
    return AxisCollection;
})();
/**
 * @hidden
 */
export let AxisLabelManager = /*@__PURE__*/ (() => {
    class AxisLabelManager extends Base {
        constructor() {
            super();
            this.e = null;
            this.f = null;
            this.b = null;
            this.a = null;
            this.c = null;
            this.c = (a) => {
            };
        }
        n(a, b) {
            this.e.clear();
            this.f.clear();
            this.b.ad = this.a;
            this.b.c5 = a;
            this.b.c4 = b;
            if (b.isEmpty || a.isEmpty) {
                this.s(0);
                this.a.bq.count = 0;
                this.a.bp.count = 0;
            }
            if (this.a.br.count == 0 && this.a.bq.count == 0 && this.a.a5.l()) {
                this.b.ab.clear();
            }
        }
        i(a, b) {
            this.e.add1(a);
            this.f.add(b);
        }
        t() {
            this.b.a9 = this.e;
            this.b.ba = this.f;
            this.b.cl();
        }
        static j(a, b) {
            AxisLabelManager.k(a, false, b);
        }
        static k(a, b, c) {
        }
        static l(a, b, c) {
        }
        static m(a, b) {
            AxisLabelManager.l(a, true, b);
        }
        h(a) {
            this.b.ab.add(a);
        }
        r(a) {
            this.b.bw = a;
        }
        o(a) {
            this.c(a);
        }
        u(a) {
            let b = this.a.br.item(a);
            return b;
        }
        s(a) {
            if (this.a == null) {
                return;
            }
            this.a.br.count = a;
        }
        get d() {
            if (this.a == null || this.a.az == null) {
                return false;
            }
            return this.a.az.visibility != 0;
        }
        q() {
            this.a.br.count = 0;
            this.a.bq.count = 0;
            this.a.bp.count = 0;
            this.a.aw.bb.clear();
        }
        p() {
            this.a.cq = true;
        }
        g() {
            this.a.hg();
        }
    }
    AxisLabelManager.$t = markType(AxisLabelManager, 'AxisLabelManager');
    return AxisLabelManager;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBase = /*@__PURE__*/ (() => {
    class AxisLabelPanelBase extends Panel {
        constructor() {
            super();
            this.cx = null;
            this.bw = 0;
            this.ad = null;
            this.ak = false;
            this.a3 = null;
            this.ba = null;
            this.c4 = null;
            this.cw = Rect.empty;
            this.cv = null;
            this.c2 = null;
            this.bc = 0;
            this.bx = null;
            this.bb = null;
            this.a8 = null;
            this.ag = null;
            this.ao = false;
            this.c3 = null;
            this.ar = false;
            this.av = false;
            this.aw = false;
            this.ax = false;
            this.bz = null;
            this.al = false;
            this.bd = 50;
            this.be = 0;
            this.bf = 0;
            this.c7 = new Size();
            this.be = NaN;
            this.c4 = Rect.empty;
            this.c2 = Rect.empty;
            this.c1 = Rect.empty;
            this.af = this.ae();
            this.ch(this.af);
            this.af.an();
            this.bb = new List$1(FrameworkElement.$, 0);
            this.ba = new List$1(LabelPosition.$, 0);
            this.a8 = new List$1(Rect.$, 0);
            this.aw = false;
            this.av = false;
            this.ax = false;
            this.ao = false;
            this.ar = false;
            this.c3 = Rect.empty;
            this.ak = false;
        }
        ae() {
            return new AxisLabelPanelBaseView(this);
        }
        ch(a) {
        }
        b8() {
        }
        cp() {
        }
        co() {
        }
        get az() {
            return this.ak;
        }
        set az(a) {
            this.ak = a;
        }
        get a9() {
            return this.a3;
        }
        set a9(a) {
            let b = this.a3;
            this.a3 = a;
            if (b == null && b != a) {
                this.ce();
            }
        }
        get c5() {
            return this.cw;
        }
        set c5(a) {
            let b = this.cw;
            this.cw = a;
            this.ct(b, this.cw);
        }
        get c1() {
            if (!this.c2.isEmpty) {
                return this.c2;
            }
            return this.cv;
        }
        set c1(a) {
            let b = this.cv;
            this.cv = a;
            this.cd(b, this.cv);
        }
        get bg() {
            return this.bc;
        }
        set bg(a) {
            this.bc = a;
        }
        bn() {
            let a = 1.7976931348623157E+308;
            if (this.ba != null && this.ba.count > 1) {
                for (let b = 1; b < this.ba.count; b++) {
                    let c = this.ba._inner[b];
                    let d = this.ba._inner[b - 1];
                    if (c.a || d.a) {
                        continue;
                    }
                    let e = Math.abs(c.c - d.c);
                    if (e < a) {
                        a = e;
                    }
                }
            }
            return a;
        }
        cl() {
            this.ar = false;
            this.c3 = Rect.empty;
        }
        an(a, b) {
            for (let c = 0; c < a.count - 1; c++) {
                if (b._inner[c]) {
                    continue;
                }
                for (let d = c; d < a.count - 1; d++) {
                    if (b._inner[d + 1]) {
                        continue;
                    }
                    if (a._inner[c].intersectsWith(a._inner[d + 1])) {
                        return true;
                    }
                }
            }
            return false;
        }
        by(a, b, c) {
            return {
                ret: 0,
                p1: b
            };
        }
        a5() {
            return null;
        }
        b6() {
        }
        b2(a) {
        }
        get ap() {
            return this.ag != null && this.ag.k();
        }
        bl() {
            if (this.ad.b4 && (!this.ap || (this.ap && this.ag.angle == 0))) {
                return this.ad.ex();
            }
            return this.ag != null ? this.ag.angle : 0;
        }
        bq() {
            return this.ad.bf != null ? this.ad.bf.angle : 0;
        }
        at(a, b) {
            if (a == 0 && !this.ad.b9 && this.ag != null) {
                if (this.ad.cp) {
                    if (!this.ag.showFirstLabel && this.ad.bi.hm() == 1) {
                        return false;
                    }
                }
                else {
                    if (!this.ag.showFirstLabel && this.ad.bi.hl() == 1) {
                        return false;
                    }
                }
            }
            return true;
        }
        bk(a) {
            return this.af.m(a);
        }
        bv(a) {
            return this.af.w(a);
        }
        bm(a) {
            return this.af.n(a);
        }
        bj(a) {
            return this.af.l(a);
        }
        aq() {
            return false;
        }
        ct(a, b) {
        }
        cd(a, b) {
        }
        a7() {
            if (this.ab.count < 1 || this.ba.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.bb = new List$1(FrameworkElement.$, 0);
            this.a8 = new List$1(Rect.$, 0);
            this.b6();
            this.af.af();
            let a = this.bl();
            if (a % 360 == 0) {
                this.av = false;
            }
            if (this.bb.count == 0) {
                return new List$1(Rect.$, 0);
            }
            this.a8 = this.a5();
            this.a8 = this.a6(this.a8);
            this.ak = true;
            return this.a8;
        }
        a6(a) {
            if (this.ad.cu || this.ad.cw) {
                let b = this.af.p();
                let c = this.af.r();
                let d = this.af.q();
                let e = this.af.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.av) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a4(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cy(j, a._inner[j], g);
                    let m = this.cy(k, a._inner[k], g);
                    let n = l.top;
                    let o = m.top;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cy(k, a._inner[k], g);
                    let n = this.ad.bi.v0.top;
                    if (this.ad.cw) {
                        if (l.top < (this.ad.bi.v0.top - n)) {
                            l = new Rect(0, l.left, l.top + ((this.ad.bi.v0.top - n) - l.top), l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.as(a, h, g);
                if (o && (this.ad.cu)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cy(q, a._inner[q], g);
                        let v = this.cy(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.top > v.bottom) {
                            let w = new Rect(0, t.left, u.bottom + 1 + (t.top - v.top), t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cy(y, a._inner[y], g);
                    let ab = this.ad.bi.c8.a3;
                    if (this.ad.cw) {
                        if (aa.bottom > this.ad.bi.v0.bottom + ab) {
                            z = new Rect(0, z.left, z.top - (aa.bottom - (this.ad.bi.v0.bottom + ab)), z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ad.cu) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cy(ad, a._inner[ad], g);
                        let ai = this.cy(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.top < ai.bottom) {
                            let aj = new Rect(0, ag.left, ah.top - (ai.height + 1 + (ag.top - ai.top)), ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
        cy(a, b, c) {
            let d = this.ba._inner[a];
            let e = d.d;
            if (isNaN_(e.left) || isNaN_(e.top) || isNaN_(e.right) || isNaN_(e.bottom)) {
                e = c;
            }
            if (e.left > c.left || e.top > c.top || e.right > c.right || e.bottom > c.bottom) {
                e = c;
            }
            let f = new Rect(0, b.left - e.left, b.top - e.top, b.width + e.left + e.right, b.height + e.top + e.bottom);
            return f;
        }
        as(a, b, c) {
            if (b.count <= 1) {
                return false;
            }
            for (let d = 0; d < b.count - 1; d++) {
                let e = b._inner[d];
                let f = b._inner[d + 1];
                let g = a._inner[e];
                let h = a._inner[f];
                let i = this.cy(e, a._inner[e], c);
                let j = this.cy(f, a._inner[f], c);
                if (i.intersectsWith(j)) {
                    return true;
                }
            }
            return false;
        }
        a4(a) {
            let b = new List$1(Number_$type, 0);
            for (let c = 0; c < a.count; c++) {
                let d = this.ba._inner[c].a;
                if (d) {
                    b.add(c);
                }
            }
            return b;
        }
        bp(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.width * Math.cos(c)) + Math.abs(b.height * Math.sin(c));
            return d;
        }
        bo(a, b) {
            let c = a * (Math.PI / 180);
            let d = Math.abs(b.height * Math.cos(c)) + Math.abs(b.width * Math.sin(c));
            return d;
        }
        bt() {
            let a = this.af.k();
            return a;
        }
        br() {
            let a = this.af.j();
            return a;
        }
        bs() {
            if (this.ad.g7 == null || (this.ad.bf != null && this.ad.bf.visibility == 1)) {
                return 0;
            }
            let a = this.br();
            let b = this.bt();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bq();
            let e = RectUtil.w(c, d);
            return e.height + this.af.v() + this.af.s();
        }
        bu() {
            if (this.ad.g7 == null || (this.ad.bf != null && this.ad.bf.visibility == 1)) {
                return 0;
            }
            let a = this.br();
            let b = this.bt();
            let c = new Rect(0, 0, 0, b, a);
            let d = this.bq();
            let e = RectUtil.w(c, d);
            return e.width + this.af.t() + this.af.u();
        }
        c6(a) {
            if (this.ad == null || this.ab.count == 0) {
                return a;
            }
            this.b5(a);
            this.b9();
            this.b4(a);
            this.a8 = this.a7();
            if (this.bb.count != this.a8.count) {
                return a;
            }
            let b = this.af.p();
            let c = this.af.r();
            let d = this.af.q();
            let e = this.af.o();
            if (this.av) {
                for (let f = 0; f < this.bb.count; f++) {
                    if (this.at(f, this.a8._inner[f])) {
                        this.af.aa(this.bb._inner[f], this.a8._inner[f], b, c, d, e);
                    }
                    this.cm(this.bb._inner[f], this.bl());
                }
            }
            for (let g = 0; g < this.bb.count; g++) {
                if (!this.av) {
                    this.af.ae(this.bb._inner[g]);
                }
                if (this.at(g, this.a8._inner[g])) {
                    this.af.aa(this.bb._inner[g], this.a8._inner[g], b, c, d, e);
                }
                else {
                    this.af.aa(this.bb._inner[g], new Rect(0, 0, 0, 0, 0), b, c, d, e);
                }
            }
            if (this.ad.bq.count > 0) {
                this.ad.a8.arrangeAnnotations(this.ad, this.af, this.bb, this.a8, this.av, this.bl(), b, c, d, e);
            }
            this.b2(a);
            if (this.aq() && this.am && this.ad != null && this.ad.bg != null && !this.ad.cr && this.ad.bg.wq && !this.ad.bg.wx && this.a8 != null && this.a8.count > 0) {
                let h = this.a8.count - 1;
                if (this.ad.bq.count > 0) {
                    h -= this.ad.bq.count;
                }
                if (h < 0) {
                    h = 0;
                }
                this.ad.bg.zb(this, this.c1, this.a8._inner[0], this.a8._inner[h]);
            }
            return a;
        }
        get am() {
            return this.ad.az != null && (this.ad.az.c != 5 && this.ad.az.c != 4);
        }
        c0() {
            return Rect.empty;
        }
        b5(a) {
            if (this.ad.it == null) {
                return;
            }
            this.af.ai(this.ad.it, new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            let b = Math.abs(this.bq() - 0) > 1E-06;
            let c = this.c0();
            let d = c.left + (c.width / 2);
            let e = c.top + (c.height / 2);
            let f = this.bt() + this.af.t() + this.af.u();
            let g = this.br() + this.af.v() + this.af.s();
            let h = f / 2;
            let i = g / 2;
            let j = new Rect(0, d - h, e - i, f, g);
            if (b) {
                this.cn(this.ad.it);
            }
            else {
                this.af.ae(this.ad.it);
            }
            this.af.aa(this.ad.it, j, this.af.t(), this.af.v(), this.af.u(), this.af.s());
            if ((this.ad.bf == null || this.ad.bf.visibility == 0) && (this.ad.az == null || this.ad.az.visibility == 0) && this.ad.g7 != null) {
                this.ad.it._visibility = 0;
            }
            else {
                this.ad.it._visibility = 1;
                this.af.aa(this.ad.it, new Rect(0, 0, 0, 0, 0), 0, 0, 0, 0);
            }
        }
        b4(a) {
            this.af.ab(a);
        }
        b9() {
        }
        a2() {
            if (typeCast(CategoryAxisBase.$, this.ad) !== null) {
                return this.ad.kz;
            }
            if (typeCast(NumericAxisBase.$, this.ad) !== null) {
                let a = new List$1(Number_$type, 0);
                let d = this.ad.k6.j();
                for (let c = 0; c < d.length; c++) {
                    let b = d[c];
                    let e = this.ad.j9();
                    let f = new ScalerParams(0, this.ad.bi.v1, this.ad.ke, this.ad.ci, e);
                    a.add(this.ad.ek(b, f));
                }
                return a;
            }
            return null;
        }
        get ah() {
            let a = this.ag != null ? this.ag.c : this.ai();
            if (this.ad.aj == null) {
                if (a == 4) {
                    a = 5;
                }
                else if (a == 5) {
                    a = 4;
                }
                else if (a == 6) {
                    a = 7;
                }
                else if (a == 7) {
                    a = 6;
                }
            }
            return a;
        }
        cs(a, b, c, d, e, f) {
            let g = b;
            let h = b;
            if (f != null) {
                let i = f.c / 2;
                g -= i;
                h += i;
            }
            if (h >= e.left && g <= e.right) {
                if (f.a) {
                    b = this.ad.d0(b, e.left, e.right, f);
                }
                let j = new LineGeometry();
                j.d = { $type: Point_$type, x: b, y: c };
                j.c = { $type: Point_$type, x: b, y: d };
                a.add(j);
            }
        }
        cc(a, b, c, d, e, f) {
            if (b <= e.bottom && b >= e.top) {
                if (f.a) {
                    b = this.ad.d0(b, e.top, e.bottom, f);
                }
                let g = new LineGeometry();
                g.d = { $type: Point_$type, x: c, y: b };
                g.c = { $type: Point_$type, x: d, y: b };
                a.add(g);
            }
        }
        cm(a, b) {
            let c = this.bl();
            this.af.aj(a, c);
        }
        get_au() {
            return false;
        }
        get au() {
            return this.get_au();
        }
        ac(a, b) {
            let c = a.height;
            let d = a.width;
            let e = 0 + a.left;
            let f = (c / 2) + a.top;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(b);
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.o(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.o(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            let m = TransformMatrixHelpler.f(g);
            let n = RectUtil.n(a);
            let o = RectUtil.o(a);
            let p = RectUtil.k(a);
            let q = RectUtil.j(a);
            let r = TransformMatrixHelpler.i(m, n);
            let s = TransformMatrixHelpler.i(m, o);
            let t = TransformMatrixHelpler.i(m, p);
            let u = TransformMatrixHelpler.i(m, q);
            let v = new Array(4);
            v[0] = r;
            v[1] = s;
            v[2] = t;
            v[3] = u;
            return v;
        }
        cz(a, b) {
            let c = this.ac(a, b);
            let d = 1.7976931348623157E+308;
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = -1.7976931348623157E+308;
            for (let h = 0; h < c.length; h++) {
                d = c[h].x < d ? c[h].x : d;
                e = c[h].y < e ? c[h].y : e;
                f = c[h].x > f ? c[h].x : f;
                g = c[h].y > g ? c[h].y : g;
            }
            return new Rect(0, d, e, Math.max(f - d, 0), Math.max(g - e, 0));
        }
        cn(a) {
            let b = this.bq();
            this.cb(a, b);
        }
        cb(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = this.br();
            let e = this.bt();
            let f = 0.5 * e;
            let g = 0.5 * d;
            let h = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = f;
                $ret.l = g;
                return $ret;
            })());
            let i = new TransformGroup();
            i.j.add(h);
            c.j = i;
        }
        c8(a) {
            if ((this.ab.contains(this.ad.it) == false) && this.ad.it != null) {
                this.ab.add(this.ad.it);
                AxisLabelManager.m(this.ad.it, this.ad.bf);
            }
            for (let b of fromEnum(this.ab)) {
                if (b != this.ad.it && b != this.af.aw) {
                    this.af.ah(b);
                }
            }
            let c = (this.ad == null || this.bd <= 0 || isNaN_(this.bd)) ? 50 : this.bd;
            if (this.ad != null && (this.ad.de == null || this.ad.de.count == 0)) {
                if (this.ad.b8()) {
                    c = this.ad.eq();
                }
            }
            let d = this.aq();
            c = Math.min(c, d ? a.height : a.width);
            c = isInfinity(c) ? 50 : c;
            return d ? new Size(1, 50, c) : new Size(1, c, 50);
        }
        get bh() {
            return this.c(AxisLabelPanelBase.cu);
        }
        set bh(a) {
            this.h(AxisLabelPanelBase.cu, a);
        }
        aj(a) {
            if (a == null) {
                return this.ad.bi.ap(this.ad);
            }
            if (a.position == 0) {
                if (this.ad != null && this.ad.bi != null) {
                    return this.ad.bi.ap(this.ad);
                }
                return 4;
            }
            return a.position;
        }
        ai() {
            return 1;
        }
        ay(a) {
            return true;
        }
        *_a0() {
            for (let a of fromEnum(this.ab)) {
                if (a != this.ad.it && a != this.af.aw) {
                    yield a;
                }
            }
        }
        a0() {
            return toEnum(() => this._a0());
        }
        b1(a, b, c, d, e) {
            let f = this.af.x(b, c, d, e);
            return f;
        }
        b7(a) {
            if (this.bz == null || this.bk(this.bz) < this.bk(a)) {
                this.bz = a;
            }
        }
        cg(a) {
            this.bb.add(a);
        }
        *_a1() {
            for (let a = 0; a < this.ad.br.count; a++) {
                yield this.ad.br.item(a);
            }
            for (let b = 0; b < this.ad.bq.count; b++) {
                yield this.ad.bq.item(b);
            }
        }
        a1() {
            return toEnum(() => this._a1());
        }
        ca() {
            this.af.ag();
            this.cr();
        }
        cr() {
            this.a8 = this.a7();
        }
        ce() {
        }
        bi(a) {
            return this.bd;
        }
        ci() {
            this.c2 = new Rect(0, 0, 0, this.c7.width, this.c7.height);
        }
        cq() {
            this.c2 = Rect.empty;
        }
        cf() {
            this.af.ak();
        }
        cj(a) {
            this.af.al(a);
        }
        b3() {
            this.af.y();
        }
        ck() {
            this.af.ao();
        }
    }
    AxisLabelPanelBase.$t = markType(AxisLabelPanelBase, 'AxisLabelPanelBase', Panel.$);
    AxisLabelPanelBase.cu = DependencyProperty.i("Extent", Number_$type, AxisLabelPanelBase.$, new PropertyMetadata(2, 50, (a, b) => a.bd = b.newValue));
    return AxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let CategoryAxisBase = /*@__PURE__*/ (() => {
    class CategoryAxisBase extends Axis {
        constructor() {
            super();
            this.kz = null;
            this.kr = null;
            this.le = 0;
            this.lg = 0;
            this.kp = 0;
            this.k1 = 1;
            this.lf = 0;
            this.kt = false;
            this.kz = new List$1(Number_$type, 0);
        }
        a4() {
            return new CategoryAxisBaseView(this);
        }
        ag() {
            return [0, this.lh - 1];
        }
        get_cd() {
            return false;
        }
        ht(a) {
            super.ht(a);
            this.ko = a;
        }
        eh(a, b, c, d) {
            let e = this.getCategorySize(b, c, d);
            let f = e * a;
            return f;
        }
        c8(a, b, c) {
            let d = super.c8(a, b, c);
            if (!d) {
                return false;
            }
            return this.itemsSource != null && this.lg > 0;
        }
        l3() {
            if (this.ks != null && this.bo != null && this.itemsSource != null) {
                this.ks = this.bo.releaseFastItemsSource(this.itemsSource);
            }
        }
        l2() {
            if (this.ks == null && this.bo != null && this.itemsSource != null) {
                this.ks = this.bo.getFastItemsSource(this.itemsSource);
            }
        }
        get_cb() {
            return true;
        }
        mg(a, b, c) {
            if (this.b9) {
                return Rect.empty;
            }
            return this.mh(a, b, c, this.cp);
        }
        mh(a, b, c, d) {
            let e = 0;
            let f = a.x;
            let g = this.ke.left;
            let h = this.ke.right;
            if (d) {
                f = a.y;
                g = this.ke.top;
                h = this.ke.bottom;
            }
            let i = this.kz;
            if ((d && !this.ch) || (!d && this.ch)) {
                i = new List$1(Number_$type, 0);
                for (let j = this.kz.count - 1; j >= 0; j--) {
                    i.add(this.kz._inner[j]);
                }
            }
            if (this.categoryMode == 0) {
                if (b) {
                    let k;
                    if (d) {
                        k = new Rect(0, this.ke.left, a.y - c / 2, this.ke.width, c);
                    }
                    else {
                        k = new Rect(0, a.x - c / 2, this.ke.top, c, this.ke.height);
                    }
                    k.intersect(this.ke);
                    return k;
                }
                else {
                    if (f > h) {
                        return Rect.empty;
                    }
                    if (f < g) {
                        return Rect.empty;
                    }
                    let l = 1.7976931348623157E+308;
                    let m = -1;
                    for (e = 0; e < i.count; e++) {
                        let n = Math.abs(i._inner[e] - f);
                        if (n < l) {
                            l = n;
                            m = e;
                        }
                    }
                    if (m == -1) {
                        return Rect.empty;
                    }
                    let o = i._inner[m];
                    let p;
                    if (d) {
                        p = new Rect(0, this.ke.left, o - c / 2, this.ke.width, c);
                    }
                    else {
                        p = new Rect(0, o - c / 2, this.ke.top, c, this.ke.height);
                    }
                    p.intersect(this.ke);
                    return p;
                }
            }
            else {
                for (e = 0; e < i.count; e++) {
                    if (i._inner[e] > f) {
                        break;
                    }
                }
                if (e == 0) {
                    return Rect.empty;
                }
                if (f > h) {
                    return Rect.empty;
                }
                if (f < g) {
                    return Rect.empty;
                }
                let q = this.ke.right;
                if (d) {
                    q = this.ke.bottom;
                }
                if (e < i.count) {
                    q = i._inner[e];
                }
                if (d) {
                    return new Rect(0, this.ke.left, i._inner[e - 1], this.ke.width, q - i._inner[e - 1]);
                }
                else {
                    return new Rect(0, i._inner[e - 1], this.ke.top, q - i._inner[e - 1], this.ke.height);
                }
            }
        }
        get itemsSource() {
            return this.c(CategoryAxisBase.mb);
        }
        set itemsSource(a) {
            this.h(CategoryAxisBase.mb, a);
        }
        get lh() {
            return this.le;
        }
        set lh(a) {
            this.le = a;
            this.lg = this.le;
        }
        get categoryMode() {
            return this.kp;
        }
        set categoryMode(a) {
            if (this.kp != a) {
                let b = this.kp;
                this.kp = a;
                this.h3("CategoryMode", enumGetBox(CategoryMode_$type, b), enumGetBox(CategoryMode_$type, a));
            }
        }
        lc(a, b, c) {
            let d = !isNaN_(this.k2) ? MathUtil.d(this.k2, 0, this.k1) : 0;
            if (!this.b9 && this.la > 0) {
                let e = this.getCategorySize(a, b, c);
                let f = 0.5 * d;
                let g = e * f;
                if (g < this.la) {
                    g = this.la;
                    f = g / e;
                    d = f / 0.5;
                    d = MathUtil.d(d, 0, this.k1);
                }
            }
            return d;
        }
        get li() {
            return this.lf;
        }
        set li(a) {
            if (a != this.lf) {
                let b = this.lf;
                this.lf = a;
                this.h3("GroupCount", b, this.lf);
            }
        }
        en(a, b) {
            return NaN;
        }
        getUnscaledValue3(a, b, c, d) {
            return NaN;
        }
        getCategorySize(a, b, c) {
            return NaN;
        }
        k5(a, b, c) {
            return NaN;
        }
        getGroupCenter(a, b, c, d) {
            return NaN;
        }
        ld(a) {
            let b = this.bi.v1;
            let c = this.ke;
            let d = this.j9();
            let e = new ScalerParams(0, b, c, this.ch, d);
            return this.en(a, e);
        }
        *_ky() {
            for (let a of fromEnum(this.de)) {
                yield a;
            }
            if (this.bi != null && this.bi.fc && this.kv(this.bi)) {
                for (let b of fromEnum(this.bi.gg())) {
                    if (b != this.bi) {
                        for (let c of fromEnum(b.series)) {
                            yield c;
                        }
                    }
                }
            }
        }
        ky() {
            return toEnum(() => this._ky());
        }
        ku(a) {
            return this.de.contains(a);
        }
        kv(a) {
            return false;
        }
        *_kx() {
            let a = typeCast(XamDataChart.$, this.bi);
            if (a != null && a.fc && this.kv(a)) {
                for (let b of fromEnum(a.gg())) {
                    if (b != this.bi) {
                        let c = typeCast(XamDataChart.$, b);
                        if (c != null) {
                            for (let d of fromEnum(c.axes)) {
                                if (typeCast(CategoryAxisBase.$, d) !== null) {
                                    yield typeCast(CategoryAxisBase.$, d);
                                }
                            }
                        }
                    }
                }
            }
        }
        kx() {
            return toEnum(() => this._kx());
        }
        l7(a) {
            if (this.kt) {
                return;
            }
            try {
                this.kt = true;
                let b = 0;
                let c = 0;
                let d = false;
                for (let e of fromEnum(this.ky())) {
                    if (!e.ew && !e.fr && !e.e4) {
                        continue;
                    }
                    if (e.bl != null) {
                        continue;
                    }
                    let f = e;
                    let g = f.preferredCategoryMode(this);
                    if (g == 2) {
                        b = 2;
                        d = true;
                        if (this.ku(e)) {
                            c++;
                        }
                    }
                    if (g == 1 && !d) {
                        b = 1;
                    }
                }
                let h = this.kw;
                for (let i of fromEnum(this.kx())) {
                    if (i.kw) {
                        h = true;
                    }
                    if (a) {
                        i.l7(false);
                    }
                }
                if (b == 0 && h) {
                    b = 2;
                    if (c == 0) {
                        c = 1;
                    }
                }
                this.categoryMode = b;
                this.li = c;
            }
            finally {
                this.kt = false;
            }
        }
        lj() {
            if (this.ks == null) {
                return 0;
            }
            return this.ks.count;
        }
        hx(a, b, c, d) {
            super.hx(a, b, c, d);
            switch (b) {
                case "FastItemsSourceProvider":
                    if ((typeCast(IFastItemsSourceProvider_$type, c)) != null) {
                        this.ks = c.releaseFastItemsSource(this.itemsSource);
                    }
                    if ((typeCast(IFastItemsSourceProvider_$type, d)) != null) {
                        this.ks = d.getFastItemsSource(this.itemsSource);
                    }
                    this.lh = 0;
                    if (this.ks != null) {
                        this.lh = this.lj();
                    }
                    this.l7(true);
                    break;
                case "ItemsSource":
                    if (this.bo != null) {
                        this.ks = this.bo.getFastItemsSource(this.itemsSource);
                    }
                    break;
                case CategoryAxisBase.$$p[0]:
                    let e = typeCast(IFastItemsSource_$type, c);
                    this.lu();
                    this.cq = true;
                    if (e != null) {
                        e.event = delegateRemove(e.event, runOn(this, this.lx));
                    }
                    this.lh = 0;
                    if (this.ks != null) {
                        this.lh = this.lj();
                    }
                    if (this.ks != null) {
                        let f = this.ks;
                        f.event = delegateCombine(f.event, runOn(this, this.lx));
                        this.h9(false);
                        for (let g of fromEnum(this.db())) {
                            g.rn(false);
                            if (g.c9 != null) {
                                g.qh();
                            }
                        }
                        if (this.bi != null && this.bi.fq) {
                            this.bi.ql();
                        }
                    }
                    else {
                        this.hi();
                        for (let h of fromEnum(this.db())) {
                            h.o3(true, h.ct);
                            if (h.c9 != null) {
                                h.qh();
                            }
                        }
                    }
                    break;
                case "ItemsCount":
                    this.h4(new AxisRangeChangedEventArgs(0, 0, 0, typeGetValue((c)) - 1, typeGetValue((d)) - 1));
                    this.h9(false);
                    break;
                case CategoryAxisBase.$$p[5]:
                    this.cq = true;
                    this.l8();
                    this.h9(false);
                    this.lv();
                    break;
                case "CategoryMode":
                    this.cq = true;
                    this.h9(false);
                    this.l5();
                    this.lv();
                    break;
                case CategoryAxisBase.$$p[4]:
                case CategoryAxisBase.$$p[3]:
                case CategoryAxisBase.$$p[2]:
                case CategoryAxisBase.$$p[1]:
                    this.k1 = this.k9;
                    this.cq = true;
                    for (let i of fromEnum(this.db())) {
                        i.gy = true;
                        let j = typeCast(IHasCategoryModePreference_$type, i);
                        if (j != null && j.preferredCategoryMode(this) == 2) {
                            i.rn(false);
                        }
                    }
                    this.h9(false);
                    if (this.bi != null) {
                        this.bi.n5();
                    }
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                    this.cq = true;
                    this.h9(true);
                    break;
            }
        }
        lv() {
            for (let a of fromEnum(this.db())) {
                a.rn(false);
            }
        }
        lx(a, b) {
            this.l4(b);
        }
        l4(a) {
            switch (a.action) {
                case 3:
                case 0:
                case 1:
                case 2:
                case 4:
                    if (this.ks != null) {
                        this.lh = this.lj();
                    }
                    this.h9(false);
                    break;
            }
            if (this.ks != null) {
                this.lh = this.lj();
            }
        }
        l8() {
            let a = false, b = false;
            for (let c of fromEnum(this.de)) {
                let d = typeCast(IHasCategoryModePreference_$type, c);
                if (d == null) {
                    continue;
                }
                let e = d.preferredCategoryMode(this);
                a = a || e == 1;
                b = b || e == 2;
            }
            let f = b ? 2 : a ? 1 : 0;
            if (f == 0 && this.kw) {
                f = 1;
                if (this.li == 0) {
                    this.li = 1;
                }
            }
            this.categoryMode = f;
        }
        ct(a) {
            let b = super.ct(a);
            if (b) {
                this.l7(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) == 2) {
                    for (let d of fromEnum(this.db())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null && e != c && e.preferredCategoryMode(this) == 2) {
                            d.rn(false);
                        }
                    }
                }
                this.h9(false);
                this.c1();
            }
            return b;
        }
        b0(a) {
            let b = super.b0(a);
            if (b) {
                this.l7(true);
                let c = typeCast(IHasCategoryModePreference_$type, a);
                if (c != null && c.preferredCategoryMode(this) != 0) {
                    for (let d of fromEnum(this.db())) {
                        let e = typeCast(IHasCategoryModePreference_$type, d);
                        if (e != null) {
                            d.rn(false);
                        }
                    }
                }
                this.h9(false);
            }
            return b;
        }
        l5() {
            let a = null;
            for (let b of fromEnum(this.db())) {
                if (b.ew) {
                    let c = b.av(this);
                    if (c != null && c.aj == this) {
                        a = c;
                    }
                }
            }
            if (a != null) {
                a.h8();
            }
        }
        lu() {
            this.kr = this.ks;
        }
        l6() {
            let a = this.az;
            if (a == null) {
                a = new AxisLabelSettings();
            }
            if (a.visibility == 1) {
                this.br.count = 0;
                this.bq.count = 0;
                this.bp.count = 0;
            }
            else {
                let b = 0;
                b = this.ko.bl(this.dc);
                this.br.count = b;
            }
        }
        lw(a) {
            if (this.ks != null) {
                this.ks.handleCollectionChanged(a);
            }
        }
        l1(a, b, c) {
            this.lw(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        ly() {
            this.lw(new NotifyCollectionChangedEventArgs(0, 4));
        }
        lz(a, b) {
            this.lw(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        l0(a, b) {
            this.lw(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        k6(a, b, c, d) {
            return this.k7(a, b, c, d, this.categoryMode);
        }
        k7(a, b, c, d, e) {
            let f = 0;
            let g = e;
            if (g == 0 && this.categoryMode != 0) {
                g = 1;
            }
            switch (g) {
                case 0:
                    f = 0;
                    break;
                case 1:
                    f = 0.5 * this.getCategorySize(a, b, c);
                    break;
                case 2:
                    f = this.getGroupCenter(d, a, b, c);
                    break;
            }
            if (this.cp != this.ch) {
                f *= -1;
            }
            return f;
        }
        getSeriesOffset(a, b, c, d, e) {
            return this.k7(a, b, c, d, e);
        }
        get isVertical() {
            return this.cp;
        }
        j$d(a, b) {
            return this.en.apply(this, arguments);
        }
        j$c(a, b) {
            return this.ek.apply(this, arguments);
        }
        j$e(a, b, c, d, e) {
            this.hn.apply(this, arguments);
        }
        j$f(a, b, c, d) {
            this.ho.apply(this, arguments);
        }
        j$g(a, b, c, d) {
            this.hp.apply(this, arguments);
        }
        get j$b() {
            return this.ch;
        }
        j$a() {
            return this.ag.apply(this, arguments);
        }
    }
    CategoryAxisBase.$t = markType(CategoryAxisBase, 'CategoryAxisBase', Axis.$, [ICategoryScaler_$type]);
    CategoryAxisBase.mb = DependencyProperty.i("ItemsSource", IEnumerable_$type, CategoryAxisBase.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(CategoryAxisBase.$, a);
        if (c.bo != null) {
            c.bo.releaseFastItemsSource(b.oldValue);
        }
        a.h3("ItemsSource", b.oldValue, b.newValue);
    }));
    CategoryAxisBase.$$p = markDep(DependencyProperty, PropertyMetadata, CategoryAxisBase, 'h3', ['FastItemsSource:ks:l9', [IFastItemsSource_$type], 'Gap:k2:ma', [1, 0.2], 'MaximumGap:k9:mc', [1, 1], 'MinimumGapSize:la:md', [1, 0], 'Overlap:lb:me', [1, 0], 'UseClusteringMode:kw:mf', [0, false]]);
    return CategoryAxisBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBase = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBase extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.dl = 0;
            this.di = 0;
            this.dk = 0;
            this.dj = 0;
        }
        ae() {
            return new HorizontalAxisLabelPanelBaseView(this);
        }
        ch(a) {
            super.ch(a);
            this.c9 = a;
        }
        b6() {
            this.c9.a1();
        }
        db() {
            return ((this.ag != null && this.ag.k()) || this.ad.b4) && this.bl() % 360 != 0;
        }
        dc() {
            return this.ao && !this.av;
        }
        aq() {
            return true;
        }
        a5() {
            let a = new List$1(Rect.$, 0);
            let b = new List$1(Boolean_$type, 0);
            this.aw = false;
            this.av = false;
            this.ax = false;
            let c = this.bl();
            let d = c * Math.PI / 180;
            if (this.db()) {
                this.av = true;
            }
            this.ao = false;
            this.dn(a, b, d);
            if (this.ad != null && this.ad.bi != null && (this.ad.bi.fp || this.ad.bi.fo) && a != null) {
                for (let e = 0; e < a.count; e++) {
                    let f = a._inner[e];
                    if (this.c3.isEmpty) {
                        this.c3 = f;
                    }
                    else {
                        if (this.c3.width < f.width) {
                            this.c3 = f;
                        }
                    }
                }
            }
            this.ao = this.ao || this.an(a, b);
            if (this.ao) {
                this.dq(a, b);
            }
            else {
                this.dr();
            }
            let g = this.ad.b8();
            if (!g) {
                this.dm(c);
            }
            else {
                this.af.ac();
            }
            if (this.av) {
                for (let h = 0; h < a.count; h++) {
                    let i = a._inner[h];
                    i.x = this.ba._inner[h].c;
                    a._inner[h] = i;
                }
            }
            let j = 0;
            if (this.dc()) {
                j = ((() => { let k = this.by(this.di, a, b); a = k.p1; return k.ret; })());
            }
            if (this.ao && !this.aw) {
                if (j > 0) {
                    if (this.c9.a0()) {
                        this.ax = true;
                    }
                }
            }
            if (this.ao && this.da()) {
                this.ar = true;
                let k = this.c1.width;
                let l = this.dg();
                let m = this.df();
                let n = this.ba.count > 1 ? this.ba._inner[1].c - this.ba._inner[0].c : k;
                let o = Math.abs(n * 0.8);
                let p = 0;
                let q = Math.abs(Math.atan(this.di / n) * 180 / Math.PI);
                let r = this.af.p();
                let s = this.af.q();
                for (let t = 0; t < a.count; t++) {
                    if (this.al) {
                        if (t > 0 && t < a.count - 1) {
                            let u = this.ba.count > 1 ? this.ba._inner[t].c - (a._inner[t - 1].x + a._inner[t - 1].width) : k;
                            let v = this.ba.count > 1 ? a._inner[t + 1].x - this.ba._inner[t].c : k;
                            o = Math.abs(Math.min(Math.abs(u * 2), Math.abs(v * 2)) * 0.8);
                        }
                        else {
                            if (t == 0) {
                                let w = this.ba.count > 1 ? a._inner[t + 1].x - this.ba._inner[t].c : k;
                                o = Math.abs((n * 2) * 0.8);
                            }
                            if (t == a.count - 1) {
                                let x = this.ba.count > 1 ? this.ba._inner[t].c - (a._inner[t - 1].x + a._inner[t - 1].width) : k;
                                o = Math.abs((x * 2) * 0.8);
                            }
                        }
                    }
                    let y = Math.min(a._inner[t].width, o);
                    p = this.av ? this.ba._inner[t].c : this.ba._inner[t].c - y / 2;
                    let z = AngleSimplifier.a(c);
                    let aa = (z >= q && z <= 180 - q) || (z >= 180 + q && z <= 360 - q);
                    let ab = a._inner[t];
                    if (this.av && aa) {
                        let ac = this.bv(this.bb._inner[t]);
                        o = Math.min(l / Math.abs(Math.sin(d)), ac);
                    }
                    ab.x = p;
                    ab.width = Math.min(o, ab.width);
                    a._inner[t] = ab;
                    if (!(typeCast(TextBlock.$, this.bb._inner[t]) !== null)) {
                        this.bb._inner[t].width = Math.min(o, ab.width);
                    }
                    let ad = typeCast(TextBlock.$, this.bb._inner[t]);
                    if (ad != null) {
                        let ae = this.b1(t, ad, o, r, s);
                        if (this.ax) {
                            ad.height = m;
                        }
                        else if (!Base.equalsStatic(ad.al, ae)) {
                            ad.al = ae;
                            this.bb._inner[t].width = Math.min(o, this.bk(this.bb._inner[t]));
                            this.dk = Math.min(this.dk, this.bb._inner[t].width);
                        }
                    }
                }
                if (!g) {
                    this.dm(c);
                }
            }
            if (this.dd()) {
                this.dp(a);
            }
            return a;
        }
        dn(a, b, c) {
            let d = this.bs();
            let e = this.dh();
            this.di = -1.7976931348623157E+308;
            this.dl = -1.7976931348623157E+308;
            this.dj = -1.7976931348623157E+308;
            this.dk = -1.7976931348623157E+308;
            let f = this.af.p();
            let g = this.af.q();
            let h = this.af.r();
            let i = this.af.o();
            let j = this.c1.top;
            let k = (this.c1.height - d);
            let l = false;
            for (let m = 0; m < this.bb.count; m++) {
                if (!this.ba._inner[m].a) {
                    l = true;
                }
            }
            for (let n = 0; n < this.bb.count; n++) {
                if (this.ba == null || n >= this.ba.count) {
                    break;
                }
                let o, p, q, r, s, t;
                let u = this.bb._inner[n];
                s = this.bk(u);
                t = this.bj(u);
                r = s + this.af.p() + this.af.q();
                q = t + h + i;
                let v = this.ba._inner[n].a;
                if (this.av) {
                    o = this.ba._inner[n].c;
                }
                else {
                    o = this.ba._inner[n].c - r / 2;
                }
                p = j + e;
                if (!v || !l) {
                    this.di = Math.max(q, this.di);
                    this.dl = Math.max(r, this.dl);
                    this.dj = Math.max(t, this.dj);
                    this.dk = Math.max(s, this.dk);
                }
                let w = new Rect(0, o, p, r, q);
                a.add(w);
                b.add(v);
                let x = r * Math.abs(Math.sin(c));
                this.ao = this.ao || x > k;
            }
            if (this.ad != null && this.ad.bz) {
                let y = -1;
                for (let z = 0; z < this.bb.count; z++) {
                    let aa = this.bb._inner[z];
                    y = Math.max(aa.ah, y);
                }
                if (y >= 0 && !isNaN_(y)) {
                    for (let ab = 0; ab < this.bb.count; ab++) {
                        let ac = this.bb._inner[ab];
                        ac.ah = y;
                    }
                }
            }
        }
        dm(a) {
            let b = a * (Math.PI / 180);
            let c = Math.abs(this.dk * Math.sin(b)) + Math.abs(this.dj * Math.cos(b));
            c += this.af.r() + this.af.o();
            let d = this.bs();
            this.bh = (c) + (d) + this.ad.dz;
        }
        dp(a) {
            this.c9.a2(a);
        }
        dq(a, b) {
        }
        dr() {
        }
        get_au() {
            return true;
        }
        cm(a, b) {
            let c = a.l;
            let d = a.m;
            let e = 0;
            let f = c / 2;
            let g = new TransformGroup();
            let h = AngleSimplifier.a(this.bl());
            let i = ((() => {
                let $ret = new RotateTransform();
                $ret.j = h;
                $ret.k = e;
                $ret.l = f;
                return $ret;
            })());
            let j = 0;
            let k = 0;
            if (h != 0 && h != 360) {
                if (h > 0 && h < 180) {
                    j = -Math.sin(MathUtil.o(h)) * (c / 2);
                }
                else {
                    i.k = d;
                    k = -d;
                    j = -Math.sin(MathUtil.o(h - 180)) * (c / 2);
                }
            }
            let l = ((() => {
                let $ret = new TranslateTransform();
                $ret.k = j;
                $ret.j = k;
                return $ret;
            })());
            g.j.add(i);
            g.j.add(l);
            a.j = g;
        }
        dd() {
            return !this.aw && !this.av;
        }
        da() {
            if (this.ad != null && this.ad.bi != null && this.ad.bi.fq) {
                return false;
            }
            return true;
        }
        by(a, b, c) {
            let d = 0;
            let e = new List$1(Rect.$, 0);
            let f = this.dh() + this.c1.top;
            let g = this.dg();
            let h = f + g;
            if (a * 3 <= this.bd) {
                d = 3;
            }
            else if (a * 2 <= this.bd) {
                d = 2;
            }
            else {
                return {
                    ret: d,
                    p1: b
                };
            }
            let i = 0;
            for (let j = 0; j < b.count; j++) {
                let k = RectUtil.p(b._inner[j]);
                if (!c._inner[j]) {
                    if (i % d == 0) {
                        k.y = f;
                    }
                    else if (i % d == d - 1) {
                        k.y = h - k.height;
                    }
                    else {
                        k.y = (f + (g / 2)) - k.height / 2;
                    }
                    i++;
                }
                e.add(k);
            }
            this.ao = this.an(e, c);
            if (!this.ao) {
                this.aw = true;
                b = e;
            }
            return {
                ret: d,
                p1: b
            };
        }
        c0() {
            let a = this.aj(this.ad.bf);
            let b = this.bs();
            let c = this.ah;
            let d = 0;
            if (a == 3) {
                d += this.c1.top;
                if (c == 1 || c == 5) {
                    d += this.ad.dz;
                }
            }
            else {
                d = this.c1.bottom - b;
                if (c == 4 || c == 0) {
                    d -= this.ad.dz;
                }
            }
            let e = this.bu();
            let f = 0;
            let g = this.ad.bf == null ? 1 : this.ad.bf.horizontalAlignment;
            if (g == 0) {
                f = this.c1.left;
            }
            else if (g == 2) {
                f = this.c1.right - e;
            }
            else {
                f = (this.c1.left + (this.c1.width / 2)) - (e / 2);
            }
            return new Rect(0, f, d, e, b);
        }
        dh() {
            let a = 0;
            let b = this.aj(this.ad.bf);
            if (b == 3) {
                a += this.bs();
            }
            let c = this.ah;
            if (c == 1 || c == 5) {
                a += this.ad.dz;
            }
            return a;
        }
        de() {
            let a = 0;
            let b = this.aj(this.ad.bf);
            if (b == 4) {
                a += this.bs();
            }
            let c = this.ah;
            if (c == 0 || c == 4) {
                a += this.ad.dz;
            }
            return a;
        }
        dg() {
            let a = (this.bd - this.dh()) - this.de();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        df() {
            let a = ((this.dg() - this.af.r()) - this.af.o());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        b9() {
            let a = this.af.au();
            this.ad.hj(a);
            if (this.ag != null && this.ag.visibility != 0) {
                return;
            }
            let b = this.ad.dz;
            if (b == 0) {
                return;
            }
            let c = this.a2();
            if (c == null) {
                return;
            }
            let d = this.c1.top;
            let e;
            let f = this.ah;
            if (f == 0 || f == 4) {
                d = this.c1.bottom;
                e = d - this.ad.dz;
            }
            else {
                e = d + this.ad.dz;
            }
            let g = this.af.b();
            for (let h of fromEnum(c)) {
                this.cs(a, h, d, e, this.c4, g);
            }
            if (!this.ab.contains(this.af.aw)) {
                this.ab.add(this.af.aw);
            }
        }
        a6(a) {
            if (this.ad.cu || this.ad.cw) {
                let b = this.af.p();
                let c = this.af.r();
                let d = this.af.q();
                let e = this.af.o();
                let f = Math.max(b, Math.max(c, Math.max(d, e)));
                let g = new Thickness(0, f);
                if (this.av) {
                    g = new Thickness(0, Math.sqrt((f * f) / 2));
                }
                let h = this.a4(a);
                let i = new List$1(Thickness.$, 0);
                if (h.count < 1) {
                    return a;
                }
                h.aa((j, k) => {
                    let l = this.cy(j, a._inner[j], g);
                    let m = this.cy(k, a._inner[k], g);
                    let n = l.left;
                    let o = m.left;
                    if (n < o) {
                        return -1;
                    }
                    if (n > o) {
                        return 1;
                    }
                    return 0;
                });
                for (let j = 0; j < h.count; j++) {
                    let k = h._inner[j];
                    let l = a._inner[k];
                    let m = this.cy(k, a._inner[k], g);
                    let n = this.ad.bi.v0.left;
                    if (this.ad.cw) {
                        if (l.left < (this.ad.bi.v0.left - n)) {
                            l = new Rect(0, l.left + ((this.ad.bi.v0.left - n) - l.left), l.top, l.width, l.height);
                            a._inner[k] = l;
                        }
                    }
                }
                let o = this.as(a, h, g);
                if (o && (this.ad.cu)) {
                    for (let p = 0; p < h.count - 1; p++) {
                        let q = h._inner[p];
                        let r = h._inner[p + 1];
                        let s = a._inner[q];
                        let t = a._inner[r];
                        let u = this.cy(q, a._inner[q], g);
                        let v = this.cy(r, a._inner[r], g);
                        if (u.intersectsWith(v) || u.left > v.right) {
                            let w = new Rect(0, u.right + 1 + (t.left - v.left), t.top, t.width, t.height);
                            a._inner[r] = w;
                        }
                    }
                }
                for (let x = h.count - 1; x >= 0; x--) {
                    let y = h._inner[x];
                    let z = a._inner[y];
                    let aa = this.cy(y, a._inner[y], g);
                    let ab = this.ad.bi.c8.a5;
                    if (this.ad.cw) {
                        if (aa.right > this.ad.bi.v0.right + ab) {
                            z = new Rect(0, z.left - (aa.right - (this.ad.bi.v0.right + ab)), z.top, z.width, z.height);
                            a._inner[y] = z;
                        }
                    }
                }
                if (this.ad.cu) {
                    for (let ac = h.count - 1; ac >= 1; ac--) {
                        let ad = h._inner[ac];
                        let ae = h._inner[ac - 1];
                        let af = a._inner[ad];
                        let ag = a._inner[ae];
                        let ah = this.cy(ad, a._inner[ad], g);
                        let ai = this.cy(ae, a._inner[ae], g);
                        if (ah.intersectsWith(ai) || ah.left < ai.right) {
                            let aj = new Rect(0, ah.left - (ai.width + 1) + (ag.left - ai.left), ag.top, ag.width, ag.height);
                            a._inner[ae] = aj;
                        }
                    }
                }
                return a;
            }
            else {
                return a;
            }
        }
    }
    HorizontalAxisLabelPanelBase.$t = markType(HorizontalAxisLabelPanelBase, 'HorizontalAxisLabelPanelBase', AxisLabelPanelBase.$);
    return HorizontalAxisLabelPanelBase;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanel = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanel extends HorizontalAxisLabelPanelBase {
        ai() {
            return 1;
        }
        ay(a) {
            return a == 5 || a == 4 || a == 1 || a == 0;
        }
    }
    HorizontalAxisLabelPanel.$t = markType(HorizontalAxisLabelPanel, 'HorizontalAxisLabelPanel', HorizontalAxisLabelPanelBase.$);
    return HorizontalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let NumericAxisBase = /*@__PURE__*/ (() => {
    class NumericAxisBase extends Axis {
        constructor() {
            super();
            this.kt = 0;
            this.lq = 0;
            this.l4 = 0;
            this.lt = 0;
            this.lp = 0;
            this.l3 = 0;
            this.ls = 0;
            this.lo = 0;
            this.lr = 0;
            this.k9 = false;
            this.la = false;
            this.mb = 0;
            this.k1 = null;
            this.ll = false;
            this.lm = false;
            this.kp = null;
            this.kr = null;
            this.lv = -1;
            this.lu = -1;
            this.ku = 0;
            this.li = false;
            this.k5 = null;
            this.k8 = false;
            this.mb = 10;
        }
        a4() {
            return new NumericAxisBaseView(this);
        }
        ag() {
            return [this.ly, this.lx];
        }
        ht(a) {
            super.ht(a);
            this.ky = a;
        }
        d1(a, b) {
            let c = a < this.ly ? this.ly : a;
            c = a > this.lx ? this.lx : c;
            return c;
        }
        get_cj() {
            return true;
        }
        get kv() {
            return EnumUtil.getEnumValue(AxisRangeBufferMode_$type, this.c(NumericAxisBase.nf));
        }
        set kv(a) {
            this.h(NumericAxisBase.nf, enumGetBox(AxisRangeBufferMode_$type, a));
        }
        get kw() {
            return this.kt;
        }
        set kw(a) {
            this.kt = a;
        }
        get ly() {
            return this.lq;
        }
        set ly(a) {
            if (this.ly != a) {
                let b = this.lq;
                this.lq = a;
                this.l4 = Math.log(this.ly);
                this.h3("ActualMinimumValue", b, this.ly);
            }
        }
        f3() {
            return this.l6;
        }
        get l1() {
            return this.lt;
        }
        set l1(a) {
            if (this.l1 != a) {
                let b = this.lt;
                this.lt = a;
                this.h3("ActualVisibleMinimumValue", b, this.l1);
            }
        }
        get lx() {
            return this.lp;
        }
        set lx(a) {
            if (this.lx != a) {
                let b = this.lp;
                this.lp = a;
                this.l3 = Math.log(this.lx);
                this.h3("ActualMaximumValue", b, this.lx);
            }
        }
        f2() {
            return this.lx;
        }
        get l0() {
            return this.ls;
        }
        set l0(a) {
            if (this.l0 != a) {
                let b = this.ls;
                this.ls = a;
                this.h3("ActualVisibleMaximumValue", b, this.l0);
            }
        }
        get lw() {
            return this.lo;
        }
        set lw(a) {
            if (this.lw != a) {
                let b = this.lo;
                this.lo = a;
                this.h3("ActualInterval", b, this.lw);
            }
        }
        ew() {
            return this.lw;
        }
        get lz() {
            return this.lr;
        }
        set lz(a) {
            if (this.lz != a) {
                let b = this.lr;
                this.lr = a;
                this.h3("ActualMinorInterval", b, this.lz);
            }
        }
        get lc() {
            return this.k9;
        }
        set lc(a) {
            if (this.lc != a) {
                let b = this.k9;
                if (b != a) {
                    this.k9 = a;
                    this.h3("ActualIsLogarithmic", b, this.lc);
                }
            }
        }
        get ld() {
            return this.la;
        }
        set ld(a) {
            this.la = a;
        }
        get lk() {
            return this.lc && this.ly > 0 && this.mb > 1;
        }
        ia(a) {
            super.ia(a);
            if (this.lk && this.bi != null) {
                let b = this.j9();
                let c = this.j8();
                let d = this.k2(this.ke, this.bi.vl, b, c);
                if (d == null) {
                    return;
                }
                for (let e = 0; e < d.k.count; e++) {
                    let f = this.ma;
                    let g = d.k._inner[e];
                    let h = Math.min(g.d, g.c);
                    let i = Math.max(g.d, g.c);
                    let j = Math.floor(logBase(h, f));
                    let k = Math.ceil(logBase(i, f));
                    if (k - j < 2) {
                        if (typeCast(LogarithmicTickmarkValues.$, this.k5) !== null) {
                            this.k5 = new LinearTickmarkValues();
                        }
                    }
                    else {
                        this.k5 = this.k7 != null ? this.k7 : ((() => {
                            let $ret = new LogarithmicTickmarkValues();
                            $ret.x = f;
                            return $ret;
                        })());
                    }
                }
            }
        }
        h2(a) {
            super.h2(a);
            this.l6 = a;
        }
        h1(a) {
            super.h2(a);
            this.l5 = a;
        }
        hx(a, b, c, d) {
            super.hx(a, b, c, d);
            switch (b) {
                case NumericAxisBase.$$p[0]:
                case NumericAxisBase.$$p[1]:
                    if (this.mc != null) {
                        this.kp = new BindingFormatter();
                        this.kp.j = this.mc;
                        this.kp.d = this.ko;
                    }
                    else {
                        this.kp = null;
                    }
                    break;
                case "AutoRangeBufferMode":
                    this.kw = this.kv;
                    this.m0();
                    this.c1();
                    this.h9(false);
                    break;
                case NumericAxisBase.$$p[8]:
                    this.c1();
                    this.h9(false);
                    break;
                case NumericAxisBase.$$p[7]:
                    this.c1();
                    this.h9(false);
                    break;
                case NumericAxisBase.$$p[2]:
                    this.ld = this.le;
                    this.c1();
                    this.h9(false);
                    break;
                case NumericAxisBase.$$p[5]:
                    this.ll = true;
                    this.lc = this.lj;
                    break;
                case Axis.$$p[4]:
                case Axis.$$p[3]:
                case NumericAxisBase.$$p[4]:
                case NumericAxisBase.$$p[9]:
                    this.cq = true;
                    this.h9(false);
                    break;
                case NumericAxisBase.$$p[6]:
                    this.ll = true;
                    this.mb = this.ma;
                    if (this.lc) {
                        this.c1();
                        this.m2();
                        this.h9(false);
                    }
                    break;
                case NumericAxisBase.$$p[10]:
                    let e = new AxisRangeChangedEventArgs(0, this.ly, this.ly, this.lx, this.lx);
                    this.h4(e);
                    this.cq = true;
                    this.h9(false);
                    break;
                case Axis.$$p[13]:
                    this.k1 = this.kz();
                    this.cq = true;
                    this.h9(false);
                    break;
                case "TickmarkValues":
                    this.m4();
                    break;
                case "ActualIsLogarithmic":
                    this.c1();
                    this.m2();
                    this.cq = true;
                    this.m4();
                    this.h9(false);
                    break;
                case "ActualTickmarkValues":
                    this.cq = true;
                    this.h9(false);
                    break;
                case "AbbreviateLargeNumbers":
                    this.h9(false);
                    break;
            }
        }
        m2() {
            for (let a of fromEnum(this.db())) {
                a.rn(false);
            }
        }
        ks() {
            let a = new AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
            let b = false;
            if (this.bi != null) {
                for (let c of fromEnum(this.db())) {
                    let d = c.ax(this);
                    if (d != null) {
                        b = true;
                        a = new AxisRange(Math.min(a.c, d.c), Math.max(a.b, d.b));
                    }
                }
            }
            if (b) {
                if (this.lv >= 0) {
                    a = new AxisRange(a.c - this.lv, a.b);
                }
                if (this.lu >= 0) {
                    a = new AxisRange(a.c, a.b + this.lu);
                }
                this.kr = a;
                return a;
            }
            this.kr = null;
            return null;
        }
        ln(a) {
            if (a == 1 || a == 2 || a == 3) {
                let b = this.kr;
                if (b == null) {
                    b = this.ks();
                }
                if (b == null) {
                    return false;
                }
                if (this.bi == null || this.bi.v0.isEmpty) {
                    return false;
                }
                let c = -1;
                let d = -1;
                for (let e of fromEnum(this.db())) {
                    let f = e.aw(b, this, new Rect(0, 0, 0, 1, 1));
                    if (f.c != b.c) {
                        if (a == 1 || a == 2) {
                            c = Math.max(c, b.c - f.c);
                        }
                    }
                    if (f.b != b.b) {
                        if (a == 1 || a == 3) {
                            d = Math.max(d, f.b - b.b);
                        }
                    }
                }
                if (c >= 0 || d >= 0) {
                    this.lv = c;
                    this.lu = d;
                    return true;
                }
                return false;
            }
            return false;
        }
        kx() {
            if (this.kw == 0) {
                if (this.bi != null) {
                    if (this.cp) {
                        if (this.bi.b2 == 2) {
                            return 1;
                        }
                        if (this.ci) {
                            if (this.bi.b2 == 4) {
                                return 3;
                            }
                            if (this.bi.b2 == 3) {
                                return 2;
                            }
                        }
                        else {
                            if (this.bi.b2 == 4) {
                                return 2;
                            }
                            if (this.bi.b2 == 3) {
                                return 3;
                            }
                        }
                    }
                    else {
                        if (this.bi.b0 == 2) {
                            return 1;
                        }
                        if (this.ci) {
                            if (this.bi.b0 == 4) {
                                return 3;
                            }
                            if (this.bi.b0 == 3) {
                                return 2;
                            }
                        }
                        else {
                            if (this.bi.b0 == 4) {
                                return 2;
                            }
                            if (this.bi.b0 == 3) {
                                return 3;
                            }
                        }
                    }
                }
                return 4;
            }
            else {
                return this.kw;
            }
        }
        mz(a, b, c, d, e, f, g) {
            let h = AutoRangeCalculator.a(a, b, c, d, e, f, g);
            f = h.p5;
            g = h.p6;
            return {
                p5: f,
                p6: g
            };
        }
        c3() {
            if (this.cq && this.c4) {
                this.bc = this.bb();
            }
            let a = this.lc && !isNaN_(this.ma) && !isInfinity(this.ma) && this.ma > 1;
            let b;
            let c;
            let d = this.kx();
            if (d != this.ku) {
                this.ku = d;
                this.m0();
            }
            let e = false;
            if (!this.ke.isEmpty && d != 4) {
                if (this.lv == -1 && this.lu == -1) {
                    e = true;
                }
            }
            let f = this.mz(this, this.l6, this.l5, a, this.ma, b, c);
            b = f.p5;
            c = f.p6;
            if (b != this.ly || c != this.lx || this.ll) {
                if (d != 4 && (this.lv >= 0 || this.lu >= 0)) {
                    this.m0();
                    let g = this.mz(this, this.l6, this.l5, a, this.ma, b, c);
                    b = g.p5;
                    c = g.p6;
                }
            }
            if (b != this.ly || c != this.lx || this.ll || e) {
                this.ll = false;
                let h = new AxisRangeChangedEventArgs(0, this.ly, b, this.lx, c);
                this.ly = b;
                this.lx = c;
                if (!this.ke.isEmpty && d != 4) {
                    if (this.ln(d)) {
                        let i = this.mz(this, this.l6, this.l5, a, this.ma, b, c);
                        b = i.p5;
                        c = i.p6;
                        h = new AxisRangeChangedEventArgs(0, h.oldMinimumValue, b, h.oldMaximumValue, c);
                        this.ly = b;
                        this.lx = c;
                    }
                }
                this.h4(h);
                this.m3(h);
                this.h9(true);
                return true;
            }
            return false;
        }
        m0() {
            this.lv = -1;
            this.lu = -1;
        }
        m3(a) {
        }
        ct(a) {
            let b = super.ct(a);
            if (b) {
                this.c1();
            }
            return b;
        }
        b0(a) {
            let b = super.b0(a);
            if (b) {
                this.c1();
            }
            return b;
        }
        k0(a) {
            return new NumericAxisRenderer(a);
        }
        kz() {
            let a = ((() => {
                let $ret = new AxisLabelManager();
                $ret.a = this;
                $ret.f = this.dd;
                $ret.e = this.dc;
                $ret.b = this.aw;
                return $ret;
            })());
            if (this.az != null) {
                this.az.registerAxis(this);
            }
            let b = this.k0(a);
            b.u = () => {
                let c = this.a5.a4();
                let d = this.a5.a7();
                let e = this.a5.a5();
                let f = this.a5.a6();
                this.im();
                this.hj(c);
                this.hj(d);
                this.hj(e);
                this.hj(f);
            };
            b.o = (c, d) => !d.isEmpty && !c.isEmpty;
            b.d = (c, d, e, f) => this.k2(c, d, e, f);
            b.g = (c, d) => {
                this.li = d;
                let e = this.f0(c);
                this.li = false;
                return e;
            };
            return b;
        }
        k3() {
            return new NumericAxisRenderingParameters();
        }
        m1() {
        }
        k4() {
            return null;
        }
        k2(a, b, c, d) {
            let e = this.k3();
            let f = this.a5.a4();
            let g = this.a5.a7();
            let h = this.a5.a5();
            let i = this.a5.a6();
            let j = this.a5.e();
            let k = this.a5.f();
            let l = this.a5.g();
            e.t = f;
            e.w = g;
            e.u = h;
            e.v = i;
            e.a = j;
            e.c = k;
            e.d = l;
            e.l = this.lx;
            e.m = this.ly;
            e.h = this.lg;
            e.f = this.k6;
            e.z = a;
            e.y = c;
            e.x = d;
            e.aa = b;
            e.o = this.ez();
            e.g = this.lf();
            e.p = this.l2;
            e.q = this.l7;
            e.s = this.f1;
            if (this.f1 == null && (this.au != null || this.ai != null || this.ky.m())) {
                e.s = "Format";
            }
            e.j = this.cy;
            e.ab = this.lb;
            return e;
        }
        l9(a) {
            let b = this.j9();
            let c = new ScalerParams(0, this.bi.vl, this.ke, this.ch, b);
            return this.en(a, c);
        }
        lf() {
            return !isNaN_(this.l2);
        }
        get lh() {
            return !isNaN_(this.l6);
        }
        get lg() {
            return !isNaN_(this.l5);
        }
        m4() {
            if (this.k7 != null) {
                this.k6 = this.k7;
            }
            else if (this.lc) {
                this.k6 = new LogarithmicTickmarkValues();
                this.ky.bl();
            }
            else {
                this.k6 = new LinearTickmarkValues();
            }
        }
        get k7() {
            return typeCast(TickmarkValues.$, this.c(NumericAxisBase.nh));
        }
        set k7(a) {
            this.h(NumericAxisBase.nh, a);
        }
        get k6() {
            if (this.k5 == null) {
                this.m4();
            }
            return this.k5;
        }
        set k6(a) {
            let b = this.k5;
            let c = b != a;
            if (c) {
                this.k5 = a;
                this.h3("ActualTickmarkValues", b, a);
            }
        }
        get lb() {
            return this.k8;
        }
        set lb(a) {
            let b = this.lb;
            if (a != b) {
                this.k8 = a;
                this.h3("AbbreviateLargeNumbers", b, this.lb);
            }
        }
    }
    NumericAxisBase.$t = markType(NumericAxisBase, 'NumericAxisBase', Axis.$);
    NumericAxisBase.nf = DependencyProperty.i("AutoRangeBufferMode", AxisRangeBufferMode_$type, NumericAxisBase.$, new PropertyMetadata(2, enumGetBox(AxisRangeBufferMode_$type, 0), (a, b) => a.h3("AutoRangeBufferMode", b.oldValue, b.newValue)));
    NumericAxisBase.nh = DependencyProperty.i("TickmarkValues", TickmarkValues.$, NumericAxisBase.$, new PropertyMetadata(1, (a, b) => a.h3("TickmarkValues", b.oldValue, b.newValue)));
    NumericAxisBase.$$p = markDep(DependencyProperty, PropertyMetadata, NumericAxisBase, 'h3', ['AbbreviatedLabelFormat:mc:m5', [2, null], 'AbbreviatedLabelFormatSpecifiers:ko:m6', [Array_$type, null], 'FavorLabellingScaleEnd:le:m7', [0, false], 'FormatAbbreviatedLabel:kq:m8', [Delegate_$type], 'Interval:l2:m9', [1, NaN], 'IsLogarithmic:lj:na', [0, false], 'LogarithmBase:ma:nb', [1, 10], 'MaximumValue:l5:nc', [1, NaN], 'MinimumValue:l6:nd', [1, NaN], 'MinorInterval:l7:ne', [1, NaN], 'ReferenceValue:l8:ng', [1, 0]]);
    return NumericAxisBase;
})();
/**
 * @hidden
 */
export let NumericScaler = /*@__PURE__*/ (() => {
    class NumericScaler extends DependencyObject {
        constructor() {
            super(...arguments);
            this.o = 0;
            this.n = 0;
            this.m = 0;
        }
        y(a) {
            this.l = a;
        }
        x(a) {
            this.k = a;
        }
        w(a, b, c) {
            switch (a) {
                case NumericScaler.$$p[1]:
                    this.o = this.l;
                    this.z();
                    break;
                case NumericScaler.$$p[0]:
                    this.n = this.k;
                    this.z();
                    break;
            }
        }
        z() {
            if (isNaN_(this.l) || isNaN_(this.k) || isInfinity(this.l) || isInfinity(this.k) || this.l < (-7.9228162514264338E+28) || this.k > (7.9228162514264338E+28)) {
                this.m = this.k - this.l;
            }
            else {
                this.m = this.k - this.l;
            }
        }
        j(a, b, c, d) {
            let e = new List$1(Number_$type, 2, a.count);
            for (let f = b; f < c; f++) {
                e.add(this.q(a.item(f), d));
            }
            return e;
        }
        v(a, b, c, d) {
            for (let e = b; e < c; e++) {
                a.item(e, this.p(a.item(e), d));
            }
        }
        u(a, b, c, d, e) {
            for (let f = 0; f < b.count; f++) {
                let g = b.item(f);
                for (let h = c; h < d; h++) {
                    a.item(h)[g] = this.p(a.item(h)[g], e);
                }
            }
        }
    }
    NumericScaler.$t = markType(NumericScaler, 'NumericScaler', DependencyObject.$);
    NumericScaler.ac = new Rect(0, 0, 0, 1, 1);
    NumericScaler.$$p = markDep(DependencyProperty, PropertyMetadata, NumericScaler, 'w', ['ActualMaximumValue:k:aa', [1, NaN], 'ActualMinimumValue:l:ab', [1, NaN]]);
    return NumericScaler;
})();
/**
 * @hidden
 */
export let AxisRendererBase = /*@__PURE__*/ (() => {
    class AxisRendererBase extends Base {
        constructor(a) {
            super();
            this.u = null;
            this.o = null;
            this.v = null;
            this.m = null;
            this.l = null;
            this.k = null;
            this.q = null;
            this.n = null;
            this.j = null;
            this.e = null;
            this.p = null;
            this.h = null;
            this.t = null;
            this.b = null;
            this.g = null;
            this.d = null;
            this.r = null;
            this.a = null;
            this.f = null;
            this.i = null;
            this.u = () => {
            };
            this.o = (b, c) => false;
            this.v = () => {
            };
            this.m = (b, c) => c;
            this.l = (b, c, d, e) => {
            };
            this.k = (b, c, d) => {
            };
            this.q = (b, c) => false;
            this.n = (b, c) => this.q(b, c);
            this.j = (b) => {
            };
            this.e = (b) => {
            };
            this.p = (b, c, d) => false;
            this.h = (b, c) => new LabelPosition(c);
            this.t = (b, c) => c;
            this.g = (b, c) => null;
            this.r = (b, c, d, e) => c;
            this.a = (b, c, d, e) => c;
            this.b = a;
            this.d = (b, c, d, e) => null;
        }
        c(a, b, c, d, e) {
            this.x(c, b);
            if (this.o(b, c)) {
                this.v();
                let f = this.d(b, c, d, e);
                this.x(c, b);
                if (f == null) {
                    this.aa();
                    return null;
                }
                if (f.k.count > 1 && !f.g) {
                    this.ab(f);
                }
                for (let g of fromEnum(f.k)) {
                    f.e = g;
                    if (isNaN_(g.c) || isInfinity(g.c) || isNaN_(g.d) || isInfinity(g.d)) {
                        continue;
                    }
                    if (g.d == g.c) {
                        continue;
                    }
                    this.e(f);
                    this.b.o(f.r);
                    let h = 0;
                    let i = 0;
                    let j = false;
                    let k = (l) => l;
                    if (this.f != null) {
                        k = this.i;
                    }
                    if (typeCast(CategoryAxisRenderingParameters.$, f) !== null) {
                        h = f.ab;
                        i = f.af;
                        j = f.ac;
                    }
                    f.f = this.s(f);
                    f.f.s(((() => {
                        let $ret = new TickmarkValuesInitializationParameters();
                        $ret.n = f.e.d;
                        $ret.m = f.e.c;
                        $ret.g = f.m;
                        $ret.f = f.l;
                        $ret.k = f.e.b;
                        $ret.d = f.g;
                        $ret.l = f.p;
                        $ret.j = f.q;
                        $ret.h = f.o;
                        $ret.i = f.e.a;
                        $ret.p = f.e.e;
                        $ret.a = h;
                        $ret.q = i;
                        $ret.s = f.aa;
                        $ret.r = f.z;
                        $ret.e = j;
                        $ret.c = k;
                        return $ret;
                    })()));
                    this.y(f);
                }
                this.z();
                return f;
            }
            return null;
        }
        aa() {
            this.b.q();
        }
        ab(a) {
            let b = -1.7976931348623157E+308;
            let c = -2147483648;
            let d = 0;
            let e = 0;
            let f = false;
            let g = (h) => h;
            if (this.f != null) {
                g = this.i;
            }
            if (typeCast(CategoryAxisRenderingParameters.$, a) !== null) {
                d = a.ab;
                e = a.af;
                f = a.ac;
            }
            for (let h of fromEnum(a.k)) {
                a.e = h;
                a.f.s(((() => {
                    let $ret = new TickmarkValuesInitializationParameters();
                    $ret.n = h.d;
                    $ret.m = h.c;
                    $ret.g = a.m;
                    $ret.f = a.l;
                    $ret.k = h.b;
                    $ret.d = a.g;
                    $ret.l = a.p;
                    $ret.i = h.a;
                    $ret.p = h.e;
                    $ret.h = a.o;
                    $ret.j = a.q;
                    $ret.a = d;
                    $ret.q = e;
                    $ret.s = a.aa;
                    $ret.r = a.z;
                    $ret.e = f;
                    $ret.c = g;
                    return $ret;
                })()));
                h.a = a.f.m;
                h.e = a.f.r;
                if (!isNaN_(a.f.m)) {
                    b = Math.max(b, a.f.m);
                    c = Math.max(c, a.f.r);
                }
            }
            for (let i of fromEnum(a.k)) {
                if (i.a == b) {
                    i.a = -1;
                    i.e = -1;
                }
                else {
                    i.a = b;
                    i.e = c;
                }
            }
        }
        x(a, b) {
            this.u();
            this.b.n(a, b);
            this.b.t();
        }
        z() {
            this.b.t();
            let a = false;
            if (this.b.d) {
                this.b.s(0);
            }
            else {
                let b = 0;
                for (let c of fromEnum(this.b.e)) {
                    let d = typeCast(FrameworkElement.$, c);
                    if (d == null) {
                        d = this.b.u(b);
                        let e = d.al;
                        let f = c.toString();
                        let g = 0;
                        let h = 0;
                        if (e != null) {
                            g = e.length;
                        }
                        if (f != null) {
                            h = f.length;
                        }
                        if (g != h) {
                            a = true;
                        }
                        d.al = f;
                        b++;
                    }
                    else {
                    }
                }
                if (a) {
                    this.b.p();
                }
                this.b.g();
                this.b.s(b);
            }
        }
        s(a) {
            return a.f;
        }
        y(a) {
            let b = a.f.j();
            let c = a.f.k();
            this.b.r(this.m(a, a.f.m));
            this.j(a);
            for (let d = 0; d < b.length; d++) {
                let e = a.f.p + d;
                let f = b[d];
                let g = f;
                let h = 0;
                if (d < b.length - 1) {
                    h = b[d + 1];
                }
                else {
                    h = Number.POSITIVE_INFINITY;
                }
                g = this.r(a, g, e, a.f.m);
                h = this.r(a, h, e, a.f.m);
                let i = this.m(a, g);
                let j = this.m(a, h);
                if (this.q(a, i)) {
                    if (e % 2 == 0 && this.n(a, j) && !isInfinity(j)) {
                        this.l(a, a.w, i, j);
                    }
                    a.b = a.c;
                    this.k(a, a.u, i);
                    a.b = null;
                }
                i = this.a(a, i, e, a.f.m);
                if (!isNaN_(i) && !isInfinity(i) && this.p(a, i, d == b.length - 1)) {
                    let k = this.w(a, g, e, a.f.m);
                    if (k != null) {
                        this.b.i(k, this.h(a, i));
                    }
                }
            }
            if (a.j) {
                for (let l = 0; l < c.length; l++) {
                    let m = c[l];
                    let n = this.m(a, m);
                    a.b = a.d;
                    this.k(a, a.v, n);
                    a.b = null;
                }
            }
        }
        w(a, b, c, d) {
            return null;
        }
    }
    AxisRendererBase.$t = markType(AxisRendererBase, 'AxisRendererBase');
    return AxisRendererBase;
})();
/**
 * @hidden
 */
export let NumericAxisRenderer = /*@__PURE__*/ (() => {
    class NumericAxisRenderer extends AxisRendererBase {
        constructor(a) {
            super(a);
            this.ac = null;
            this.ad = false;
        }
        w(a, b, c, d) {
            let e;
            if (a.s != null) {
                if (a.i() && a.ab) {
                    return this.ae(b, this.g);
                }
                e = this.g(b, false);
            }
            else {
                b = Math.round(b * 1000000) / 1000000;
                if (a.i() && a.ab) {
                    return this.ae(b, null);
                }
                e = MathUtil.s(b);
            }
            return e;
        }
        ae(a, b) {
            if (this.ad) {
                return a.toString();
            }
            if (this.ac == null) {
                this.ac = NumberAbbreviatorFactory.a(this.b.a.bu);
                if (this.ac == null) {
                    this.ad = true;
                    return a.toString();
                }
            }
            return this.ac.abbreviate(a, b);
        }
    }
    NumericAxisRenderer.$t = markType(NumericAxisRenderer, 'NumericAxisRenderer', AxisRendererBase.$);
    return NumericAxisRenderer;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanel = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanel extends AxisLabelPanelBase {
        constructor() {
            super(...arguments);
            this.di = 0;
            this.df = 0;
            this.dh = 0;
            this.dg = 0;
        }
        ae() {
            return new VerticalAxisLabelPanelView(this);
        }
        ch(a) {
            super.ch(a);
            this.c9 = a;
        }
        b6() {
            this.c9.a0();
        }
        bq() {
            return this.ad.bf != null ? this.ad.bf.angle : -90;
        }
        db() {
            let a = 0;
            let b = this.aj(this.ad.bf);
            if (b == 1) {
                a += this.bu();
            }
            let c = this.ah;
            if (c == 3 || c == 7) {
                a += this.ad.dz;
            }
            return a;
        }
        dd() {
            let a = 0;
            let b = this.aj(this.ad.bf);
            if (b == 2) {
                a += this.bu();
            }
            let c = this.ah;
            if (c == 2 || c == 6) {
                a += this.ad.dz;
            }
            return a;
        }
        de() {
            let a = (this.bd - this.db()) - this.dd();
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        dc() {
            let a = ((this.de() - this.af.p()) - this.af.q());
            if (a < 0) {
                a = 0;
            }
            return a;
        }
        a5() {
            let a = new List$1(Rect.$, 0);
            this.aw = false;
            this.av = false;
            if (this.ag != null && this.ag.k() && this.bl() % 360 != 0) {
                this.av = true;
            }
            this.di = -1.7976931348623157E+308;
            this.df = -1.7976931348623157E+308;
            this.dh = -1.7976931348623157E+308;
            this.dg = -1.7976931348623157E+308;
            let b = this.af.p();
            let c = this.af.r();
            let d = this.af.q();
            let e = this.af.o();
            let f = this.db();
            let g = false;
            if (!isNaN_(this.be)) {
                this.di = Math.max(this.be, this.di);
                this.dh = Math.max(this.bf, this.dh);
            }
            for (let h = 0; h < this.bb.count; h++) {
                let i = this.bb._inner[h];
                let j = this.ba._inner[h].a;
                let k = this.bj(i);
                let l = this.bk(i);
                let m = k + c + e;
                let n = l + b + d;
                let o = this.c1.left + f;
                let p = this.ba._inner[h].c - m / 2;
                if (j) {
                    let q = this.be;
                    if ((isNaN_(this.be) || n > this.be || this.ba._inner[h].b) && !g) {
                        if (this.ba._inner[h].b) {
                            g = true;
                        }
                        this.ba._inner[h].b = false;
                        this.be = n;
                        this.bf = l;
                    }
                    this.di = Math.max(this.be, this.di);
                    this.df = Math.max(m, this.df);
                    this.dh = Math.max(this.bf, this.dh);
                    this.dg = Math.max(k, this.dg);
                }
                else {
                    this.di = Math.max(n, this.di);
                    this.df = Math.max(m, this.df);
                    this.dh = Math.max(l, this.dh);
                    this.dg = Math.max(k, this.dg);
                }
                let r = new Rect(0, o, p, n, m);
                a.add(r);
            }
            let s = 0;
            if (this.av) {
                s = this.bl() % 360;
                if (s < 0) {
                    s += 360;
                }
            }
            let t = this.ad.b8();
            if (!t) {
                this.dj(s, b, d);
            }
            else {
                this.af.ac();
            }
            if (this.av) {
                for (let u = 0; u < a.count; u++) {
                    let v = a._inner[u];
                    v.y = this.ba._inner[u].c - this.df / 2;
                    a._inner[u] = v;
                }
            }
            let w = false;
            if (!this.av && this.di <= this.bd) {
                w = true;
            }
            if (!w) {
                let x = this.c1.height;
                let y = this.de();
                let z = y;
                let aa = this.ba.count > 1 ? Math.abs(this.ba._inner[1].c - this.ba._inner[0].c) : x;
                let ab = Math.abs(Math.asin(aa / this.di) * (180 / Math.PI));
                let ac = (s >= ab && s <= 180 - ab) || (s - 180 >= ab && s - 180 <= 180 - ab);
                for (let ad = 0; ad < a.count; ad++) {
                    if (this.av) {
                        let ae = s * (Math.PI / 180);
                        let af = this.bv(this.bb._inner[ad]);
                        z = Math.min(y / Math.abs(Math.cos(ae)), af);
                        if (ac) {
                            let ag;
                            if (s > 0 && s < 90) {
                                ag = (Math.PI / 180) * (90 - s);
                            }
                            else if (s > 270 && s < 360) {
                                ag = (Math.PI / 180) * (s - 270);
                            }
                            else {
                                ag = 0;
                            }
                            z = aa / Math.cos(ag);
                        }
                    }
                    let ah = a._inner[ad];
                    ah.width = Math.min(ah.width, z);
                    a._inner[ad] = ah;
                    if (!(typeCast(TextBlock.$, this.bb._inner[ad]) !== null)) {
                        this.bb._inner[ad].width = z;
                    }
                    let ai = typeCast(TextBlock.$, this.bb._inner[ad]);
                    if (ai != null) {
                        let aj = this.b1(ad, ai, z, b, d);
                        if (!Base.equalsStatic(ai.al, aj)) {
                            ai.al = aj;
                            this.bb._inner[ad].width = z;
                        }
                    }
                }
                if (!t) {
                    this.dj(s, b, d);
                }
            }
            if (this.da()) {
                this.dk(a);
            }
            return a;
        }
        dj(a, b, c) {
            let d = a * (Math.PI / 180);
            let e = Math.abs(this.dh * Math.cos(d)) + Math.abs(this.dg * Math.sin(d));
            let f = this.bu();
            let g = (e + b + c) + (f) + this.ad.dz;
            this.bh = Math.max(this.ad.et, g);
        }
        dk(a) {
            this.c9.a1(a, this.di);
        }
        cm(a, b) {
            let c = 0;
            let d = this.dg / 2;
            let e = new TransformGroup();
            let f = AngleSimplifier.a(this.bl());
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = f;
                $ret.k = c;
                $ret.l = d;
                return $ret;
            })());
            let h = 0;
            let i = 0;
            if (f != 0 && f != 360) {
                f -= 90;
                if (f > 0 && f < 180) {
                    g.k = this.dh;
                    h = -this.dh + this.dg / 2;
                    h = h + Math.sin(MathUtil.o(f - 180)) * (this.dg / 2);
                }
                else {
                    if (f >= 180) {
                        h = h - Math.cos(MathUtil.o(f)) * (this.dg / 2);
                    }
                    else {
                        h = h + Math.cos(MathUtil.o(f)) * (this.dg / 2);
                    }
                }
            }
            let j = ((() => {
                let $ret = new TranslateTransform();
                $ret.j = h;
                $ret.k = i;
                return $ret;
            })());
            e.j.add(g);
            e.j.add(j);
            a.j = e;
        }
        da() {
            return !this.aw && !this.av;
        }
        c0() {
            let a = this.aj(this.ad.bf);
            let b = this.bu();
            let c = this.ah;
            let d = 0;
            if (a == 1) {
                d += this.c1.left;
                if (c == 3 || c == 7) {
                    d += this.ad.dz;
                }
            }
            else {
                d = this.c1.right - b;
                if (c == 6 || c == 2) {
                    d -= this.ad.dz;
                }
            }
            let e = this.bs();
            let f = 0;
            let g = this.ad.bf == null ? 1 : this.ad.bf.verticalAlignment;
            if (g == 0) {
                f = this.c1.top;
            }
            else if (g == 2) {
                f = this.c1.bottom - e;
            }
            else {
                f = (this.c1.top + (this.c1.height / 2)) - (e / 2);
            }
            return new Rect(0, d, f, b, e);
        }
        aj(a) {
            if (a == null) {
                return this.ad.bi.aq(this.ad);
            }
            if (a.position == 0) {
                if (this.ad != null && this.ad.bi != null) {
                    return this.ad.bi.aq(this.ad);
                }
                return 1;
            }
            return a.position;
        }
        ai() {
            return 2;
        }
        ay(a) {
            return a == 2 || a == 3 || a == 6 || a == 7;
        }
        b9() {
            let a = this.af.au();
            this.ad.hj(a);
            if (this.ag != null && this.ag.visibility != 0) {
                return;
            }
            let b = this.ad.dz;
            if (b == 0) {
                return;
            }
            let c = this.a2();
            if (c == null) {
                return;
            }
            let d = this.c1.left;
            let e;
            let f = this.ah;
            if (f == 2 || f == 6) {
                d = this.c1.right;
                e = d - b;
            }
            else {
                e = d + b;
            }
            let g = this.af.b();
            for (let h of fromEnum(c)) {
                this.cc(a, h, d, e, this.c4, g);
            }
            if (!this.ab.contains(this.af.aw)) {
                this.ab.add(this.af.aw);
            }
        }
    }
    VerticalAxisLabelPanel.$t = markType(VerticalAxisLabelPanel, 'VerticalAxisLabelPanel', AxisLabelPanelBase.$);
    return VerticalAxisLabelPanel;
})();
/**
 * @hidden
 */
export let ViewportUtils = /*@__PURE__*/ (() => {
    class ViewportUtils extends Base {
        static e(a, b, c, d) {
            if (!d.isEmpty) {
                let e = NumericScaler.ac;
                let f = d.left + d.width * (a - e.left) / e.width;
                f = (f - c.left) / c.width;
                return c.left + c.width * (f - b.left) / b.width;
            }
            return c.left + c.width * (a - b.left) / b.width;
        }
        static b(a, b, c, d) {
            if (!d.isEmpty) {
                let e = NumericScaler.ac;
                let f = b.left + b.width * (a - c.left) / c.width;
                f = (f * c.width) + c.left;
                f = ((f - d.left) * e.width / d.width) + e.left;
                return f;
            }
            return ((a - c.left) * b.width / c.width) + b.left;
        }
        static i(a, b, c, d) {
            if (!d.isEmpty) {
                let e = NumericScaler.ac;
                let f = d.top + d.height * (a - e.top) / e.height;
                f = (f - c.top) / c.height;
                return c.top + c.height * (f - b.top) / b.height;
            }
            return c.top + c.height * (a - b.top) / b.height;
        }
        static g(a, b, c, d) {
            if (!d.isEmpty) {
                let e = NumericScaler.ac;
                let f = b.top + b.height * (a - c.top) / c.height;
                f = (f * c.height) + c.top;
                f = ((f - d.top) * e.height / d.height) + e.top;
                return f;
            }
            return ((a - c.top) * b.height / c.height) + b.top;
        }
        static d(a, b, c, d) {
            let e = d;
            if (e.isEmpty) {
                e = c;
            }
            return e.width * a / b.width;
        }
        static a(a, b, c, d) {
            let e = d;
            if (e.isEmpty) {
                e = c;
            }
            return b.width * a / e.width;
        }
        static h(a, b, c, d) {
            let e = d;
            if (e.isEmpty) {
                e = c;
            }
            return e.height * a / b.height;
        }
        static f(a, b, c) {
            return c.width * a / b.width;
        }
        static c(a, b, c) {
            return b.width * a / c.width;
        }
        static j(a, b, c) {
            return c.height * a / b.height;
        }
    }
    ViewportUtils.$t = markType(ViewportUtils, 'ViewportUtils');
    return ViewportUtils;
})();
/**
 * @hidden
 */
export let IHasCategoryAxis_$type = new Type(null, 'IHasCategoryAxis');
/**
 * @hidden
 */
export let IHasCategoryModePreference_$type = new Type(null, 'IHasCategoryModePreference', null, [IHasCategoryAxis_$type]);
/**
 * @hidden
 */
export let AutomaticSeriesManager = /*@__PURE__*/ (() => {
    class AutomaticSeriesManager extends Base {
        constructor(a) {
            super();
            this.g = new HashSet$1(AutomaticSeriesPurpose_$type, 0);
            this.c = null;
            this.f = false;
            this.a = null;
            this.a = new AutomaticSeriesRequestCollection();
            let b = this.a;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.i));
            let c = a.series;
            this.c = c;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.m));
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.n));
        }
        e(a) {
            return this.g.contains(a);
        }
        i(a, b) {
            this.j();
        }
        n(a, b) {
            this.j();
        }
        m(a, b) {
            this.j();
        }
        j() {
            if (this.f) {
                return;
            }
            this.f = true;
            try {
                this.k();
            }
            finally {
                this.f = false;
            }
        }
        k() {
            this.g.clear();
            let a = new Dictionary$2(Series.$, Number_$type, 0);
            let b = new Dictionary$2(Series.$, AutomaticSeriesRequest.$, 0);
            for (let c = 0; c < this.c.count; c++) {
                a.addItem(this.c._inner[c], c);
            }
            for (let d = 0; d < this.a.count; d++) {
                this.g.add_1(this.a._inner[d].a);
                b.addItem(this.a._inner[d].d, this.a._inner[d]);
            }
            let e = new List$1(Series.$, 0);
            let f = new List$1(AutomaticSeriesRequest.$, 0);
            let g = new List$1(AutomaticSeriesRequest.$, 0);
            for (let h = 0; h < this.a.count; h++) {
                if (!a.containsKey(this.a._inner[h].d)) {
                    f.add(this.a._inner[h]);
                }
            }
            for (let i = 0; i < this.c.count; i++) {
                if (this.c._inner[i].eu && !b.containsKey(this.c._inner[i])) {
                    e.add(this.c._inner[i]);
                }
                if (b.containsKey(this.c._inner[i]) && this.d(b.item(this.c._inner[i]), a, b)) {
                    e.add(this.c._inner[i]);
                    g.add(b.item(this.c._inner[i]));
                    f.add(b.item(this.c._inner[i]));
                }
            }
            for (let j = e.count - 1; j >= 0; j--) {
                let k = e._inner[j];
                let l = a.item(k);
                this.c.removeAt(l);
            }
            a.clear();
            for (let m = 0; m < this.c.count; m++) {
                a.addItem(this.c._inner[m], m);
            }
            for (let n = 0; n < f.count; n++) {
                f._inner[n].d.eu = true;
                let o = this.h(f._inner[n], a);
                this.c.insert(o, f._inner[n].d);
                a.item(f._inner[n].d, o);
                for (let p = o; p < this.c.count; p++) {
                    let q = this.c._inner[p];
                    if (a.containsKey(q)) {
                        a.item(q, p);
                    }
                }
            }
        }
        l(a) {
            for (let b = this.a.count - 1; b >= 0; b--) {
                if (this.a._inner[b].a == a) {
                    this.a.removeAt(b);
                }
            }
        }
        h(a, b) {
            if (a.f) {
                return 0;
            }
            if (a.e) {
                return this.c.count;
            }
            if (a.c != null) {
                if (!b.containsKey(a.c)) {
                    return this.c.count;
                }
                let c = b.item(a.c);
                return c - 1;
            }
            if (a.b != null) {
                if (!b.containsKey(a.b)) {
                    return this.c.count;
                }
                let d = b.item(a.b);
                return d + 1;
            }
            return this.c.count;
        }
        d(a, b, c) {
            let d = b.item(a.d);
            if (a.f) {
                for (let e = d; e >= 0; e--) {
                    if (!c.containsKey(this.c._inner[e])) {
                        return true;
                    }
                }
            }
            if (a.e) {
                for (let f = d; f < this.c.count; f++) {
                    if (!c.containsKey(this.c._inner[f])) {
                        return true;
                    }
                }
            }
            if (a.c != null) {
                if (!b.containsKey(a.c)) {
                    return false;
                }
                let g = b.item(a.c);
                if (d != g - 1) {
                    return true;
                }
            }
            if (a.b != null) {
                if (!b.containsKey(a.b)) {
                    return false;
                }
                let h = b.item(a.b);
                if (d != h + 1) {
                    return true;
                }
            }
            return false;
        }
        get b() {
            return this.a;
        }
    }
    AutomaticSeriesManager.$t = markType(AutomaticSeriesManager, 'AutomaticSeriesManager');
    return AutomaticSeriesManager;
})();
/**
 * @hidden
 */
export let AutomaticSeriesRequest = /*@__PURE__*/ (() => {
    class AutomaticSeriesRequest extends Base {
        constructor() {
            super(...arguments);
            this.a = 0;
            this.d = null;
            this.b = null;
            this.c = null;
            this.e = false;
            this.f = false;
        }
    }
    AutomaticSeriesRequest.$t = markType(AutomaticSeriesRequest, 'AutomaticSeriesRequest');
    return AutomaticSeriesRequest;
})();
/**
 * @hidden
 */
export let AutomaticSeriesRequestCollection = /*@__PURE__*/ (() => {
    class AutomaticSeriesRequestCollection extends ObservableCollection$1 {
        constructor() {
            super(AutomaticSeriesRequest.$, 0);
        }
    }
    AutomaticSeriesRequestCollection.$t = markType(AutomaticSeriesRequestCollection, 'AutomaticSeriesRequestCollection', ObservableCollection$1.$.specialize(AutomaticSeriesRequest.$));
    return AutomaticSeriesRequestCollection;
})();
/**
 * @hidden
 */
export let ChartSelection = /*@__PURE__*/ (() => {
    class ChartSelection extends Base {
        constructor() {
            super(...arguments);
            this._item = null;
            this._series = null;
            this.b = null;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get c() {
            if (this.b == null && this.series != null) {
                this.b = this.series.cd();
            }
            return this.b;
        }
        set c(a) {
            this.b = a;
        }
        equals(a) {
            let b = typeCast(ChartSelection.$, a);
            if (b == null) {
                return false;
            }
            return b.series == this.series && b.item == this.item;
        }
        getHashCode() {
            let a = 31;
            if (this.item != null) {
                a ^= Base.getHashCodeStatic(this.item);
            }
            if (this.series != null) {
                a ^= Base.getHashCodeStatic(this.series);
            }
            return a;
        }
        g(a) {
            if (this.b != null && this.series == null) {
                let b = SeriesMatcherHelper.a(a, this.b);
                if (b != null && b.length > 0) {
                    this.series = b[0];
                }
            }
        }
    }
    ChartSelection.$t = markType(ChartSelection, 'ChartSelection');
    return ChartSelection;
})();
/**
 * @hidden
 */
export let ChartSelectedItemCollection = /*@__PURE__*/ (() => {
    class ChartSelectedItemCollection extends ObservableCollection$1 {
        constructor() {
            super(ChartSelection.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ChartSelectedItemCollection.$t = markType(ChartSelectedItemCollection, 'ChartSelectedItemCollection', ObservableCollection$1.$.specialize(ChartSelection.$));
    return ChartSelectedItemCollection;
})();
/**
 * @hidden
 */
export let SeriesMatcherHelper = /*@__PURE__*/ (() => {
    class SeriesMatcherHelper extends Base {
        static a(a, b) {
            let c = new List$1(Series.$, 0);
            a.ni((d) => {
                if (SeriesMatcherHelper.b(b, d)) {
                    c.add(d);
                }
            });
            return c.toArray();
        }
        static b(a, b) {
            if (a.b >= 0) {
                if (b.index == a.b) {
                    return true;
                }
            }
            if (a.e != null) {
                if (Base.equalsStatic(a.e, b.name)) {
                    return true;
                }
            }
            if (a.f != null) {
                if (Base.equalsStatic(a.f, b.title)) {
                    return true;
                }
            }
            if (a.d != null && a.c != null) {
                let c = a.d;
                if (!stringEndsWith(c, "MemberPath")) {
                    c += "MemberPath";
                }
                let d = b.mb(c);
                if (Base.equalsStatic(a.c, d)) {
                    return true;
                }
            }
            return false;
        }
    }
    SeriesMatcherHelper.$t = markType(SeriesMatcherHelper, 'SeriesMatcherHelper');
    return SeriesMatcherHelper;
})();
/**
 * @hidden
 */
export let SeriesLayer = /*@__PURE__*/ (() => {
    class SeriesLayer extends DependencyObject {
        constructor() {
            super();
            this._source = null;
            this._target = null;
            this.z = null;
            this.n = null;
            this.u = new Dictionary$2(String_$type, Delegate_$type, 0);
            this.y = new Dictionary$2(String_$type, Stack$1.$.specialize(Boolean_$type), 0);
            this.p = false;
            this.aa = new HashSet$1(SeriesLayerPropertyOverlay.$, 0);
            this.ab = new HashSet$1(SeriesLayerPropertyOverlay.$, 0);
            this.v = new Dictionary$2(String_$type, List$1.$.specialize(SeriesLayerPropertyOverlay.$), 0);
            this.w = new Dictionary$2(String_$type, SeriesLayerPropertyOverlay.$, 0);
            this.x = new Dictionary$2(String_$type, SeriesLayerPropertyOverlay.$, 0);
            this.propertyChanged = null;
            this.q = false;
            this.l = new SeriesLayerPropertyOverlayCollection();
            this.o = false;
            this.z = new HashSet$1(String_$type, 0);
            this.z.add_1("FastItemsSource");
            let a = this.l;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.al));
            let b = this.l;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.ak));
        }
        get source() {
            return this._source;
        }
        set source(a) {
            this._source = a;
        }
        get target() {
            return this._target;
        }
        set target(a) {
            this._target = a;
        }
        ak(a, b) {
            if (b.oldItems != null) {
                for (let c = 0; c < b.oldItems.count; c++) {
                    let d = b.oldItems.item(c);
                    if (d == null) {
                        continue;
                    }
                    let e = d;
                    e.propertyUpdated = delegateRemove(e.propertyUpdated, runOn(this, this.av));
                    if (this.p && (this.aa.contains(e) || this.ab.contains(e))) {
                        this.aq(e);
                    }
                }
            }
            if (b.newItems != null) {
                for (let f = 0; f < b.newItems.count; f++) {
                    let g = b.newItems.item(f);
                    if (g == null) {
                        continue;
                    }
                    let h = g;
                    if (h.ad != null) {
                        if (h.r) {
                            this.x.item(h.aa, h);
                        }
                        else {
                            this.w.item(h.aa, h);
                        }
                    }
                    if (h.y != null) {
                        let i = h.y;
                        if (!h.q) {
                            i = Series.nu(i);
                        }
                        if (!this.v.containsKey(i)) {
                            this.v.addItem(i, new List$1(SeriesLayerPropertyOverlay.$, 0));
                        }
                        this.v.item(i).add(h);
                    }
                    h.propertyUpdated = delegateCombine(h.propertyUpdated, runOn(this, this.av));
                }
            }
            if (this.target != null && this.target.ft) {
                this.a3();
            }
            else {
                this.a5();
            }
        }
        au() {
            if (this.target != null) {
                this.target.q4();
            }
        }
        at() {
            if (this.target != null) {
                this.target.q2();
            }
        }
        get t() {
            return this.target != null && this.target.g2;
        }
        a3() {
            if (this.p) {
                for (let a of fromEnum(this.l)) {
                    if (!this.aa.contains(a) && !this.ab.contains(a)) {
                        this.a2(a, this.source, this.target);
                    }
                }
            }
        }
        a4() {
            if (this.p) {
                for (let a of fromEnum(this.l)) {
                    if (!this.aa.contains(a) && !this.ab.contains(a)) {
                        this.a2(a, this.source, null);
                    }
                }
            }
        }
        a5() {
            if (this.p) {
                for (let a of fromEnum(this.l)) {
                    if (!this.aa.contains(a) && !this.ab.contains(a)) {
                        this.a2(a, null, this.target);
                    }
                }
            }
        }
        a2(a, b, c) {
            if (a.p) {
                if (a.r && b != null) {
                    if (!this.aa.contains(a)) {
                        this.aa.add_1(a);
                        this.an(a, b);
                    }
                }
                else if (!a.r && c != null) {
                    if (!this.ab.contains(a)) {
                        this.ab.add_1(a);
                        this.an(a, c);
                    }
                }
            }
            else {
                if (a.r) {
                    this.aa.add_1(a);
                }
                else {
                    this.ab.add_1(a);
                }
            }
        }
        ah(a) {
            if (a == null) {
                return null;
            }
            if (this.source == null) {
                return null;
            }
            if (this.x.containsKey(a.name) && this.aa.contains(this.x.item(a.name))) {
                return this.x.item(a.name).w;
            }
            return this.source.c(a);
        }
        an(a, b) {
            if (b == null) {
                return;
            }
            let c = a.aa;
            let d = b.tg(c);
            if (d == null) {
                return;
            }
            let e = b.c(d);
            if (!a.r) {
                e = this.ah(d);
            }
            let f = this.ag(e, a, b);
            let g = this.af(a, e, f, b);
            this.ao(b, d, g);
        }
        ag(a, b, c) {
            let d = a;
            if (b.y != null) {
                let e = b.y;
                if (!b.q) {
                    e = Series.nu(b.y);
                }
                let f = c.tg(e);
                if (f != null) {
                    d = c.c(f);
                    if (!b.r) {
                        d = this.ah(f);
                    }
                }
            }
            return d;
        }
        ao(a, b, c) {
            if (a.f2(b.name) || a.f2("Actual" + b.name)) {
                this.ar(b.name, () => {
                    this.az(a, b);
                    a.h(b, c);
                    this.a0(a, b);
                });
            }
            else {
                this.az(a, b);
                a.h(b, c);
                this.a0(a, b);
            }
        }
        ar(a, b) {
            if (this.n == null) {
                this.n = this.source.ct.j();
            }
            if (!this.o) {
                this.o = true;
                this.n.enqueueAction(runOn(this, this.as));
            }
            this.u.item(a, b);
        }
        as() {
            this.o = false;
            let a = new List$1(Delegate_$type, 0);
            for (let b of fromEnum(this.u.values)) {
                a.add(b);
            }
            this.u.clear();
            for (let c = 0; c < a.count; c++) {
                let d = a._inner[c];
                d();
            }
        }
        az(a, b) {
            let c = b.name;
            let d = null;
            if (!this.y.containsKey(c)) {
                this.y.addItem(c, new Stack$1(Boolean_$type));
            }
            this.y.item(c).h(true);
        }
        a0(a, b) {
            let c = b.name;
            if (this.y.containsKey(c)) {
                this.y.item(c).e();
                if (this.y.item(c).f == 0) {
                    this.y.removeItem(c);
                }
            }
        }
        r(a, b) {
            if (this.y.containsKey(b.name) && this.y.item(b.name).d()) {
                return true;
            }
            return false;
        }
        af(a, b, c, d) {
            return a.t(b, c, d);
        }
        al(a, b) {
            for (let c = 0; c < this.l.count; c++) {
                let d = this.l._inner[c];
                if (d == null) {
                    continue;
                }
                d.propertyUpdated = delegateRemove(d.propertyUpdated, runOn(this, this.av));
                if (this.p && (this.aa.contains(d) || this.ab.contains(d))) {
                    this.aq(d);
                }
            }
        }
        av(a, b) {
            let c = a;
            if (b.propertyName == SeriesLayerPropertyOverlay.$$p[0]) {
                if (b.oldValue != null) {
                    let d = b.oldValue;
                    if (!c.q) {
                        d = Series.nu(d);
                    }
                    if (this.v.containsKey(d)) {
                        let e = this.v.item(d);
                        e.remove(c);
                        if (e.count == 0) {
                            this.v.removeItem(d);
                        }
                    }
                }
                if (b.newValue != null) {
                    let f = b.newValue;
                    if (!c.q) {
                        f = Series.nu(f);
                    }
                    if (!this.v.containsKey(f)) {
                        this.v.addItem(f, new List$1(SeriesLayerPropertyOverlay.$, 0));
                    }
                    this.v.item(f).add(c);
                }
            }
            if (this.aa.contains(c) || this.ab.contains(c)) {
                this.a2(c, this.source, this.target);
            }
        }
        ax(a, b, c) {
            this.aw(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        am(a, b) {
            this.source = a;
            this.target = b;
            this.p = true;
            this.a5();
            let c = this.target;
            c.renderValid = delegateCombine(c.renderValid, runOn(this, this.a1));
            a.propertyUpdated = delegateCombine(a.propertyUpdated, runOn(this, this.ay));
        }
        ay(a, b) {
            if (this.p) {
                if (!this.source.gk(b.propertyName)) {
                    let c = this.source.tg(b.propertyName);
                    if (c != null) {
                        this.ai(this.source, this.target, c, b.newValue);
                    }
                }
            }
        }
        a1(a, b) {
            if (this.source == null || this.source.f0()) {
                return;
            }
            this.a4();
            if (this.target != null) {
                let c = this.target;
                c.renderValid = delegateRemove(c.renderValid, runOn(this, this.a1));
            }
        }
        ap(a) {
            let b = this.source;
            b.propertyUpdated = delegateRemove(b.propertyUpdated, runOn(this, this.ay));
            this.p = false;
            let c = new List$1(SeriesLayerPropertyOverlay.$, 1, this.ab);
            c.o(this.aa);
            for (let d of fromEnum(c)) {
                this.aq(d);
            }
        }
        aq(a) {
            if (a.y != null) {
                if (this.v.containsKey(a.y)) {
                    let b = this.v.item(a.y);
                    b.remove(a);
                    if (b.count == 0) {
                        this.v.removeItem(a.y);
                    }
                }
            }
            if (a.r) {
                if (this.x.containsKey(a.aa)) {
                    this.x.removeItem(a.aa);
                }
            }
            else {
                if (this.w.containsKey(a.aa)) {
                    this.w.removeItem(a.aa);
                }
            }
            if (this.aa.contains(a) || this.ab.contains(a)) {
                if (this.aa.contains(a)) {
                    this.aa.remove(a);
                }
                if (this.ab.contains(a)) {
                    this.ab.remove(a);
                }
                if (a.r) {
                    if (this.source == null) {
                        return;
                    }
                    let c = this.source.tg(a.aa);
                    if (c == null) {
                        return;
                    }
                    this.ao(this.source, c, a.w);
                }
            }
        }
        aw(a, b, c) {
            this.q = true;
        }
        ai(a, b, c, d) {
            let e = d;
            if (this.r(a, c)) {
                return this.ah(c);
            }
            let f = false;
            if (this.s(a, b, c)) {
                f = true;
            }
            if (this.v.containsKey(c.name)) {
                if (this.p) {
                    let g = this.v.item(c.name);
                    for (let h of fromEnum(g)) {
                        if (h.y != null) {
                            let i = h.ad;
                            if (!h.q) {
                                i = Series.nu(i);
                            }
                            let j = a.tg(i);
                            let k = a.c(j);
                            k = this.ad(a, b, j, k);
                            if (h.r) {
                                if (!a.gk(c.name)) {
                                    let l = this.ae(a, b, j, k);
                                    this.az(a, c);
                                    this.ao(a, j, l);
                                    this.a0(a, c);
                                }
                            }
                            else {
                                b.h(j, k);
                            }
                        }
                    }
                }
            }
            if (!f) {
                d = this.ad(a, b, c, d);
                b.h(c, d);
            }
            return e;
        }
        s(a, b, c) {
            if (this.z.contains(c.name)) {
                return true;
            }
            if (c.name != null && stringStartsWith(c.name, "Actual")) {
                return true;
            }
            return false;
        }
        ad(a, b, c, d) {
            if (this.w.containsKey(c.name)) {
                let e = false;
                if (this.source == null) {
                    this.source = a;
                    e = true;
                }
                let f = this.w.item(c.name);
                let g = this.ag(d, f, a);
                d = this.w.item(c.name).t(d, g, a);
                if (e) {
                    this.source = null;
                }
            }
            return d;
        }
        ae(a, b, c, d) {
            if (this.p && this.x.containsKey(c.name)) {
                let e = false;
                if (this.source == null) {
                    this.source = a;
                    e = true;
                }
                if (this.r(a, c)) {
                    d = this.ah(c);
                }
                let f = this.x.item(c.name);
                let g = this.ag(d, f, a);
                d = this.x.item(c.name).t(d, g, a);
                if (e) {
                    this.source = null;
                }
            }
            return d;
        }
        get m() {
            return this.l;
        }
    }
    SeriesLayer.$t = markType(SeriesLayer, 'SeriesLayer', DependencyObject.$, [INotifyPropertyChanged_$type]);
    SeriesLayer.$$p = markDep(DependencyProperty, PropertyMetadata, SeriesLayer, 'ax', ['ZIndex:ac:a6', [1, 0]]);
    return SeriesLayer;
})();
/**
 * @hidden
 */
export let SeriesLayerCollection = /*@__PURE__*/ (() => {
    class SeriesLayerCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesLayer.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesLayerCollection.$t = markType(SeriesLayerCollection, 'SeriesLayerCollection', ObservableCollection$1.$.specialize(SeriesLayer.$));
    return SeriesLayerCollection;
})();
/**
 * @hidden
 */
export let SeriesLayerManager = /*@__PURE__*/ (() => {
    class SeriesLayerManager extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
        b(a, b) {
            if (b.propertyName == "ZIndex") {
                this.n(this.a);
            }
        }
        i(a, b) {
            if (b.oldItems != null) {
                for (let c = 0; c < b.oldItems.count; c++) {
                    let d = b.oldItems.item(c);
                    if (d == null) {
                        continue;
                    }
                    let e = d;
                    e.propertyChanged = delegateRemove(e.propertyChanged, runOn(this, this.b));
                }
            }
            if (b.newItems != null) {
                for (let f = 0; f < b.newItems.count; f++) {
                    let g = b.newItems.item(f);
                    if (g == null) {
                        continue;
                    }
                    let h = g;
                    h.propertyChanged = delegateCombine(h.propertyChanged, runOn(this, this.b));
                }
            }
            this.n(a);
        }
        n(a) {
            let b = new SeriesLayerCollection();
            for (let c of fromEnum(a.b8)) {
                b.add(c);
            }
            for (let d of fromEnum(a.b9)) {
                b.add(d);
            }
            let e = (f, g) => {
                if (f.ac < g.ac) {
                    return -1;
                }
                else if (f.ac > g.ac) {
                    return 1;
                }
                else {
                    return 0;
                }
            };
            ArrayExtension.quickSort(b, (f, g) => e(f, g));
            this.m(b, a.actualLayers);
        }
        m(a, b) {
            let c = new List$1(Number_$type, 0);
            let d = 0;
            for (let e = 0; e < b.count; e++) {
                if (b._inner[e] == null) {
                    c.add(e);
                    continue;
                }
                if (d > a.count - 1) {
                    c.add(e);
                    continue;
                }
                if (Base.equalsStatic(b._inner[e], a._inner[d])) {
                    d++;
                    continue;
                }
                b.insert(e, a._inner[d]);
                d++;
            }
            for (let f = c.count - 1; f >= 0; f--) {
                b.removeAt(f);
            }
            for (; d < a.count; d++) {
                b.add(a._inner[d]);
            }
        }
        h(a, b, c) {
            this.i(a, c);
        }
        j(a, b, c) {
            for (let d of fromEnum(b)) {
                d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.b));
            }
        }
        e(a, b, c) {
            this.i(a, c);
        }
        f(a, b, c) {
            for (let d of fromEnum(b)) {
                d.propertyChanged = delegateRemove(d.propertyChanged, runOn(this, this.b));
            }
        }
        c(a, b, c) {
            switch (c.action) {
                case 0:
                    if (c.newItems != null) {
                        for (let d = 0; d < c.newItems.count; d++) {
                            let e = c.newItems.item(d);
                            this.k(d + c.newStartingIndex, e);
                        }
                    }
                    break;
                case 1:
                    if (c.oldItems != null) {
                        for (let f = 0; f < c.oldItems.count; f++) {
                            let g = c.oldItems.item(f);
                            this.l(g, c.oldStartingIndex);
                        }
                    }
                    break;
                case 2:
                    if (c.oldItems != null) {
                        for (let h = 0; h < c.oldItems.count; h++) {
                            let i = c.oldItems.item(h);
                            this.l(i, c.oldStartingIndex);
                        }
                    }
                    if (c.newItems != null) {
                        for (let j = 0; j < c.newItems.count; j++) {
                            let k = c.newItems.item(j);
                            this.k(j + c.newStartingIndex, k);
                        }
                    }
                    break;
                case 4:
                    this.g();
                    let l = 0;
                    for (let m of fromEnum(b)) {
                        let n = m;
                        this.k(l, n);
                        l++;
                    }
                    break;
            }
        }
        g() {
            for (let a of fromEnum(this.a.actualLayers)) {
                this.a.pf(a);
            }
        }
        l(a, b) {
            this.a.pf(a);
        }
        k(a, b) {
            this.a.bk(a, b);
        }
        d(a, b, c) {
            this.g();
        }
    }
    SeriesLayerManager.$t = markType(SeriesLayerManager, 'SeriesLayerManager');
    return SeriesLayerManager;
})();
/**
 * @hidden
 */
export let SeriesLayerPropertyOverlay = /*@__PURE__*/ (() => {
    class SeriesLayerPropertyOverlay extends DependencyObject {
        constructor() {
            super(...arguments);
            this.o = false;
            this.k = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.q = false;
            this.n = false;
            this.m = false;
            this.w = null;
            this.s = null;
            this.valueResolving = null;
        }
        ah(a, b, c) {
            this.ag(a, b, c);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ag(a, b, c) {
            this.n = true;
            switch (a) {
                case SeriesLayerPropertyOverlay.$$p[4]:
                    this.m = true;
                    break;
                default: break;
            }
        }
        t(a, b, c) {
            this.w = a;
            let d = this.x;
            if (a == null && this.y != null) {
                a = b;
                if (this.x == null) {
                    d = b;
                }
            }
            if (d == this.s && this.s != null) {
                return d;
            }
            if (this.valueResolving != null) {
                let e = a;
                let f = ((() => {
                    let $ret = new SeriesLayerPropertyOverlayValueResolvingEventArgs();
                    $ret.value = e;
                    return $ret;
                })());
                if (!this.q) {
                    this.ai(f, c);
                    d = f.value;
                }
                {
                    this.valueResolving(this, f);
                }
                if (f.b) {
                    if (!this.q) {
                        this.aj(f, c);
                    }
                    d = f.value;
                }
            }
            else {
                if (!this.q) {
                    d = this.v(d, c);
                }
            }
            this.s = d;
            return d;
        }
        aj(a, b) {
            let c = b.tg(this.aa);
            if (c == null) {
                return;
            }
            let d = PlatformAPIHelper.k(c.propertyType, a.value);
            a.value = d;
            a.b = false;
        }
        v(a, b) {
            let c = b.tg(this.aa);
            if (c == null) {
                return a;
            }
            let d = PlatformAPIHelper.k(c.propertyType, a);
            a = d;
            return a;
        }
        ai(a, b) {
            let c = b.tg(this.aa);
            if (c == null) {
                return;
            }
            let d = PlatformAPIHelper.e(c.propertyType, a.value);
            a.value = d;
            a.b = false;
        }
        u(a, b) {
            let c = b.tg(this.aa);
            if (c == null) {
                return a;
            }
            let d = PlatformAPIHelper.e(c.propertyType, a);
            a = d;
            return a;
        }
        get aa() {
            if (!this.q) {
                return Series.nu(this.ad);
            }
            return this.ad;
        }
    }
    SeriesLayerPropertyOverlay.$t = markType(SeriesLayerPropertyOverlay, 'SeriesLayerPropertyOverlay', DependencyObject.$, [INotifyPropertyChanged_$type]);
    SeriesLayerPropertyOverlay.$$p = markDep(DependencyProperty, PropertyMetadata, SeriesLayerPropertyOverlay, 'ah', ['CurrentValuePropertyName:y:ak', [2, null], 'IsAlwaysApplied:p:al', [0, false], 'IsSourceOverlay:r:am', [0, false], 'PropertyName:ad:an', [2, null], 'Value:x:ao', [4]]);
    return SeriesLayerPropertyOverlay;
})();
/**
 * @hidden
 */
export let SeriesLayerPropertyOverlayCollection = /*@__PURE__*/ (() => {
    class SeriesLayerPropertyOverlayCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesLayerPropertyOverlay.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesLayerPropertyOverlayCollection.$t = markType(SeriesLayerPropertyOverlayCollection, 'SeriesLayerPropertyOverlayCollection', ObservableCollection$1.$.specialize(SeriesLayerPropertyOverlay.$));
    return SeriesLayerPropertyOverlayCollection;
})();
/**
 * @hidden
 */
export let IDataChartToolbarProvider_$type = new Type(null, 'IDataChartToolbarProvider');
/**
 * @hidden
 */
export let ISeriesViewerScrollbarManager_$type = new Type(null, 'ISeriesViewerScrollbarManager');
/**
 * @hidden
 */
export let ISeriesInteractionManager_$type = new Type(null, 'ISeriesInteractionManager');
/**
 * @hidden
 */
export let ISeriesViewerInteractionManager_$type = new Type(null, 'ISeriesViewerInteractionManager');
/**
 * @hidden
 */
export let IDataChartVisualDataManager_$type = new Type(null, 'IDataChartVisualDataManager');
/**
 * @hidden
 */
export let IAxisVisualDataManager_$type = new Type(null, 'IAxisVisualDataManager');
/**
 * @hidden
 */
export let ISeriesVisualDataManager_$type = new Type(null, 'ISeriesVisualDataManager');
/**
 * @hidden
 */
export let XamDataChart = /*@__PURE__*/ (() => {
    class XamDataChart extends SeriesViewer {
        constructor() {
            super();
            this._xsr = null;
            this.wd = null;
            this.xe = 1;
            this.xf = 1;
            this.wx = false;
            this.w1 = false;
            this.w0 = false;
            this.xg = 0;
            this.xh = 0;
            this.xy = NaN;
            this.xz = NaN;
            this.v8 = new AxisCollection();
            this.axisRangeChanged = null;
            this.wm = null;
            this.wp = false;
            this.xb = 0;
            this.xd = 0;
            this.xc = 0;
            this.xa = 0;
            this.xj = NaN;
            this.xl = NaN;
            this.xk = NaN;
            this.xi = NaN;
            this.ab = XamDataChart.$;
            this.w0 = true;
            let a = this.axes;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.y5));
            let b = this.axes;
            b.collectionResetting = delegateCombine(b.collectionResetting, runOn(this, this.y6));
        }
        get XSRP() {
            if (this._xsr == null) {
                this._xsr = new SRProvider(this.c8.j.ae);
            }
            return this._xsr;
        }
        get we() {
            if (this.wd == null) {
                this.wd = DVContainer.instance.createInstance(IDataChartVisualDataManager_$type, () => this.XSRP.q);
            }
            return this.wd;
        }
        static staticInit() {
            XamDataChart.xv = -1.7976931348623157E+308;
            XamDataChart.xu = 1.7976931348623157E+308;
        }
        static x7(a) {
            if (a.c9 == null) {
                return -1;
            }
            if (!a.fe) {
                return -1;
            }
            let b = XamDataChartView.aw(a);
            if (b.count == 0) {
                return -1;
            }
            let c = -1;
            for (let d = 0; d < b.count; d++) {
                c = Math.max(c, b._inner[d].index);
            }
            let e = c + 1;
            if (a.e9) {
                e = a.j0();
                if (e == -1) {
                    return -1;
                }
                let f = a.bn();
                e = f.index + e;
            }
            if (a.bl != null) {
                e = a.j4() + a.bl.index;
                if (e == -1) {
                    return -1;
                }
            }
            return e;
        }
        p3(a, b, c, d) {
            super.p3(a, b, c, d);
            switch (b) {
                case XamDataChart.$$p[23]:
                    this.xq = this.x5;
                    break;
                case XamDataChart.$$p[24]:
                    this.xr = this.x6;
                    break;
                case "ActualWindowScaleHorizontal":
                case "ActualWindowScaleVertical":
                    if (!this.f6) {
                        this.rh(this.hl(), this.hm());
                    }
                    break;
                case XamDataChart.$$p[8]:
                    this.c8.fr(d);
                    {
                        for (let e of fromEnum(this.axes)) {
                            e.h8();
                        }
                    }
                    break;
                case XamDataChart.$$p[9]:
                    this.ww = this.wv;
                    break;
                case XamDataChart.$$p[22]:
                    this.wz = this.w8;
                    break;
                case XamDataChart.$$p[11]:
                case XamDataChart.$$p[13]:
                    this.rd();
                    break;
                case XamDataChart.$$p[0]:
                case XamDataChart.$$p[17]:
                    if (c != d) {
                        for (let f of fromEnum(this.axes)) {
                            f.cq = true;
                            f.h8();
                        }
                    }
                    break;
                case XamDataChart.$$p[7]:
                case XamDataChart.$$p[5]:
                case XamDataChart.$$p[6]:
                    for (let g of fromEnum(this.axes)) {
                        g.ik();
                    }
                    break;
                case XamDataChart.$$p[4]:
                    this.y9();
                    break;
            }
        }
        ql() {
            super.ql();
            if (this.v7 == 1 || this.v7 == 2) {
                this.zd();
            }
        }
        oh() {
            super.oh();
            if (this.wq && this.v7 != 0) {
                if (!this.w7) {
                    this.zd();
                }
            }
        }
        n8(a, b) {
            super.n8(a, b);
            if (this.wq && this.v7 == 2) {
                if (!a.isEmpty && !b.isEmpty) {
                    if (Math.abs(a.width - b.width) > 1E-10) {
                        if (!this.w7) {
                            this.zd();
                        }
                    }
                }
            }
        }
        oc() {
            super.oc();
            if (this.wa == 1) {
                this.y9();
            }
        }
        ze() {
            this.y9();
        }
        y9() {
            let a = this.z9();
            this.wp = false;
            if (!isNaN_(this.x1)) {
                this.xn = this.x1;
            }
            else {
                this.xn = a.left;
            }
            if (!isNaN_(this.x3)) {
                this.xp = this.x3;
            }
            else {
                this.xp = a.top;
            }
            if (!isNaN_(this.x2)) {
                this.xo = this.x2;
            }
            else {
                this.xo = a.right;
            }
            if (!isNaN_(this.x0)) {
                this.xm = this.x0;
            }
            else {
                this.xm = a.bottom;
            }
            this.vp = this.vn(this.v0);
            if (this.wp) {
                this.wp = false;
                for (let b of fromEnum(this.axes)) {
                    b.cq = true;
                    b.h8();
                }
                for (let c of fromEnum(this.series)) {
                    c.rn(false);
                }
            }
        }
        z9() {
            this.zg();
            switch (this.wa) {
                case 1:
                    let a = this.aaa();
                    return a;
                default: return new Thickness(1, 0, 0, 0, 0);
            }
        }
        zg() {
            this.b0 = this.wg();
            this.b2 = this.wj();
        }
        wj() {
            let a = 1;
            for (let b of fromEnum(this.series)) {
                let c = b.cj();
                a = this.wi(a, c);
            }
            return a;
        }
        wi(a, b) {
            switch (a) {
                case 2: return 2;
                case 4:
                    if (b == 2 || b == 3) {
                        return 2;
                    }
                    return a;
                case 3:
                    if (b == 2 || b == 4) {
                        return 2;
                    }
                    return a;
                case 1: return b;
            }
            return a;
        }
        wg() {
            let a = 1;
            for (let b of fromEnum(this.series)) {
                let c = b.ci();
                a = this.wf(a, c);
            }
            return a;
        }
        wf(a, b) {
            switch (a) {
                case 2: return 2;
                case 4:
                    if (b == 2 || b == 3) {
                        return 2;
                    }
                    return a;
                case 3:
                    if (b == 2 || b == 4) {
                        return 2;
                    }
                    return a;
                case 1: return b;
            }
            return a;
        }
        aaa() {
            let a = new Thickness(1, 0, 0, 0, 0);
            for (let b = 0; b < this.series.count; b++) {
                let c = this.series._inner[b];
                let d = c.wm();
                a = new Thickness(1, Math.max(d.left, a.left), Math.max(d.top, a.top), Math.max(d.right, a.right), Math.max(d.bottom, a.bottom));
            }
            return a;
        }
        aab(a, b) {
            let c = new Thickness(1, 0, 0, 0, 0);
            for (let d = 0; d < this.series.count; d++) {
                let e = this.series._inner[d];
                let f = e.wo(a, b);
                c = new Thickness(1, Math.max(f.left, c.left), Math.max(f.top, c.top), Math.max(f.right, c.right), Math.max(f.bottom, c.bottom));
            }
            return c;
        }
        get_eu() {
            return this.wa == 1;
        }
        hl() {
            return this.xq;
        }
        hm() {
            return this.xr;
        }
        q6() {
            super.q6();
            this.xq = this.vl.width;
            this.xr = this.vl.height;
        }
        get xq() {
            return this.xe;
        }
        set xq(a) {
            let b = this.xe;
            this.xe = a;
            this.p8("ActualWindowScaleHorizontal", b, this.xe);
        }
        get xr() {
            return this.xf;
        }
        set xr(a) {
            let b = this.xf;
            this.xf = a;
            this.p8("ActualWindowScaleVertical", b, this.xf);
        }
        fh() {
            return this.ww;
        }
        fi() {
            return this.wz;
        }
        get wq() {
            return this.w2 || this.w5;
        }
        get_fq() {
            return this.wr;
        }
        get wr() {
            return this.w6 || (this.fp && this.v7 != 0);
        }
        get_fp() {
            return this.w5;
        }
        get_fo() {
            return this.w2;
        }
        zd() {
            this.wx = false;
            this.w1 = true;
            this.w0 = true;
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cq = true;
                this.axes._inner[a].h8();
            }
        }
        zc() {
            this.wx = false;
            this.w0 = true;
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cq = true;
                this.axes._inner[a].h8();
            }
        }
        zb(a, b, c, d) {
            if (a.ad == null) {
                return;
            }
            if (a.ad.cq || a.ad.ke.isEmpty) {
                return;
            }
            let e = false;
            for (let f = 0; f < this.axes.count; f++) {
                let g = this.axes._inner[f].aw.bh;
                this.axes._inner[f].aw.ca();
                if (this.axes._inner[f].aw.bh != g) {
                    e = true;
                }
            }
            if (e) {
                return;
            }
            if (isNaN_(this.xy)) {
                this.xy = this.c8.a4;
                this.xz = this.c8.a5;
            }
            let h = false;
            let i = false;
            let j = 0;
            if (a.au) {
                let k = this.w0;
                if (this.w5 && this.w0) {
                    j = this.x4(a, b, c, d);
                    this.w0 = false;
                    if (a.bl() != j) {
                        if (j == 0 && a.ad.b4) {
                            if (k) {
                                this.w1 = true;
                                a.ad.ib();
                                h = true;
                                i = true;
                            }
                        }
                        else {
                            if ((j > a.bl()) || k) {
                                this.w1 = true;
                                a.ad.ih(j);
                                h = true;
                                i = true;
                            }
                        }
                    }
                }
            }
            this.eg = h;
            if (a.bl() != 0 || j != 0 || h) {
                let l = a.bl();
                let m = c.left + c.width / 2;
                let n = d.left + d.width / 2;
                if (a.av) {
                    m = c.left;
                    n = d.left;
                }
                if (l == 0) {
                    m = m - a.c3.width / 2;
                    n = n - a.c3.width / 2;
                }
                let o = a.cz(new Rect(0, m, c.top, a.c3.width, a.c3.height), l);
                let p = a.cz(new Rect(0, n, d.top, a.c3.width, a.c3.height), l);
                c = o;
                d = p;
            }
            let q = false;
            if (this.w1) {
                this.w1 = false;
                q = true;
            }
            this.wx = true;
            let r = 0;
            let s = 0;
            let t = 0;
            let u = c.left + t;
            let v = d.right + t;
            let w = 0;
            w = this.v0.right + this.c8.a5;
            if (u < 0) {
                r = -u;
                r += this.xs;
            }
            if (v > w) {
                s = v - w;
                s += this.xs;
            }
            if (q) {
                if (u > 0) {
                    r = -u;
                    r += this.xs;
                }
                if (v < w) {
                    s = -(w - v);
                    s += this.xs;
                }
            }
            let x = false;
            let y = false;
            if (r != 0 || s != 0) {
                x = true;
                this.xg = this.xg + r;
                this.xh = this.xh + s;
                if (this.xg > this.xt) {
                    this.xg = this.xt;
                    y = true;
                }
                if (this.xh > this.xt) {
                    this.xh = this.xt;
                    y = true;
                }
                if (this.xg < 0) {
                    this.xg = 0;
                    y = true;
                }
                if (this.xh < 0) {
                    this.xh = 0;
                    y = true;
                }
            }
            else {
                if (this.eg) {
                    this.y8();
                }
                return;
            }
            this.f5 = true;
            this.hv = this.xy + this.xg;
            this.h0 = this.xz + this.xh;
            this.f5 = false;
            this.fm = x;
            if (y) {
                if (q && (this.fm || this.eg)) {
                    this.y8();
                }
                return;
            }
            if (this.fm || this.eg) {
                this.y8();
            }
        }
        x4(a, b, c, d) {
            let e = this.xw(-1, a, b, c, d);
            let f = a.bl();
            if (e < f) {
                let g = c.left + c.width / 2;
                let h = d.left + d.width / 2;
                if (a.av) {
                    g = c.left;
                    h = d.left;
                }
                let i = a.cz(new Rect(0, g, c.top, a.c3.width, a.c3.height), e);
                let j = a.cz(new Rect(0, h, d.top, a.c3.width, a.c3.height), e);
                if (e == 0) {
                    i = new Rect(0, g - a.c3.width / 2, c.top, a.c3.width, a.c3.height);
                    j = new Rect(0, h - a.c3.width / 2, d.top, a.c3.width, a.c3.height);
                }
                let k = a.cz(new Rect(0, g, c.top, a.c3.width, a.c3.height), f);
                let l = a.cz(new Rect(0, h, d.top, a.c3.width, a.c3.height), f);
                let m = j.right - l.right;
                let n = 0;
                let o = 0;
                o = this.v0.right + this.c8.a5;
                let p = i.left + n;
                let q = j.right + n;
                let r = 0;
                let s = 0;
                if (p < 0) {
                    r = -p;
                    r += this.xs;
                }
                if (q > o) {
                    s = q - o;
                    s += this.xs;
                }
                let t = false;
                if (this.w1 || this.w0) {
                    t = true;
                }
                if (t) {
                    if (p > 0) {
                        r = -p;
                        r += this.xs;
                    }
                    if (q < o) {
                        s = -(o - q);
                        s += this.xs;
                    }
                }
                let u = false;
                let v = false;
                let w = 0;
                let x = 0;
                if (r != 0 || s != 0) {
                    v = true;
                    w = this.xg + r;
                    x = this.xh + s;
                    if (w > this.xt) {
                        w = this.xt;
                        u = true;
                    }
                    if (x > this.xt) {
                        x = this.xt;
                        u = true;
                    }
                    if (w < 0) {
                        w = 0;
                        u = true;
                    }
                    if (x < 0) {
                        x = 0;
                        u = true;
                    }
                }
                let y = this.c8.a4;
                let z = this.c8.a5;
                let aa = new Thickness(1, this.xy + w, 0, this.xz + x, 0);
                let ab = (aa.left - y) + (aa.right - z);
                let ac = a.ad.j8().width;
                let ad = ac - ab;
                let ae = ad / ac;
                let af = a.bn() * ae;
                let ag = this.xw(af, a, b, c, d);
                if (ag == e) {
                    return e;
                }
                else {
                    return f;
                }
            }
            return e;
        }
        xw(a, b, c, d, e) {
            let f = b.c3;
            let g = b.bn();
            if (a < 0) {
            }
            if (a > 0) {
                g = a;
            }
            if (f.width < g) {
                return 0;
            }
            let h = 45;
            let i = new Rect(0, 0, f.top, f.width, f.height);
            let j = new Rect(0, g, f.top, f.width, f.height);
            let k = b.ac(i, h);
            let l = b.ac(j, h);
            let m = true;
            for (let n = 0; n < k.length; n++) {
                if (PolygonUtil.a(l, k[n])) {
                    m = false;
                    break;
                }
            }
            if (!m) {
                h = 90;
            }
            return h;
        }
        y8() {
            for (let a = 0; a < this.axes.count; a++) {
                this.axes._inner[a].cq = true;
                this.axes._inner[a].h9(false);
            }
            this.nf(true, false, false);
            this.wx = false;
            for (let b = 0; b < this.axes.count; b++) {
                this.axes._inner[b].cq = true;
                this.axes._inner[b].h9(false);
            }
            this.nf(true, false, false);
        }
        get axes() {
            return this.v8;
        }
        y5(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (c != null) {
                        c.bo = null;
                        c.bi = null;
                        this.qp(c);
                        this.c8.dw(c);
                        c.rangeChanged = delegateRemove(c.rangeChanged, runOn(this, this.y7));
                        this.c8.dx(c);
                        if (c.de != null) {
                            for (let d of fromEnum(c.db())) {
                                d.rn(false);
                            }
                        }
                    }
                }
                if (this.axes.count == 0) {
                    this.qu();
                }
            }
            if (b.newItems != null) {
                for (let e of fromEn(b.newItems)) {
                    if (e != null) {
                        this.q9(e);
                        e.bo = this.actualSyncLink;
                        e.bi = this;
                        e.a5.a2();
                        this.c8.bo(e);
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.y7));
                        this.c8.bl(e);
                    }
                }
            }
            this.n5();
        }
        y6(a, b) {
            let c = new List$1(Series.$, 0);
            for (let d of fromEnum(this.axes)) {
                if (d.de != null) {
                    for (let e of fromEnum(d.db())) {
                        if (!c.contains(e)) {
                            c.add(e);
                        }
                    }
                }
                d.bo = null;
                d.bi = null;
                this.qp(d);
                this.c8.dw(d);
                d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.y7));
                this.c8.dx(d);
                this.qu();
            }
            for (let f of fromEnum(this.series)) {
                if (!c.contains(f)) {
                    c.add(f);
                }
            }
            for (let g of fromEnum(c)) {
                g.rn(false);
            }
        }
        y7(a, b) {
            let c = typeCast(Axis.$, a);
            if (c == null) {
                return;
            }
            this.n5();
            if (this.axisRangeChanged != null) {
                this.axisRangeChanged(this, new ChartAxisRangeChangedEventArgs(this, c, b.oldMinimumValue, b.minimumValue, b.oldMaximumValue, b.maximumValue));
            }
            if (c.aj != null) {
                c.aj.h5();
            }
            c.h5();
            let d = this.eh;
            if (typeCast(CategoryAxisBase.$, c) !== null) {
                d = true;
            }
            for (let e of fromEnum(c.db())) {
                e.gy = true;
                this.n5();
                e.rn(d);
            }
            if (c.bi != null) {
                for (let f of fromEnum(c.bi.series)) {
                    XamDataChart.za(c, d, f);
                }
            }
            for (let g of fromEnum(this.axes)) {
                if (g != c && g.aj != null && g.aj == c) {
                    g.h5();
                }
            }
        }
        static za(a, b, c) {
        }
        rf(a, b) {
            super.rf(a, b);
            if (this.axes == null) {
                return;
            }
            for (let c of fromEnum(this.axes)) {
                c.bo = this.actualSyncLink;
                c.bi = this;
            }
        }
        getFontInfo() {
            this.wm = this.wl.fo;
            return this.wm;
        }
        zf() {
            this.c8.ee();
            for (let a of fromEnum(this.axes)) {
                a.h9(false);
            }
            for (let b of fromEnum(this.series)) {
                b.ct.bl();
                b.rn(false);
            }
        }
        getFontBrush() {
            return this.wl.fw;
        }
        m8() {
            super.m8();
            let a = new List$1(Axis.$, 0);
            for (let b = 0; b < this.axes.count; b++) {
                a.add(this.axes._inner[b]);
            }
            for (let c = 0; c < a.count; c++) {
                this.axes.remove(a._inner[c]);
                if (typeCast(CategoryAxisBase.$, a._inner[c]) !== null) {
                    let d = a._inner[c];
                    this.qr(d.name, true);
                    d.itemsSource = null;
                }
                a._inner[c].hy(null, null);
            }
        }
        up() {
            return this.wl.fs;
        }
        fy() {
            return true;
        }
        ra() {
            super.ra();
            if (!this.fk) {
                return;
            }
            for (let a of fromEnum(this.axes)) {
                this.q9(a);
            }
        }
        es() {
            if (this.wy) {
                return true;
            }
            return this.wu();
        }
        wu() {
            for (let a = 0; a < this.series.count; a++) {
                if (this.series._inner[a].fr || this.series._inner[a].fn) {
                    return true;
                }
            }
            for (let b = 0; b < this.axes.count; b++) {
                if (this.axes._inner[b].b9 || this.axes._inner[b].cm) {
                    return true;
                }
            }
            return false;
        }
        c7() {
            return new XamDataChartView(this);
        }
        pr(a) {
            super.pr(a);
            this.wl = a;
        }
        qm() {
            for (let a = 0; a < this.v8.count; a++) {
                this.v8._inner[a].cq = true;
                this.v8._inner[a].h9(false);
            }
            super.qm();
        }
        get xn() {
            return this.xb;
        }
        set xn(a) {
            let b = this.xb;
            this.xb = a;
            if (this.xb != b) {
                this.wp = true;
                this.p8(XamDataChart.ya, b, this.xb);
            }
        }
        get xp() {
            return this.xd;
        }
        set xp(a) {
            let b = this.xd;
            this.xd = a;
            if (this.xd != b) {
                this.wp = true;
                this.p8(XamDataChart.yc, b, this.xd);
            }
        }
        get xo() {
            return this.xc;
        }
        set xo(a) {
            let b = this.xc;
            this.xc = a;
            if (this.xc != b) {
                this.wp = true;
                this.p8(XamDataChart.yb, b, this.xc);
            }
        }
        get xm() {
            return this.xa;
        }
        set xm(a) {
            let b = this.xa;
            this.xa = a;
            if (this.xa != b) {
                this.wp = true;
                this.p8(XamDataChart.x9, b, this.xa);
            }
        }
        get x1() {
            return this.xj;
        }
        set x1(a) {
            this.xj = a;
            this.y9();
        }
        get x3() {
            return this.xl;
        }
        set x3(a) {
            this.xl = a;
            this.y9();
        }
        get x2() {
            return this.xk;
        }
        set x2(a) {
            this.xk = a;
            this.y9();
        }
        get x0() {
            return this.xi;
        }
        set x0(a) {
            this.xi = a;
            this.y9();
        }
        vn(a) {
            let b = super.vn(a);
            if (a.isEmpty) {
                return Rect.empty;
            }
            if (this.xn == 0 && this.xp == 0 && this.xo == 0 && this.xm == 0) {
                return b;
            }
            if (this.xn + this.xo >= a.width || this.xp + this.xm >= a.height) {
                return b;
            }
            let c = new Rect(0, a.left + this.xn, a.top + this.xp, a.width - this.xn - this.xo, a.height - this.xp - this.xm);
            if (this.es()) {
                let d;
                if (c.width > c.height) {
                    let e = intDivide(truncate((c.width - c.height)), 2);
                    d = new Rect(0, c.left + e, c.top, c.height, c.height);
                }
                else {
                    let f = intDivide(truncate((c.height - c.width)), 2);
                    d = new Rect(0, c.left, c.top + f, c.width, c.width);
                }
                return d;
            }
            return c;
        }
        vt() {
            let a = this.v0;
            let b = this.v1;
            let c = this.vp;
            if (c.isEmpty || a.isEmpty) {
                return a;
            }
            if (c.containsRect(a)) {
                return a;
            }
            if (a.containsRect(c)) {
                return c;
            }
            return a;
        }
        x8() {
            return this.we.exportVisualData(this);
        }
        yn() {
            let cvd_ = this.x8();
            cvd_.scaleByViewport();
            return (cvd_.serialize());
        }
        p0() {
            super.p0();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                let c = 50;
                if (!isNaN_(b.aw.bh)) {
                    c = b.aw.bh;
                }
                b.d3 = c;
            }
        }
        qo() {
            super.qo();
            for (let a = 0; a < this.axes.count; a++) {
                let b = this.axes._inner[a];
                b.d3 = NaN;
                b.cq = true;
                b.h9(false);
            }
        }
        w9(a) {
            let b = new List$1(Axis.$, 0);
            for (let c of fromEnum(this.series)) {
                let d = c.av(a);
                if (d != null) {
                    b.add(d);
                }
            }
            return b;
        }
    }
    XamDataChart.$t = markType(XamDataChart, 'XamDataChart', SeriesViewer.$);
    XamDataChart.xv = 0;
    XamDataChart.xu = 0;
    XamDataChart.ya = "ActualPlotAreaMarginLeft";
    XamDataChart.yc = "ActualPlotAreaMarginTop";
    XamDataChart.yb = "ActualPlotAreaMarginRight";
    XamDataChart.x9 = "ActualPlotAreaMarginBottom";
    XamDataChart.$$p = markDep(DependencyProperty, PropertyMetadata, XamDataChart, 'p8', ['AlignsGridLinesToPixels:ws:zh', [0, true], 'AutoExpandMarginExtraPadding:xs:zi', [1, DeviceUtils.g(2)], 'AutoExpandMarginMaximumValue:xt:zj', [1, 60], 'AutoMarginAndAngleUpdateMode:v7:zk', [AutoMarginsAndAngleUpdateMode_$type, enumGetBox(AutoMarginsAndAngleUpdateMode_$type, 0)], 'ComputedPlotAreaMarginMode:wa:zl', [ComputedPlotAreaMarginMode_$type, enumGetBox(ComputedPlotAreaMarginMode_$type, 0)], 'DefaultAxisMajorStroke:z6:zm', [Brush.$, null], 'DefaultAxisMinorStroke:z7:zn', [Brush.$, null], 'DefaultAxisStroke:z8:zo', [Brush.$, null], 'GridMode:wc:zp', [GridMode_$type, enumGetBox(GridMode_$type, 2)], 'HorizontalZoomable:wv:zq', [0, false], 'InitialCloseGridlinesThreshold:xx:zr', [1, NaN], 'IsHorizontalZoomEnabled:ww:zs', [0, false], 'IsSquare:wy:zt', [0, false], 'IsVerticalZoomEnabled:wz:zu', [0, false], 'SeriesPlotAreaMarginHorizontalMode:wh:zv', [SeriesPlotAreaMarginHorizontalMode_$type, enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, 0)], 'SeriesPlotAreaMarginVerticalMode:wk:zw', [SeriesPlotAreaMarginVerticalMode_$type, enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, 0)], 'ShouldAutoExpandMarginForInitialLabels:w2:zx', [0, false], 'ShouldClipGridlines:w3:zy', [0, true], 'ShouldClipInitialCloseGridlines:w4:zz', [0, true], 'ShouldConsiderAutoRotationForInitialLabels:w5:z0', [0, false], 'ShouldSuppressAxisLabelTruncation:w6:z1', [0, false], 'SuppressAutoMarginAndAngleRecalculation:w7:z2', [0, false], 'VerticalZoomable:w8:z3', [0, false], 'WindowScaleHorizontal:x5:z4', [1, NaN], 'WindowScaleVertical:x6:z5', [1, NaN]]);
    return XamDataChart;
})();
/**
 * @hidden
 */
export let LabelPanelArranger = /*@__PURE__*/ (() => {
    class LabelPanelArranger extends Base {
        static e(a, b) {
            for (let c of fromEnum(a)) {
                let d = c.ad;
                let e = d.aj;
                e = LabelPanelArranger.a(c, d, e);
                let f = LabelPanelArranger.b(c);
                let g = 0;
                let h = 0;
                let i = 0;
                if (d.b8()) {
                    c.af.ac();
                    i = c.bh;
                }
                else {
                    i = c.bi(b);
                }
                g = i;
                h = i;
                if (c.ad.az != null && c.ad.az.visibility != 0) {
                    h = 0;
                    g = 0;
                }
                if (c.aq()) {
                    switch (f) {
                        case 0:
                            b.y = Math.max(0, b.top + h);
                            b.height = Math.max(0, b.height - h);
                            d.az.c = 0;
                            break;
                        case 4:
                            if (e != null && (c.bg - b.top < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                d.az.c = 5;
                            }
                            else {
                                d.az.c = 4;
                            }
                            break;
                        case 5:
                            if (e != null && (b.bottom - c.bg < h && typeCast(HorizontalAxisLabelPanel.$, c) !== null)) {
                                if (d.az != null) {
                                    d.az.c = 4;
                                }
                            }
                            else {
                                if (d.az != null) {
                                    d.az.c = 5;
                                }
                            }
                            break;
                        case 1:
                        default:
                            if (d.az != null) {
                                d.az.c = 1;
                            }
                            b.height = Math.max(0, b.height - h);
                            break;
                    }
                }
                if (typeCast(VerticalAxisLabelPanel.$, c) !== null) {
                    switch (f) {
                        case 3:
                            b.width = Math.max(0, b.width - g);
                            d.az.c = 3;
                            break;
                        case 6:
                            if (e != null && c.bg - b.left < g) {
                                d.az.c = 7;
                            }
                            else {
                                d.az.c = 6;
                            }
                            break;
                        case 7:
                            if (e != null && b.right - c.bg < g) {
                                d.az.c = 6;
                            }
                            else {
                                d.az.c = 7;
                            }
                            break;
                        case 2:
                        default:
                            if (d.az != null) {
                                d.az.c = 2;
                            }
                            b.x = Math.max(0, b.left + g);
                            b.width = Math.max(0, b.width - g);
                            break;
                    }
                }
                if (c.ad.b9) {
                    if (d.az != null) {
                        d.az.c = f;
                    }
                }
            }
            return b;
        }
        static a(a, b, c) {
            return b.ak();
        }
        static b(a) {
            if (a == null) {
                return 1;
            }
            else {
                let b = a.ad;
                if (b != null && b.az != null) {
                    let c = b.az.c;
                    if (!a.ay(c)) {
                        return a.ai();
                    }
                    return c;
                }
                else {
                    return a.ai();
                }
            }
        }
        static c(a, b, c, d) {
            let e = a.ad;
            let f = e.aj;
            f = LabelPanelArranger.a(a, e, f);
            let g = LabelPanelArranger.b(a);
            let h;
            let i = a.bi(c);
            let j = Math.max(0, i);
            let k = Math.max(0, i);
            if (a.ad != null && a.ad.az != null && a.ad.az.visibility == 1) {
                return;
            }
            switch (g) {
                case 3:
                    b.g = b.g - k;
                    b.d = b.d - k;
                    h = new Rect(0, b.g, c.top, k, c.height);
                    d(a, h);
                    break;
                case 2:
                    h = new Rect(0, b.f, c.top, k, c.height);
                    d(a, h);
                    b.f = b.f + k;
                    b.c = b.c + k;
                    break;
                case 7:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bg, c.top, k, c.height);
                    }
                    else {
                        b.d = b.d - k;
                        h = new Rect(0, b.d, c.top, k, c.height);
                    }
                    d(a, h);
                    break;
                case 6:
                    if (f != null) {
                        h = new Rect(0, b.f + a.bg - k, c.top, k, c.height);
                    }
                    else {
                        h = new Rect(0, b.c, c.top, k, c.height);
                        b.c = b.c + k;
                    }
                    d(a, h);
                    break;
                case 1:
                    b.a = b.a - j;
                    b.b = b.b - j;
                    h = new Rect(0, c.left, b.a, c.width, j);
                    d(a, h);
                    break;
                case 0:
                    h = new Rect(0, c.left, b.h, c.width, j);
                    d(a, h);
                    b.h = b.h + j;
                    b.e = b.e + j;
                    break;
                case 5:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bg, c.width, j);
                    }
                    else {
                        b.b = b.b - j;
                        h = new Rect(0, c.left, b.b, c.width, j);
                    }
                    d(a, h);
                    break;
                case 4:
                    if (f != null) {
                        h = new Rect(0, c.left, b.h + a.bg - j, c.width, j);
                    }
                    else {
                        h = new Rect(0, c.left, b.e, c.width, j);
                        b.e = b.e + j;
                    }
                    d(a, h);
                    break;
            }
            if (a.ad.b9) {
                h = new Rect(0, c.left, c.top, c.width, c.height);
                d(a, h);
            }
        }
        static d(a, b, c, d) {
            let e = new List$1(AxisLabelPanelBase.$, 0);
            let f = new List$1(AxisLabelPanelBase.$, 0);
            for (let g of fromEnum(a)) {
                let h = LabelPanelArranger.b(g);
                switch (h) {
                    case 1:
                    case 2:
                    case 0:
                    case 3:
                        f.add(g);
                        break;
                    case 5:
                    case 6:
                    case 4:
                    case 7:
                        e.add(g);
                        break;
                }
            }
            for (let i of fromEnum(f)) {
                LabelPanelArranger.c(i, b, c, d);
            }
            for (let j of fromEnum(e)) {
                LabelPanelArranger.c(j, b, c, d);
            }
        }
    }
    LabelPanelArranger.$t = markType(LabelPanelArranger, 'LabelPanelArranger');
    return LabelPanelArranger;
})();
/**
 * @hidden
 */
export let ChartContentManager = /*@__PURE__*/ (() => {
    class ChartContentManager extends DependencyObject {
        constructor(a) {
            super();
            this.l = null;
            this.r = new Dictionary$2(ChartContentType_$type, Dictionary$2.$.specialize(DependencyObject.$, ContentInfo.$), 0);
            this.t = new List$1(Series.$, 0);
            this.m = false;
            this.v = null;
            this.q = false;
            this.o = false;
            this.n = false;
            this.p = false;
            this.p = true;
            this.o = true;
            this.n = true;
            this.r.addItem(0, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(1, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.r.addItem(2, new Dictionary$2(DependencyObject.$, ContentInfo.$, 0));
            this.l = a;
        }
        get u() {
            return this.t;
        }
        set u(a) {
            this.t = a;
        }
        k(a, b, c) {
            let d = this.j(a, b);
            d.a = c;
            return d;
        }
        ad(a, b) {
            let c = this.r.item(a);
            if (c.containsKey(b)) {
                c.removeItem(b);
            }
            let d = typeCast(Series.$, b);
            if (d != null && this.u.contains(d)) {
                this.u.remove(d);
            }
        }
        aa(a) {
            let b = this.v;
            this.v = a;
            if (this.m && b == null && this.v != null) {
                this.v.setTimeout(runOn(this, this.w), 0);
            }
        }
        z() {
            if (!this.m) {
                this.m = true;
                if (this.v != null) {
                    this.v.setTimeout(runOn(this, this.w), 0);
                }
                else {
                }
            }
        }
        ac(a, b, c, d) {
            let e = c;
            if (!e.c) {
                e.b = d;
            }
            else {
                if (!d) {
                    e.b = false;
                }
            }
            if (!e.c) {
                e.c = true;
                this.z();
            }
        }
        j(a, b) {
            let c = this.r.item(a);
            let d = null;
            if (!((() => { let e = c.tryGetValue(b, d); d = e.p1; return e.ret; })())) {
                d = new ContentInfo();
                d.h = b;
                c.addItem(b, d);
                let e = typeCast(Series.$, b);
                if (e != null && !this.u.contains(e)) {
                    if (e.e9) {
                        let f = e.bn();
                        let g = this.u.indexOf(f) + 1;
                        g += e.j5();
                        if (this.u.count <= g || f.ka() == 0 || g == -1) {
                            this.u.add(e);
                        }
                        else {
                            this.u.insert(g, e);
                        }
                    }
                    else {
                        this.u.add(e);
                    }
                }
            }
            return d;
        }
        y() {
            this.w();
        }
        w() {
            if (this.l == null || this.r == null) {
                return;
            }
            if (!this.m) {
                return;
            }
            this.m = false;
            if (this.l != null) {
                this.l.mx();
            }
            for (let a of fromEnum(this.s())) {
                a.f();
            }
            if (!this.m) {
                this.l.p9();
            }
        }
        *_s() {
            let a = null;
            a = this.r.item(1);
            for (let b of fromEnum(a.values)) {
                yield b;
            }
            a = this.r.item(0);
            let c = new List$1(ContentInfo.$, 0);
            for (let d of fromEnum(this.u)) {
                if (!d.eq) {
                    c.add(a.item(d));
                }
            }
            for (let e of fromEnum(this.u)) {
                if (e.eq) {
                    c.add(a.item(e));
                }
            }
            for (let f of fromEnum(c)) {
                yield f;
            }
            a = this.r.item(2);
            for (let g of fromEnum(a.values)) {
                yield g;
            }
        }
        s() {
            return toEnum(() => this._s());
        }
        x(a) {
            for (let b of fromEnum(this.r.item(1).values)) {
                b.h.hu(a);
            }
            for (let c of fromEnum(this.r.item(1).values)) {
                c.f();
            }
            for (let d of fromEnum(this.r.item(1).values)) {
                d.h.ij();
            }
        }
        ae(a, b, c, d) {
            c.i = d;
        }
        ab(a, b) {
            if (!b.e) {
                b.e = true;
                this.z();
            }
        }
    }
    ChartContentManager.$t = markType(ChartContentManager, 'ChartContentManager', DependencyObject.$);
    return ChartContentManager;
})();
/**
 * @hidden
 */
export let ContentInfo = /*@__PURE__*/ (() => {
    class ContentInfo extends Base {
        constructor() {
            super(...arguments);
            this.h = null;
            this.a = null;
            this.b = false;
            this.c = false;
            this.i = null;
            this.e = false;
        }
        get d() {
            if (this.i.isEmpty) {
                return false;
            }
            if (this.i.width == 0 && this.i.height == 0) {
                return false;
            }
            return true;
        }
        g() {
            if (this.e && typeCast(Axis.$, this.h) !== null) {
                this.e = false;
                let a = this.c;
                this.c = true;
                let b = this.h.c2(true);
                if (!b) {
                    this.c = a;
                }
            }
        }
        f() {
            this.g();
            if (typeCast(Axis.$, this.h) !== null) {
                let a = typeCast(Axis.$, this.h);
                if (a.aj != null) {
                    let b = a.aj;
                    if (b.a6 != null && b.a6.e) {
                        b.a6.g();
                    }
                }
            }
            if (this.c) {
                this.c = false;
                this.a(this.b);
                this.b = false;
            }
        }
    }
    ContentInfo.$t = markType(ContentInfo, 'ContentInfo');
    return ContentInfo;
})();
/**
 * @hidden
 */
export let Series = /*@__PURE__*/ (() => {
    class Series extends Control {
        constructor() {
            super();
            this.ct = null;
            this.ke = 0;
            this.wc = null;
            this.eu = false;
            this.jw = null;
            this.ca = null;
            this.dn = null;
            this.ba = null;
            this.a8 = null;
            this.da = null;
            this.sp = null;
            this.hf = new Dictionary$2(String_$type, String_$type, 0);
            this.he = new Dictionary$2(String_$type, FastReflectionHelper.$, 0);
            this.kg = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.d5 = false;
            this.transitionOutCompleted = null;
            this.renderRequested = null;
            this.br = 1;
            this.cb = new SeriesLayerPropertyOverlayCollection();
            this.b2 = null;
            this.dt = false;
            this.renderValid = null;
            this.gz = false;
            this.g2 = false;
            this.gi = false;
            this.cs = null;
            this.a0 = null;
            this.dw = true;
            this.ht = new Stack$1(String_$type);
            this.gp = false;
            this.gq = false;
            this.dx = false;
            this.dy = false;
            this.ar = null;
            this.as = null;
            this.d4 = false;
            this.c0 = null;
            this.c8 = null;
            this.hw = null;
            this.bg = null;
            this.dm = null;
            this.jt = null;
            this.sm = null;
            this.a3 = null;
            this.cz = 0;
            this.cy = 0;
            this.d8 = false;
            this.dv = false;
            this.h0 = DeviceUtils.g(1);
            this.h4 = NaN;
            this.h1 = NaN;
            this.h2 = NaN;
            this.h3 = NaN;
            this.va = null;
            this.vc = null;
            this.vd = BrushUtil.h(255, 255, 0, 0);
            this.vb = BrushUtil.h(255, 255, 0, 0);
            this.ij = DeviceUtils.g(2);
            this.bu = 1;
            this.cl = 1;
            this.ck = 1;
            this.hy = 0.2;
            this.hz = 0.2;
            this.d0 = false;
            this.du = false;
            this.ed = false;
            this.hs = null;
            this.ds = false;
            this.cu = 1;
            this.ce = 1;
            this.kj = null;
            this.d7 = false;
            this.bo = new SeriesComponentsForView();
            this.dz = false;
            this.k0 = null;
            this.jv = null;
            this._coercionMethods = null;
            this.dr = false;
            this.by = 0;
            this.bx = 0;
            this.dq = null;
            this.v0 = { $type: Point_$type, x: NaN, y: NaN };
            this.h5 = NaN;
            this.h6 = NaN;
            this.hj = new Dictionary$2(SeriesLayer.$, Series.$, 0);
            this.hp = new List$1(Series.$, 0);
            this.b3 = null;
            this.b6 = new SeriesLayerCollection();
            this.b5 = new SeriesLayerCollection();
            this.b4 = new SeriesLayerCollection();
            this.hm = new HashSet$1(String_$type, 0);
            this.bl = null;
            this.hk = new Dictionary$2(String_$type, Number_$type, 0);
            this.hg = new Dictionary$2(String_$type, Stack$1.$.specialize(Boolean_$type), 0);
            this.a7 = null;
            DVContainer.instance.registerIfLoaded("AnnotationFactoryManager");
            DVContainer.instance.registerIfLoaded("InteractivityFactoryManager");
            DVContainer.instance.registerIfLoaded("VisualDataFactoryManager");
            this.ke = Series.jy++;
            this.gy = true;
            this.wc = Rect.empty;
            this.ct = this.cq();
            this.ct.bx = Rect.empty;
            this.qx(this.ct);
            this.ct.n = true;
            this.ct.au();
            this.ct.n = false;
            this.ab = Series.$;
            this.ca = new SeriesLayerManager();
            this.ca.a = this;
            this.dm = (a, b) => {
                if (this.c9 == null || !this.c9.ey) {
                    this.sl(b.oldRect, b.newRect);
                }
            };
            this.bg = (a, b) => this.q5(a, b.propertyName, b.oldValue, b.newValue);
            this.jt = (a, b) => {
                if (this.c9 != null) {
                    this.gy = true;
                    this.c9.n6();
                }
                this.o9(b.action, b.position, b.count, b.propertyName);
            };
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.q5(a, b.propertyName, b.oldValue, b.newValue));
            let a = this.b6;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.os));
            let b = this.b6;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.or));
            let c = this.b5;
            c.collectionResetting = delegateCombine(c.collectionResetting, runOn(this, this.oo));
            let d = this.b5;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.on));
            let e = this.b4;
            e.collectionResetting = delegateCombine(e.collectionResetting, runOn(this, this.om));
            let f = this.b4;
            f.collectionChanged = delegateCombine(f.collectionChanged, runOn(this, this.ol));
            let g = this.cb;
            g.collectionResetting = delegateCombine(g.collectionResetting, runOn(this, this.oq));
            let h = this.cb;
            h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.op));
            this.sp = new Canvas();
            this.da = new DoubleAnimator(0, 1, this.kb);
            let i = this.da;
            i.propertyChanged = delegateCombine(i.propertyChanged, runOn(this, this.ot));
            this.g(Series.ux, ((() => {
                let $ret = new Binding(1, "Visibility");
                $ret.d = this;
                return $ret;
            })()));
            this.bz = this.b0();
            this.cv = this.cw();
        }
        ga() {
            if (this.c9 != null && this.c9.fx()) {
                return true;
            }
            return false;
        }
        get_dataLegendKey() {
            if (!stringIsNullOrEmpty(this.name)) {
                return this.name;
            }
            return "Index___" + this.index.toString();
        }
        get dataLegendKey() {
            return this.get_dataLegendKey();
        }
        get group() {
            if (this.bl != null && !stringIsNullOrEmpty(this.mh)) {
                return this.mh;
            }
            if (!stringIsNullOrEmpty(this.l1)) {
                return this.l1;
            }
            return this.ma();
        }
        get parentKey() {
            return this.bl != null ? this.bl.dataLegendKey : this.dataLegendKey;
        }
        get parentTitle() {
            if (this.bl != null) {
                return this.bl.title.toString();
            }
            if (this.title != null) {
                return this.title.toString();
            }
            return "SeriesNoTitle";
        }
        get jx() {
            return this.jw;
        }
        set jx(a) {
            this.jw = a;
            this.da.u(this.jw);
        }
        provideRenderer(a) {
            this.jx = a;
        }
        nc() {
            return this.a9.a$u(this);
        }
        j4() {
            return this.bl.actualLayers.indexOf(this.b3);
        }
        or(a, b) {
            this.ca.h(this, this.b6, b);
        }
        os(a, b) {
            this.ca.j(this, this.b6, b);
        }
        on(a, b) {
            this.ca.e(this, this.b6, b);
        }
        oo(a, b) {
            this.ca.f(this, this.b6, b);
        }
        ol(a, b) {
            this.ca.c(this, this.b6, b);
            if (this.c9 != null) {
                this.c9.nz();
            }
        }
        om(a, b) {
            this.ca.d(this, this.b6, b);
            if (this.c9 != null) {
                this.c9.nz();
            }
        }
        op(a, b) {
            switch (b.action) {
                case 0:
                    if (b.newItems != null) {
                        for (let c = 0; c < b.newItems.count; c++) {
                            let d = b.newItems.item(c);
                            d.o = true;
                            this.qr(c + b.newStartingIndex, d);
                        }
                    }
                    break;
                case 1:
                    if (b.oldItems != null) {
                        for (let e = 0; e < b.oldItems.count; e++) {
                            let f = b.oldItems.item(e);
                            this.qs(f, b.oldStartingIndex);
                        }
                    }
                    break;
                case 2:
                    if (b.oldItems != null) {
                        for (let g = 0; g < b.oldItems.count; g++) {
                            let h = b.oldItems.item(g);
                            this.qs(h, b.oldStartingIndex);
                        }
                    }
                    if (b.newItems != null) {
                        for (let i = 0; i < b.newItems.count; i++) {
                            let j = b.newItems.item(i);
                            this.qr(i + b.newStartingIndex, j);
                        }
                    }
                    break;
                case 4:
                    this.qm();
                    let k = 0;
                    for (let l of fromEnum(this.cb)) {
                        let m = l;
                        this.qr(k, m);
                        k++;
                    }
                    break;
            }
        }
        qm() {
            let a = this.b2;
            if (a != null) {
                let b = new List$1(SeriesLayerPropertyOverlay.$, 0);
                let c = new List$1(SeriesLayerPropertyOverlay.$, 0);
                for (let d of fromEnum(a.m)) {
                    if (d.o) {
                        b.add(d);
                    }
                }
                for (let e of fromEnum(b)) {
                    a.m.remove(e);
                    if (e.k != null) {
                        c.add(e.k);
                    }
                }
                for (let f of fromEnum(c)) {
                    a.m.add(f);
                }
            }
        }
        qs(a, b) {
            let c = this.b2;
            if (c != null) {
                let d = c.m.indexOf(a);
                if (d >= 0) {
                    let e = c.m._inner[d];
                    c.m.removeAt(d);
                    if (e.k != null) {
                        c.m.insert(d, a);
                    }
                }
            }
        }
        qr(a, b) {
            let c = this.b2;
            if (c != null) {
                let d = new Dictionary$2(String_$type, SeriesLayerPropertyOverlay.$, 0);
                for (let e of fromEnum(c.m)) {
                    d.addItem(e.ad, b);
                }
                if (d.containsKey(b.ad)) {
                    b.k = d.item(b.ad);
                    c.m.remove(d.item(b.ad));
                }
                c.m.add(b);
            }
        }
        oq(a, b) {
            this.qm();
        }
        sf(a) {
        }
        se(a) {
        }
        sg(a) {
        }
        ot(a, b) {
            this.jo = this.da.o;
        }
        get dp() {
            if (this.dn == null) {
                this.dn = new SRProvider(this.jx);
            }
            if (this.dn.l == null) {
                if (this.jx != null) {
                    this.dn.l = this.jx;
                }
                else if (this.c9 != null && this.c9.c8 != null && this.c9.c8.j != null && this.c9.c8.j.ae != null) {
                    this.dn.l = this.c9.c8.j.ae;
                }
            }
            return this.dn;
        }
        get bb() {
            if (this.ba == null) {
                this.ba = DVContainer.instance.createInstance(ISeriesVisualDataManager_$type, () => this.dp.q);
            }
            return this.ba;
        }
        get hl() {
            return this.a9.a$j;
        }
        get a9() {
            if (this.a8 == null) {
                this.a8 = DVContainer.instance.createInstance(ISeriesInteractionManager_$type, () => this.dp.n);
                if (this.toolTip != null) {
                    this.a8.a$as(this, this.toolTip);
                }
            }
            return this.a8;
        }
        get fg() {
            return DVContainer.instance.checkLoaded("InteractivityFactoryManager");
        }
        qx(a) {
        }
        qu() {
            this.ou(this.a4, this.a4);
            if (this.dl == null && this.c1 != null && this.itemsSource != null) {
                this.dl = this.c1.getFastItemsSource(this.itemsSource);
            }
            this.ct.ax();
        }
        qv() {
            this.o2();
            if (this.dl != null && this.c1 != null && this.itemsSource != null) {
                this.dl = this.c1.releaseFastItemsSource(this.itemsSource);
            }
            this.ct.ay();
        }
        cr() {
            return this.cq();
        }
        cq() {
            return new SeriesView(this);
        }
        g9() {
            return false;
        }
        ko(a, b) {
            return null;
        }
        mb(a) {
            return null;
        }
        onLegendItemOver(a) {
        }
        onLegendItemPointerUp(a) {
        }
        onLegendItemPointerDown(a) {
        }
        onLegendItemEnter(a) {
            if (this.fc && this.fg && this.c9 != null && (this.c9.bd == 0 || this.c9.bd == 2) && this.bv != 1) {
                this.a9.a$ab(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, false, a == null, this == this.c9.bq, false);
            }
        }
        onLegendItemLeave(a) {
            if (this.fc && this.fg && this.c9 != null && (this.c9.bd == 0 || this.c9.bd == 2) && this.bv != 1) {
                this.a9.a$ab(this, a, { $type: Point_$type, x: NaN, y: NaN }, false, true, true, a == null, this == this.c9.bq, a != null);
            }
        }
        nb(a) {
            if (!this.hf.containsKey(a)) {
                let b = a.substr(0, 1).toUpperCase() + a.substr(1);
                this.hf.addItem(a, b);
            }
            return this.hf.item(a);
        }
        kp(a, b, c) {
            let d = null;
            if (!this.he.containsKey(b)) {
                d = new FastReflectionHelper(false, c);
                this.he.addItem(b, d);
            }
            else {
                d = this.he.item(b);
            }
            d.propertyName = c;
            let e = d.getPropertyValue(a);
            if (this.expectFunctions) {
                let func_ = e;
                let item_ = a;
                if ((typeof func_ === 'function')) {
                    e = func_.apply(item_);
                }
            }
            return e;
        }
        ip(a) {
            return this.j1(a);
        }
        j3(a) {
            return -1;
        }
        get_fq() {
            return false;
        }
        get fq() {
            return this.get_fq();
        }
        az() {
            return null;
        }
        j1(a) {
            return -1;
        }
        wm() {
            let a = 1;
            let b = 1;
            if (this.c9 != null) {
                a = this.c9.b0;
                b = this.c9.b2;
            }
            return this.wn(a, b);
        }
        wo(a, b) {
            return this.wn(a, b);
        }
        wn(a, b) {
            return new Thickness(1, 0, 0, 0, 0);
        }
        ci() {
            return 1;
        }
        cj() {
            return 1;
        }
        kl(a) {
            return null;
        }
        ku(a, b) {
            return a.kl(b);
        }
        dg(a, b, c, d) {
            return a.de(b, c, d);
        }
        dh(a, b, c, d) {
            return a.df(b, c, d);
        }
        j0() {
            return -1;
        }
        j5() {
            return -1;
        }
        ka() {
            return -1;
        }
        get container() {
            return this.c9;
        }
        get hasSubItems() {
            return this.ef();
        }
        ef() {
            if (this.d0 && this.hs != null) {
                return true;
            }
            return false;
        }
        forSubItems(a) {
            this.py(a);
        }
        py(a) {
            if (this.d0 && this.hs != null) {
                for (let b of fromEnum(this.hs)) {
                    a(b);
                }
            }
        }
        pz(a) {
        }
        get ee() {
            return this.b4.count > 0;
        }
        px(a) {
            for (let b = 0; b < this.hp.count; b++) {
                let c = this.hp._inner[b];
                if (!a(c)) {
                    break;
                }
            }
        }
        na() {
            return null;
        }
        vq() {
            return this.u9;
        }
        vr() {
            return this.vp;
        }
        resolveLegendIndex() {
            return this.index;
        }
        bn() {
            return null;
        }
        get_eq() {
            return false;
        }
        get eq() {
            return this.get_eq();
        }
        get_en() {
            return false;
        }
        get en() {
            return this.get_en();
        }
        get_em() {
            return false;
        }
        get em() {
            return this.get_em();
        }
        get_ep() {
            return false;
        }
        get ep() {
            return this.get_ep();
        }
        get_eo() {
            return true;
        }
        get eo() {
            return this.get_eo();
        }
        get_er() {
            return false;
        }
        get er() {
            return this.get_er();
        }
        get_isVertical() {
            return false;
        }
        get isVertical() {
            return this.get_isVertical();
        }
        get_e9() {
            return false;
        }
        get e9() {
            return this.get_e9();
        }
        get_et() {
            return false;
        }
        get et() {
            return this.get_et();
        }
        get_es() {
            return false;
        }
        get es() {
            return this.get_es();
        }
        get_ei() {
            return false;
        }
        get ei() {
            return this.get_ei();
        }
        get_f3() {
            return false;
        }
        get f3() {
            return this.get_f3();
        }
        get_fi() {
            return false;
        }
        get fi() {
            return this.get_fi();
        }
        get_fh() {
            return false;
        }
        get fh() {
            return this.get_fh();
        }
        get_fy() {
            return false;
        }
        get fy() {
            return this.get_fy();
        }
        get_ex() {
            return false;
        }
        get ex() {
            return this.get_ex();
        }
        get_ev() {
            return false;
        }
        get ev() {
            return this.get_ev();
        }
        get_f4() {
            return false;
        }
        get f4() {
            return this.get_f4();
        }
        get_fp() {
            return false;
        }
        get fp() {
            return this.get_fp();
        }
        get_fo() {
            return false;
        }
        get fo() {
            return this.get_fo();
        }
        get_fm() {
            return false;
        }
        get fm() {
            return this.get_fm();
        }
        get_fl() {
            return false;
        }
        get fl() {
            return this.get_fl();
        }
        get_f1() {
            return false;
        }
        get f1() {
            return this.get_f1();
        }
        get_fz() {
            return false;
        }
        get fz() {
            return this.get_fz();
        }
        get_fw() {
            return false;
        }
        get fw() {
            return this.get_fw();
        }
        get_fn() {
            return false;
        }
        get fn() {
            return this.get_fn();
        }
        get_fu() {
            return false;
        }
        get fu() {
            return this.get_fu();
        }
        get_fr() {
            return false;
        }
        get fr() {
            return this.get_fr();
        }
        get_isStacked() {
            return false;
        }
        get isStacked() {
            return this.get_isStacked();
        }
        get_e4() {
            return false;
        }
        get e4() {
            return this.get_e4();
        }
        get_fs() {
            return false;
        }
        get fs() {
            return this.get_fs();
        }
        get_ew() {
            return false;
        }
        get ew() {
            return this.get_ew();
        }
        get_fa() {
            return false;
        }
        get fa() {
            return this.get_fa();
        }
        get_fv() {
            return false;
        }
        get fv() {
            return this.get_fv();
        }
        get_isValueOverlay() {
            return false;
        }
        get isValueOverlay() {
            return this.get_isValueOverlay();
        }
        get_fd() {
            return this.bl != null;
        }
        get fd() {
            return this.get_fd();
        }
        get_isSummarizationSupported() {
            return !this.isValueOverlay;
        }
        get isSummarizationSupported() {
            return this.get_isSummarizationSupported();
        }
        get isLayer() {
            return this.bl != null;
        }
        bm() {
            return null;
        }
        get_eg() {
            return false;
        }
        get eg() {
            return this.get_eg();
        }
        get_e7() {
            return false;
        }
        get e7() {
            return this.get_e7();
        }
        get_e6() {
            return false;
        }
        get e6() {
            return this.get_e6();
        }
        get_e5() {
            return false;
        }
        get e5() {
            return this.get_e5();
        }
        get_e8() {
            return false;
        }
        get e8() {
            return this.get_e8();
        }
        get_ez() {
            return false;
        }
        get ez() {
            return this.get_ez();
        }
        get_e0() {
            return false;
        }
        get e0() {
            return this.get_e0();
        }
        im(a, b, c, d, e) {
            return Number.POSITIVE_INFINITY;
        }
        io(a, b, c, d, e, f, g) {
            return this.a9.a$m(this, a, b, c, d, e, f, g);
        }
        get_hb() {
            return false;
        }
        get hb() {
            return this.get_hb();
        }
        i5(a, b, c, d, e, f, g, h) {
            return this.a9.a$p(this, a, b, c, d, e, f, g, h);
        }
        it(a, b, c, d, e, f, g, h) {
            return this.a9.a$o(this, a, b, c, d, e, f, g, h);
        }
        j9(a, b, c, d, e) {
            return this.a9.a$r(this, a, b, c, d, e);
        }
        is(a) {
            return (a ? 10 : 3);
        }
        aj(a) {
            return null;
        }
        ak(a) {
            return null;
        }
        gt(a, b) {
            return this.a9.a$f(this, a, b);
        }
        am(a, b, c, d, e, f) {
            return this.a9.a$b(this, a, b, c, d, e, f);
        }
        al(a, b, c, d, e, f) {
            return this.a9.a$a(this, a, b, c, d, e, f);
        }
        gv(a, b, c) {
            return this.a9.a$g(this, a, b, c);
        }
        gw(a, b) {
            return this.a9.a$h(this, a, b);
        }
        j7(a, b, c, d, e) {
            return this.a9.a$q(this, a, b, c, d, e);
        }
        ir(a, b) {
            return this.a9.a$n(this, a, b);
        }
        j8(a, b) {
            return -1;
        }
        j6(a, b) {
            return -1;
        }
        i3(a, b, c) {
            return NaN;
        }
        v6(a, b, c) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        wh(a) {
            return Rect.empty;
        }
        an(a) {
            let b = this.wh(a);
            if (!b.isEmpty) {
                let c = new Array(1);
                c[0] = b;
                return c;
            }
            return null;
        }
        wi(a) {
            return this.wh(this.wb(a));
        }
        ao(a) {
            return this.an(this.wb(a));
        }
        aq(a, b) {
            return null;
        }
        wj(a) {
            return Rect.empty;
        }
        wk(a) {
            return this.wj(this.wb(a));
        }
        gx(a, b) {
            return this.a9.a$i(this, a, b);
        }
        v8(a, b, c, d, e, f, g, h, i) {
            return this.a9.a$au(this, a, b, c, d, e, f, g, h, i);
        }
        iz(a, b, c) {
            return this.i3(a, b, c);
        }
        v2(a, b, c) {
            return this.v6(a, b, c);
        }
        i1(a, b, c) {
            return this.i3(a, b, c);
        }
        v4(a, b, c) {
            return this.v6(a, b, c);
        }
        v7(a, b, c) {
            let d = this.wb(a);
            return this.v6(d, b, c);
        }
        i4(a, b, c) {
            let d = this.wb(a);
            return this.i3(d, b, c);
        }
        v3(a, b, c) {
            let d = this.wb(a);
            return this.v2(d, b, c);
        }
        i0(a, b, c) {
            let d = this.wb(a);
            return this.iz(d, b, c);
        }
        v5(a, b, c) {
            let d = this.wb(a);
            return this.v4(d, b, c);
        }
        i2(a, b, c) {
            let d = this.wb(a);
            return this.i1(d, b, c);
        }
        j2(a) {
            let b = this.wb(a);
            return this.j1(b);
        }
        iu() {
            return 0;
        }
        static pk(a, b, c) {
            if (b != null) {
                b.c8.j.ae.getExternal(a, b.c8.j.ae.rootWrapper, b.c8.j.ae.getExternal(b, null, null));
            }
            let d = a;
        }
        iq(a) {
            let b = this.wb(a);
            return this.ip(b);
        }
        km(a) {
            let b = this.wb(a);
            return this.kl(b);
        }
        ox(a, b) {
            a.kg = b;
        }
        ky(a) {
            return a.kg;
        }
        at(a) {
            if (a && this.ar != null) {
                return this.ar;
            }
            if (this.as != null) {
                return this.as;
            }
            return this.kg;
        }
        d9(a, b, c, d) {
            return false;
        }
        jb(a) {
            let b = this.mc();
            if (b == null) {
                return NaN;
            }
            if (a.content == null) {
                return NaN;
            }
            if (a.content.item == null) {
                return NaN;
            }
            return FastItemColumn.i(this.ko(a.content.item, b));
        }
        ja(a) {
            let b = this.mc();
            if (b == null) {
                return NaN;
            }
            if (a == null) {
                return NaN;
            }
            return FastItemColumn.i(this.ko(a, b));
        }
        mc() {
            return null;
        }
        i6(a, b) {
            return NaN;
        }
        ap(a) {
            return [NaN, NaN];
        }
        v9(a) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        wa(a) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        raisePropertyChanged(a, b, c) {
            this.r3(a);
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            c = this.k1(a, b, c);
            if (this.propertyUpdated != null) {
                if (a == Series.$$p[19] && b != null && c != null) {
                    this.d5 = true;
                }
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
                if (a == Series.$$p[19] && b != null && c != null) {
                    this.d5 = false;
                }
            }
            this.r5(a);
        }
        k1(a, b, c) {
            this.hm.add_1(a);
            if (this.ea) {
                c = this.kw(a, b, c);
            }
            return c;
        }
        kw(a, b, c) {
            if (this.gk(a)) {
                return c;
            }
            for (let d = 0; d < this.hp.count; d++) {
                let e = this.hp._inner[d];
                let f = e.b3;
                let g = this.tg(a);
                if (g == null) {
                    continue;
                }
                c = f.ai(this, e, g, c);
            }
            return c;
        }
        tg(a) {
            if (Series.hd.containsKey(a) && Series.hd.item(a).containsKey(getInstanceType(this))) {
                return Series.hd.item(a).item(getInstanceType(this));
            }
            let b = DependencyProperty.h(a, getInstanceType(this));
            if (b == null) {
                return null;
            }
            if (!Series.hd.containsKey(a)) {
                Series.hd.addItem(a, new Dictionary$2(Type.$, DependencyProperty.$, 0));
            }
            Series.hd.item(a).addItem(getInstanceType(this), b);
            return b;
        }
        get_hasMarkers() {
            return false;
        }
        get hasMarkers() {
            return this.get_hasMarkers();
        }
        get_ej() {
            return false;
        }
        get ej() {
            return this.get_ej();
        }
        p2() {
        }
        p3() {
            this.p2();
        }
        vh(a) {
            if (this.c9 == null) {
                return this.u3;
            }
            let b = this.c9.ur(this.index + a);
            b = this.vn(b);
            return b;
        }
        vn(a) {
            if (this.actualLayers != null && this.actualLayers.count > 0) {
                let b = true;
                for (let c = 0; c < this.actualLayers.count; c++) {
                    let d = this.actualLayers._inner[c];
                    if (!d.target.ft) {
                        b = false;
                    }
                }
                if (!b) {
                    return a;
                }
                a = BrushUtil.q(a, this.h8);
                return a;
            }
            return a;
        }
        vk(a) {
            if (this.c9 == null) {
                return this.u3;
            }
            let b = this.c9.ux(this.index + a);
            b = this.vn(b);
            return b;
        }
        vi(a) {
            if (this.c9 == null) {
                return this.u3;
            }
            let b = this.c9.uv(this.index + a);
            b = this.vn(b);
            return b;
        }
        vj(a) {
            if (this.c9 == null) {
                return this.u7;
            }
            let b = this.c9.uw(this.index + a);
            b = this.vn(b);
            return b;
        }
        vf() {
            return null;
        }
        vg() {
            return null;
        }
        st() {
            return null;
        }
        il() {
            return NaN;
        }
        wb(a) {
            let b = this.c9 != null ? this.c9.vo : this.ct.bx;
            let c = this.ct.by;
            let d = this.ct.getEffectiveViewport();
            let e = { $type: Point_$type, x: ViewportUtils.b(a.x, c, b, d), y: ViewportUtils.g(a.y, c, b, d) };
            return e;
        }
        v1(a) {
            let b = this.c9 != null ? this.c9.vo : this.ct.bx;
            let c = this.ct.by;
            let d = this.ct.getEffectiveViewport();
            let e = ViewportUtils.e(a.x, c, b, d);
            let f = ViewportUtils.i(a.y, c, b, d);
            return { $type: Point_$type, x: e, y: f };
        }
        kv(a, b) {
            let c = this.ct.c(a);
            let d = c != null ? c.item : null;
            if (d == null) {
                let e = this.wb(b);
                d = this.kl(e);
            }
            return d;
        }
        gb(a) {
            return false;
        }
        ax(a) {
            return new AxisRange(NaN, NaN);
        }
        ay(a) {
            return new AxisRange(NaN, NaN);
        }
        aw(a, b, c) {
            this.pu();
            if (!this.isVertical) {
                if (this.id == 0 && this.ih == 0) {
                    return a;
                }
                let d = new ScalerParams(0, c, this.c9.v0, b.ch, this.getEffectiveViewport());
                d.b = this.iw();
                let e = b.ek(a.c, d);
                let f = b.ek(a.b, d);
                if (b.ch) {
                    f += this.id;
                    e -= this.ih;
                }
                else {
                    f -= this.ih;
                    e += this.id;
                }
                let g = b.en(e, d);
                let h = b.en(f, d);
                return new AxisRange(g, h);
            }
            else {
                if (this.ie == 0 && this.ig == 0) {
                    return a;
                }
                let i = new ScalerParams(0, c, this.c9.v0, b.ch, this.getEffectiveViewport());
                i.b = this.iw();
                let j = b.ek(a.c, i);
                let k = b.ek(a.b, i);
                if (!b.ch) {
                    k += this.ig;
                    j -= this.ie;
                }
                else {
                    k -= this.ie;
                    j += this.ig;
                }
                let l = b.en(j, i);
                let m = b.en(k, i);
                return new AxisRange(l, m);
            }
        }
        pu() {
            if (isNaN_(this.ih)) {
                let a = this.wo(1, 1);
                this.ih = a.top;
                if (isNaN_(this.ih)) {
                    this.ih = 0;
                }
            }
            if (isNaN_(this.id)) {
                let b = this.wo(1, 1);
                this.id = b.bottom;
                if (isNaN_(this.id)) {
                    this.id = 0;
                }
            }
            if (isNaN_(this.ie)) {
                let c = this.wo(1, 1);
                this.ie = c.left;
                if (isNaN_(this.ie)) {
                    this.ie = 0;
                }
            }
            if (isNaN_(this.ig)) {
                let d = this.wo(1, 1);
                this.ig = d.right;
                if (isNaN_(this.ig)) {
                    this.ig = 0;
                }
            }
        }
        rn(a) {
            this.gp = false;
            if (this.c9 != null) {
                this.c9.ar.ac(0, this, this.a0, a);
                if (this.renderRequested != null) {
                    let b = new RenderRequestedEventArgs();
                    b.animate = a;
                    this.renderRequested(this, b);
                    a = b.animate;
                }
            }
        }
        pg(a) {
            this.ro(a);
            if (this.hc(this.ct.bx, this.ct.by, this.ct)) {
                this.pq();
            }
            this.gp = false;
        }
        get bs() {
            return this.br;
        }
        set bs(a) {
            this.br = a;
        }
        ro(a) {
            {
                this.ra();
            }
            if (this.g1 && !this.gl()) {
                this.g0 = false;
            }
            if (this.g4 && !this.gm()) {
                this.g3 = false;
                this.qw();
            }
        }
        get cc() {
            return this.cb;
        }
        get_ek() {
            return this.f9();
        }
        get ek() {
            return this.get_ek();
        }
        f9() {
            return this.highlightedItemsSource != null;
        }
        ra() {
            let a = false;
            if (this.bl != null) {
                a = true;
            }
            let b = this.bt;
            if (b == 0) {
                if (this.c9 != null) {
                    if (this.c9.bt != 0) {
                        b = this.c9.bt;
                    }
                }
            }
            if (b == 0) {
                b = 1;
            }
            if (!this.ek || a) {
                b = 1;
            }
            if (this.bs != b) {
                if (this.bs == 1 && b != 1) {
                    this.bs = b;
                    this.pi();
                }
                else {
                    this.bs = b;
                    this.pe();
                }
            }
        }
        pe() {
            if (!this.gr) {
                return;
            }
            if (this.b2 != null) {
                this.b2.au();
            }
        }
        static pl() {
            if (Series.hh == null) {
                Series.hh = new Dictionary$2(String_$type, String_$type, 0);
                Series.hi = new Dictionary$2(String_$type, String_$type, 0);
                Series.o7(Series.hh, Series.hi);
            }
        }
        static nt(a) {
            Series.pl();
            if (Series.hh.containsKey(a)) {
                return Series.hh.item(a);
            }
            return PlatformAPIHelper.n(a);
            return a;
        }
        static nu(a) {
            Series.pl();
            if (Series.hi.containsKey(a)) {
                return Series.hi.item(a);
            }
            return PlatformAPIHelper.o(a);
            return a;
        }
        static o7(a, b) {
            Series.hh.item("ItemsSource", "dataSource");
            Series.hi.item("dataSource", "ItemsSource");
            Series.hh.item("HighlightedItemsSource", "highlightedDataSource");
            Series.hi.item("highlightedDataSource", "HighlightedItemsSource");
        }
        rv(a, b) {
            let c = typeCast(Brush.$, b.value);
            if (c == null) {
                return;
            }
            b.value = BrushUtil.q(c, this.h8);
        }
        rt(a, b) {
            let c = typeCast(String_$type, b.value);
            if (c != null) {
                c += this.mf;
                b.value = c;
            }
        }
        rs(a, b) {
            if (this.highlightedItemsSource != null) {
                b.value = this.highlightedItemsSource;
                return;
            }
            b.value = this.itemsSource;
        }
        ru(a, b) {
            let c = this.kb / 1000;
            if (c != 0) {
                b.value = this.kb;
                return;
            }
            b.value = this.kc;
        }
        get_gr() {
            return true;
        }
        get gr() {
            return this.get_gr();
        }
        pi() {
            if (!this.gr) {
                return;
            }
            if (this.b2 == null || !this.b8.contains(this.b2)) {
                let a = new SeriesLayer();
                let b = this.hq();
                for (let c of fromEnum(b)) {
                    a.m.add(c);
                }
                this.b2 = a;
                this.b8.add(a);
            }
            else {
                this.b2.at();
            }
        }
        hq() {
            let a = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "ItemsSource";
                $ret.y = "HighlightedItemsSource";
                $ret.q = true;
                return $ret;
            })());
            a.valueResolving = delegateCombine(a.valueResolving, runOn(this, this.rs));
            let b = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "ShouldAnimateOnDataSourceSwap";
                $ret.q = true;
                $ret.x = true;
                $ret.p = true;
                return $ret;
            })());
            let c = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "TransitionDuration";
                $ret.y = "TransitionInDuration";
                $ret.q = true;
                $ret.p = true;
                return $ret;
            })());
            c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.ru));
            let d = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "Title";
                $ret.p = true;
                $ret.q = true;
                return $ret;
            })());
            d.valueResolving = delegateCombine(d.valueResolving, runOn(this, this.rt));
            let e = ((() => {
                let $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "LegendItemVisibility";
                $ret.q = true;
                $ret.y = "HighlightedLegendItemVisibility";
                $ret.p = true;
                return $ret;
            })());
            e.valueResolving = delegateCombine(e.valueResolving, runOn(this, this.p4));
            let f = new List$1(SeriesLayerPropertyOverlay.$, 0);
            let g = this.hr();
            {
                f.add(a);
            }
            f.add(d);
            f.add(b);
            f.add(c);
            f.add(e);
            f.o(g);
            if (this.cc.count > 0) {
                let h = new Dictionary$2(String_$type, SeriesLayerPropertyOverlay.$, 0);
                for (let i of fromEnum(f)) {
                    h.addItem(i.ad, i);
                }
                for (let j of fromEnum(this.cc)) {
                    if (h.containsKey(j.ad)) {
                        j.k = h.item(j.ad);
                        f.remove(h.item(j.ad));
                    }
                    f.add(j);
                }
            }
            return f;
        }
        p4(a, b) {
            if (this.wp == 1) {
                b.value = enumGetBox(Visibility_$type, 1);
                return;
            }
            b.value = enumGetBox(Visibility_$type, this.legendItemVisibility);
        }
        hr() {
            return new List$1(SeriesLayerPropertyOverlay.$, 0);
        }
        get ft() {
            return this.dt;
        }
        qt() {
            if (!this.dt) {
                this.pc();
            }
            this.dt = true;
            if (this.renderValid != null) {
                this.renderValid(this, new RenderValidEventArgs());
            }
        }
        oz() {
            if (this.gz && !this.g1) {
                this.da.r = truncate(Math.max(this.i7(), this.i8()));
                this.o4();
            }
            if (this.g2 && !this.g4) {
                this.da.r = truncate(Math.max(this.i7(), this.i9()));
                this.o4();
            }
        }
        qk() {
            if (!this.d1()) {
                if (this.c9 != null) {
                    this.c9.pg(this);
                }
            }
        }
        qw() {
            if (this.gi) {
                if (this.bl != null) {
                    this.bl.rk(this);
                }
                else if (this.c9 != null) {
                    this.c9.series.remove(this);
                }
            }
            if (this.bl != null) {
                if (this.bl.gh) {
                    if (this.bl.highlightedItemsSource != null) {
                        this.bl.highlightedItemsSource = null;
                    }
                }
            }
            if (this.transitionOutCompleted != null) {
                this.transitionOutCompleted(this, new TransitionOutCompletedEventArgs());
            }
        }
        rk(a) {
            if (a.b3 != null) {
                if (this.b9.contains(a.b3)) {
                    this.b9.remove(a.b3);
                }
                if (this.b8.contains(a.b3)) {
                    this.b8.remove(a.b3);
                }
            }
        }
        o4() {
        }
        rp(a, b) {
            if (this.cs == null) {
                this.cs = this.cq();
                this.cs.q = true;
                if (this.c9 != null) {
                    this.c9.am.o(this.cs);
                    this.cs.a = this.c9.am;
                }
                this.cs.au();
            }
            this.cs.bx = a;
        }
        rm(a, b, c, d, e) {
            this.a9.a$z(this, a, b, d, e);
        }
        getEffectiveViewport1(a) {
            if (this.c9 == null) {
                return Rect.empty;
            }
            if (a.p) {
                return this.c9.vp;
            }
            if (a.q) {
                if (this.c9.vp.isEmpty) {
                    return this.c9.vp;
                }
                let b = this.c9.vu(a.bx, this.c9.v0, this.c9.vp);
                return b;
            }
            return this.c9.vp;
        }
        getMainContentViewport() {
            return this.wd(this.ct);
        }
        wd(a) {
            if (this.c9 == null || this.c9.vo.isEmpty) {
                return a.bx;
            }
            if (a.p) {
                return a.bx;
            }
            if (a.q) {
                if (this.c9.vp.isEmpty) {
                    return a.bx;
                }
                if (this.c9.vo.equals1(this.c9.v0)) {
                    return a.bx;
                }
                let b = this.c9.vu(a.bx, this.c9.v0, this.c9.vp);
                let c = this.c9.vs(a.bx, b, this.c9.vl);
                return c;
            }
            return this.c9.vo;
        }
        wg(a) {
            if (!this.wl.equals1(a)) {
                return Rect.empty;
            }
            return this.getEffectiveViewport();
        }
        wf(a) {
            if (this.c9 == null || this.c9.vp.isEmpty) {
                return Rect.empty;
            }
            let b = this.c9.vp;
            let c = a.bx;
            let d = (b.left - c.left) / c.width;
            let e = (b.top - c.top) / c.height;
            let f = (b.right - c.left) / c.width;
            let g = (b.bottom - c.top) / c.height;
            return new Rect(0, d, e, f - d, g - e);
        }
        getEffectiveViewport() {
            return this.getEffectiveViewport1(this.ct);
        }
        rg() {
            this.rh(null);
        }
        get_eb() {
            return false;
        }
        get eb() {
            return this.get_eb();
        }
        get_eh() {
            return this.bv == 2 || this.bv == 4;
        }
        get eh() {
            return this.get_eh();
        }
        rh(a) {
            if (this.fg) {
                this.a9.a$ak(this, a);
            }
        }
        ri(a) {
            if (this.fg) {
                this.a9.a$al(this, a, this.c9);
            }
        }
        getViewInfo(a, b) {
            a = this.ct.bx;
            b = this.ct.by;
            return {
                p0: a,
                p1: b
            };
        }
        hc(a, b, c) {
            if (a.width == 0 || a.height == 0) {
                return false;
            }
            if (this.e9) {
                return true;
            }
            return this._visibility == 0;
        }
        o3(a, b) {
            if (a) {
                this.gy = true;
            }
        }
        d2() {
            return this.d3(this.ct);
        }
        d3(a) {
            let b = a.bx;
            let c = a.by;
            if (!this.hc(b, c, a)) {
                this.o3(true, a);
                return true;
            }
            return false;
        }
        qy(a, b) {
            this.ct.bx = b;
            this.sk(a, b);
            if (this.c9 != null) {
                this.c9.ar.ae(0, this, this.a0, b);
                if (a.isEmpty || a.width == 0 || a.height == 0) {
                    this.c9.nz();
                }
            }
        }
        sl(a, b) {
        }
        sk(a, b) {
        }
        get gy() {
            return this.dw;
        }
        set gy(a) {
            this.dw = a;
        }
        pw(a) {
            a.ph(null);
        }
        qi() {
            this.gq = false;
            this.gy = true;
            if (this.c9 != null) {
                this.c9.n6();
            }
        }
        rb(a) {
            this.ht.h(a);
            this.sb();
            this.ht.e();
        }
        qc() {
            this.sb();
            this.qz();
        }
        qh() {
            this.gq = false;
            this.gy = true;
            if (this.c9 != null) {
                this.c9.n5();
            }
        }
        get_fe() {
            return true;
        }
        get fe() {
            return this.get_fe();
        }
        get_isUsableInLegend() {
            return true;
        }
        get isUsableInLegend() {
            return this.get_isUsableInLegend();
        }
        qp() {
            this.ct.aq();
        }
        qj() {
            this.qz();
        }
        qz() {
            this.ct.a1();
            this.q1(false);
            this.sc();
            if (this.isStacked) {
                this.pz((a) => {
                    a.qz();
                    if (a.ee) {
                        a.px((b) => {
                            b.q0();
                            return true;
                        });
                    }
                    return true;
                });
            }
            if (this.ee) {
                this.px((a) => {
                    a.q0();
                    return true;
                });
            }
        }
        q0() {
            this.ct.a1();
            this.q1(true);
            if (this.isStacked) {
                this.pz((a) => {
                    a.q0();
                    if (a.ee) {
                        a.px((b) => {
                            b.q0();
                            return true;
                        });
                    }
                    return true;
                });
            }
            if (this.ee) {
                this.px((a) => {
                    a.q0();
                    return true;
                });
            }
        }
        f8() {
            return false;
        }
        q1(a) {
            if (this.a0 == null || this.a0.c) {
                return;
            }
            let b = this.ct.bx;
            let c = this.ct.by;
            let d = this.hc(b, c, this.ct);
            let e = this.c9 != null && this.c9.fd && this.cs != null && this.hc(this.cs.bx, this.cs.by, this.cs);
            if (d) {
                if (a) {
                    this.gp = !this.f8();
                    this.pg(false);
                }
                else {
                    this.rn(false);
                    this.gp = !this.f8();
                }
            }
            if (e) {
                if (!this.gy) {
                    this.qh();
                    this.gq = true;
                }
            }
        }
        get g0() {
            return this.dx;
        }
        set g0(a) {
            this.dx = a;
        }
        get g3() {
            return this.dy;
        }
        set g3(a) {
            this.dy = a;
        }
        get g1() {
            if (this.g0 == false) {
                return false;
            }
            return this.i8() > 0;
        }
        get g4() {
            if (this.g3 == false) {
                return false;
            }
            return this.i9() > 0;
        }
        v() {
            super.v();
            this.raisePropertyChanged("Opacity", this._opacity, this._opacity);
        }
        w(a, b) {
            super.w(a, b);
            this.raisePropertyChanged("Visibility", enumGetBox(Visibility_$type, a), enumGetBox(Visibility_$type, b));
        }
        qo() {
        }
        qb() {
            if (this.c9 != null) {
                this.c9.nz();
            }
        }
        q5(a, b, c, d) {
            switch (b) {
                case "SyncLink":
                    if (typeCast(SyncLink.$, c) !== null) {
                        let e = c;
                        e.propertyUpdated = delegateRemove(e.propertyUpdated, this.bg);
                        this.rf(typeCast(IFastItemsSourceProvider_$type, c));
                    }
                    if (typeCast(SyncLink.$, d) !== null) {
                        let f = d;
                        f.propertyUpdated = delegateCombine(f.propertyUpdated, this.bg);
                        this.re(typeCast(IFastItemsSourceProvider_$type, d));
                    }
                    if (this.index == -1) {
                        this.index = XamDataChart.x7(this);
                    }
                    break;
                case Series.$$p[40]:
                    this.cf = this.ch();
                    this.sa();
                    this.ph(null);
                    this.qz();
                    break;
                case Series.$$p[66]:
                    this.d0 = this.g7;
                    this.pc();
                    this.qz();
                    break;
                case SeriesViewer.$$p[1]:
                case SeriesViewer.$$p[18]:
                case SeriesViewer.$$p[17]:
                case SeriesViewer.$$p[19]:
                    this.ph(null);
                    break;
                case "HighlightingMode":
                    this.bv = this.bw();
                    break;
                case "SelectionMode":
                    this.cn = this.cp();
                    break;
                case "FocusMode":
                    this.cm = this.co();
                    break;
                case "SeriesViewer":
                    if (typeCast(SeriesViewer.$, c) !== null) {
                        this.jx = null;
                        let g = c;
                        g.windowRectChanged = delegateRemove(g.windowRectChanged, this.dm);
                        let h = c.series;
                        h.collectionChanged = delegateRemove(h.collectionChanged, this.hw);
                        let i = c;
                        i.propertyUpdated = delegateRemove(i.propertyUpdated, this.bg);
                        c.ar.ad(0, this);
                        this.rh(c);
                        this.ct.al(c);
                    }
                    if (typeCast(SeriesViewer.$, d) !== null) {
                        this.jx = d.c8.j.ae;
                        let j = d;
                        j.windowRectChanged = delegateCombine(j.windowRectChanged, this.dm);
                        let k = d.series;
                        k.collectionChanged = delegateCombine(k.collectionChanged, this.hw);
                        let l = d;
                        l.propertyUpdated = delegateCombine(l.propertyUpdated, this.bg);
                        this.a0 = d.ar.k(0, this, runOn(this, this.pg));
                        this.ct.ag(d);
                        this.bv = this.bw();
                        this.cn = this.cp();
                        this.cm = this.co();
                        this.u8 = this.vm();
                        this.u4 = this.vl();
                        this.r7();
                        this.pc();
                        if (this.fy) {
                            this.ib = this.ji();
                        }
                        this.pj();
                        this.ke = this.c9.ix();
                    }
                    if (this.c9 == null) {
                        this.externalObject._ensureTooltipDestroyed();
                        this.da.w();
                        if (c != null) {
                            let m = c;
                            m.pg(this);
                        }
                    }
                    if (this.index != -1) {
                        this.rb(null);
                    }
                    if (this.index == -1 || d == null) {
                        this.index = XamDataChart.x7(this);
                    }
                    this.a4 = this.a5();
                    this.ov(typeCast(SeriesViewer.$, c), typeCast(SeriesViewer.$, d));
                    break;
                case Series.$$p[55]:
                    if (this.ct != null) {
                        this.ct.a0();
                    }
                    break;
                case "HitTestMode":
                    this.bz = this.b0();
                    break;
                case "ActualHitTestMode":
                    if (this.c9 != null) {
                        this.c9.qk();
                    }
                    break;
                case Series.$$p[25]:
                    this.rn(true);
                    break;
                case Series.$$p[18]:
                case Series.$$p[24]:
                    this.qb();
                    break;
                case "LegendItemBadgeTemplate":
                case "LegendItemTemplate":
                case Series.$$p[33]:
                case Series.$$p[32]:
                    this.rb(b);
                    this.qz();
                    this.qb();
                    break;
                case Series.$$p[37]:
                    this.r9();
                    break;
                case Series.$$p[26]:
                    this.r8();
                    break;
                case Series.$$p[11]:
                case Series.$$p[12]:
                    if (this.ls != null) {
                        this.ar = new BindingFormatter();
                        this.ar.j = this.ls;
                        this.ar.d = this.ag;
                    }
                    else {
                        this.ar = null;
                    }
                    break;
                case Series.$$p[13]:
                case Series.$$p[14]:
                    if (this.ls != null) {
                        this.as = new BindingFormatter();
                        this.as.j = this.lv;
                        this.as.d = this.ah;
                    }
                    else {
                        this.as = null;
                    }
                    break;
                case Series.$$p[6]:
                case Series.$$p[15]:
                case Series.$$p[41]:
                case Series.$$p[16]:
                case Series.$$p[17]:
                    this.ph(b);
                    this.qz();
                    break;
                case "Index":
                    if (typeGetValue(c) != typeGetValue(d)) {
                        this.qo();
                        this.cf = this.ch();
                        this.sa();
                        this.r9();
                        this.ph(null);
                        this.qz();
                    }
                    break;
                case "RadiusX":
                case "RadiusY":
                case "RoundedCornersLocation":
                    this.qz();
                    break;
                case Series.$$p[10]:
                    this.r7();
                    this.qz();
                    break;
                case Series.$$p[36]:
                case Series.$$p[35]:
                case Series.$$p[38]:
                    this.qz();
                    break;
                case Series.$$p[30]:
                    this.qp();
                    this.qz();
                    break;
                case Series.$$p[67]:
                case Series.$$p[46]:
                case Series.$$p[45]:
                case Series.$$p[47]:
                case Series.$$p[48]:
                    this.qz();
                    break;
                case Series.$$p[54]:
                    this.sa();
                    if (this.bc == 1) {
                        this.sc();
                    }
                    break;
                case Series.$$p[3]:
                case Series.$$p[4]:
                    this.pc();
                    this.qz();
                    break;
                case Series.$$p[20]:
                    this.u4 = this.vl();
                    break;
                case Series.$$p[44]:
                    this.u8 = this.vm();
                    break;
                case Series.$$p[8]:
                    this.vd = this.u8;
                    this.qz();
                    break;
                case Series.$$p[2]:
                    this.vb = this.u4;
                    this.qz();
                    break;
                case Series.$$p[1]:
                case Series.$$p[7]:
                case Series.$$p[9]:
                    this.safeActualBrush = this.vo(this.u3);
                    this.va = this.u3;
                    this.vc = this.u7;
                    this.ij = this.ic;
                    this.u6 = this.u7;
                    this.u5 = this.u3;
                    this.qz();
                    this.ct.bl();
                    if (this.toolTip != null && this.a8 != null) {
                        this.a9.a$as(this, this.toolTip);
                    }
                    break;
                case "Visibility":
                    this.ct.bm();
                    break;
                case Series.$$p[21]:
                    this.rn(true);
                    break;
                case "ItemsSource":
                    if (this.c1 != null) {
                        this.re(this.c1);
                    }
                    break;
                case Series.$$p[19]:
                    this.pc();
                    if (c != d && d != null) {
                        if (!this.ge || !this.d5) {
                            this.g0 = true;
                        }
                        this.g3 = false;
                        this.gi = false;
                    }
                    this.qi();
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        let n = c;
                        n.event = delegateRemove(n.event, this.jt);
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        let o = d;
                        o.event = delegateCombine(o.event, this.jt);
                    }
                    break;
                case "Legend":
                    if (d != null) {
                        if (a == this) {
                            d.seriesOwner = this;
                        }
                        else if (typeCast(XamDataChart.$, a) !== null) {
                            d.chartOwner = a;
                        }
                    }
                    this.a4 = this.a5();
                    break;
                case "ActualLegend":
                    if (this.a4 != null && this.a4.isItemwise) {
                        this.pc();
                        this.ed = true;
                    }
                    else {
                        this.ed = false;
                    }
                    if (c != null && c.isItemwise) {
                        c.clearLegendItemsForSeries(this);
                    }
                    this.el = this.a4 == null ? false : this.a4.isFinancial;
                    this.ou(typeCast(IChartLegend_$type, c), typeCast(IChartLegend_$type, d));
                    this.pq();
                    break;
                case "LegendItem":
                    this.ow(typeCast(Control.$, c), typeCast(Control.$, d));
                    break;
                case Series.$$p[34]:
                    this.pc();
                    this.ct.av();
                    this.qb();
                    break;
                case Series.$$p[56]:
                    if (this.a8 != null || this.fg) {
                        this.a9.a$as(this, this.toolTip);
                    }
                    break;
                case "CrosshairPoint":
                    if (this.c9 != null) {
                        this.si(this.c9.vc);
                    }
                    if (this.c9 != null) {
                        if (!this.d4) {
                            this.c9.qc(this, this.kl(this.c9.vc));
                        }
                    }
                    break;
                case Series.$$p[42]:
                    this.ib = this.ji();
                    break;
                case "ActualResolution":
                    this.rn(false);
                    this.qh();
                    break;
                case Series.$$p[71]:
                    this.ih = this.js;
                    if (this.c9 != null) {
                        this.c9.nt();
                    }
                    break;
                case Series.$$p[68]:
                    this.id = this.jp;
                    if (this.c9 != null) {
                        this.c9.nt();
                    }
                    break;
                case Series.$$p[57]:
                case Series.$$p[58]:
                    let p = this.da.f();
                    this.da.w();
                    if (p) {
                        this.qk();
                    }
                    this.da.r = this.kb;
                    this.da.b = this.db;
                    this.rn(false);
                    break;
                case "DiscreteLegendItemTemplate":
                    this.rn(false);
                    break;
                case "VisibilityProxy":
                    if (c != d) {
                        this.rn(false);
                    }
                    this.qh();
                    this.ct.bm();
                    break;
                case Series.$$p[31]:
                    this.bv = this.bw();
                    this.rn(false);
                    break;
                case Series.$$p[27]:
                    this.h9 = isNaN_(this.jd) ? 0.2 : this.jd;
                    break;
                case Series.$$p[53]:
                    this.pj();
                    break;
                case "FinalValue":
                    this.sh();
                    break;
                case Series.$$p[72]:
                    this.cv = this.cw();
                    break;
            }
        }
        vl() {
            if (this.ve != null) {
                return this.ve;
            }
            else {
                if (this.c9 != null && this.c9.uo != null) {
                    return this.c9.uo;
                }
                else {
                    return BrushUtil.h(255, 255, 0, 0);
                }
            }
        }
        vm() {
            if (this.vt != null) {
                return this.vt;
            }
            else {
                if (this.c9 != null && this.c9.u5 != null) {
                    return this.c9.u5;
                }
                else {
                    return BrushUtil.h(255, 255, 0, 0);
                }
            }
        }
        vo(a) {
            if (this.gj) {
                return this.ct.bq(a);
            }
            return a;
        }
        sa() {
            let a = this.cf;
            let b = this.jn;
            if (isNaN_(b)) {
                b = DeviceUtils.g(2);
            }
            if (a == 2) {
                b = 1;
            }
            if (this.ic != b) {
                this.ic = b;
            }
            this.ij = this.ic;
        }
        si(a) {
            if (this.c9 != null && this.c9.e7 && this.bv != 1 && this.c9.e4) {
                if (isNaN_(a.x) || isNaN_(a.y)) {
                    this.a9.a$ab(this, null, a, false, false, false, false, this.c9.bq == this, true);
                }
                else {
                    this.a9.a$ab(this, this.kl(a), a, false, false, false, false, this.c9.bq == this, false);
                }
            }
        }
        pp(a) {
            if (this.dl == null) {
                return;
            }
            let b = this.dl.indexOf(a);
            if (b < 0) {
                return;
            }
            if (this.fg) {
                this.a9.a$x(this, a, b);
            }
        }
        pt() {
            if (this.dl == null) {
                return;
            }
            if (this.fg) {
                this.a9.a$v(this);
            }
        }
        ps() {
            if (this.dl == null) {
                return;
            }
            if (this.fg) {
                this.a9.a$ao(this);
            }
        }
        po(a) {
            if (this.dl == null) {
                return;
            }
            let b = this.dl.indexOf(a);
            if (b < 0) {
                return;
            }
            if (this.fg) {
                this.a9.a$w(this, a, b);
            }
        }
        pn(a) {
            if (this.dl == null) {
                return;
            }
            let b = this.dl.indexOf(a);
            if (b < 0) {
                return;
            }
            if (this.fg) {
                this.a9.a$an(this, a, b);
            }
        }
        ec(a) {
            if (this.dl != null && this.dl.indexOf(a) >= 0) {
                return true;
            }
            return false;
        }
        pm(a) {
            if (this.dl == null) {
                return;
            }
            let b = this.dl.indexOf(a);
            if (b < 0) {
                return;
            }
            if (this.fg) {
                this.a9.a$am(this, a, b);
            }
        }
        pj() {
            let vwr_ = this.c9;
            if (vwr_ != null) {
                if (vwr_.e5) {
                    let host_ = vwr_.i3;
                    if (host_ != null) {
                        Series.pk(this, this.c9, false);
                        this.externalObject.owner = (this.externalObject.owner) ? this.externalObject.owner : ((host_) ? host_.externalObject : null);
                    }
                }
                else {
                    Series.pk(this, this.c9, false);
                    this.externalObject.owner = (this.externalObject.owner) ? this.externalObject.owner : ((vwr_) ? vwr_.externalObject : null);
                }
            }
            if (this.c9 != null && (this.externalObject.owner)) {
                let sv_ = this.c9;
                this.externalObject.owner._ensureDefaultTooltip(this.externalObject);
                ;
            }
        }
        get_fc() {
            return false;
        }
        get fc() {
            return this.get_fc();
        }
        pd(a) {
            a.d4 = true;
        }
        get c1() {
            return this.c0;
        }
        set c1(a) {
            if (this.c1 != a) {
                let b = this.c1;
                this.c0 = a;
                this.raisePropertyChanged("SyncLink", b, this.c1);
            }
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            if (this.c9 != a) {
                let b = this.c9;
                this.c8 = a;
                this.raisePropertyChanged("SeriesViewer", b, this.c8);
            }
        }
        get c7() {
            return typeCast(XamDataChart.$, this.c9);
        }
        set c7(a) {
            this.c9 = a;
        }
        get itemsSource() {
            return this.c(Series.tt);
        }
        set itemsSource(a) {
            this.h(Series.tt, a);
        }
        o9(a, b, c, d) {
            this.pc();
            if (this.c9 != null) {
                this.c9.qd();
            }
        }
        get legend() {
            return this.c(Series.tz);
        }
        set legend(a) {
            this.h(Series.tz, a);
        }
        get so() {
            if (this.sm == null && this.a4 != null) {
                this.sm = this.sn();
            }
            return this.sm;
        }
        set so(a) {
            if (this.so != a) {
                let b = this.so;
                this.sm = a;
                this.raisePropertyChanged("LegendItem", b, this.sm);
            }
        }
        kx() {
            return this.sn();
        }
        sn() {
            let a = typeCast(ContentControl.$, this.sm);
            let b = this.legendItemTemplate;
            if (b == null) {
                b = this.ct.bn(this.cz);
            }
            if (b != null) {
                if (a == null) {
                    a = new ContentControl();
                }
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
                a.ah = b;
            }
            else {
                a = null;
            }
            return a;
        }
        get a4() {
            return this.a3;
        }
        set a4(a) {
            if (this.a4 != a) {
                let b = this.a3;
                this.a3 = a;
                this.raisePropertyChanged("ActualLegend", b, this.a3);
            }
        }
        get legendItemBadgeTemplate() {
            return this.c(Series.tw);
        }
        set legendItemBadgeTemplate(a) {
            this.h(Series.tw, a);
        }
        ss() {
            return this.legendItemBadgeTemplate;
        }
        get legendItemTemplate() {
            return this.c(Series.tx);
        }
        set legendItemTemplate(a) {
            this.h(Series.tx, a);
        }
        get sr() {
            return this.c(Series.td);
        }
        set sr(a) {
            this.h(Series.td, a);
        }
        get index() {
            return typeGetValue(this.c(Series.to));
        }
        set index(a) {
            this.h(Series.to, a);
        }
        sj() {
            this.rb(null);
        }
        ph(a) {
            this.rb(a);
        }
        ff(a, b, c, d) {
            if (!BrushUtil.d(c, d)) {
                return true;
            }
            return false;
        }
        sb() {
            this.qh();
            if (this.index < 0) {
                return;
            }
            if (this.u9 != null) {
                this.r2("ActualBrush");
                let a = this.u3;
                this.ct.a9();
                this.ct.ai();
                let b = this.u3;
                let c = this.ff("ActualBrush", this.ht.f > 0 ? this.ht.d() : null, a, b);
                this.r4("ActualBrush", c);
            }
            else {
                this.u3 = this.c9 == null ? null : this.c9.ur(this.index);
            }
            if (this.cf == 2) {
                this.r2("ActualOutline");
                let d = this.u7;
                this.ct.ba();
                this.u7 = this.u3;
                let e = this.u7;
                let f = this.ff("ActualOutline", this.ht.f > 0 ? this.ht.d() : null, d, e);
                this.r4("ActualOutline", f);
            }
            else {
                if (this.vp != null) {
                    this.r2("ActualOutline");
                    let g = this.u7;
                    this.ct.ba();
                    this.ct.aj();
                    let h = this.u7;
                    let i = this.ff("ActualOutline", this.ht.f > 0 ? this.ht.d() : null, g, h);
                    this.r4("ActualOutline", i);
                }
                else {
                    this.u7 = this.c9 == null ? null : this.c9.ux(this.index);
                }
            }
            if ((this.fu || this.fa) && this.fp) {
                this.u3 = this.u7;
            }
            else if ((this.fu || this.fa) && this.es) {
                this.u7 = this.u3;
            }
            else if ((this.fu || this.fa) && this.fh) {
                this.u7 = this.u3;
            }
            else if (this.f1 && this.legendItemBadgeShape == 2) {
                this.u3 = this.u7;
            }
        }
        d1() {
            return this.da.f();
        }
        r1() {
            this.da.v();
        }
        get ib() {
            if (!this.dv) {
                this.dv = true;
                this.h0 = this.ji();
            }
            return this.h0;
        }
        set ib(a) {
            let b = this.h0;
            this.h0 = a;
            if (b != this.h0) {
                this.raisePropertyChanged("ActualResolution", b, this.h0);
            }
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return this.jh;
            }
            return DeviceUtils.g(1);
        }
        get ih() {
            return this.h4;
        }
        set ih(a) {
            this.h4 = a;
        }
        get id() {
            return this.h1;
        }
        set id(a) {
            this.h1 = a;
        }
        get ie() {
            return this.h2;
        }
        set ie(a) {
            this.h2 = a;
        }
        get ig() {
            return this.h3;
        }
        set ig(a) {
            this.h3 = a;
        }
        get bv() {
            return this.bu;
        }
        set bv(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.raisePropertyChanged("ActualHighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.bu));
            }
        }
        get cn() {
            return this.cl;
        }
        set cn(a) {
            let b = this.cl;
            this.cl = a;
            if (b != this.cl) {
                this.raisePropertyChanged("ActualSelectionMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.cl));
            }
        }
        get cm() {
            return this.ck;
        }
        set cm(a) {
            let b = this.ck;
            this.ck = a;
            if (b != this.ck) {
                this.raisePropertyChanged("ActualFocusMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.ck));
            }
        }
        get_gc() {
            return !this.eb;
        }
        get gc() {
            return this.get_gc();
        }
        pr() {
        }
        bw() {
            if (!this.fc) {
                return 1;
            }
            if (this.c9 != null) {
                if (this.c9.by != 1 && this.c9.by != 0 && !this.ey) {
                    return this.c9.by;
                }
            }
            if (this.fb) {
                return 2;
            }
            return 1;
        }
        cp() {
            if (!this.fc) {
                return 1;
            }
            if (this.c9 != null) {
                if (this.c9.cb != 1 && this.c9.cb != 0) {
                    return this.c9.cb;
                }
            }
            return 1;
        }
        co() {
            if (!this.fc) {
                return 1;
            }
            if (this.c9 != null) {
                if (this.c9.cb != 1 && this.c9.cb != 0) {
                    return this.c9.b9;
                }
            }
            return 1;
        }
        fx(a) {
            switch (a) {
                case 2:
                case 4: return true;
            }
            return false;
        }
        get h8() {
            return this.hy;
        }
        set h8(a) {
            let b = this.hy;
            this.hy = a;
            if (b != this.hy) {
                this.raisePropertyChanged("ActualHighlightedValuesFadeOpacity", b, this.hy);
            }
        }
        get h9() {
            return this.hz;
        }
        set h9(a) {
            let b = this.hz;
            this.hz = a;
            if (b != this.hz) {
                this.raisePropertyChanged("ActualHighlightingFadeOpacity", b, this.hz);
            }
        }
        pc() {
            this.du = true;
        }
        pq() {
            if (this.du) {
                this.du = false;
                if (this.d0) {
                    if (this.ed) {
                        this.rc();
                    }
                }
            }
        }
        rc() {
            if (this.c9 == null) {
                return;
            }
            if (this.a4 == null) {
                return;
            }
            if (this.a4.isItemwise) {
                let a = this.a4;
                this.a4.clearLegendItemsForSeries(this);
                if (this.legendItemVisibility == 0) {
                    this.o8();
                    a.renderItemwiseContent(this);
                }
            }
        }
        gs(a) {
            return false;
        }
        o8() {
            if (this.dl == null) {
                return;
            }
            let a = typeCast(IChartItemLegend_$type, this.a4);
            if (a == null || this.dl == null) {
                return;
            }
            this.hs = new List$1(UIElement.$, 0);
            let b = this.dl;
            let c = new List$1(SeriesPointOfInterest.$, 0);
            this.d9(c, false, false, 0);
            for (let d = 0; d < c.count; d++) {
                let e = c._inner[d];
                let f = this.vi(e.c);
                let g = this.vh(e.c);
                let h = this.vj(e.c);
                let i = this.vk(e.c);
                let j = new ContentControl();
                let k = this.kq(e.c, true);
                let l = this.ks(e.c);
                let m = null;
                if (typeCast(Date_$type, k) !== null) {
                    let n = k;
                    m = (n.toString());
                }
                else {
                    if (k != null) {
                        m = k.toString();
                    }
                }
                let o = null;
                if (typeCast(Date_$type, l) !== null) {
                    let p = l;
                    o = (p.toString());
                }
                else {
                    if (l != null) {
                        o = l.toString();
                    }
                    else {
                        o = m;
                    }
                }
                if (this.eg) {
                    g = f;
                    i = h;
                }
                let q = this.kr(e.c);
                j.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = q;
                    $ret.itemBrush = g;
                    $ret.outline = i;
                    $ret.itemLabel = m;
                    $ret.legendLabel = o;
                    return $ret;
                })());
                let r = this.sr;
                if (r == null) {
                    r = this.ct.bn(this.cy);
                }
                j.ah = r;
                this.hs.add(j);
            }
        }
        kr(a) {
            return this.dl.item(a);
        }
        kq(a, b) {
            if (this.ew || this.e4 || this.fr) {
                let c = this.az();
                if (c != null) {
                    if (!c.co()) {
                        return null;
                    }
                    if (c.cn) {
                        let d = a;
                        if (d < 0) {
                            return null;
                        }
                        let e = c;
                        let f = e.i$d(d);
                        let g = this.hx(f);
                        return g;
                    }
                    else {
                        if (c.ck) {
                            let h = a;
                            if (h < 0) {
                                h = 0;
                            }
                            let i = c;
                            let j = i.getDateTime(h);
                            return j;
                        }
                        else {
                            let k = a;
                            if (k < 0) {
                                return null;
                            }
                            let l = c.ks;
                            if (l == null || l.count == 0) {
                                return null;
                            }
                            let m = false;
                            if (c.b9 && c.cl) {
                                m = true;
                            }
                            if (!m) {
                                if (k >= l.count) {
                                    k = l.count - 1;
                                }
                            }
                            let n = c.ge(k);
                            return n;
                        }
                    }
                }
            }
            return null;
        }
        ks(a) {
            return null;
        }
        get_isColoredItemwise() {
            return this.d0;
        }
        get isColoredItemwise() {
            return this.get_isColoredItemwise();
        }
        get_e3() {
            return true;
        }
        get e3() {
            return this.get_e3();
        }
        r7() {
            let a = (typeCast(XamDataChart.$, this.c9));
            if (a != null) {
                this.h7 = isNaN_(this.ii) ? a.wl.fp : this.ii;
            }
        }
        r9() {
            this.ia = isNaN_(this.je) ? this.jj() : this.je;
        }
        r8() {
            this.h8 = isNaN_(this.jc) ? 0.2 : this.jc;
        }
        jj() {
            return 1;
        }
        get e1() {
            return this.ds;
        }
        set e1(a) {
            this.ds = a;
        }
        get cv() {
            return this.cu;
        }
        set cv(a) {
            this.cu = a;
        }
        cw() {
            if (this.cx == 0) {
                return 1;
            }
            return this.cx;
        }
        get cf() {
            return this.ce;
        }
        set cf(a) {
            this.ce = a;
        }
        ch() {
            if (this.cg == 0) {
                return 1;
            }
            return this.cg;
        }
        a2(a) {
            return ((() => {
                let $ret = new DataContext();
                $ret.series = this;
                $ret.item = a;
                return $ret;
            })());
        }
        c2() {
            return 1;
        }
        c5() {
            return 1;
        }
        rl() {
            this.ct.a5();
        }
        rr() {
            this.d7 = true;
            this.g3 = false;
            this.g0 = true;
            this.gi = false;
            this.rn(true);
        }
        q3() {
            this.g0 = false;
            this.g3 = true;
            this.gi = false;
            this.rn(true);
        }
        q2() {
            this.g3 = false;
            this.g0 = true;
            this.gi = false;
            this.rn(true);
        }
        q4() {
            this.gi = true;
            if (!this.gm() || this.i9() == 0 || !this.hc(this.ct.bx, this.ct.by, this.ct)) {
                this.qw();
            }
            this.g0 = false;
            this.g3 = true;
            this.rn(true);
        }
        rj() {
            this.o0();
        }
        o0() {
        }
        p6() {
        }
        static *_ho(a, b, c) {
            for (let d = b; d < c; d++) {
                yield a(d);
            }
        }
        static ho(a, b, c) {
            return toEnum(() => Series._ho(a, b, c));
        }
        static hn(a, b) {
            return Series.ho(a, 0, b);
        }
        bp() {
            return this.bo;
        }
        rw(a) {
            this.sd(a);
        }
        i7() {
            return this.kb;
        }
        i8() {
            return this.kc;
        }
        i9() {
            return this.kd;
        }
        get_g5() {
            return this.dz;
        }
        set_g5(a) {
            this.dz = a;
        }
        get g5() {
            return this.get_g5();
        }
        set g5(a) {
            this.set_g5(a);
        }
        get gf() {
            return this.g5;
        }
        o1() {
            this.a9.a$y();
        }
        de(a, b, c) {
            return null;
        }
        df(a, b, c) {
            return null;
        }
        qq(a, b, c, d) {
            this.a9.a$ae(this, a, b, c, d);
        }
        r0(a) {
            this.a9.a$ar(this, a);
        }
        ov(a, b) {
            if (this.a4 != null && this.so != null) {
                if (b == null && this.a4.containsChild(this.so)) {
                    this.a4.removeChild(this.so);
                }
                if (b != null && !this.a4.containsChild(this.so) && this.legendItemVisibility != 1) {
                    this.a4.addChildInOrder(this.so, this);
                }
            }
        }
        o2() {
            if (this.a4 == null || this.so == null) {
                return;
            }
            this.a4.removeChild(this.so);
        }
        ou(a, b) {
            if (this.so != null) {
                if (a != null && a.containsChild(this.so)) {
                    a.removeChild(this.so);
                }
                if (this.c9 != null && b != null && !b.containsChild(this.so) && this.legendItemVisibility != 1) {
                    b.addChildInOrder(this.so, this);
                }
            }
        }
        ow(a, b) {
            if (this.a4 != null) {
                if (a != null && this.a4.containsChild(a)) {
                    this.a4.removeChild(a);
                }
                if (this.c9 != null && b != null && this.legendItemVisibility != 1) {
                    this.a4.addChildInOrder(b, this);
                }
            }
        }
        rf(a) {
            this.dl = a.releaseFastItemsSource(this.itemsSource);
        }
        re(a) {
            this.dl = a.getFastItemsSource(this.itemsSource);
        }
        a5() {
            if (this.legend != null) {
                return this.legend;
            }
            if (this.c9 != null && this.c9.legend != null) {
                return this.c9.legend;
            }
            return null;
        }
        gl() {
            return false;
        }
        gm() {
            return false;
        }
        gd(a) {
            return (a && this.i7() > 0) || this.d1() || (this.g1 && this.gl() && this.i8() > 0) || (this.g4 && this.gm() && this.i9() > 0);
        }
        pa(a) {
            if (a != null) {
                a.b0(this);
            }
        }
        rd(a) {
            if (a != null) {
                a.ct(this);
            }
        }
        bq() {
            return this.ct.g();
        }
        sd(a) {
            this.ct.bb(a);
        }
        rz(a, b) {
            this.a9.a$aq(this, a, b);
        }
        get_g8() {
            return false;
        }
        get g8() {
            return this.get_g8();
        }
        q6(a, b) {
            this.ct.at(a, b);
        }
        q8(a) {
            this.qy(this.wl, a);
        }
        p1(a) {
            if (this.dl != null) {
                this.dl.handleCollectionChanged(a);
            }
        }
        qf(a, b, c) {
            this.p1(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        qa() {
            this.p1(new NotifyCollectionChangedEventArgs(0, 4));
        }
        qd(a, b) {
            this.p1(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        qe(a, b) {
            this.p1(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        r6() {
            this.rn(false);
        }
        gu(a, b) {
            return false;
        }
        get_coercionMethods() {
            return this._coercionMethods;
        }
        set_coercionMethods(a) {
            this._coercionMethods = a;
        }
        get coercionMethods() {
            return this.get_coercionMethods();
        }
        set coercionMethods(a) {
            this.set_coercionMethods(a);
        }
        get_expectFunctions() {
            return this.dr;
        }
        set_expectFunctions(a) {
            let b = this.dr;
            this.dr = a;
            if (b != this.dr) {
                this.raisePropertyChanged("ExpectFunctions", b, this.dr);
            }
        }
        get expectFunctions() {
            return this.get_expectFunctions();
        }
        set expectFunctions(a) {
            this.set_expectFunctions(a);
        }
        a1(a, b) {
            return null;
        }
        get b1() {
            return this.by;
        }
        set b1(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.raisePropertyChanged("HitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.by));
            }
        }
        b0() {
            return this.b1 == 0 ? 2 : this.b1;
        }
        get bz() {
            return this.bx;
        }
        set bz(a) {
            let b = this.bx;
            this.bx = a;
            if (b != this.bx) {
                this.raisePropertyChanged("ActualHitTestMode", enumGetBox(SeriesHitTestMode_$type, b), enumGetBox(SeriesHitTestMode_$type, this.bx));
            }
        }
        di(a) {
            if (a == null) {
                return this.dl.registerColumn(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cu(a, this.coercionMethods);
            b = c.a;
            return this.dl.registerColumn(a, b, this.expectFunctions);
        }
        dj(a) {
            if (a == null) {
                return this.dl.registerColumnInt(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cu(a, this.coercionMethods);
            b = c.a;
            return this.dl.registerColumnInt(a, b, this.expectFunctions);
        }
        dk(a) {
            if (a == null) {
                return this.dl.registerColumnObject(null, null, false);
            }
            let b = null;
            let c = SeriesViewer.cu(a, this.coercionMethods);
            b = c.a;
            return this.dl.registerColumnObject(a, b, this.expectFunctions);
        }
        get wl() {
            return this.ct != null ? this.ct.bx : Rect.empty;
        }
        get_fk() {
            return false;
        }
        get fk() {
            return this.get_fk();
        }
        get_fj() {
            return false;
        }
        get fj() {
            return this.get_fj();
        }
        ry(a) {
        }
        rx(a, b) {
        }
        o6(a, b) {
            this.bb.copyVisualData(a, b);
        }
        kk() {
            let a = this.bb.exportVisualData(this, this.wl);
            this.pv(a);
            this.ct.an(a);
            this.bb.exportLayerVisualData(this, a);
            return a;
        }
        pv(a) {
        }
        p8(a) {
            if (this.v0.x != a.x || this.v0.y != a.y) {
                this.v0 = a;
                this.qn(a);
            }
        }
        qn(a) {
        }
        p9() {
        }
        qg() {
        }
        av(a) {
            return null;
        }
        ai() {
            return null;
        }
        iw() {
            return NaN;
        }
        static ix(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        static iy(a, b) {
            if (a == null || a.count == 0) {
                return NaN;
            }
            if (b != null && b.i$b != null) {
                if (b.i$b.count != a.count) {
                    return NaN;
                }
                for (let c = 0; c < a.count; c++) {
                    if (!isNaN_(a.item(b.i$b._inner[c])) && a.item(b.i$b._inner[c]) != 0) {
                        return a.item(b.i$b._inner[c]);
                    }
                }
            }
            for (let d = 0; d < a.count; d++) {
                if (!isNaN_(a.item(d)) && a.item(d) != 0) {
                    return a.item(d);
                }
            }
            return NaN;
        }
        ql() {
        }
        get ik() {
            return this.h5;
        }
        set ik(a) {
            let b = this.ik;
            if (a != b) {
                this.h5 = a;
                this.raisePropertyChanged("FinalValue", b, this.ik);
            }
        }
        get jg() {
            return this.h6;
        }
        set jg(a) {
            let b = this.jg;
            if (a != b) {
                this.h6 = a;
                this.raisePropertyChanged("PercentChange", b, this.jg);
            }
        }
        sh() {
            let a = this.iw();
            this.jg = (this.ik - a) / a * 100;
        }
        kn(a) {
            return null;
        }
        get li() {
            return !stringIsNullOrWhiteSpace(this.dp.bz) ? this.dp.bz : "Open";
        }
        get k4() {
            return !stringIsNullOrWhiteSpace(this.dp.bw) ? this.dp.bw : "Close";
        }
        get k7() {
            return !stringIsNullOrWhiteSpace(this.dp.bx) ? this.dp.bx : "High";
        }
        get lg() {
            return !stringIsNullOrWhiteSpace(this.dp.by) ? this.dp.by : "Low";
        }
        get lq() {
            return !stringIsNullOrWhiteSpace(this.dp.b0) ? this.dp.b0 : "Volume";
        }
        get lp() {
            return !stringIsNullOrWhiteSpace(this.dp.b9) ? this.dp.b9 : "Value";
        }
        get lk() {
            return !stringIsNullOrWhiteSpace(this.dp.m) ? this.dp.m : "Radius";
        }
        sc() {
            this.sq = this.ss();
            this.ct.bl();
        }
        au() {
            let a = this.legendItemBadgeShape;
            if (a == 0) {
                a = this.be();
            }
            let b = 0;
            if (a == 3) {
                if (this.e7 || this.f4) {
                    b = 6;
                }
                else if (this.e5) {
                    b = 7;
                }
                else {
                    b = 5;
                }
            }
            else if (a == 4) {
                if (this.hasMarkers && !this.e6) {
                    b = 8;
                }
                else {
                    b = 0;
                }
            }
            else if (a == 2) {
                if (this.hasMarkers && !this.eq) {
                    b = 1;
                }
                else {
                    b = 2;
                }
            }
            else if (a == 1) {
                b = 0;
            }
            else if (a == 5) {
                b = 3;
            }
            else if (a == 6) {
                b = 4;
            }
            else if (a == 7) {
                b = 9;
            }
            return b;
        }
        bd(a) {
            return a;
        }
        be() {
            if (this.es || this.ev || this.ex || this.fo || this.fw || this.e7 || this.e5 || this.e6 || this.f1 || this.f4) {
                return this.bd(3);
            }
            else if (this.fi || this.fy || this.fp || this.fh || this.isValueOverlay) {
                return this.bd(2);
            }
            else if (this.eq || this.fm || this.fl) {
                return this.bd(1);
            }
            else if (this.eg) {
                return this.bd(4);
            }
            return this.bd(1);
        }
        bi() {
            return null;
        }
        bj() {
            return this.bi();
        }
        get b9() {
            return this.b6;
        }
        get b8() {
            return this.b5;
        }
        get actualLayers() {
            return this.b4;
        }
        get ea() {
            return this.hp.count > 0;
        }
        r3(a) {
            if (!this.hk.containsKey(a)) {
                this.hk.addItem(a, 0);
            }
            this.hk.item(a, this.hk.item(a) + 1);
        }
        r5(a) {
            if (this.hk.containsKey(a)) {
                this.hk.item(a, this.hk.item(a) - 1);
                if (this.hk.item(a) == 0) {
                    this.hk.removeItem(a);
                }
            }
        }
        f2(a) {
            if (this.hk.containsKey(a) && this.hk.item(a) > 0) {
                return true;
            }
            return false;
        }
        r2(a) {
            if (!this.hg.containsKey(a)) {
                this.hg.addItem(a, new Stack$1(Boolean_$type));
            }
            this.hg.item(a).h(true);
        }
        r4(a, b) {
            if (this.hg.containsKey(a)) {
                this.hg.item(a).e();
                if (this.hg.item(a).f == 0) {
                    this.hg.removeItem(a);
                    let c = this.tg(a);
                    if (b && this.ee && !this.f2(a) && !this.f2("Actual" + a)) {
                        {
                            if (c != null) {
                                this.r3(a);
                                this.k1(a, this.c(c), this.c(c));
                                this.r5(a);
                            }
                        }
                    }
                }
            }
        }
        gk(a) {
            if (this.hg.containsKey(a) && this.hg.item(a).d()) {
                return true;
            }
            return false;
        }
        f0() {
            return this.hg.count > 0;
        }
        kt() {
            return null;
        }
        bk(a, b) {
            if (this.hj.containsKey(b)) {
                return this.hj.item(b);
            }
            let c = this.bj();
            if (c == null) {
                return null;
            }
            c.bl = this;
            c.b3 = b;
            this.p5(c);
            this.rq(c);
            b.am(this, c);
            this.oy(a, c);
            this.hj.item(b, c);
            this.hp.insert(a, c);
            return c;
        }
        p5(a) {
            if (this.k0 != null) {
                a.k0 = this.k0;
            }
            if (this.gn) {
                a.gn = true;
            }
        }
        oy(a, b) {
            this.ct.ah(a, b);
        }
        pb(a) {
            this.ct.am(a);
        }
        rq(a) {
            for (let b of fromEnum(this.hm)) {
                let c = this.tg(b);
                if (c == null) {
                    continue;
                }
                this.o5(a, c);
            }
        }
        f7(a) {
            if (a.name == "ToolTip") {
                return true;
            }
            return false;
        }
        go(a) {
            if (a.name == "ToolTip" && this.gn) {
                return true;
            }
            return false;
        }
        o5(a, b) {
            let c = a.b3;
            if (c != null) {
                let d = this.c(b);
                if (this.go(b)) {
                    return;
                }
                if (this.f7(b)) {
                    d = this.kh(b, d);
                }
                c.ai(this, a, b, d);
            }
        }
        kh(a, b) {
            if (a.name == "ToolTip") {
                return null;
            }
            return b;
        }
        pf(a) {
            if (this.hj.containsKey(a)) {
                let b = this.hj.item(a);
                this.hj.removeItem(a);
                a.ap(b);
                this.pb(b);
                this.hp.remove(b);
            }
        }
        getDataLegendBadge() {
            let a = this.ss();
            if (a == null) {
                a = LegendTemplates.af(this);
            }
            return a;
        }
        getDataLegendBadgeContext() {
            if (this.a7 == null) {
                this.a7 = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this;
                    $ret.item = null;
                    return $ret;
                })());
            }
            return this.a7;
        }
        getDataLegendBadgeContextAtPosition(a, b) {
            let c = this.getDataLegendBadgeContext();
            let d = this.getDataLegendResolvedWorldPositionX(a);
            let e = this.getDataLegendResolvedWorldPositionY(b);
            let f = this.j1({ $type: Point_$type, x: d, y: e });
            if (this.dl == null || f < 0 || f > (this.dl.count - 1)) {
                return null;
            }
            if (this.d0) {
                c.itemBrush = this.vh(f);
                c.outline = this.vk(f);
            }
            return c;
        }
        getDataLegendBadgeShapeAndMarker() {
            let a = this.au();
            if (a == 8) {
                return this.l8();
            }
            else if (a == 1) {
                if (this.bc == 0) {
                    return "Line";
                }
                return "LineWith" + this.l8();
            }
            else if (a == 3) {
                return "Bar";
            }
            else if (a == 4) {
                return "Column";
            }
            else if (a == 9) {
                return "None";
            }
            else if (a == 0) {
                return "Circle";
            }
            else if (a == 2) {
                return "Line";
            }
            else if (a == 5) {
                return "Square";
            }
            else if (a == 6) {
                if (this.bc == 0) {
                    return "Square";
                }
                else {
                    return "TwoColumns";
                }
            }
            else if (a == 7) {
                if (this.bc == 0) {
                    return "Square";
                }
                else {
                    return "TwoBars";
                }
            }
            return EnumUtil.getName(ActualLegendItemBadgeShape_$type, a);
        }
        l8() {
            return null;
        }
        l9(a, b) {
            if (b == a.c9.rn) {
                return "Circle";
            }
            else if (b == a.c9.ro) {
                return "Diamond";
            }
            else if (b == a.c9.rp) {
                return "Hexagon";
            }
            else if (b == a.c9.rq) {
                return "Hexagram";
            }
            else if (b == a.c9.rr) {
                return "Pentagon";
            }
            else if (b == a.c9.rs) {
                return "Pentagram";
            }
            else if (b == a.c9.rt) {
                return "Pyramid";
            }
            else if (b == a.c9.ru) {
                return "Square";
            }
            else if (b == a.c9.rv) {
                return "Tetragram";
            }
            else if (b == a.c9.rw) {
                return "Triangle";
            }
            else if (b != null) {
                return "Custom";
            }
            else {
                return "None";
            }
        }
        getDataLegendSeriesTitle() {
            return this.title == null ? null : this.title.toString();
        }
        iv(a, b) {
            return FastItemColumn.i(this.ko(a, b));
        }
        getDataLegendResolvedWorldPositionX(a) {
            if (isNaN_(a) || a < 0) {
                if (this.isVertical) {
                    a = 1;
                }
                else {
                    let b = this.az();
                    if (b != null) {
                        if (b.ch) {
                            a = 0;
                        }
                        else {
                            a = 1;
                        }
                    }
                    else {
                        a = 1;
                    }
                }
            }
            return a;
        }
        getDataLegendResolvedWorldPositionY(a) {
            if (isNaN_(a) || a < 0) {
                if (this.isVertical) {
                    let b = this.az();
                    if (b != null) {
                        if (b.ch) {
                            a = 1;
                        }
                        else {
                            a = 0;
                        }
                    }
                    else {
                        a = 0;
                    }
                }
                else {
                    a = 0;
                }
            }
            return a;
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.l = this.i3({ $type: Point_$type, x: a, y: b }, false, false);
            c.a = 0;
            c.q = "Value";
            c.r = "Value";
            c.s = "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.ma();
            return d;
        }
        ma() {
            let a = "Category";
            if (this.fa) {
                a = "Geographic";
            }
            if (this.fs) {
                a = "Range";
            }
            if (this.fv) {
                a = "Shape";
            }
            if (this.fu) {
                a = "Scatter";
            }
            if (this.fn) {
                a = "Polar";
            }
            if (this.fr) {
                a = "Radial";
            }
            if (this.isStacked || this.e9) {
                a = "Stacked";
            }
            if (this.e8) {
                a = "Category";
            }
            if (this.e4) {
                if (this.e7) {
                    a = "Financial";
                }
                else {
                    a = getInstanceType(this).typeName.toString();
                }
            }
            if (this.fd) {
                a += " Highlight";
            }
            else if (this.isValueOverlay) {
                a += " Overlay";
            }
            else {
                a += " Series";
            }
            return a;
        }
        getDataLegendAxisLabelFromCursorPosition(a, b) {
            if (this.ew || this.e4 || this.fr) {
                let c = this.az();
                if (c != null) {
                    if (!c.co()) {
                        return null;
                    }
                    let d = this.getDataLegendResolvedWorldPositionX(a);
                    let e = this.getDataLegendResolvedWorldPositionY(b);
                    let f = { $type: Point_$type, x: d, y: e };
                    if (c.cn) {
                        let g = this.j3(f);
                        if (g < 0) {
                            return null;
                        }
                        let h = c;
                        let i = h.i$d(g);
                        let j = this.hx(i);
                        return j;
                    }
                    else {
                        if (c.ck) {
                            let k = this.ip(f);
                            if (k < 0) {
                                k = 0;
                            }
                            let l = c;
                            let m = l.getDateTime(k);
                            return m;
                        }
                        else {
                            let n = this.j1(f);
                            if (n < 0) {
                                return null;
                            }
                            let o = c.ks;
                            if (o == null || o.count == 0) {
                                return null;
                            }
                            let p = false;
                            if (c.b9 && c.cl) {
                                p = true;
                            }
                            if (!p) {
                                if (n >= o.count) {
                                    n = o.count - 1;
                                }
                            }
                            let q = c.ge(n);
                            return q;
                        }
                    }
                }
            }
            return null;
        }
        p7(message_) {
            console.log('Series >> ' + message_);
            ;
        }
        hx(ticks_) {
            let a = (new Date(ticks_));
            return a;
        }
        vu(a) {
            if (a == null) {
                return null;
            }
            if (this.b2 == null) {
                return a;
            }
            a = BrushUtil.q(a, this.h8);
            return a;
        }
        cd() {
            let a = this.mc();
            if (a != null) {
                let b = this.mb(a);
                if (b != null) {
                    let c = ((() => {
                        let $ret = new SeriesMatcher();
                        $ret.d = a;
                        $ret.c = b;
                        return $ret;
                    })());
                    if (this.f5(c)) {
                        return c;
                    }
                }
            }
            if (this.name != null) {
                let d = ((() => {
                    let $ret = new SeriesMatcher();
                    $ret.e = this.name;
                    return $ret;
                })());
                if (this.f5(d)) {
                    return d;
                }
            }
            let e = "Series Title";
            if (this.title != null && typeof this.title === 'string' && !Base.equalsStatic(this.title, e)) {
                let f = ((() => {
                    let $ret = new SeriesMatcher();
                    $ret.f = this.title;
                    return $ret;
                })());
                if (this.f5(f)) {
                    return f;
                }
            }
            if (this.index != -1) {
                let g = ((() => {
                    let $ret = new SeriesMatcher();
                    $ret.b = this.index;
                    return $ret;
                })());
                return g;
            }
            return null;
        }
        f5(a) {
            if (this.c9 != null) {
                let b = SeriesMatcherHelper.a(this.c9, a);
                if (b != null && b.length == 1) {
                    return true;
                }
            }
            return false;
        }
    }
    Series.$t = markType(Series, 'Series', Control.$, [INotifyPropertyChanged_$type, IProvidesViewport_$type, ILegendSeries_$type, ILegendSeriesInternal_$type, ILegendOwner_$type, ILegendTemplateProvider_$type, IDataLegendSeries_$type]);
    Series.jy = 0;
    Series.ux = DependencyProperty.i("VisibilityProxy", Visibility_$type, Series.$, new PropertyMetadata(2, enumGetBox(Visibility_$type, 0), (a, b) => a.raisePropertyChanged("VisibilityProxy", b.oldValue, b.newValue)));
    Series.hd = new Dictionary$2(String_$type, Dictionary$2.$.specialize(Type.$, DependencyProperty.$), 0);
    Series.hh = null;
    Series.hi = null;
    Series.tt = DependencyProperty.i("ItemsSource", IEnumerable_$type, Series.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        if (c.c1 != null) {
            c.c1.releaseFastItemsSource(b.oldValue);
        }
        a.raisePropertyChanged("ItemsSource", b.oldValue, b.newValue);
    }));
    Series.tz = DependencyProperty.i("Legend", IChartLegend_$type, Series.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Legend", b.oldValue, b.newValue);
    }));
    Series.tw = DependencyProperty.i("LegendItemBadgeTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemBadgeTemplate", b.oldValue, b.newValue);
        if (c.so != null) {
            c.so = c.sn();
        }
    }));
    Series.tx = DependencyProperty.i("LegendItemTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("LegendItemTemplate", b.oldValue, b.newValue);
        if (c.so != null) {
            c.so = c.sn();
        }
    }));
    Series.td = DependencyProperty.i("DiscreteLegendItemTemplate", DataTemplate.$, Series.$, new PropertyMetadata(2, null, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("DiscreteLegendItemTemplate", b.oldValue, b.newValue);
    }));
    Series.to = DependencyProperty.i("Index", Number_$type, Series.$, new PropertyMetadata(2, -1, (a, b) => {
        let c = typeCast(Series.$, a);
        c.raisePropertyChanged("Index", b.oldValue, b.newValue);
        if (c.so != null) {
            c.so = c.sn();
        }
    }));
    Series.$$p = markDep(DependencyProperty, PropertyMetadata, Series, 'raisePropertyChanged', ['ActualAreaFillOpacity:h7:su', [1, 1], 'ActualBrush:u3:sv', [Brush.$], 'ActualFocusBrush:u4:sw', [Brush.$], 'ActualLegendItemBadgeBrush:u5:sx', [Brush.$], 'ActualLegendItemBadgeOutline:u6:sy', [Brush.$], 'ActualLegendItemBadgeTemplate:sq:sz', [DataTemplate.$], 'ActualMarkerFillOpacity:ia:s0', [1, 1], 'ActualOutline:u7:s1', [Brush.$], 'ActualSelectionBrush:u8:s2', [Brush.$], 'ActualThickness:ic:s3', [1, DeviceUtils.g(2)], 'AreaFillOpacity:ii:s4', [1, NaN], 'AutoCalloutLabelFormat:ls:s5', [2, null], 'AutoCalloutLabelFormatSpecifiers:ag:s6', [Array_$type, null], 'AutoCalloutValueLabelFormat:lv:s7', [2, null], 'AutoCalloutValueLabelFormatSpecifiers:ah:s8', [Array_$type, null], 'Brush:u9:s9', [Brush.$, null], 'DashArray:vw:ta', [DoubleCollection.$], 'DashCap:vx:tb', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'DataLegendGroup:l1:tc', [2, null], 'FastItemsSource:dl:te', [IFastItemsSource_$type], 'FocusBrush:ve:tf', [Brush.$, null], 'HighlightedItemsSource::th', [IEnumerable_$type, null], 'HighlightedLegendItemVisibility:wp:ti', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'HighlightedTitleSuffix:mf:tj', [2, " - Highlighted"], 'HighlightedValuesDataLegendGroup:mh:tk', [2, null], 'HighlightedValuesDisplayMode:bt:tl', [SeriesHighlightedValuesDisplayMode_$type, enumGetBox(SeriesHighlightedValuesDisplayMode_$type, 0)], 'HighlightedValuesFadeOpacity:jc:tm', [1, NaN], 'HighlightingFadeOpacity:jd:tn', [1, NaN], 'IsActualLegendFinancial:el:tp', [0, false], 'IsComponentHighlightingModeIgnored:ey:tq', [0, false], 'IsDropShadowEnabled:e2:tr', [0, false], 'IsHighlightingEnabled:fb:ts', [0, false], 'LegendItemBadgeMode:bc:tu', [LegendItemBadgeMode_$type, enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape::tv', [LegendItemBadgeShape_$type, enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemVisibility::ty', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'LineCap:vy:t0', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'LineJoin:vz:t1', [PenLineJoin_$type, enumGetBox(PenLineJoin_$type, 0)], 'MarkerFillOpacity:je:t2', [1, NaN], 'MiterLimit:jf:t3', [1, 10], 'MouseOverEnabled:f6:t4', [0, true], 'OutlineMode:cg:t5', [SeriesOutlineMode_$type, enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:vp:t6', [Brush.$, null], 'Resolution:jh:t7', [1, NaN], 'SafeActualBrush::t8', [Brush.$], 'SelectionBrush:vt:t9', [Brush.$, null], 'ShadowBlur:jk:ua', [1, NaN], 'ShadowColor:vv:ub', [Color.$], 'ShadowOffsetX:jl:uc', [1, NaN], 'ShadowOffsetY:jm:ud', [1, NaN], 'ShouldAnimateOnDataSourceSwap:ge:ue', [0, false], 'ShouldHideAutoCallouts:gg:uf', [0, false], 'ShouldRemoveHighlightedDataOnLayerHidden:gh:ug', [0, false], 'ShouldShiftOpacityForSafeActualBrush:gj:uh', [0, true], 'ShowDefaultTooltip:gn:ui', [0, false], 'Thickness:jn:uj', [1, DeviceUtils.g(2)], 'Title::uk', [4, "Series Title"], 'ToolTip::ul', [4, null], 'TransitionDuration:kb:um', [1, 0], 'TransitionEasingFunction:db:un', [Delegate_$type, null], 'TransitionInDuration:kc:uo', [1, 1000], 'TransitionInEasingFunction:dc:up', [Delegate_$type, null], 'TransitionInSpeedType:c3:uq', [TransitionInSpeedType_$type, enumGetBox(TransitionInSpeedType_$type, 0)], 'TransitionOutDuration:kd:ur', [1, 1000], 'TransitionOutEasingFunction:dd:us', [Delegate_$type, null], 'TransitionOutSpeedType:c6:ut', [TransitionOutSpeedType_$type, enumGetBox(TransitionOutSpeedType_$type, 0)], 'TransitionProgress:jo:uu', [1, 0], 'UseItemWiseColors:g7:uv', [0, false], 'UseSingleShadow:ha:uw', [0, true], 'VisibleRangeMarginBottom:jp:uy', [1, NaN], 'VisibleRangeMarginLeft:jq:uz', [1, NaN], 'VisibleRangeMarginRight:jr:u0', [1, NaN], 'VisibleRangeMarginTop:js:u1', [1, NaN], 'VisibleRangeMode:cx:u2', [SeriesVisibleRangeMode_$type, enumGetBox(SeriesVisibleRangeMode_$type, 0)]]);
    return Series;
})();
/**
 * @hidden
 */
export let MarkerSeries = /*@__PURE__*/ (() => {
    class MarkerSeries extends Series {
        constructor() {
            super();
            this.wz = 1;
            this.wu = 1;
            this.wq = 1;
            this.xt = null;
            this.w0 = this.w1();
        }
        hr() {
            let a = super.hr();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "MarkerBrush";
                    $ret.p = true;
                    $ret.y = "ActualMarkerBrush";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.rv));
                a.add(b);
            }
            {
                let c = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "MarkerOutline";
                    $ret.p = true;
                    $ret.y = "ActualMarkerOutline";
                    $ret.q = true;
                    return $ret;
                })());
                c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.rv));
                a.add(c);
            }
            return a;
        }
        wn(a, b) {
            if (this.fr || this.fn) {
                return new Thickness(1, 0, 0, 0, 0);
            }
            if (this.w0 != 1 && this.w0 != 13) {
                let c = this.wy.cv();
                let d = (c.width / 2) + (this.xb / 2);
                let e = (c.height / 2) + (this.xb / 2);
                let f = e;
                let g = e;
                let h = d;
                let i = d;
                if (a == 2 || a == 4) {
                    h = 0;
                }
                if (a == 2 || a == 3) {
                    i = 0;
                }
                if (b == 2 || b == 3) {
                    f = 0;
                }
                if (b == 2 || b == 4) {
                    g = 0;
                }
                return new Thickness(1, h, f, i, g);
            }
            return new Thickness(1, 0, 0, 0, 0);
        }
        qx(a) {
            super.qx(a);
            this.wy = a;
        }
        get_hasMarkers() {
            return true;
        }
        get_ej() {
            return this.w0 != 13 && this.w0 != 1;
        }
        vf() {
            return this.x9;
        }
        vg() {
            return this.ya;
        }
        st() {
            return this.xt;
        }
        l8() {
            return this.l9(this, this.xt);
        }
        get w0() {
            return this.wz;
        }
        set w0(a) {
            let b = this.wz;
            this.wz = a;
            if (b != a) {
                this.raisePropertyChanged("ActualMarkerType", enumGetBox(MarkerType_$type, b), enumGetBox(MarkerType_$type, this.wz));
            }
        }
        w1() {
            if (this.w2 == 1 || this.w2 == 0) {
                if (this.fg && this.a9.a$d) {
                    return 2;
                }
                if (this.w7()) {
                    return 13;
                }
            }
            return this.w2;
        }
        w7() {
            return (this.g7 && typeCast(IChartItemLegend_$type, this.legend) !== null) || this.w6();
        }
        w6() {
            if (this.c9 == null) {
                return false;
            }
            if (this.c9.et) {
                for (let a of fromEnum(this.c9.series)) {
                    if (a.em) {
                        if (a.gs(this)) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
        pr() {
            super.pr();
            this.w0 = this.w1();
        }
        get w4() {
            return this.w5 || this.xs == this.c9.rn;
        }
        get wv() {
            return this.wu;
        }
        set wv(a) {
            this.wu = a;
        }
        wx() {
            if (this.ww == 0) {
                return 1;
            }
            return this.ww;
        }
        sf(a) {
            super.sf(a);
            this.ww = a;
        }
        get wr() {
            return this.wq;
        }
        set wr(a) {
            this.wq = a;
        }
        wt() {
            if (this.ws == 0) {
                return 1;
            }
            return this.ws;
        }
        se(a) {
            super.se(a);
            this.ws = a;
        }
        sg(a) {
            super.sg(a);
            this.xb = a;
        }
        il() {
            return this.xb;
        }
        static get xv() {
            if (MarkerSeries.xr == null) {
                MarkerSeries.xr = new DataTemplate();
            }
            return MarkerSeries.xr;
        }
        get yb() {
            return this.c(MarkerSeries.x0);
        }
        set yb(a) {
            this.h(MarkerSeries.x0, a);
        }
        w8() {
            return this.xt != null && ((this.w0 != 1 && this.w0 != 0) || this.xu != null);
        }
        qo() {
            super.qo();
            this.wv = this.wx();
            this.wr = this.wt();
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case MarkerSeries.$$p[10]:
                    this.w0 = this.w1();
                    break;
                case "MarkerBrush":
                case "ActualMarkerType":
                case MarkerSeries.$$p[6]:
                case MarkerSeries.$$p[8]:
                case MarkerSeries.$$p[9]:
                    this.rb(b);
                    this.qz();
                    break;
                case MarkerSeries.$$p[5]:
                    this.wv = this.wx();
                    this.rb(null);
                    this.qz();
                    break;
                case MarkerSeries.$$p[4]:
                    this.wr = this.wt();
                    this.rb(null);
                    this.qz();
                    break;
                case MarkerSeries.$$p[2]:
                    this.xt = d;
                    if (c == MarkerSeries.xv || d == MarkerSeries.xv || (c == null || d != null)) {
                        this.wy.cl();
                        let e = typeCast(MarkerSeriesView.$, this.cs);
                        if (e != null) {
                            e.cl();
                        }
                        this.rn(false);
                    }
                    if (this.eg) {
                        this.u5 = this.vf();
                        this.u6 = this.vg();
                    }
                    if (this.c9 != null) {
                        this.c9.nq();
                    }
                    this.ct.bl();
                    if (this.toolTip != null && this.fg) {
                        this.a9.a$as(this, this.toolTip);
                    }
                    this.qh();
                    break;
                case MarkerSeries.$$p[11]:
                    this.wy.cs(this.xa);
                    this.rn(false);
                    break;
                case MarkerSeries.$$p[0]:
                case MarkerSeries.$$p[1]:
                    if (this.eg) {
                        this.u5 = this.vf();
                        this.u6 = this.vg();
                    }
                    break;
            }
        }
        static xg(a) {
            switch (a) {
                case 3:
                case 13: return SeriesViewer.$$p[2];
                case 4: return SeriesViewer.$$p[42];
                case 5: return SeriesViewer.$$p[30];
                case 6: return SeriesViewer.$$p[36];
                case 7: return SeriesViewer.$$p[5];
                case 8: return SeriesViewer.$$p[22];
                case 9: return SeriesViewer.$$p[9];
                case 10: return SeriesViewer.$$p[39];
                case 11: return SeriesViewer.$$p[23];
                case 12: return SeriesViewer.$$p[10];
                case 0:
                case 1:
                default: return null;
            }
        }
        static w3(a, b) {
            let c = 1;
            let d = 0;
            if (a != null && a.c9 != null) {
                d = a.c9.bg;
            }
            if (a == null || a.c9 == null) {
                c = 1;
                return c;
            }
            if (b != 2 && b != 0) {
                c = b;
            }
            else {
                if (d == 4) {
                    c = 3;
                }
                else if (d == 5) {
                    c = 4;
                }
                else if (d == 9) {
                    c = 8;
                }
                else if (d == 11) {
                    c = 10;
                }
                else if (d == 8) {
                    c = 7;
                }
                else if (d == 7) {
                    c = 6;
                }
                else if (d == 10) {
                    c = 9;
                }
                else if (d == 12) {
                    c = 11;
                }
                else if (d == 6) {
                    c = 5;
                }
                else if (d == 13) {
                    c = 12;
                }
                else if (d == 1) {
                    c = 1;
                }
                else if (d == 0) {
                    if (a.fj) {
                        c = 1;
                    }
                    else {
                        c = 3;
                    }
                }
                else if (d == 3 || d == 2) {
                    if (d == 2) {
                        if (a.fj) {
                            c = 1;
                            return c;
                        }
                    }
                    if (a.index < 0) {
                        c = 1;
                    }
                    else {
                        let e = [3, 4, 8, 10, 7, 6, 9, 11, 5, 12];
                        c = e[a.index % e.length];
                    }
                }
            }
            return c;
        }
        vi(a) {
            if (this.c9 == null) {
                return this.u3;
            }
            let b = this.c9.uv(this.index + a);
            if (this.w2 == 13) {
                b = this.ct.bt();
            }
            else {
                if (this.wr != 2) {
                    if (this.c9 != null) {
                        let c = b;
                        if (!isNaN_(this.ia) && this.ia != 1) {
                            c = BrushUtil.q(c, this.ia);
                        }
                        b = c;
                    }
                }
                else {
                    return this.vj(a);
                }
            }
            b = this.vn(b);
            return b;
        }
        vj(a) {
            if (this.c9 == null) {
                return this.u3;
            }
            let b = this.c9.uw(this.index + a);
            if (this.w2 == 13) {
                b = this.ct.bt();
            }
            else {
                if (this.wv == 2) {
                    return this.vi(a);
                }
            }
            b = this.vn(b);
            return b;
        }
        sb() {
            super.sb();
            if (this.index < 0) {
                return;
            }
            if (this.wy.b5()) {
                this.wy.ci();
                this.wy.cc();
            }
            else {
                let a = MarkerSeries.w3(this, this.w0);
                if (a == 1 && this.w7()) {
                    a = 13;
                }
                let b = MarkerSeries.xg(a);
                if (b == null) {
                    this.xs = MarkerSeries.xv;
                }
                else {
                    this.wy.cf(b);
                }
            }
            if (this.yb != null && this.w0 != 13) {
                this.r2("ActualMarkerBrush");
                let c = this.x9;
                this.wy.cg();
                this.wy.cd();
                let d = this.x9;
                let e = this.ff("ActualMarkerBrush", this.ht.f > 0 ? this.ht.d() : null, c, d);
                this.r4("ActualMarkerBrush", e);
            }
            else {
                if (this.w0 == 13) {
                    if (!BrushUtilCore.a(this.x9)) {
                        this.r2("ActualMarkerBrush");
                        let f = this.x9;
                        this.x9 = this.ct.bt();
                        let g = this.x9;
                        let h = this.ff("ActualMarkerBrush", this.ht.f > 0 ? this.ht.d() : null, f, g);
                        this.r4("ActualMarkerBrush", h);
                    }
                }
                else {
                    if (this.wr != 2) {
                        if (this.c9 != null) {
                            let i = this.c9.uv(this.index);
                            if (!isNaN_(this.ia) && this.ia != 1) {
                                i = BrushUtil.q(i, this.ia);
                            }
                            this.x9 = i;
                        }
                        else {
                            this.x9 = null;
                        }
                    }
                }
            }
            if (this.yc != null && this.w2 != 13) {
                this.r2("ActualMarkerOutline");
                let j = this.ya;
                this.wy.ch();
                this.wy.ce();
                let k = this.ya;
                let l = this.ff("ActualMarkerOutline", this.ht.f > 0 ? this.ht.d() : null, j, k);
                this.r4("ActualMarkerOutline", l);
            }
            else {
                if (this.w0 == 13) {
                    if (!BrushUtilCore.a(this.ya)) {
                        this.r2("ActualMarkerOutline");
                        let m = this.ya;
                        this.ya = this.ct.bt();
                        let n = this.ya;
                        let o = this.ff("ActualMarkerOutline", this.ht.f > 0 ? this.ht.d() : null, m, n);
                        this.r4("ActualMarkerOutline", o);
                    }
                }
                else {
                    if (this.wv == 2) {
                        this.ya = this.x9;
                    }
                    else {
                        this.ya = this.c9 == null ? null : this.c9.uw(this.index);
                    }
                }
            }
            if (this.wr == 2 && this.yb == null && this.w0 != 13) {
                if (this.ya != null) {
                    let p = this.ya;
                    if (!isNaN_(this.ia) && this.ia != 1) {
                        p = BrushUtil.q(p, this.ia);
                    }
                    this.x9 = p;
                }
                else {
                    this.x9 = null;
                }
            }
        }
        pv(a) {
            super.pv(a);
            this.bb.exportMarkerVisualData(this, a);
        }
        w9(a, b) {
            if (this.hasMarkers && this.w8()) {
                let c = this.wk(a);
                if (c.isEmpty) {
                    return false;
                }
                let d = RectUtil.r(c, this.is(b));
                if (d.containsPoint(a)) {
                    return true;
                }
            }
            return false;
        }
        a1(a, b) {
            let c = this.wy.b1(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            return d;
        }
    }
    MarkerSeries.$t = markType(MarkerSeries, 'MarkerSeries', Series.$);
    MarkerSeries.xr = null;
    MarkerSeries.x0 = DependencyProperty.i("MarkerBrush", Brush.$, MarkerSeries.$, new PropertyMetadata(1, (a, b) => {
        let c = (typeCast(MarkerSeries.$, a));
        c.raisePropertyChanged("MarkerBrush", b.oldValue, b.newValue);
    }));
    MarkerSeries.$$p = markDep(DependencyProperty, PropertyMetadata, MarkerSeries, 'raisePropertyChanged', ['ActualMarkerBrush:x9:xw', [Brush.$], 'ActualMarkerOutline:ya:xx', [Brush.$], 'ActualMarkerTemplate:xs:xy', [DataTemplate.$, null], 'IsCustomMarkerCircular:w5:xz', [0, false], 'MarkerFillMode:ws:x1', [MarkerFillMode_$type, enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:ww:x2', [MarkerOutlineMode_$type, enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:yc:x3', [Brush.$], 'MarkerStyle:yd:x4', [Style.$], 'MarkerTemplate:xu:x5', [DataTemplate.$, null], 'MarkerThickness:xb:x6', [1, DeviceUtils.g(2)], 'MarkerType:w2:x7', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'UseLightweightMarkers:xa:x8', [0, false]]);
    return MarkerSeries;
})();
/**
 * @hidden
 */
export let SyncLink = /*@__PURE__*/ (() => {
    class SyncLink extends FrameworkElement {
        constructor() {
            super();
            this.ak = null;
            this.ah = new Dictionary$2(IEnumerable_$type, FastItemsSourceReference.$, 0);
            this.av = null;
            this.ad = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.aq(a, b.propertyName, b.oldValue, b.newValue));
            this.ad = new ChartCollection();
            let a = this.ad;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.am));
            this.av = new Rect(0, 0, 0, 1, 1);
        }
        aq(a, b, c, d) {
        }
        releaseFastItemsSource(a) {
            if (a != null) {
                let b = null;
                if (((() => { let c = this.ah.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                    --b.b;
                    if (b.b == 0) {
                        this.ah.removeItem(a);
                    }
                }
            }
            return null;
        }
        static af(a) {
            return ((() => {
                let $ret = new FastItemsSource();
                $ret.e = a;
                return $ret;
            })());
        }
        getFastItemsSource(a) {
            if (SyncLink.aj == null) {
                SyncLink.aj = SyncLink.af;
            }
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.ah.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    b = SyncLink.aj(a);
                    c = new FastItemsSourceReference(b);
                    this.ah.addItem(a, c);
                }
                c.b++;
                b = c.a;
            }
            return b;
        }
        ag(a) {
            let b = null;
            if (a != null) {
                let c = null;
                if (!((() => { let d = this.ah.tryGetValue(a, c); c = d.p1; return d.ret; })())) {
                    return null;
                }
                b = c.a;
            }
            return b;
        }
        aw(a, b, c) {
            return this.ax(a, b, c, false);
        }
        ax(a, b, c, d) {
            if (!c.isEmpty) {
                c = new Rect(0, c.left, c.top, c.width, c.height);
                let e = a.hf;
                let f = a.he;
                if (b == a) {
                    if (!d) {
                        if (!b.fh()) {
                            c.x = b.v1.x;
                            c.width = b.v1.width;
                        }
                        if (!b.fi()) {
                            c.y = b.v1.y;
                            c.height = b.v1.height;
                        }
                    }
                }
                else {
                    let g = SyncManager.a(b);
                    if (g == null || !g.synchronizeHorizontally) {
                        c.x = b.v1.x;
                        c.width = b.v1.width;
                    }
                    if (g == null || !g.synchronizeVertically) {
                        c.y = b.v1.y;
                        c.height = b.v1.height;
                    }
                }
                let h = 0.5 * (c.left + c.right);
                let i = 0.5 * (c.top + c.bottom);
                let j = c.width;
                let k = c.height;
                let l = MathUtil.d(c.width, e, 1);
                let m = MathUtil.d(c.height, f, 1);
                let n = false;
                if (a.ga() && !a.v0.isEmpty) {
                    let o = a.v0;
                    let p = o.width / o.height;
                    let q = l * o.width;
                    let r = m * o.height;
                    let s = q / r;
                    if (s != p) {
                        if (r * p > q) {
                            q = r * p;
                            l = q / o.width;
                        }
                        else {
                            r = q / p;
                            m = r / o.height;
                        }
                    }
                }
                else if (a.es()) {
                    let t = false;
                    let u = false;
                    if (Math.abs(l - a.vl.width) > e) {
                        t = true;
                    }
                    if (Math.abs(m - a.vl.height) > f) {
                        u = true;
                    }
                    let v = a.nu(l, m, t, u);
                    l = v.p0;
                    m = v.p1;
                    l = MathUtil.d(l, e, 1);
                    m = MathUtil.d(m, f, 1);
                }
                else if (b.f2) {
                    let w = 1.7976931348623157E+308;
                    let x = -1.7976931348623157E+308;
                    let y = 1.7976931348623157E+308;
                    let z = -1.7976931348623157E+308;
                    let aa = c.left;
                    let ab = c.right;
                    let ac = c.top;
                    let ad = c.bottom;
                    let ae = c.width;
                    let af = c.height;
                    if (b.cr == 1) {
                        if (aa < 0) {
                            aa = 0;
                            ab = aa + ae;
                        }
                        if (ab > 1) {
                            ab = 1;
                            aa = ab - ae;
                        }
                        if (ac < 0) {
                            ac = 0;
                            ad = ac + af;
                        }
                        if (ad > 1) {
                            ad = 1;
                            ac = ad - af;
                        }
                    }
                    let ag = new Rect(0, aa, ac, ab - aa, ad - ac);
                    let ah = [w, x];
                    let ai = [y, z];
                    for (let aj = 0; aj < b.series.count; aj++) {
                        let ak = b.series._inner[aj];
                        if (ak.eq) {
                            continue;
                        }
                        {
                            let al = ak;
                            if (al.isVertical) {
                                if (c.height < 1) {
                                    ai = this.ac(al, b, ag, ai);
                                    y = ai[0];
                                    z = ai[1];
                                }
                            }
                            else {
                                if (c.width < 1) {
                                    ah = this.ab(al, b, ag, ah);
                                    w = ah[0];
                                    x = ah[1];
                                }
                            }
                        }
                    }
                    let am = (w == 1.7976931348623157E+308 || x == -1.7976931348623157E+308 || isNaN_(w) || isNaN_(x));
                    let an = (y == 1.7976931348623157E+308 || z == -1.7976931348623157E+308 || isNaN_(y) || isNaN_(z));
                    if (!am || !an) {
                        if (am) {
                            c = new Rect(0, y, c.top, z - y, c.height);
                        }
                        else if (an) {
                            c = new Rect(0, c.left, w, c.width, x - w);
                        }
                        else {
                            c = new Rect(0, y, w, z - y, x - w);
                        }
                        l = c.width;
                        m = c.height;
                        n = true;
                    }
                }
                let ao = l != j;
                let ap = m != k;
                let aq = ao && !n ? h - 0.5 * l : c.left;
                let ar = ap && !n ? i - 0.5 * m : c.top;
                let as = ao && !n ? h + 0.5 * l : c.right;
                let at = ap && !n ? i + 0.5 * m : c.bottom;
                if (b.cr == 1) {
                    if (aq < 0) {
                        aq = 0;
                        as = aq + l;
                    }
                    if (as > 1) {
                        as = 1;
                        aq = as - l;
                    }
                    if (ar < 0) {
                        ar = 0;
                        at = ar + m;
                    }
                    if (at > 1) {
                        at = 1;
                        ar = at - m;
                    }
                }
                c = new Rect(0, aq, ar, as - aq, at - ar);
            }
            return c;
        }
        ab(a, b, c, d) {
            let e = a.ai();
            let f = d[0];
            let g = d[1];
            let h = null;
            for (let i = 0; i < e.length; i++) {
                if (e[i].cp) {
                    h = e[i];
                }
            }
            if (h != null) {
                let j = new Rect(0, 0, 0, 1, 1);
                let k = new ScalerParams(0, j, j, h.ch, b.vu(j, b.v0, b.vp));
                k.b = a.iw();
                let l = a.ay(c);
                let m = l == null || l.c == 1.7976931348623157E+308 || isNaN_(l.c);
                if (m) {
                    return d;
                }
                let n = h.ek(l.c, k);
                let o = h.ek(l.b, k);
                if (h.ch) {
                    let p = n;
                    n = o;
                    o = p;
                }
                g = Math.max(g, n);
                f = Math.min(f, o);
                if (a.cv == 2) {
                    if (h.cj) {
                        let q = h;
                        let r = q.l8;
                        r = h.d1(r, k);
                        let s = h.ek(r, k);
                        g = Math.max(g, s);
                        f = Math.min(f, s);
                    }
                }
            }
            d[0] = f;
            d[1] = g;
            return d;
        }
        ac(a, b, c, d) {
            let e = a.ai();
            let f = d[0];
            let g = d[1];
            let h = null;
            for (let i = 0; i < e.length; i++) {
                if (!e[i].cp) {
                    h = e[i];
                }
            }
            if (h != null) {
                let j = new Rect(0, 0, 0, 1, 1);
                let k = new ScalerParams(0, j, j, h.ch, b.vu(j, b.v0, b.vp));
                k.b = a.iw();
                let l = a.ay(c);
                let m = l == null || l.c == 1.7976931348623157E+308 || isNaN_(l.c);
                if (m) {
                    return d;
                }
                let n = h.ek(l.c, k);
                let o = h.ek(l.b, k);
                if (h.ch) {
                    let p = n;
                    n = o;
                    o = p;
                }
                g = Math.max(g, o);
                f = Math.min(f, n);
                if (a.cv == 2) {
                    if (h.cj) {
                        let q = h;
                        let r = q.l8;
                        r = h.d1(r, k);
                        let s = h.ek(r, k);
                        g = Math.max(g, s);
                        f = Math.min(f, s);
                    }
                }
            }
            d[0] = f;
            d[1] = g;
            return d;
        }
        get ai() {
            return this.ad;
        }
        al(a) {
            this.ad.add(a);
        }
        as(a) {
            this.ad.remove(a);
        }
        ao() {
            for (let a of fromEnum(this.ad)) {
                if (a.v1.isEmpty) {
                    a.v1 = this.aw(null, a, this.av);
                }
            }
        }
        am(a, b) {
            if (b.newItems != null) {
                for (let c of fromEn(b.newItems)) {
                    if (c.v1.isEmpty) {
                        c.v1 = this.aw(null, c, this.av);
                    }
                }
            }
        }
        an(a, b) {
            for (let c of fromEnum(this.ai)) {
                if (c == a) {
                    c.vc = { $type: Point_$type, x: b.x, y: b.y };
                }
                else {
                    let d = { $type: Point_$type, x: b.x, y: b.y };
                    let e = SyncManager.a(c);
                    if (e == null || !e.synchronizeHorizontally) {
                        d.x = NaN;
                    }
                    if (e == null || !e.synchronizeVertically) {
                        d.y = NaN;
                    }
                    c.vc = d;
                }
            }
        }
        ap(a, b) {
            for (let c of fromEnum(this.ai)) {
                c.vv = this.aw(a, c, b);
            }
        }
        at(a, b) {
            this.au(a, b, false);
        }
        au(a, b, c) {
            let d = b.isEmpty || isNaN_(b.x) || isNaN_(b.y) || isNaN_(b.width) || isNaN_(b.height);
            if (!d && !a.eq) {
                for (let e of fromEnum(this.ai)) {
                    e.eq = true;
                    e.v1 = this.ax(a, e, b, c);
                    e.eq = false;
                }
            }
        }
        ar(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
    }
    SyncLink.$t = markType(SyncLink, 'SyncLink', FrameworkElement.$, [INotifyPropertyChanged_$type, IFastItemsSourceProvider_$type]);
    SyncLink.aj = null;
    return SyncLink;
})();
/**
 * @hidden
 */
export let SyncLinkManager = /*@__PURE__*/ (() => {
    class SyncLinkManager extends Base {
        constructor() {
            super();
            this.d = null;
            this.d = new Dictionary$2(String_$type, SyncLink.$, 0);
        }
        static instance() {
            if (SyncLinkManager.b == null) {
                SyncLinkManager.b = new SyncLinkManager();
            }
            return SyncLinkManager.b;
        }
        get e() {
            return this.d.count;
        }
        getLink(a) {
            let b;
            if (((() => { let c = this.d.tryGetValue(a, b); b = c.p1; return c.ret; })())) {
                return b;
            }
            b = new SyncLink();
            b.ak = a;
            this.d.addItem(a, b);
            return b;
        }
        releaseLink(a) {
            if (a.ai.count == 0 && a.ak != null && this.d.containsKey(a.ak)) {
                this.d.removeItem(a.ak);
            }
        }
    }
    SyncLinkManager.$t = markType(SyncLinkManager, 'SyncLinkManager');
    SyncLinkManager.b = null;
    return SyncLinkManager;
})();
/**
 * @hidden
 */
export let SyncManager = /*@__PURE__*/ (() => {
    class SyncManager extends Base {
        static e(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (!a.fc) {
                return;
            }
            if (a.syncChannel != b.syncChannel) {
                return;
            }
            SyncManager.b(a, a.syncChannel, null);
        }
        static c(a) {
            let b = SyncManager.a(a);
            if (b == null) {
                return;
            }
            if (a.fc && a.syncChannel == b.syncChannel) {
                return;
            }
            let c = null;
            if (a.fc) {
                c = a.syncChannel;
            }
            SyncManager.b(a, c, b.syncChannel);
        }
        static b(a, b, c) {
            if (a != null) {
                if (stringIsNullOrEmpty(c)) {
                    let d = a.actualSyncLink;
                    a.actualSyncLink = null;
                    a.actualSyncLink = new SyncLink();
                    if (d != null) {
                        SyncLinkManager.instance().releaseLink(d);
                    }
                    a.syncChannel = null;
                }
                else {
                    if (!stringIsNullOrEmpty(b)) {
                        let e = a.actualSyncLink;
                        a.actualSyncLink = null;
                        if (e != null) {
                            SyncLinkManager.instance().releaseLink(e);
                        }
                    }
                    a.actualSyncLink = SyncLinkManager.instance().getLink(c);
                    a.syncChannel = c;
                }
            }
        }
        static d(a, b) {
            a.syncSettings = b;
        }
        static a(a) {
            return a.syncSettings;
        }
    }
    SyncManager.$t = markType(SyncManager, 'SyncManager');
    return SyncManager;
})();
/**
 * @hidden
 */
export let ChartCollection = /*@__PURE__*/ (() => {
    class ChartCollection extends ObservableCollection$1 {
        constructor() {
            super(SeriesViewer.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    ChartCollection.$t = markType(ChartCollection, 'ChartCollection', ObservableCollection$1.$.specialize(SeriesViewer.$));
    return ChartCollection;
})();
/**
 * @hidden
 */
export let SeriesCollection = /*@__PURE__*/ (() => {
    class SeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(Series.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    SeriesCollection.$t = markType(SeriesCollection, 'SeriesCollection', ObservableCollection$1.$.specialize(Series.$));
    return SeriesCollection;
})();
/**
 * @hidden
 */
export let PlotAreaMouseEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._isDuringManipulation = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get isDuringManipulation() {
            return this._isDuringManipulation;
        }
        set isDuringManipulation(a) {
            this._isDuringManipulation = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseEventArgs.$t = markType(PlotAreaMouseEventArgs, 'PlotAreaMouseEventArgs', EventArgs.$);
    return PlotAreaMouseEventArgs;
})();
/**
 * @hidden
 */
export let PlotAreaMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class PlotAreaMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._chartPosition = null;
            this._plotAreaPosition = null;
            this._manipulationOccurred = false;
            this._viewer = null;
            this.viewer = a;
            this.chartPosition = b;
            this.plotAreaPosition = c;
        }
        get chartPosition() {
            return this._chartPosition;
        }
        set chartPosition(a) {
            this._chartPosition = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get manipulationOccurred() {
            return this._manipulationOccurred;
        }
        set manipulationOccurred(a) {
            this._manipulationOccurred = a;
        }
        get viewer() {
            return this._viewer;
        }
        set viewer(a) {
            this._viewer = a;
        }
    }
    PlotAreaMouseButtonEventArgs.$t = markType(PlotAreaMouseButtonEventArgs, 'PlotAreaMouseButtonEventArgs', EventArgs.$);
    return PlotAreaMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartCursorEventArgs = /*@__PURE__*/ (() => {
    class ChartCursorEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._item = null;
            this._series = null;
            this._seriesViewer = null;
            this.seriesViewer = a;
            this.series = b;
            this.item = c;
        }
        toString() {
            return this.seriesViewer.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "");
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get seriesViewer() {
            return this._seriesViewer;
        }
        set seriesViewer(a) {
            this._seriesViewer = a;
        }
        get chart() {
            return typeCast(XamDataChart.$, this.seriesViewer);
        }
    }
    ChartCursorEventArgs.$t = markType(ChartCursorEventArgs, 'ChartCursorEventArgs', EventArgs.$);
    return ChartCursorEventArgs;
})();
/**
 * @hidden
 */
export let SeriesViewerSelectedSeriesItemsChangedEventArgs = /*@__PURE__*/ (() => {
    class SeriesViewerSelectedSeriesItemsChangedEventArgs extends EventArgs {
        constructor(a, b, c) {
            super();
            this._oldItems = null;
            this._newItems = null;
            this._currentItems = null;
            this.oldItems = a;
            this.newItems = b;
            this.currentItems = c;
        }
        get oldItems() {
            return this._oldItems;
        }
        set oldItems(a) {
            this._oldItems = a;
        }
        get newItems() {
            return this._newItems;
        }
        set newItems(a) {
            this._newItems = a;
        }
        get currentItems() {
            return this._currentItems;
        }
        set currentItems(a) {
            this._currentItems = a;
        }
    }
    SeriesViewerSelectedSeriesItemsChangedEventArgs.$t = markType(SeriesViewerSelectedSeriesItemsChangedEventArgs, 'SeriesViewerSelectedSeriesItemsChangedEventArgs', EventArgs.$);
    return SeriesViewerSelectedSeriesItemsChangedEventArgs;
})();
/**
 * @hidden
 */
export let DataChartMouseButtonEventArgs = /*@__PURE__*/ (() => {
    class DataChartMouseButtonEventArgs extends EventArgs {
        constructor(a, b, c, d, e) {
            super();
            this.h = { $type: Point_$type, x: NaN, y: NaN };
            this.g = null;
            this._item = null;
            this._series = null;
            this._plotAreaPosition = null;
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.g = d;
            this.plotAreaPosition = e;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        get handled() {
            return this.g.handled;
        }
        set handled(a) {
            this.g.handled = a;
        }
        getPosition(a) {
            return this.g.getPosition(a);
        }
        get originalSource() {
            return this.g.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get chartPosition() {
            if (isNaN_(this.h.x) && isNaN_(this.h.y)) {
                this.h.x = this.plotAreaPosition.x - this.chart.v0.left;
                this.h.y = this.plotAreaPosition.y - this.chart.v0.top;
            }
            return this.h;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    DataChartMouseButtonEventArgs.$t = markType(DataChartMouseButtonEventArgs, 'DataChartMouseButtonEventArgs', EventArgs.$);
    return DataChartMouseButtonEventArgs;
})();
/**
 * @hidden
 */
export let ChartMouseEventArgs = /*@__PURE__*/ (() => {
    class ChartMouseEventArgs extends EventArgs {
        constructor(a, b, c, d, e) {
            super();
            this.f = null;
            this._item = null;
            this._series = null;
            this._plotAreaPosition = null;
            this.g = { $type: Point_$type, x: NaN, y: NaN };
            this._chart = null;
            this.chart = a;
            this.series = b;
            this.item = c;
            this.f = d;
            this.plotAreaPosition = e;
        }
        toString() {
            return this.chart.name + ", " + this.series.name + ", " + (this.item != null ? this.item.toString() : "") + ", " + this.getPosition(null).toString();
        }
        getPosition(a) {
            return this.f.getPosition(a);
        }
        get originalSource() {
            return this.f.originalSource;
        }
        get item() {
            return this._item;
        }
        set item(a) {
            this._item = a;
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        get plotAreaPosition() {
            return this._plotAreaPosition;
        }
        set plotAreaPosition(a) {
            this._plotAreaPosition = a;
        }
        get chartPosition() {
            if (isNaN_(this.g.x) && isNaN_(this.g.y)) {
                this.g.x = this.plotAreaPosition.x - this.chart.v0.left;
                this.g.y = this.plotAreaPosition.y - this.chart.v0.top;
            }
            return this.g;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
    }
    ChartMouseEventArgs.$t = markType(ChartMouseEventArgs, 'ChartMouseEventArgs', EventArgs.$);
    return ChartMouseEventArgs;
})();
/**
 * @hidden
 */
export let AxisComponentsForView = /*@__PURE__*/ (() => {
    class AxisComponentsForView extends Base {
        constructor() {
            super(...arguments);
            this.a = null;
        }
    }
    AxisComponentsForView.$t = markType(AxisComponentsForView, 'AxisComponentsForView');
    return AxisComponentsForView;
})();
/**
 * @hidden
 */
export let AxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class AxisLabelPanelBaseView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.aw = null;
            this.e = null;
            this.av = Rect.empty;
            this.c = null;
            this.h = 0;
            this.i = NaN;
            this.a = a;
        }
        aa(a, b, c, d, e, f) {
            let g = typeCast(FrameworkElement.$, a);
            if (g != null) {
                g._visibility = 0;
                if (b.width == 0 && b.height == 0) {
                    g._visibility = 1;
                }
                let h = b.height - (d + f);
                let i = b.width - (c + e);
                g.n = b.left + c;
                g.o = b.top + d;
                if (i < 0) {
                    i = 0;
                }
                if (h < 0) {
                    h = 0;
                }
                g.l = h;
                g.m = i;
                if (g.j != null) {
                    let j = g.j;
                    let k = j.j._inner[0];
                    k.k = k.k + g.n;
                    k.l = k.l + g.o;
                }
            }
        }
        z(a, b, c, d, e, f, g, h) {
            let i = Math.max(e, Math.max(f, Math.max(g, h)));
            let j = new Thickness(0, i);
            if (this.a.av) {
                j = new Thickness(0, Math.sqrt((i * i) / 2));
            }
            let k = c.d;
            if (isNaN_(k.left) || isNaN_(k.top) || isNaN_(k.right) || isNaN_(k.bottom)) {
                k = j;
            }
            if (k.left > j.left || k.top > j.top || k.right > j.right || k.bottom > j.bottom) {
                k = j;
            }
            let l = new Rect(0, d.left - k.left, d.top - k.top, d.width + k.left + k.right, d.height + k.top + k.bottom);
            let m = a.j;
            a.j = null;
            this.aa(a, l, e, f, g, h);
            a.j = m;
            a.width = a.m;
            a.height = a.l;
        }
        ae(a) {
            let b = a;
            b.j = null;
        }
        ah(a) {
        }
        ai(a, b) {
        }
        aj(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = 0;
            let e = 0;
            let f = new TransformGroup();
            let g = ((() => {
                let $ret = new RotateTransform();
                $ret.j = b;
                $ret.k = d;
                $ret.l = e;
                return $ret;
            })());
            f.j.add(g);
            c.j = f;
        }
        ar(a, b, c, d, e, f, g, h, i) {
            let j = Math.max(e, Math.max(f, Math.max(g, h)));
            let k = new Thickness(0, j);
            if (this.a.av) {
                k = new Thickness(0, Math.sqrt((j * j) / 2));
            }
            let l = c.d;
            if (isNaN_(l.left) || isNaN_(l.top) || isNaN_(l.right) || isNaN_(l.bottom)) {
                l = k;
            }
            if (l.left > k.left || l.top > k.top || l.right > k.right || l.bottom > k.bottom) {
                l = k;
            }
            let m = b.j;
            let n = new TransformGroup();
            let o = a.n + l.left;
            let p = a.o + l.top;
            n.j.add(m);
            a.j = n;
        }
        ad(a) {
            a.j = null;
        }
        x(a, b, c, d) {
            let e = a.al.length;
            let f = a.al;
            let g = a.al;
            while ((this.m(a) + c + d) > b && e > 0) {
                e--;
                f = f.substr(0, e) + "\u2026";
                a.al = f;
            }
            a.al = g;
            return f;
        }
        af() {
            if (this.e == null) {
                return;
            }
            let a = this.g();
            for (let b of fromEnum(a)) {
                let c = typeCast(FrameworkElement.$, b);
                if (c != null) {
                    this.a.cg(c);
                }
                this.a.b7(b);
            }
        }
        g() {
            let a = this.a.a1();
            let b = this.a.a0();
            if (!this.a.ad.c7) {
                return a;
            }
            else {
                return b;
            }
        }
        l(a) {
            if (this.a.ad != null && this.a.ad.bz) {
                return this.ax(a).height;
            }
            else {
                return this.h;
            }
        }
        n(a) {
            return this.l(a) + this.r() + this.o();
        }
        an() {
            this.aw = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
        }
        m(a) {
            if (this.a.ad != null && this.a.ad.bz) {
                return this.ax(a).width;
            }
            else {
                let b = a;
                if (b != null && b.al != null) {
                    return this.e.f(b);
                }
                return 0;
            }
        }
        w(a) {
            let b = a;
            if (b != null && b.al != null) {
                return this.m(a) + this.p() + this.q();
            }
            return 0;
        }
        ax(a) {
            let b = a;
            if (b != null && b.al != null) {
                b.ag = true;
                let c = this.e.ah(b, this.h, true);
                return new Size(1, c.c, c.b);
            }
            return new Size(1, 0, 0);
        }
        ac() {
            this.a.bh = this.a.ad.eq();
        }
        ak() {
            this.ag();
            this.a.c8(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
        }
        f() {
            return this.e;
        }
        al(a) {
            this.e = a;
        }
        y() {
            if (this.a.c1.isEmpty) {
                return;
            }
            let a = this.a.bd;
            this.a.c6(new Size(1, this.a.c1.width, this.a.c1.height));
            if (this.a.bd != a) {
                this.a.ad.bg.nr();
                this.am();
            }
        }
        am() {
        }
        ap(a) {
            this.e.x(a);
        }
        ao() {
            if (this.e == null) {
                return;
            }
            if (this.e.d) {
                if (this.a.ad.bi != null && this.a.ad.bi.hb != 1) {
                    this.e.aa();
                    this.e.ab(this.a.ad.bi.hb, this.a.ad.bi.hb);
                }
                this.ag();
                this.av = this.a.c1;
                let a = this.a.ad.bg.getFontBrush();
                if (this.a.ag != null && this.a.ag.textColor != null) {
                    a = this.a.ag.textColor;
                }
                if (this.a.j != null) {
                    this.e.aa();
                    this.e.k(this.a.j);
                }
                let b = false;
                for (let c of fromEnum(this.g())) {
                    let d = typeCast(TextBlock.$, c);
                    if (d != null) {
                        if (d.s != 0) {
                            b = true;
                            continue;
                        }
                        d.ao = a;
                        if (d.j != null) {
                            this.e.aa();
                            this.e.k(d.j);
                        }
                        this.ap(d);
                        if (d.j != null) {
                            this.e.z();
                        }
                    }
                }
                if (b) {
                    for (let e of fromEnum(this.a.ab)) {
                        let f = typeCast(Rectangle.$, e);
                        if (f != null) {
                            if (f.s == 0) {
                                continue;
                            }
                            if (f.j != null) {
                                this.e.aa();
                                this.e.k(f.j);
                            }
                            this.e.w(f);
                            if (f.j != null) {
                                this.e.z();
                            }
                        }
                        let g = typeCast(TextBlock.$, e);
                        if (g != null) {
                            if (g.s == 0) {
                                continue;
                            }
                            if (g.j != null) {
                                this.e.aa();
                                this.e.k(g.j);
                            }
                            if (g.ao == null) {
                                g.ao = a;
                            }
                            this.e.x(g);
                            if (g.j != null) {
                                this.e.z();
                            }
                        }
                    }
                }
                if (this.a.j != null) {
                    this.e.z();
                }
                this.aq();
                a = this.at();
                this.e.ad(this.d());
                let h = this.a.ad.it;
                if (h != null) {
                    h.ao = a;
                    if (h.j != null) {
                        this.e.aa();
                        this.e.k(h.j);
                    }
                    this.e.x(h);
                    if (h.j != null) {
                        this.e.z();
                    }
                }
                if (this.a.ad.bi != null && this.a.ad.bi.hb != 1) {
                    this.e.z();
                }
            }
        }
        d() {
            let a = this.a.ad.bi.getFontInfo();
            if (this.a.ad.bf != null && this.a.ad.bf.textStyle != null) {
                a = this.a.ad.bf.h(this.a.ad.bi.c8.j.ae);
            }
            else {
                let b = this.a.ad.bi.dd();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        at() {
            let a = this.a.ad.bg.getFontBrush();
            if (this.a.ad.bf != null && this.a.ad.bf.textColor != null) {
                a = this.a.ad.bf.textColor;
            }
            else {
                let b = this.a.ad.bi.us();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        ag() {
            if (this.e == null) {
                return;
            }
            let a = this.a.ad.bi.getFontInfo();
            if (this.a.ag != null && this.a.ag.j) {
                a = this.a.ag.h(this.a.ad.bi.c8.j.ae);
            }
            if (this.c != a) {
                this.c = a;
                this.as();
            }
            this.e.ad(a);
        }
        as() {
            if (this.a.ad != null && this.a.ad.bi != null) {
                if (this.a.ag == null || this.a.ag.textStyle == null) {
                    this.h = this.a.ad.bi.c8.a9;
                    return;
                }
                if (this.h == 0) {
                    this.h = this.a.ad.bi.c8.a9;
                }
                let a = this.h;
                let b = this.a.ad.bi.getFontInfo();
                if (this.a.ag != null && this.a.ag.textStyle != null) {
                    b = this.a.ag.h(this.a.ad.bi.c8.j.ae);
                }
                let c = FontUtil.getCurrentFontHeight(this.a.ad.bi.c8.j.ae, b);
                this.h = c;
                if (a != this.h) {
                    this.a.ad.bi.nr();
                }
            }
        }
        j() {
            if (this.a.ad.g7 == null) {
                return 0;
            }
            if (this.a.ad.bf != null && this.a.ad.bf.visibility == 1) {
                return 0;
            }
            if (!isNaN_(this.i)) {
                return this.i;
            }
            let a = this.d();
            if (this.a.ad.bi == null) {
                return this.h;
            }
            this.i = FontUtil.getCurrentFontHeight(this.a.ad.bi.c8.j.ae, a);
            return this.i;
        }
        k() {
            if (this.a.ad.bf != null && this.a.ad.bf.visibility == 1) {
                return 0;
            }
            if (this.e == null) {
                return 0;
            }
            let a = this.a.ad.it;
            if (a != null && a.al != null) {
                this.e.ad(this.d());
                let b = this.e.f(a);
                this.ag();
                return b;
            }
            return 0;
        }
        aq() {
            if (this.a.ab.count == 0) {
                return;
            }
            if (this.a.ad.j1 == null) {
                this.aw._stroke = this.a.ad.bg.up();
            }
            else {
                this.aw._stroke = this.a.ad.j1;
            }
            this.aw.ad = this.a.ad.fj;
            this.e.t(this.aw);
        }
        ab(a) {
        }
        ay() {
            return this.a.ad.bi.v3();
        }
        v() {
            if (this.a.ad.bf != null && !isNaN_(this.a.ad.bf.topMargin)) {
                return Math.max(0, this.a.ad.bf.topMargin);
            }
            else {
                return this.ay().top;
            }
        }
        s() {
            if (this.a.ad.bf != null && !isNaN_(this.a.ad.bf.bottomMargin)) {
                return Math.max(0, this.a.ad.bf.bottomMargin);
            }
            else {
                return this.ay().bottom;
            }
        }
        t() {
            if (this.a.ad.bf != null && !isNaN_(this.a.ad.bf.leftMargin)) {
                return Math.max(0, this.a.ad.bf.leftMargin);
            }
            else {
                return this.ay().left;
            }
        }
        u() {
            if (this.a.ad.bf != null && !isNaN_(this.a.ad.bf.rightMargin)) {
                return Math.max(0, this.a.ad.bf.rightMargin);
            }
            else {
                return this.ay().right;
            }
        }
        au() {
            return this.aw.an.d;
        }
        b() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.ad.j1;
                $ret.c = this.a.ad.fj;
                return $ret;
            })());
            if (this.a.ad != null && typeCast(XamDataChart.$, this.a.ad.bg) !== null) {
                let b = this.a.ad.bg;
                if (b.ws && b.cz != 2 && b.cz != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        r() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.topMargin);
        }
        p() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.leftMargin);
        }
        q() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.rightMargin);
        }
        o() {
            if (this.a.ag == null) {
                return 0;
            }
            return Math.max(0, this.a.ag.bottomMargin);
        }
    }
    AxisLabelPanelBaseView.$t = markType(AxisLabelPanelBaseView, 'AxisLabelPanelBaseView');
    return AxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let AxisView = /*@__PURE__*/ (() => {
    class AxisView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.bd = null;
            this.be = null;
            this.bg = null;
            this.bf = null;
            this.b = new AxisComponentsFromView();
            this.h = null;
            this.k = null;
            this.j = null;
            this._isDirty = false;
            this.bh = null;
            this.bb = Rect.empty;
            this.a = a;
            this.bh = new Rectangle();
        }
        al() {
            this.bd = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                return $ret;
            })());
            this.bg = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                $ret.ab = false;
                $ret.stroke = null;
                return $ret;
            })());
            this.be = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.bf = ((() => {
                let $ret = new Path();
                $ret.an = new GeometryGroup();
                $ret.ab = false;
                return $ret;
            })());
            this.a.j1 = AxisDefaults.j;
            this.a.fi = AxisDefaults.d;
            this.a.fj = AxisDefaults.e;
            this.a.es = AxisDefaults.b;
            this.a.ev = AxisDefaults.c;
            this.a.fh = AxisDefaults.a;
        }
        an(a) {
        }
        a3() {
            let a = new TextBlock();
            return a;
        }
        aw(a) {
            a._visibility = 0;
            a.s = 0;
            if (a.x == null) {
                this.a.aw.ab.add(a);
            }
        }
        ay(a) {
            a._visibility = 1;
        }
        ax(a) {
            if (this.a.aw.ab.contains(a)) {
                this.a.aw.ab.remove(a);
            }
        }
        bi() {
            let a = new Rectangle();
            return a;
        }
        t(a) {
            if (a.x == null) {
                this.d.ab.add(a);
            }
            a._visibility = 0;
        }
        v(a) {
            a._visibility = 1;
        }
        u(a) {
            if (this.a.aw.ab.contains(a)) {
                this.a.aw.ab.remove(a);
            }
        }
        ao() {
        }
        p() {
            return true;
        }
        get index() {
            if (this.a.bi != null && this.a.bi.e9) {
                return this.a.bi.series.count + 1;
            }
            let a = typeCast(XamDataChart.$, this.a.bg);
            let b = 0;
            if (a == null) {
                return 0;
            }
            if (a != null && a.wc == 1) {
                let c = 0;
                for (let d = 0; d < this.a.bi.series.count; d++) {
                    if (this.a.bi.series._inner[d].isStacked) {
                        c += this.a.bi.series._inner[d].ka();
                    }
                    else {
                        c++;
                    }
                }
                b = c;
            }
            return b + a.axes.indexOf(this.a);
        }
        ai() {
            this.d.cf();
            this.d.b3();
        }
        ag() {
            this.d.ca();
        }
        ac() {
            if (this.d != null) {
                this.d.ab.clear();
            }
            this.ae(this.bd.an.d);
            this.ae(this.bg.an.d);
            this.ae(this.be.an.d);
            this.ae(this.bf.an.d);
            this.aj();
        }
        a1(a) {
            this.bd._visibility = a;
            this.be._visibility = a;
            this.bg._visibility = a;
            this.bf._visibility = a;
        }
        at() {
        }
        ab(a) {
            this.a.cq = true;
            if (this.a.bi != null) {
                this.a.bi.nr();
            }
            this.a.h8();
        }
        c() {
            this.b.a = this.bd;
            this.b.b = this.be;
            this.b.c = this.bf;
            this.b.d = this.bg;
            return this.b;
        }
        ae(a) {
            if (a != null) {
                a.clear();
            }
        }
        a4() {
            return this.bd.an.d;
        }
        e() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.j0;
                $ret.c = this.a.fh;
                $ret.f = this.a.j4;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bg) !== null) {
                let b = this.a.bg;
                if (b.ws && b.cz != 2 && b.cz != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a7() {
            return this.bg.an.d;
        }
        a5() {
            return this.be.an.d;
        }
        f() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jx;
                $ret.c = this.a.es;
                $ret.f = this.a.j2;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bg) !== null) {
                let b = this.a.bg;
                if (b.ws && b.cz != 2 && b.cz != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        a6() {
            return this.bf.an.d;
        }
        g() {
            let a = ((() => {
                let $ret = new PathRenderingInfo();
                $ret.e = this.a.jy;
                $ret.c = this.a.ev;
                $ret.f = this.a.j3;
                return $ret;
            })());
            if (typeCast(XamDataChart.$, this.a.bg) !== null) {
                let b = this.a.bg;
                if (b.ws && b.cz != 2 && b.cz != 1) {
                    a.a = true;
                }
            }
            return a;
        }
        get d() {
            return this.a.aq().a;
        }
        az(a, b, c) {
            this.d.ad = a;
            this.d.c5 = b;
            this.d.c4 = c;
            this.aj();
        }
        ad() {
            this.d.ab.clear();
            this.aj();
        }
        av(a) {
            this.d.bw = a;
            this.aj();
        }
        a0(a, b) {
            this.d.a9 = a;
            this.d.ba = b;
            this.d.ar = false;
        }
        au(a) {
            this.d.bg = a;
        }
        aa() {
        }
        s(a) {
            return null;
        }
        z() {
        }
        aq() {
        }
        l() {
            return true;
        }
        o() {
            return false;
        }
        m() {
            return false;
        }
        r(dataItem_) {
            if (this.a.au != null) {
                return this.a.au(dataItem_);
            }
            if (this.a.ai != null) {
                return this.a.ai.i(dataItem_);
            }
            return null;
        }
        q(dataItem_) {
            if (this.o() && this.m()) {
                return this.r(dataItem_);
            }
            else {
                if (this.a.au != null) {
                    return this.a.au(dataItem_);
                }
                if (this.a.ai != null) {
                    return this.a.ai.i(dataItem_);
                }
            }
            let label_ = this.a.f1;
            let a = typeof dataItem_ === 'number' && typeof label_ === 'string';
            let labelValue_ = null;
            if (this.h != null) {
                labelValue_ = this.h.getPropertyValue(dataItem_);
                if ((labelValue_ === undefined)) {
                    labelValue_ = label_;
                }
            }
            else {
                labelValue_ = a ? stringFormat(label_, dataItem_) : (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;
                ;
            }
            if (this.a.expectFunctions) {
                if ((typeof (labelValue_) == 'function')) {
                    labelValue_ = labelValue_();
                }
            }
            return labelValue_;
        }
        ak(a, b) {
            this.j = a;
            this.k = b;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        aj() {
            if (this.a.bg == null || this.j == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.bg.al.r(this.j, this.k);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.ar(a);
        }
        ar(a) {
            if (this.j == null) {
                return;
            }
            if (this.j.d) {
                if (this.a.bi != null && this.a.bi.hb != 1) {
                    this.j.aa();
                    this.j.ab(this.a.bi.hb, this.a.bi.hb);
                }
                let b = this.a.bg.vq();
                if (a) {
                    if (!this.j.e) {
                        this.j.l(b.left, b.top, b.width, b.height);
                    }
                }
                if (a) {
                    if (this.a.bi.u1 != null && !this.a.ke.isEmpty) {
                        this.bh.o = this.a.ke.top;
                        this.bh.n = this.a.ke.left;
                        this.bh.width = this.a.ke.width;
                        this.bh.height = this.a.ke.height;
                        this.bh._fill = this.a.bi.u1;
                        this.j.w(this.bh);
                    }
                }
                this.j.aa();
                this.j.af(this.a.ke);
                this.as();
                this.j.z();
                if (this.a.bi != null && this.a.bi.hb != 1) {
                    this.j.z();
                }
            }
            if (this.k.d) {
                if (this.a.bi != null && this.a.bi.hb != 1) {
                    this.k.aa();
                    this.k.ab(this.a.bi.hb, this.a.bi.hb);
                }
                let c = this.bb;
                let d = this.a.bg.vq();
                if (!c.isEmpty && a) {
                    if (!this.k.e) {
                        this.k.l(d.left, d.top, d.width, d.height);
                    }
                }
                if (this.a.bi != null && this.a.bi.hb != 1) {
                    this.k.z();
                }
            }
        }
        postRender() {
            this.d.ck();
        }
        as() {
            if (this.j.d) {
                this.bd._stroke = this.a.jw;
                this.bg._fill = this.a.jz;
                this.bf._stroke = this.a.jv;
                this.be._stroke = this.a.ju;
                this.bf.ad = this.a.ev;
                this.be.ad = this.a.es;
                this.bd.ad = this.a.fh;
                this.bf.ai = this.a.j3;
                this.be.ai = this.a.j2;
                this.bd.ai = this.a.j4;
                this.bb = this.a.ke;
                this.j.t(this.bd);
                this.j.t(this.bg);
                this.j.t(this.be);
                this.j.t(this.bf);
            }
        }
        ah() {
            this.aj();
        }
        af(a) {
            if (a != null) {
                a.al.u(this);
                a.c8.cq();
            }
        }
        y(a) {
            if (a != null) {
                a.al.o(this);
                this.aj();
            }
        }
        i() {
            if (this.a.bi == null || this.a.bi.c8.j.ae == null) {
                return null;
            }
            return FontUtil.getFont(this.a.bi.c8.j.ae);
        }
        n() {
            return this.j == null;
        }
        ap() {
            if (this.a.b9 || this.a.cm) {
                return;
            }
            if (this.a.g7 == null) {
                this.a.it = null;
                this.a.cq = true;
                this.a.h8();
                return;
            }
            if (this.a.it == null) {
                let a = new TextBlock();
                a.al = this.a.g7;
                a.dataContext = this.a.bf;
                this.a.it = a;
            }
            else {
                this.a.it.al = this.a.g7;
                this.a.it.dataContext = this.a.bf;
            }
            this.a.cq = true;
            this.a.h8();
        }
        x() {
            let a;
            let b = new AxisLabelSettings();
            if (this.a.b9) {
                a = "ui-angular-axis-labels";
                b.margin = 0;
            }
            else if (this.a.cp) {
                a = "ui-vertical-axis-labels";
                b.location = 2;
                b.leftMargin = 5;
                b.rightMargin = 5;
                b.topMargin = 2;
                b.bottomMargin = 2;
            }
            else if (this.a.a2 == 3) {
                a = "ui-radial-axis-labels";
                b.location = 5;
            }
            else {
                a = "ui-horizontal-axis-labels";
                b.location = 1;
                b.leftMargin = 2;
                b.rightMargin = 2;
                b.topMargin = 5;
                b.bottomMargin = 5;
            }
            this.w(b, a);
        }
        a2() {
            if (this.a.bi == null) {
                return;
            }
            let a = this.a.bi.wl;
            let b = a.fv;
            let c = a.fu;
            if (this.a.j0 == null) {
                if (b == null) {
                    this.a.j0 = a.fs;
                }
                else if (b.color.l != 0) {
                    this.a.j0 = b;
                }
            }
            if (this.a.jx == null) {
                if (c == null) {
                    this.a.jx = a.fs;
                }
                else if (c.color.l != 0) {
                    this.a.jx = c;
                }
            }
        }
        w(a, b) {
            this.a.fm.startCSSQuery();
            let c = this.a.fm.getCssDefaultPropertyValue(b, "margin-top");
            let d = this.a.fm.getCssDefaultPropertyValue(b, "margin-right");
            let e = this.a.fm.getCssDefaultPropertyValue(b, "margin-bottom");
            let f = this.a.fm.getCssDefaultPropertyValue(b, "margin-left");
            let g = this.a.fm.getCssDefaultPropertyValue(b, "text-align");
            let h = this.a.fm.getCssDefaultPropertyValue(b, "vertical-align");
            let i = this.a.fm.getCssDefaultPropertyValue(b, "color");
            let j = FontUtil.getFontForClass(this.a.fm, b);
            this.a.fm.endCSSQuery();
            if (c != null) {
                a.topMargin = parseFloat(c);
            }
            if (d != null) {
                a.rightMargin = parseFloat(d);
            }
            if (e != null) {
                a.bottomMargin = parseFloat(e);
            }
            if (f != null) {
                a.leftMargin = parseFloat(f);
            }
            if (i != null) {
                if (a.textColor == null) {
                    a.textColor = new Brush();
                }
                a.textColor._fill = i;
            }
            if (j != null) {
                a.g = j;
            }
            if (g != null) {
                switch (g) {
                    case "right":
                        a.horizontalAlignment = 2;
                        break;
                    case "left":
                        a.horizontalAlignment = 0;
                        break;
                    default:
                        a.horizontalAlignment = 1;
                        break;
                }
            }
            if (h != null) {
                switch (h) {
                    case "top":
                        a.verticalAlignment = 0;
                        break;
                    case "bottom":
                        a.verticalAlignment = 2;
                        break;
                    default:
                        a.verticalAlignment = 1;
                        break;
                }
            }
            this.a.az = a;
        }
        preRender() {
            if (this.a.bi != null) {
                this.a.bi.na();
            }
        }
        isValid() {
            return this.a != null && !this.a.ke.isEmpty;
        }
        a8(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        a9() {
            return { $type: Point_$type, x: this.a.aw.c1.left, y: this.a.aw.c1.top };
        }
        bc() {
            let a = this.a.aw.c1;
            return a;
        }
        ba(a) {
            return { $type: Point_$type, x: a.n, y: a.o };
        }
        bj(a) {
            let b = this.a.aw.af.t();
            let c = this.a.aw.af.v();
            let d = this.a.aw.af.u();
            let e = this.a.aw.af.s();
            return new Thickness(1, b, c, d, e);
        }
        am() {
            if (FastReflectionHelper.needsHelper(this.a.f1)) {
                this.h = new FastReflectionHelper(true, this.a.f1);
            }
            else {
                this.h = null;
            }
        }
    }
    AxisView.$t = markType(AxisView, 'AxisView', Base.$, [ISchedulableRender_$type]);
    return AxisView;
})();
/**
 * @hidden
 */
export let CategoryAxisBaseView = /*@__PURE__*/ (() => {
    class CategoryAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.bk = null;
            this.bk = a;
        }
        s(a) {
            let b = 0;
            if (this.bk.categoryMode == 0) {
                b = truncate(Math.round(a));
            }
            else {
                b = truncate(Math.floor(a));
            }
            if (b < 0 || b > this.a.lh - 1) {
                return null;
            }
            let c = this.a.ks.item(b);
            let d = this.q(c);
            if (d == null) {
                return null;
            }
            return d.toString();
        }
        bl(a) {
            let b = 0;
            let c = false;
            for (let d = 0; d < a.count; d++) {
                let e = typeCast(FrameworkElement.$, a._inner[d]);
                if (e == null) {
                    e = this.a.br.item(d);
                    let f = a._inner[d] == null ? "" : a._inner[d].toString();
                    let g = e.al;
                    let h = 0;
                    let i = 0;
                    if (g != null) {
                        h = g.length;
                    }
                    if (f != null) {
                        i = f.length;
                    }
                    if (h != i) {
                        c = true;
                    }
                    e.al = f;
                    b++;
                }
                else {
                    this.d.ab.add(e);
                }
            }
            if (c) {
                this.a.cq = true;
            }
            this.a.hg();
            return b;
        }
    }
    CategoryAxisBaseView.$t = markType(CategoryAxisBaseView, 'CategoryAxisBaseView', AxisView.$);
    return CategoryAxisBaseView;
})();
/**
 * @hidden
 */
export let HorizontalAxisLabelPanelBaseView = /*@__PURE__*/ (() => {
    class HorizontalAxisLabelPanelBaseView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.az = null;
            this.az = a;
        }
        a1() {
        }
        a0() {
            return false;
        }
        a2(a) {
            let b = this.a.bs();
            let c, d;
            c = this.az.dh();
            d = this.az.de();
            let e = this.a.ag != null ? this.a.ag.verticalAlignment : 1;
            let f = this.a.bd;
            let g = a.count;
            let h = this.a.c1;
            let i = this.az.dg();
            let j = i / 2;
            for (let k = 0; k < g; k++) {
                let l = a._inner[k];
                let m = l.height / 2;
                switch (e) {
                    case 0:
                        l.y = h.top + c;
                        break;
                    case 1:
                    case 3:
                        l.y = (h.top + c + j) - m;
                        break;
                    case 2:
                        l.y = (h.bottom - d) - l.height;
                        break;
                }
            }
        }
    }
    HorizontalAxisLabelPanelBaseView.$t = markType(HorizontalAxisLabelPanelBaseView, 'HorizontalAxisLabelPanelBaseView', AxisLabelPanelBaseView.$);
    return HorizontalAxisLabelPanelBaseView;
})();
/**
 * @hidden
 */
export let NumericAxisBaseView = /*@__PURE__*/ (() => {
    class NumericAxisBaseView extends AxisView {
        constructor(a) {
            super(a);
            this.bk = null;
            this.bk = a;
        }
        bl() {
        }
        o() {
            return this.bk.li;
        }
        m() {
            if (this.bk.kq != null) {
                return true;
            }
            if (this.bk.kp != null) {
                return true;
            }
            return false;
        }
        r(dataItem_) {
            if (this.bk.kq != null) {
                return this.bk.kq(dataItem_);
            }
            if (this.bk.kp != null) {
                return this.bk.kp.i(dataItem_);
            }
            return null;
        }
        s(a) {
            let b = this.bk.k1.d(this.bk.ke, this.bk.bi.vl, this.bk.j9(), this.bk.j8());
            return this.bk.k1.w(b, a, -1, NaN);
        }
    }
    NumericAxisBaseView.$t = markType(NumericAxisBaseView, 'NumericAxisBaseView', AxisView.$);
    return NumericAxisBaseView;
})();
/**
 * @hidden
 */
export let VerticalAxisLabelPanelView = /*@__PURE__*/ (() => {
    class VerticalAxisLabelPanelView extends AxisLabelPanelBaseView {
        constructor(a) {
            super(a);
            this.az = null;
            this.az = a;
        }
        a0() {
        }
        d() {
            let a = this.a.ad.bi.getFontInfo();
            if (this.a.ad.bf != null && this.a.ad.bf.textStyle != null) {
                a = this.a.ad.bf.h(this.a.ad.bi.c8.j.ae);
            }
            else {
                let b = this.a.ad.bi.de();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        ay() {
            return this.a.ad.bi.v4();
        }
        at() {
            let a = this.a.ad.bg.getFontBrush();
            if (this.a.ad.bf != null && this.a.ad.bf.textColor != null) {
                a = this.a.ad.bf.textColor;
            }
            else {
                let b = this.a.ad.bi.ut();
                if (b != null) {
                    a = b;
                }
            }
            return a;
        }
        a1(a, b) {
            let c, d;
            c = this.az.db();
            d = this.az.dd();
            let e = this.a.ag != null ? this.a.ag.horizontalAlignment : 1;
            let f = this.a.bd;
            let g = this.az.de();
            let h = g / 2;
            let i = this.a.c1;
            for (let j = 0; j < a.count; j++) {
                let k = a._inner[j];
                let l = k.width / 2;
                switch (e) {
                    case 0:
                        k.x = i.left + c;
                        break;
                    case 1:
                    case 3:
                        k.x = (i.left + c + h) - l;
                        break;
                    case 2:
                        k.x = (i.right - d) - k.width;
                        break;
                }
            }
        }
    }
    VerticalAxisLabelPanelView.$t = markType(VerticalAxisLabelPanelView, 'VerticalAxisLabelPanelView', AxisLabelPanelBaseView.$);
    return VerticalAxisLabelPanelView;
})();
/**
 * @hidden
 */
export let XamDataChartView = /*@__PURE__*/ (() => {
    class XamDataChartView extends SeriesViewerView {
        constructor(a) {
            super(a);
            this.fn = null;
            this.fw = null;
            this.fs = null;
            this.ft = null;
            this.fv = null;
            this.fu = null;
            this.fp = 0;
            this.fq = 0;
            this.fo = null;
            this.fn = a;
        }
        fr(a) {
            this.p.al.s();
        }
        ds() {
            super.ds();
            if (this.b.count == 0 && this.y != null) {
                if (this.p.hb != 1) {
                    this.y.aa();
                    this.y.ab(this.p.hb, this.p.hb);
                }
                if (!this.y.e) {
                    this.y.l(0, 0, this.a8, this.a7);
                }
                if (this.p.hb != 1) {
                    this.y.z();
                }
            }
        }
        d4() {
            let a, b;
            let c = 1, d = 0;
            let e = false;
            let f = this.j.e();
            let g;
            let h = this.j.a7(c, g, a, b, d, e);
            c = h.p0;
            g = h.p1;
            a = h.p2;
            b = h.p3;
            d = h.p4;
            e = h.p5;
            if (isNaN_(this.p.h9)) {
                this.p.h9 = g[0];
            }
            if (isNaN_(this.p.h0)) {
                this.p.h0 = g[1];
            }
            if (isNaN_(this.p.hi)) {
                this.p.hi = g[2];
            }
            if (isNaN_(this.p.hv)) {
                this.p.hv = g[3];
            }
            this.fn.z8 = f.i;
            this.fn.z6 = AxisDefaults.h;
            this.fn.z7 = AxisDefaults.i;
            this.fn.ws = e;
            this.fv = a;
            this.fu = b;
            this.fn.ag = f.a;
            this.fn.aj = f.f;
            this.fn.ah = f.b != null ? f.b : new BrushCollection();
            this.fn.ai = f.c != null ? f.c : new BrushCollection();
            if (this.fn.ah.count == 0) {
                for (let i = 0; i < f.a.count; i++) {
                    this.fn.ah.add(f.a.item(i));
                }
            }
            if (f.c.count == 0) {
                for (let j = 0; j < f.f.count; j++) {
                    this.fn.ai.add(f.f.item(j));
                }
            }
            this.ft = f.j;
            this.fw = f.k;
            this.fo = f.h;
            this.fs = f.i;
            this.fp = c;
            for (let k of fromEnum(this.fn.series)) {
                k.r7();
            }
            this.fq = d;
        }
        d1() {
            this.fe.ad = Defaults.j;
            this.fd.ad = Defaults.j;
            this.fe._stroke = this.p.u8 != null ? this.p.u8 : this.ft;
            this.fd._stroke = this.p.uy != null ? this.p.uy : this.ft;
            super.d1();
        }
    }
    XamDataChartView.$t = markType(XamDataChartView, 'XamDataChartView', SeriesViewerView.$);
    return XamDataChartView;
})();
/**
 * @hidden
 */
export let SeriesView = /*@__PURE__*/ (() => {
    class SeriesView extends Base {
        constructor(a) {
            super();
            this.e = null;
            this.s = false;
            this.h = null;
            this.d = null;
            this._isDirty = false;
            this.bz = null;
            this.bp = null;
            this.v = 0;
            this.bu = Rect.empty;
            this.bo = new Brush();
            this.f = new SeriesComponentsFromView();
            this.k = null;
            this.l = null;
            this.bv = null;
            this.bw = null;
            this.m = false;
            this.a = null;
            this.r = false;
            this.n = false;
            this.p = false;
            this.ad = null;
            this.v = NaN;
            this.r = true;
            this.e = a;
            this.q = false;
            this.bz = new Rectangle();
            this.s = false;
        }
        getDefaultTooltipTemplate() {
            return this.e.a9.a$t(this.e);
        }
        ar() {
            if (this.e.fg) {
                this.e.a9.a$aa(this.e);
            }
        }
        j() {
            return new DOMExecutionContext(this.e.c9.c8.j.ae);
        }
        get i() {
            if (this.h == null) {
                this.h = this.j();
            }
            return this.h;
        }
        ah(a, b) {
            Series.pk(b, this.e.c9, false);
            b.c9 = this.e.c9;
            b.c1 = this.e.c1;
            if (b.c9 != null) {
                b.c9.mw(b);
            }
        }
        am(a) {
            Series.pk(a, this.e.c9, true);
            a.o3(true, a.ct);
            a.c9 = null;
            a.c1 = null;
            a.itemsSource = null;
            a.legend = null;
            if (a.c9 != null) {
                a.c9.qq(a);
            }
        }
        au() {
            if (!this.q) {
                this.e.ii = 0.8;
                this.e.cz = 0;
                this.e.cy = 1;
                this.d = new DataContext();
                this.d.series = this.e;
                this.e.dc = EasingFunctions.cubicEase;
                this.af();
            }
        }
        getEffectiveViewport() {
            return this.e.getEffectiveViewport1(this);
        }
        a1() {
            this.as();
        }
        ak() {
        }
        getMainContentViewport() {
            return this.e.getMainContentViewport();
        }
        get w() {
            if (this.e.c9 != null) {
                return this.e.c9.c8.j.ae;
            }
            return null;
        }
        get isDirty() {
            return this._isDirty;
        }
        set isDirty(a) {
            this._isDirty = a;
        }
        get_index() {
            if (this.e == null || this.e.c9 == null) {
                return 0;
            }
            if (this.e.c9.e9) {
                if (this.e.fa) {
                    return this.e.c9.series.indexOf(this.e);
                }
                else {
                    let a = this.e.c9.series.indexOf(this.e);
                    if (a >= 0) {
                        return a;
                    }
                    for (let b = 0; b < this.e.c9.series.count; b++) {
                        if (this.e.c9.series._inner[b].fa) {
                            let c = this.e.c9.series._inner[b].bm();
                            if (c == this.e) {
                                return b;
                            }
                        }
                    }
                    return a;
                }
            }
            let d = typeCast(XamDataChart.$, this.e.c7);
            let e = 0;
            if (d != null) {
                if (d.wc == 2 || d.wc == 0) {
                    e = d.axes.count;
                }
            }
            let f = 0;
            for (let g = 0; g < this.e.c9.series.count; g++) {
                if (this.e.c9.series._inner[g] == this.e) {
                    break;
                }
                if (this.e.c9.series._inner[g].isStacked) {
                    f += this.e.c9.series._inner[g].ka();
                }
                else if (this.e.c9.series._inner[g].ee) {
                    if (this.e.bl != null && this.e.bl == this.e.c9.series._inner[g]) {
                        f += 1;
                        for (let h = 0; h < this.e.c9.series._inner[g].actualLayers.count; h++) {
                            if (this.e.c9.series._inner[g].actualLayers._inner[h].target == this.e) {
                                return e + f + (h);
                            }
                        }
                    }
                    else {
                        f += this.e.c9.series._inner[g].actualLayers.count + 1;
                    }
                }
                else {
                    f++;
                }
            }
            return e + f;
        }
        get index() {
            return this.get_index();
        }
        as() {
            if (this.e.c9 == null) {
                return;
            }
            if (!this.isDirty) {
                this.isDirty = true;
                this.a.r(this.k, this.l);
            }
        }
        undirty(a) {
            this.isDirty = false;
            this.a6(a);
        }
        aw() {
            this.as();
        }
        bt() {
            if (this.bp == null) {
                this.bp = ((() => {
                    let $ret = new Brush();
                    $ret.color = Color.u(0, 0, 0, 0);
                    return $ret;
                })());
            }
            return this.bp;
        }
        bq(a) {
            if (a != null) {
                let b = BrushUtil.n(a, 1);
                return b;
            }
            else {
                return null;
            }
        }
        u() {
            if (!isNaN_(this.v)) {
                return this.v;
            }
            if (this.e.c9 != null) {
                return this.e.c9.hb;
            }
            else {
                return 1;
            }
        }
        a6(a) {
            if (this.k == null) {
                return;
            }
            if (this.bu.isEmpty) {
                this.bu = this.bx;
            }
            let b = this.bu;
            let c = this.e.c9.vq();
            let d = c.left;
            let e = c.top;
            let f = c.width;
            let g = c.height;
            let h = this.u();
            if (this.p) {
                d = this.bx.left;
                e = this.bx.top;
                f = this.bx.width;
                g = this.bx.height;
            }
            if (this.k.d) {
                if (h != 1) {
                    this.k.aa();
                    this.k.ab(h, h);
                }
                if (a) {
                    if (!this.k.e) {
                        this.k.l(d, e, f, g);
                    }
                }
                if (a) {
                    if (this.e.c9.u1 != null && !this.bx.isEmpty) {
                        this.bz.o = this.bx.top;
                        this.bz.n = this.bx.left;
                        this.bz.width = this.bx.width;
                        this.bz.height = this.bx.height;
                        this.bz._fill = this.e.c9.u1;
                        this.k.w(this.bz);
                    }
                }
                if (h != 1) {
                    this.k.z();
                }
            }
            if (this.l != null && this.r) {
                if (this.l.d) {
                    if (this.e.c9 != null && h != 1) {
                        this.l.aa();
                        this.l.ab(h, h);
                    }
                    if (!b.isEmpty && a) {
                        if (!this.l.e) {
                            this.l.l(b.left, b.top, b.width, b.height);
                        }
                    }
                    this.bc(true);
                    this.a8(this.l, true);
                    this.a7(this.l, true);
                    if (h != 1) {
                        this.l.z();
                    }
                }
            }
            if (this.k.d && this.r) {
                if (h != 1) {
                    this.k.aa();
                    this.k.ab(h, h);
                }
                this.k.aa();
                if (!this.q && Rect.l_op_Inequality(this.e.wc, null) && !this.e.wc.isEmpty && (this.e.wc.width != 1 || this.e.wc.height != 1)) {
                    this.k.af(new Rect(0, this.bx.left + this.bx.width * this.e.wc.left, this.bx.top + this.bx.height * this.e.wc.top, this.bx.width * this.e.wc.width, this.bx.height * this.e.wc.height));
                }
                else {
                    this.k.af(this.bx);
                }
                this.bc(false);
                this.k.ae(this.e._opacity);
                if (this.e.e2 && this.e.e3 && !this.q) {
                    if (this.e.ha) {
                        this.k.p(this.e.vv.colorString, 0, this.e.jl, this.e.jm);
                        let i = this.e.c9.c8.j.x;
                        let j = this.e.c9.c8.j.ak;
                        if (h != 1) {
                            i.aa();
                            i.ab(h, h);
                        }
                        if (!i.e) {
                            i.l(c.left, c.top, c.width, c.height);
                        }
                        this.a8(i, false);
                        this.a7(i, false);
                        this.k.n(j.getNativeElement(), 1, 0, 0, c.width, c.height);
                        if (h != 1) {
                            i.z();
                        }
                    }
                    else {
                        this.k.p(this.e.vv.colorString, this.e.jk, this.e.jl, this.e.jm);
                        this.a8(this.k, false);
                        this.a7(this.k, false);
                    }
                    this.k.m();
                }
                else {
                    this.a8(this.k, false);
                    this.a7(this.k, false);
                }
                this.k.ae(1);
                this.k.z();
                if (h != 1) {
                    this.k.z();
                }
            }
        }
        bf(a, b, c) {
            if (c) {
                this.bh(a, b);
            }
            else {
                this.bg(a, b);
            }
        }
        bi(a, b, c) {
            if (c) {
                this.bk(a, b);
            }
            else {
                this.bj(a, b);
            }
        }
        aa(a, b) {
            if (b) {
                return this.ab(a);
            }
            else {
                return this.ac(a);
            }
        }
        ab(a) {
            return null;
        }
        ac(a) {
            return null;
        }
        bg(a, b) {
        }
        bj(a, b) {
        }
        bh(a, b) {
        }
        bk(a, b) {
        }
        bc(a) {
            if (a) {
                this.be();
            }
            else {
                this.bd();
            }
        }
        bd() {
        }
        be() {
        }
        bs(a) {
            return this.br();
        }
        br() {
            let a = this.e.ke;
            let num_ = (a + 1) * 1000;
            let b = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let c = ((num_ & 0x3F) << 2);
            num_ = (num_ >> 6);
            let d = ((num_ & 0x3F) << 2);
            this.bo._fill = "rgb(" + b + "," + c + "," + d + ")";
            return this.bo;
        }
        a8(a, b) {
            this.bu = this.bx;
        }
        a7(a, b) {
        }
        az() {
        }
        ao() {
        }
        ap() {
        }
        g() {
            return this.f;
        }
        bb(a) {
        }
        t() {
            return true;
        }
        ay() {
        }
        ax() {
        }
        a9() {
            this.e.u3 = null;
        }
        ai() {
            this.e.u3 = this.e.u9;
        }
        ba() {
            this.e.u7 = null;
        }
        aj() {
            this.e.u7 = this.e.vp;
        }
        c(a) {
            if (typeCast(DataContext.$, a) !== null) {
                return a;
            }
            return null;
        }
        at(a, b) {
            this.k = a;
            this.l = b;
        }
        get bx() {
            return this.bv;
        }
        set bx(a) {
            this.bv = a;
        }
        get_by() {
            if (this.p) {
                return this.bw;
            }
            else if (this.q) {
                return XamDataChart.vx;
            }
            else {
                return this.e.c9 != null ? this.e.c9.vl : Rect.empty;
            }
        }
        get by() {
            return this.get_by();
        }
        get q() {
            return this.m;
        }
        set q(a) {
            this.m = a;
        }
        al(a) {
            if (a != null) {
                this.a.u(this);
                if (this.e.cs != null) {
                    this.e.cs.a.u(this.e.cs);
                }
            }
        }
        ag(a) {
            if (a != null) {
                if (this.e.g8) {
                    this.k = this.e.c9.c8.z;
                    a.c8.a.o(this);
                    this.a = a.c8.a;
                }
                else {
                    this.k = this.e.c9.c8.y;
                    a.al.o(this);
                    this.a = a.al;
                }
                if (this.e.cs != null) {
                    a.am.o(this.e.cs);
                    this.e.cs.a = a.am;
                    this.e.cs.as();
                }
                if (this.e.fg) {
                    for (let b of fromEnum(this.e.a9.a$j.keys)) {
                        a.ak.o(this.e.a9.a$j.item(b));
                        this.e.a9.a$j.item(b).a = a.ak;
                        this.e.a9.a$j.item(b).as();
                    }
                }
                this.as();
            }
        }
        postRender() {
            this.a2();
        }
        a2() {
        }
        b(a) {
            return null;
        }
        a4(a) {
            this.e.cs.k = a.a;
        }
        an(a) {
        }
        bl() {
            if (this.n) {
                return;
            }
            if (this.e.c9 != null) {
                let a = (this.e.legend != null) ? this.e.legend : this.e.c9.legend;
                if (a != null && this.e.so != null && a.containsChild(this.e.so)) {
                    a.removeChild(this.e.so);
                    let b = this.e.kx();
                    b.content.actualItemBrush = this.e.u3;
                    b.content.outline = this.e.u7;
                    b.content.thickness = this.e.ic;
                    a.addChildInOrder(this.e.so, this.e);
                }
            }
        }
        av() {
            this.e.ou(this.e.a4, this.e.a4);
        }
        a0() {
            this.bl();
        }
        getViewInfo(a, b) {
            a = this.bx;
            b = this.by;
            return {
                p0: a,
                p1: b
            };
        }
        o() {
            return this.k != null;
        }
        bm() {
            this.r = this.e._visibility == 0;
            this.as();
        }
        a5() {
            this.e.a9.a$ap(this.e);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.vv = a;
            this.e.jk = 5;
            this.e.jl = 5;
            this.e.jm = 5;
        }
        aq() {
        }
        preRender() {
            if (this.e.c9 != null && !this.q) {
                this.e.c9.na();
            }
        }
        isValid() {
            return true;
        }
        a3(a) {
            this.k = a.a;
        }
        bn(type_) {
            let legendTemplates_ = TypeRegistrar.get("LegendTemplates");
            let a = (legendTemplates_.resolveLegendItemTemplate(type_));
            return a;
        }
    }
    SeriesView.$t = markType(SeriesView, 'SeriesView', Base.$, [ISchedulableRender_$type, IProvidesViewport_$type]);
    return SeriesView;
})();
/**
 * @hidden
 */
export let MarkerSeriesView = /*@__PURE__*/ (() => {
    class MarkerSeriesView extends SeriesView {
        constructor(a) {
            super(a);
            this.b4 = null;
            this.b9 = 1;
            this.cb = Defaults.ab;
            this.ca = 3;
            this.b8 = null;
            this.b7 = false;
            this.b0 = new Marker();
            this.ct = null;
            this.b0 = new Marker();
            this.b0.content = new DataContext();
            this.b4 = a;
        }
        au() {
            super.au();
            this.b8 = new List$1(Marker.$, 0);
            this.ct = ((() => {
                let $ret = new DataTemplate();
                $ret.render = MarkerTemplates.c;
                $ret.measure = MarkerTemplates.b;
                return $ret;
            })());
        }
        cl() {
            for (let a of fromEnum(this.b8)) {
                a.ah = this.b4.xt;
            }
            this.as();
        }
        cv() {
            if (this.k == null) {
                return new Size(1, 0, 0);
            }
            let a = new DataTemplatePassInfo();
            a.isHitTestRender = false;
            a.context = this.k.h();
            a.viewportTop = this.bx.top;
            a.viewportLeft = this.bx.left;
            a.viewportWidth = this.bx.width;
            a.viewportHeight = this.bx.height;
            a.passID = "TestMeasure";
            let b = new DataTemplateRenderInfo();
            b.isHitTestRender = false;
            b.passInfo = a;
            let c = new DataTemplateMeasureInfo();
            c.passInfo = a;
            let d = this.k.h();
            c.context = d;
            b.context = d;
            let e = 0;
            let f = 0;
            if (this.b4.xt != null && this.b4.xt.passStarting != null) {
                this.b4.xt.passStarting(a);
            }
            let g = this.b4.xt;
            if (this.b8.count > 0) {
                let h = this.b8._inner[0];
                c.data = h.content;
                c.width = h.width;
                c.height = h.height;
                c.renderOffsetX = 0;
                c.renderOffsetY = 0;
                c.renderContext = this.k;
                g = h.ah;
            }
            let i = 0;
            let j = 0;
            if (g != null && g.measure != null) {
                g.measure(c);
                i = c.width;
                j = c.height;
            }
            if (this.b4.xt != null && this.b4.xt.passCompleted != null) {
                this.b4.xt.passCompleted(a);
            }
            return new Size(1, i, j);
        }
        cs(a) {
        }
        b3() {
            let a = new Marker();
            a.content = ((() => {
                let $ret = new DataContext();
                $ret.series = this.e;
                return $ret;
            })());
            a.ah = this.b4.xt;
            this.b8.add(a);
            return a;
        }
        ck(a) {
            for (let b = this.b8.count - 1; b >= 0; b--) {
                let c = this.b8._inner[b];
                a(c);
            }
        }
        co(a) {
            a._visibility = 0;
        }
        cq(a) {
            a._visibility = 1;
        }
        cp(a) {
            this.b8.remove(a);
        }
        b5() {
            return this.b4.xu != null;
        }
        ci() {
            this.b4.xs = null;
        }
        cc() {
            this.b4.xs = this.b4.xu;
        }
        cu(a) {
            let b = a.n;
            let c = a.o;
            let d = a.m;
            let e = a.l;
            return new Rect(0, b - d / 2, c - d / 2, d, e);
        }
        cf(a) {
            if (this.b4.c9 == null) {
                return;
            }
            switch (a) {
                case SeriesViewer.$$p[2]:
                    this.b4.xs = this.b4.c9.rn;
                    break;
                case SeriesViewer.$$p[42]:
                    this.b4.xs = this.b4.c9.rw;
                    break;
                case SeriesViewer.$$p[30]:
                    this.b4.xs = this.b4.c9.rt;
                    break;
                case SeriesViewer.$$p[36]:
                    this.b4.xs = this.b4.c9.ru;
                    break;
                case SeriesViewer.$$p[5]:
                    this.b4.xs = this.b4.c9.ro;
                    break;
                case SeriesViewer.$$p[22]:
                    this.b4.xs = this.b4.c9.rr;
                    break;
                case SeriesViewer.$$p[9]:
                    this.b4.xs = this.b4.c9.rp;
                    break;
                case SeriesViewer.$$p[39]:
                    this.b4.xs = this.b4.c9.rv;
                    break;
                case SeriesViewer.$$p[23]:
                    this.b4.xs = this.b4.c9.rs;
                    break;
                case SeriesViewer.$$p[10]:
                    this.b4.xs = this.b4.c9.rq;
                    break;
            }
        }
        cg() {
            this.b4.x9 = null;
        }
        cd() {
            if (!isNaN_(this.e.ia) && this.e.ia != 1) {
                let a = BrushUtil.q(this.b4.yb, this.e.ia);
                this.b4.x9 = a;
            }
            else {
                this.b4.x9 = this.b4.yb;
            }
        }
        ch() {
            this.b4.ya = null;
        }
        ce() {
            this.b4.ya = this.b4.yc;
        }
        cr() {
            this.as();
        }
        bj(a, b) {
            super.bj(a, b);
            if (!this.b7) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    d.actualItemBrush = this.b4.x9;
                    if (d.itemBrush != null) {
                        d.actualItemBrush = d.itemBrush;
                    }
                    d.outline = this.b4.ya;
                    d.thickness = this.b4.xb;
                }
            }
        }
        bk(a, b) {
            super.bk(a, b);
            let c = a;
            this.b0._visibility = c._visibility;
            this.b0.ah = c.ah;
            this.b0.width = c.width;
            this.b0.height = c.height;
            this.b0.m = c.m;
            this.b0.l = c.l;
            this.b0.n = c.n;
            this.b0.o = c.o;
            let d = this.bs(b);
            let e = this.b0.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.b9 + this.ca;
            }
        }
        b(a) {
            if (a >= 0 && a < this.b8.count) {
                return this.b8._inner[a].content;
            }
            return super.b(a);
        }
        a7(a, b) {
            super.a7(a, b);
            if (a.d) {
                let c = new DataTemplatePassInfo();
                c.isHitTestRender = b;
                c.context = a.h();
                c.viewportTop = this.bx.top;
                c.viewportLeft = this.bx.left;
                c.viewportWidth = this.bx.width;
                c.viewportHeight = this.bx.height;
                c.passID = "Markers";
                let d = new DataTemplateRenderInfo();
                d.isHitTestRender = b;
                d.passInfo = c;
                let e = new DataTemplateMeasureInfo();
                e.passInfo = c;
                let f = false;
                let g = a.h();
                e.context = g;
                d.context = g;
                let h = 0;
                let i = 0;
                if (this.b4.xt != null && this.b4.xt.passStarting != null) {
                    this.b4.xt.passStarting(c);
                }
                for (let j = 0; j < this.b8.count; j++) {
                    let k = this.b8._inner[j];
                    if (k._visibility == 1) {
                        continue;
                    }
                    this.bi(k, j, b);
                    if (b) {
                        k = this.b0;
                    }
                    if (!f) {
                        e.data = k.content;
                        e.width = k.width;
                        e.height = k.height;
                        e.renderOffsetX = 0;
                        e.renderOffsetY = 0;
                        e.renderContext = a;
                        let l = k.ah;
                        if (l.measure != null) {
                            e.data = k.content;
                            l.measure(e);
                            f = e.isConstant;
                            if (f) {
                                h = e.width;
                                i = e.height;
                            }
                        }
                        d.availableWidth = e.width;
                        d.availableHeight = e.height;
                        d.renderOffsetX = e.renderOffsetX;
                        d.renderOffsetY = e.renderOffsetY;
                        d.renderContext = a;
                    }
                    else {
                        d.availableWidth = h;
                        d.availableHeight = i;
                    }
                    if (!isNaN_(k.width) && !isInfinity(k.width)) {
                        d.availableWidth = k.width;
                    }
                    if (!isNaN_(k.height) && !isInfinity(k.height)) {
                        d.availableHeight = k.height;
                    }
                    a.q(d, k);
                    k.m = d.availableWidth;
                    k.l = d.availableHeight;
                    k.ai = d.renderOffsetX;
                    k.aj = d.renderOffsetY;
                }
                if (this.b4.xt != null && this.b4.xt.passCompleted != null) {
                    this.b4.xt.passCompleted(c);
                }
            }
        }
        cm(a) {
            a.create = runOn(this, this.b3);
            a.destroy = runOn(this, this.cp);
            a.activate = runOn(this, this.co);
            a.disactivate = runOn(this, this.cq);
        }
        cn(a) {
            a.create = runOn(this, this.b3);
            a.destroy = runOn(this, this.cp);
            a.activate = runOn(this, this.co);
            a.disactivate = runOn(this, this.cq);
        }
        b1(a) {
            let b = this.b2(a, 0);
            if (b == null) {
                b = this.b2(a, 3);
            }
            return b;
        }
        b2(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.b8.count - 1; g >= 0; g--) {
                let h = this.b8._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if (this.b4.w4) {
                    if (this.b6(a.x, a.y, h.n + e, h.o + f, c)) {
                        return h;
                    }
                }
                else {
                    if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                        return h;
                    }
                }
            }
            return null;
        }
        b6(a, b, c, d, e) {
            let f = e * e;
            let g = (a - c) * (a - c) + (b - d) * (b - d);
            return g < f;
        }
    }
    MarkerSeriesView.$t = markType(MarkerSeriesView, 'MarkerSeriesView', SeriesView.$);
    return MarkerSeriesView;
})();
/**
 * @hidden
 */
export let ChartAxisRangeChangedEventArgs = /*@__PURE__*/ (() => {
    class ChartAxisRangeChangedEventArgs extends EventArgs {
        constructor(a, b, c, d, e, f) {
            super();
            this._chart = null;
            this._axis = null;
            this._oldMinimumValue = 0;
            this._minimumValue = 0;
            this._oldMaximumValue = 0;
            this._maximumValue = 0;
            this.chart = a;
            this.axis = b;
            this.oldMinimumValue = c;
            this.minimumValue = d;
            this.oldMaximumValue = e;
            this.maximumValue = f;
        }
        get chart() {
            return this._chart;
        }
        set chart(a) {
            this._chart = a;
        }
        get axis() {
            return this._axis;
        }
        set axis(a) {
            this._axis = a;
        }
        get oldMinimumValue() {
            return this._oldMinimumValue;
        }
        set oldMinimumValue(a) {
            this._oldMinimumValue = a;
        }
        get minimumValue() {
            return this._minimumValue;
        }
        set minimumValue(a) {
            this._minimumValue = a;
        }
        get oldMaximumValue() {
            return this._oldMaximumValue;
        }
        set oldMaximumValue(a) {
            this._oldMaximumValue = a;
        }
        get maximumValue() {
            return this._maximumValue;
        }
        set maximumValue(a) {
            this._maximumValue = a;
        }
    }
    ChartAxisRangeChangedEventArgs.$t = markType(ChartAxisRangeChangedEventArgs, 'ChartAxisRangeChangedEventArgs', EventArgs.$);
    return ChartAxisRangeChangedEventArgs;
})();
(function (v) { callStaticConstructors(); })(true);
