/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-angular-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-angular-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-angular-core";
/**
 * @hidden
 */
export let AreaSeries = /*@__PURE__*/ (() => {
    class AreaSeries extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.ace = null;
            this.ace = new CategoryLineRasterizer();
            this.ab = AreaSeries.$;
            this.abx = 0;
        }
        bi() {
            return new AreaSeries();
        }
        cq() {
            return new AreaSeriesView(this);
        }
        yv() {
            return 1;
        }
        cw() {
            if (this.cx == 0) {
                return 2;
            }
            return super.cw();
        }
        qx(a) {
            super.qx(a);
            this.acd = a;
        }
        get_et() {
            return true;
        }
        get_es() {
            return true;
        }
        preferredCategoryMode(a) {
            return this.abx;
        }
        gu(a, b) {
            let c = this.v6(this.wb(a), true, false);
            if (this.ab4(a, c, b)) {
                return true;
            }
            if (this.gt(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.dg();
        }
        z4(a, b) {
            super.z4(a, b);
            let c = b.cw.d;
            let d = typeCast(AreaSeriesView.$, b);
            let e = a.f;
            let f = this.getEffectiveViewport1(d);
            this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
            let g = false;
            let h = this.yt.b;
            if (h != null) {
                g = true;
            }
            if (g) {
                let i = new ScalerParams(0, b.by, b.bx, this.abu.ch, f);
                this.z0(e, -1, this.valueColumn.count, this.abu, i, b.q, -1);
            }
            let j = d.ds;
            let k = d.dt;
            let l = d.du;
            let m = d.dv;
            this.yt.ad(j, true, false, true, true);
            this.yt.ad(k, true, false, true, true);
            this.yt.ad(l, false, true, false, false);
            this.yt.ad(m, false, true, false, false);
            if (b.c0(a)) {
                d.di(e.count, e, true, c, this.ib, (n, o, p, q, r) => this.aba(n, a.f.count, b), this.unknownValuePlotting, e.count == 1 ? null : this.aad(e, e.count - 1, b.bx, b.by, true));
                b.c3(a);
            }
            let n = this.fetchYAxis();
            l._opacity = this.yt.j * this.h7;
            m._opacity = 0.5 * this.yt.j * this.h7;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case AreaSeries.$$p[0]:
                    this.yq.m = this.unknownValuePlotting == 0;
                    this.rn(false);
                    this.qh();
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    AreaSeries.$t = markType(AreaSeries, 'AreaSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    AreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, AreaSeries, 'raisePropertyChanged', ['UnknownValuePlotting::acg', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return AreaSeries;
})();
/**
 * @hidden
 */
export let AreaSeriesView = /*@__PURE__*/ (() => {
    class AreaSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.df = null;
            this.dn = new Path();
            this.dq = new Path();
            this.dp = new Path();
            this.dr = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.dk = new Path();
            this.dm = new Path();
            this.df = a;
        }
        au() {
            super.au();
            if (!this.q) {
                this.df.w2 = Defaults.e;
            }
        }
        get ds() {
            return this.dq;
        }
        get dt() {
            return this.dr;
        }
        get du() {
            return this.dn;
        }
        get dv() {
            return this.dp;
        }
        dg() {
            this.dn.an = null;
            this.dp.an = null;
            this.dq.an = null;
            this.dr.an = null;
            this.as();
        }
        dh(a, b, c, d, e, f, g) {
            this.di(a, b, c, d, e, f, g, null);
        }
        di(a, b, c, d, e, f, g, h) {
            this.df.ace.a = typeCast(ISortingAxis_$type, this.cy.fetchXAxis()) !== null ? true : false;
            this.df.ace.j(this.dn, this.dq, this.dp, this.dr, a, b, c, d, e, f, g, h);
            this.as();
        }
        be() {
            super.be();
            this.dj.an = this.dn.an;
            this.dl.an = this.dq.an;
            this.dk.an = this.dp.an;
            this.dm.an = this.dr.an;
            let a = this.br();
            this.dj._fill = a;
            this.dj._opacity = 1;
            this.dk._fill = a;
            this.dk._opacity = 1;
            this.dl._stroke = a;
            this.dl.ad = this.e.ic + 3;
            this.dm._stroke = a;
            this.dm.ad = this.e.ic + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                a.t(this.dj);
                a.t(this.dk);
                a.t(this.dl);
                a.t(this.dm);
            }
            else {
                a.t(this.dn);
                a.t(this.dp);
                a.t(this.dq);
                a.t(this.dr);
            }
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.dq, "lowerShape", ["Lower"]);
            this.e.bb.exportPathData(a, this.dr, "upperShape", ["Upper", "Main"]);
            this.e.bb.exportPathData(a, this.dp, "translucentShape", ["Translucent"]);
            this.e.bb.exportPathData(a, this.dn, "fillShape", ["Fill"]);
        }
        af() {
            let a = new Color();
            a.colorString = "rgba(95,95,95,0.5)";
            this.e.vv = a;
            this.e.jk = 5;
            this.e.jl = 1;
            this.e.jm = -3;
        }
    }
    AreaSeriesView.$t = markType(AreaSeriesView, 'AreaSeriesView', AnchoredCategorySeriesView.$);
    return AreaSeriesView;
})();
