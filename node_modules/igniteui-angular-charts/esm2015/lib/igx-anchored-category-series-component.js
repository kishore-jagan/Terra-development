import { Component, Input } from '@angular/core';
import { TrendLineType_$type } from "igniteui-angular-core";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent anchored category/value series.
*
* The `AnchoredCategorySeries` represents the base class for all IgxDataChartComponent anchored category/value series.
*
* ```html
* <igx-data-chart [dataSource]="data">
*     <igx-category-x-axis
*         label="label"
*         #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis #yAxis>
*     </igx-numeric-y-axis>
*     <igx-column-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*         markerType="circle" >
*     </igx-column-series>
* </igx-data-chart>
* ```
*/
export let IgxAnchoredCategorySeriesComponent = /*@__PURE__*/ (() => {
    class IgxAnchoredCategorySeriesComponent extends IgxCategorySeriesComponent {
        constructor() {
            super();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets the value mapping property for the current series object.
        *
        * The `ValueMemberPath` property is used for the value mapping property of the current series object.
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value" >
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get valueMemberPath() {
            return this.i.aa4;
        }
        set valueMemberPath(v) {
            this.i.aa4 = v;
        }
        /**
         * Gets or sets the value mapping property for the current series object.
        */
        get highlightedValueMemberPath() {
            return this.i.aaw;
        }
        set highlightedValueMemberPath(v) {
            this.i.aaw = v;
        }
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get valueMemberAsLegendLabel() {
            return this.i.aa0;
        }
        set valueMemberAsLegendLabel(v) {
            this.i.aa0 = v;
        }
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get valueMemberAsLegendUnit() {
            return this.i.aa2;
        }
        set valueMemberAsLegendUnit(v) {
            this.i.aa2 = v;
        }
        /**
         * Gets or sets the trend type for the current series object.
        *
        * The `TrendLineType` property is used for the current series object's trend type.'
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         markerType="circle"
        *         trendLineType="simpleAverage" >
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.trendLineType= "CubicFit";
        * ```
        */
        get trendLineType() {
            return this.i.trendLineType;
        }
        set trendLineType(v) {
            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);
        }
        /**
         * Gets or sets the brush to use to draw the trend line.
        *
        * The `TrendLineBrush` property is used to brush the trend line.
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         markerType="circle"
        *         trendLineBrush= "grey"	>
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.trendLineBrush="red";
        * ```
        */
        get trendLineBrush() {
            return brushToString(this.i.trendLineBrush);
        }
        set trendLineBrush(v) {
            this.i.trendLineBrush = stringToBrush(v);
        }
        /**
         * Gets the effective TrendLineBrush for this series.
        *
        * The `ActualTrendLineBrush` property is used to gets the effective `TrendLineBrush` for this series.
        */
        get actualTrendLineBrush() {
            return brushToString(this.i.abr);
        }
        set actualTrendLineBrush(v) {
            this.i.abr = stringToBrush(v);
        }
        /**
         * Gets or sets the thickness of the current series object's trend line.
        *
        * The `TrendLineThickness` property is used for thickness of the current series object's trend line.
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         markerType="circle"
        * 		trendLineThickness= 2  >
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.trendLineThickness= 2;
        * ```
        */
        get trendLineThickness() {
            return this.i.trendLineThickness;
        }
        set trendLineThickness(v) {
            this.i.trendLineThickness = +v;
        }
        /**
         * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
         * is used to draw the trend line for the current series object.
        */
        get trendLineDashArray() {
            return fromDoubleCollection(this.i.abs);
        }
        set trendLineDashArray(v) {
            this.i.abs = toDoubleCollection(v);
        }
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for trend line period is 7.
        *
        * The `TrendLinePeriod` property is used for trend line period of the current series.
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         markerType="circle"
        *         trendLinePeriod: "7">
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.trendLinePeriod= 7;
        * ```
        */
        get trendLinePeriod() {
            return this.i.trendLinePeriod;
        }
        set trendLinePeriod(v) {
            this.i.trendLinePeriod = +v;
        }
        /**
         * The desired behavior for markers in this series which are placed too close together for the current view, resulting in a collision.
        *
        * The `MarkerCollisionAvoidance` property controls the technique the chart uses to avoid overlapping markers.
        *
        * ```html
        * <igx-data-chart [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis #yAxis>
        *     </igx-numeric-y-axis>
        *
        *     <igx-column-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         markerType="circle"
        * 		markerCollisionAvoidance= "fade"
        *         >
        *     </igx-column-series>
        * </igx-data-chart>
        * ```
        */
        get markerCollisionAvoidance() {
            return this.i.aag;
        }
        set markerCollisionAvoidance(v) {
            this.i.aag = ensureEnum(CategorySeriesMarkerCollisionAvoidance_$type, v);
        }
        /**
         * Determines the item returned in hit-testing when the pointer is over an object which represents several consolidated items.
        *
        * The `ConsolidatedItemHitTestBehavior` property is used to determines returned item in hit-testing when the pointer is over an object which represents several consolidated items.
        */
        get consolidatedItemHitTestBehavior() {
            return this.i.aah;
        }
        set consolidatedItemHitTestBehavior(v) {
            this.i.aah = ensureEnum(ConsolidatedItemHitTestBehavior_$type, v);
        }
        getItemValue(item, memberPathName) {
            let iv = this.i.ko(item, memberPathName);
            return (iv);
        }
        /**
         * Gets the value of a requested member path from the series.
        
        * @param memberPathName  * The property name of a valid member path for the series
        */
        getMemberPathValue(memberPathName) {
            let iv = this.i.mb(memberPathName);
            return (iv);
        }
        /**
         * Scrolls the series to display the item for the specified data item.
         * The series is scrolled by the minimum amount required to place the specified data item within
         * the central 80% of the visible axis.
        
        * @param item  * The data item (item) to scroll to.
        *
        * The `ScrollIntoView` method is used to notifies the target axis or series that it should scroll the requested data item into view.
        *
        * ```ts
        * this.series.scrollIntoView(dataItem);
        * ```
        */
        scrollIntoView(item) {
            let iv = this.i.gb(item);
            return (iv);
        }
        /**
         * Gets the item that is the best match for the specified world coordinates.
        
        * @param world  * The world coordinates to use.
        *
        * The `getItem` method is used to gets the item that is the best match for the specified world coordinates.
        *
        * ```ts
        * let item: number = this.series.getItem({x:.5,y:.5});
        * ```
        */
        getItem(world) {
            let iv = this.i.kl(toPoint(world));
            return (iv);
        }
        /**
         * Gets a numeric value from the numeric axis associated with this series that matches the desired
         * value mode.
        
        * @param mode  * The type of value desired from the series numeric axis.
        */
        getSeriesValueType(mode) {
            let iv = this.i.ap((mode == null ? null : mode));
            return (iv);
        }
        getSeriesValueTypePosition(mode) {
            let iv = this.i.v9((mode == null ? null : mode));
            return fromPoint(iv);
        }
        getSeriesValueTypePositionFromValue(values) {
            let iv = this.i.wa(values);
            return fromPoint(iv);
        }
    }
    IgxAnchoredCategorySeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredCategorySeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxAnchoredCategorySeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxAnchoredCategorySeriesComponent, selector: "ng-component", inputs: { valueMemberPath: "valueMemberPath", highlightedValueMemberPath: "highlightedValueMemberPath", valueMemberAsLegendLabel: "valueMemberAsLegendLabel", valueMemberAsLegendUnit: "valueMemberAsLegendUnit", trendLineType: "trendLineType", trendLineBrush: "trendLineBrush", actualTrendLineBrush: "actualTrendLineBrush", trendLineThickness: "trendLineThickness", trendLineDashArray: "trendLineDashArray", trendLinePeriod: "trendLinePeriod", markerCollisionAvoidance: "markerCollisionAvoidance", consolidatedItemHitTestBehavior: "consolidatedItemHitTestBehavior" }, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
    return IgxAnchoredCategorySeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredCategorySeriesComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { valueMemberPath: [{
                type: Input
            }], highlightedValueMemberPath: [{
                type: Input
            }], valueMemberAsLegendLabel: [{
                type: Input
            }], valueMemberAsLegendUnit: [{
                type: Input
            }], trendLineType: [{
                type: Input
            }], trendLineBrush: [{
                type: Input
            }], actualTrendLineBrush: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], trendLineDashArray: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], markerCollisionAvoidance: [{
                type: Input
            }], consolidatedItemHitTestBehavior: [{
                type: Input
            }] } });
