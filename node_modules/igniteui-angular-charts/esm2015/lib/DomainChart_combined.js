/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, Type, PropertyChangedEventArgs, Delegate_$type, runOn, delegateCombine, fromEnum, String_$type, EnumUtil, enumGetBox, typeCast, delegateRemove, markType, TypeRegistrar, getInstanceType } from "igniteui-angular-core";
import { IDataLegendTarget_$type } from "igniteui-angular-core";
import { IToolbarTarget_$type } from "igniteui-angular-core";
import { ArrayExtension } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-angular-core";
import { ColorUtil } from "igniteui-angular-core";
import { DVContainer } from "igniteui-angular-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-angular-core";
import { DataAbbreviationMode_$type } from "igniteui-angular-core";
import { DataLegendValueMode_$type } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-angular-core";
import { DataLegendSummaryType_$type } from "igniteui-angular-core";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { DataLegendUnitsMode_$type } from "igniteui-angular-core";
import { DataLegendLabelMode_$type } from "igniteui-angular-core";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-angular-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SeriesSelectionMode_$type } from "./SeriesSelectionMode";
import { SeriesSelectionBehavior_$type } from "./SeriesSelectionBehavior";
import { ChartSelectedItemCollection } from "./ChartSelectedItemCollection";
import { SortGroupParser } from "igniteui-angular-core";
import { FilterExpressionParsingHelper } from "igniteui-angular-core";
import { FilterStringErrorsParsingEventArgs } from "./FilterStringErrorsParsingEventArgs";
import { SummaryParser } from "igniteui-angular-core";
import { BrushCollection } from "igniteui-angular-core";
import { SeriesHighlightedValuesDisplayMode_$type } from "./SeriesHighlightedValuesDisplayMode";
import { Visibility_$type } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-angular-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-angular-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { CalloutCollisionMode_$type } from "igniteui-angular-core";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { Dictionary$2 } from "igniteui-angular-core";
import { DataSeries } from "igniteui-angular-core";
import { ICommandStateChangedListener_$type } from "igniteui-angular-core";
import { DeviceUtils } from "igniteui-angular-core";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { DataSeriesAdapter } from "igniteui-angular-core";
import { ChartSortDescription } from "./ChartSortDescription";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { Random } from "igniteui-angular-core";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { ObservableColorCollection } from "igniteui-angular-core";
import { BrushCollectionUtil } from "igniteui-angular-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { DomainChartPlotAreaPointerEventArgs } from "./DomainChartPlotAreaPointerEventArgs";
import { BrushUtil } from "igniteui-angular-core";
import { IUnknownValuePlotting_$type } from "igniteui-angular-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-angular-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-angular-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        constructor() {
            super();
            this.lu = null;
            this.lr = null;
            this.hs = null;
            this.ip = NaN;
            this.lq = null;
            this.i2 = 0;
            this.i3 = 0;
            this.i4 = 0;
            this.i1 = 0;
            this.ix = 0;
            this.iz = 0;
            this.iy = 0;
            this.iw = 0;
            this.xm = null;
            this.xn = null;
            this.il = NaN;
            this.i5 = NaN;
            this.iv = NaN;
            this.h6 = NaN;
            this.k8 = 0;
            this.ew = null;
            this.k4 = 300;
            this.k6 = 300;
            this.k3 = 300;
            this.kv = null;
            this.hf = false;
            this.co = null;
            this.ms = null;
            this.mu = null;
            this.ek = null;
            this.f4 = false;
            this.f3 = false;
            this.hw = null;
            this.propertyChanged = null;
            this.k7 = 0;
            this.g8 = false;
            this.g7 = false;
            this.ho = new Dictionary$2(String_$type, DataSeries.$, 0);
            this.ch = null;
            this.hr = null;
            this.cl = null;
            this.f6 = false;
            this.cm = null;
            this._commandCompleted = null;
            this._invalidateActions = null;
            this.hp = new List$1(ICommandStateChangedListener_$type, 0);
            this.b2 = 0;
            this.ib = NaN;
            this.ic = NaN;
            this.h9 = DeviceUtils.g(10);
            this.ia = DeviceUtils.g(10);
            this.by = 0;
            this.b0 = 0;
            this.fx = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.bg = 0;
            this.k0 = -1;
            this.k1 = -1;
            this.bw = 0;
            this.mi = stringEmpty();
            this.fy = true;
            this.mj = null;
            this.f = null;
            this.y0 = new Thickness(0, DeviceUtils.g(5));
            this.fz = true;
            this.mk = "N/A";
            this.f0 = false;
            this.y1 = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.xf = null;
            this.e7 = null;
            this.mc = null;
            this.c = null;
            this.mb = stringEmpty();
            this.bm = 0;
            this.bo = 0;
            this.md = null;
            this.w7 = null;
            this.yu = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.yt = new Thickness(0, DeviceUtils.g(5));
            this.fw = true;
            this.ez = null;
            this.w6 = null;
            this.ys = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.yr = new Thickness(0, DeviceUtils.g(5));
            this.fv = false;
            this.ey = null;
            this.xa = null;
            this.e2 = null;
            this.bs = 0;
            this.mf = null;
            this.yx = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.yw = new Thickness(0, DeviceUtils.g(5));
            this.xc = null;
            this.e4 = null;
            this.me = null;
            this.w9 = null;
            this.e1 = null;
            this.mg = null;
            this.xb = null;
            this.e3 = null;
            this.yq = new Thickness(0, DeviceUtils.g(0));
            this.cu = 0;
            this.bu = 0;
            this.mh = null;
            this.xe = null;
            this.yz = new Thickness(0, DeviceUtils.g(0));
            this.e6 = null;
            this.yy = new Thickness(0, DeviceUtils.g(0));
            this.xd = null;
            this.e5 = null;
            this.bq = 0;
            this.w8 = null;
            this.yv = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.e0 = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.seriesClick = null;
            this.plotAreaPointerEnter = null;
            this.plotAreaPointerLeave = null;
            this.plotAreaPointerMove = null;
            this.plotAreaPointerDown = null;
            this.plotAreaPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.selectedSeriesItemsChanged = null;
            this.focusedSeriesItemsChanged = null;
            this.hv = null;
            this.fj = null;
            this.fm = false;
            this.hn = new Dictionary$2(String_$type, Base.$, 0);
            this.hq = new List$1(String_$type, 0);
            this.a0 = null;
            this.aw = null;
            this.av = null;
            this.em = null;
            this.en = null;
            this.a8 = null;
            this.eu = null;
            this.ev = null;
            this.az = null;
            this.ay = null;
            this.ax = null;
            this.ep = null;
            this.eo = null;
            this.a7 = null;
            this.dz = 0;
            this.dy = 0;
            this.xl = null;
            this.xi = null;
            this.dw = 0;
            this.aq = new ChartSelectedItemCollection();
            this.ap = new ChartSelectedItemCollection();
            this.mp = null;
            this.ml = null;
            this.mn = null;
            this.mm = null;
            this.mo = null;
            this.filterStringErrorsParsing = null;
            this.mq = null;
            this.lp = null;
            this.ln = null;
            this.lo = null;
            this.lm = null;
            this.h = null;
            this.g = null;
            this.t = null;
            this.w = null;
            this.r = null;
            this.s = null;
            this.cj = null;
            this.f5 = true;
            this.f8 = true;
            this.ga = false;
            this.gc = false;
            this.dj = 1;
            this.f7 = false;
            this.ze = 0;
            this.yn = new Rect(0, 0, 0, 1, 1);
            this.mt = null;
            this.mr = null;
            this.ww = 1;
            this.wv = 1;
            this.eg = 0;
            this.iu = NaN;
            this.i0 = NaN;
            this.dq = 0;
            this.c2 = 0;
            this.c0 = 0;
            this.im = NaN;
            this.io = NaN;
            this.c8 = null;
            this.cy = 4;
            this.u = null;
            this.v = null;
            this.k5 = 400;
            this.h5 = NaN;
            this.fl = false;
            this.x = null;
            this.ee = 0;
            this.i6 = DeviceUtils.g(1.5);
            this.fk = true;
            this.ir = NaN;
            this.it = NaN;
            this.is = NaN;
            this.iq = NaN;
            this.bb = 0;
            this.ds = 0;
            this.du = 0;
            this.dn = 0;
            this.dl = 0;
            this.cq = 0;
            this.cv = 0;
            this.cs = 0;
            this.k9 = 7;
            this.ec = 4;
            this.be = 0;
            this.fu = false;
            this.w5 = null;
            this.h8 = NaN;
            this.w4 = null;
            this.ft = true;
            this.w0 = null;
            this.w2 = null;
            this.w1 = null;
            this.w3 = null;
            this.ky = -1;
            this.kz = -1;
            this.f9 = false;
            this.gb = true;
            this.f1 = false;
            this.xg = null;
            this.xh = null;
            this.k2 = -1;
            this.fn = false;
            this.fs = false;
            this.fo = false;
            this.gd = true;
            this.aj = 0;
            this.fq = false;
            this.fr = false;
            this.fp = false;
            this.h7 = NaN;
            this.wz = null;
            this.kx = -1;
            this.h0 = null;
            this.al = null;
            this.l9 = null;
            this.ma = null;
            this.l8 = "CalloutLabel";
            this.l7 = "CalloutContent";
            this.ei = null;
            this.y = null;
            this.i7 = NaN;
            this.d4 = 0;
            this.d5 = 0;
            this.d2 = 0;
            this.ea = 0;
            this.xj = null;
            this.xk = null;
            this.ii = NaN;
            this.ih = NaN;
            this.id = NaN;
            this.ie = NaN;
            this.ig = NaN;
            this.ik = NaN;
            this.ij = NaN;
            this.f2 = true;
            this.xo = null;
            this.xp = null;
            this.jb = NaN;
            this.ja = NaN;
            this.i8 = NaN;
            this.je = NaN;
            this.i9 = NaN;
            this.jd = NaN;
            this.jc = NaN;
            this.ge = true;
            this.jg = NaN;
            this.jf = NaN;
            this.ji = NaN;
            this.jh = NaN;
            this.hv = new List$1(Delegate_$type, 0);
            this.uv();
            this.t9();
        }
        provideContainer(a) {
            if (a == null) {
                this.vc((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.lu;
            this.lu = a;
            if (this.fj != null && this.lu != null && b == null) {
                this.lu.setTimeout(this.fj, 0);
                this.fj = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.e5 = true;
                return $ret;
            })());
            c.i3 = this;
            c.c8.b4(a);
            this.dataChart = c;
            this.uw();
        }
        destroy() {
            this.f3 = true;
            this.provideContainer(null);
        }
        uw() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.c8.j.e();
            this.ab = a.a;
            this.af = a.f;
            this.ad = a.b;
            this.ae = a.c;
            this.ah = a.g;
            this.jm = Defaults.j;
            this.ux();
        }
        ux() {
        }
        ut(a) {
            if (a == null) {
                return;
            }
            a.h8 = this.kg;
            a.h6 = this.ke;
            a.h7 = this.kf;
            a.h5 = this.kd;
            a.u7 = this.yj;
            a.h2 = this.j9;
            a.h4 = this.kb;
            a.h3 = this.ka;
            a.h1 = this.j8;
            a.u6 = this.yi;
            if (!isNaN_(this.j1)) {
                a.hw = this.j1;
            }
        }
        uq() {
        }
        uz(a, b) {
            a.kb = this.lk;
            a.db = this.ex;
        }
        vo(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h8 = this.kg;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h6 = this.ke;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.vc((d) => d.hw = this.j1);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h7 = this.kf;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h5 = this.kd;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.u7 = this.yj;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h2 = this.j9;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h4 = this.kb;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h3 = this.ka;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h1 = this.j8;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.u6 = this.yi;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hv = this.jy;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h9 = this.kh;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.h0 = this.j7;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hi = this.jk;
                    }
                    break;
                case "TransitionDuration":
                    this.um((d) => d.kb = this.lk);
                    break;
                case "TransitionEasingFunction":
                    this.um((d) => d.db = this.ex);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.hs;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.hs = a;
                this.vl("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get j1() {
            return this.ip;
        }
        set j1(a) {
            let b = this.ip;
            if (a != b) {
                this.ip = a;
                this.vl("PixelScalingRatio", b, this.j1);
            }
        }
        get toolTip() {
            return this.lq;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.lq = a;
                this.vl("ToolTip", b, this.toolTip);
            }
        }
        get ke() {
            return this.i2;
        }
        set ke(a) {
            let b = this.ke;
            if (a != b) {
                this.i2 = a;
                this.vl("TitleLeftMargin", b, this.ke);
            }
        }
        get kf() {
            return this.i3;
        }
        set kf(a) {
            let b = this.kf;
            if (a != b) {
                this.i3 = a;
                this.vl("TitleRightMargin", b, this.kf);
            }
        }
        get kg() {
            return this.i4;
        }
        set kg(a) {
            let b = this.kg;
            if (a != b) {
                this.i4 = a;
                this.vl("TitleTopMargin", b, this.kg);
            }
        }
        get kd() {
            return this.i1;
        }
        set kd(a) {
            let b = this.kd;
            if (a != b) {
                this.i1 = a;
                this.vl("TitleBottomMargin", b, this.kd);
            }
        }
        get j9() {
            return this.ix;
        }
        set j9(a) {
            let b = this.j9;
            if (a != b) {
                this.ix = a;
                this.vl("SubtitleLeftMargin", b, this.j9);
            }
        }
        get kb() {
            return this.iz;
        }
        set kb(a) {
            let b = this.kb;
            if (a != b) {
                this.iz = a;
                this.vl("SubtitleTopMargin", b, this.kb);
            }
        }
        get ka() {
            return this.iy;
        }
        set ka(a) {
            let b = this.ka;
            if (a != b) {
                this.iy = a;
                this.vl("SubtitleRightMargin", b, this.ka);
            }
        }
        get j8() {
            return this.iw;
        }
        set j8(a) {
            let b = this.j8;
            if (a != b) {
                this.iw = a;
                this.vl("SubtitleBottomMargin", b, this.j8);
            }
        }
        get yi() {
            return this.xm;
        }
        set yi(a) {
            let b = this.yi;
            if (a != b) {
                this.xm = a;
                this.vl("SubtitleTextColor", b, this.yi);
            }
        }
        get yj() {
            return this.xn;
        }
        set yj(a) {
            let b = this.yj;
            if (a != b) {
                this.xn = a;
                this.vl("TitleTextColor", b, this.yj);
            }
        }
        get_jy() {
            return this.il;
        }
        set_jy(a) {
            let b = this.jy;
            if (a != b) {
                this.il = a;
                this.vl("LeftMargin", b, this.jy);
            }
        }
        get jy() {
            return this.get_jy();
        }
        set jy(a) {
            this.set_jy(a);
        }
        get kh() {
            return this.i5;
        }
        set kh(a) {
            let b = this.kh;
            if (a != b) {
                this.i5 = a;
                this.vl("TopMargin", b, this.kh);
            }
        }
        get j7() {
            return this.iv;
        }
        set j7(a) {
            let b = this.j7;
            if (a != b) {
                this.iv = a;
                this.vl("RightMargin", b, this.j7);
            }
        }
        get jk() {
            return this.h6;
        }
        set jk(a) {
            let b = this.jk;
            if (a != b) {
                this.h6 = a;
                this.vl("BottomMargin", b, this.jk);
            }
        }
        get lk() {
            return this.k8;
        }
        set lk(a) {
            let b = this.lk;
            if (a != b) {
                this.k8 = a;
                this.vl("TransitionDuration", b, this.lk);
            }
        }
        get ex() {
            return this.ew;
        }
        set ex(a) {
            let b = this.ex;
            if (a != b) {
                this.ew = a;
                this.vl("TransitionEasingFunction", b, this.ex);
            }
        }
        get lh() {
            return this.k4;
        }
        set lh(a) {
            let b = this.lh;
            if (a != b) {
                this.k4 = a;
                this.vl("HighlightingTransitionDuration", b, this.lh);
            }
        }
        get lj() {
            return this.k6;
        }
        set lj(a) {
            let b = this.lj;
            if (a != b) {
                this.k6 = a;
                this.vl("SelectionTransitionDuration", b, this.lj);
            }
        }
        get lg() {
            return this.k3;
        }
        set lg(a) {
            let b = this.lg;
            if (a != b) {
                this.k3 = a;
                this.vl("FocusTransitionDuration", b, this.lg);
            }
        }
        uu(a) {
            if (this.dataChart == null) {
                return;
            }
            a.lz = this.s0;
            a.ln = this.sp;
        }
        u0(a, b) {
            this.u1(a, b);
        }
        ur() {
        }
        u1(a, b) {
            if (a == null) {
                return;
            }
            if (this.ed == 3) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.gn = true;
            }
            else {
                let series_ = a;
                a.gn = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        wq(a, b, c) {
        }
        lw(a) {
            return a;
            return null;
        }
        kw(a) {
            return null;
        }
        vp(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.ln = this.sp;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.lz = this.s0;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.hf) {
                        return;
                    }
                    this.hf = true;
                    this.tooltipTemplate = this.lw(this.tooltipTemplate);
                    this.hf = false;
                    if (this.dataChart != null) {
                        this.dataChart.i5 = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.un((d, e) => this.u1(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.hf = true;
                    this.un((d, e) => {
                        let f = this.lw(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.hf = false;
                    break;
            }
        }
        get cp() {
            return this.co;
        }
        set cp(a) {
            let b = this.cp;
            if (a != b) {
                this.co = a;
                this.vl("Widget", b, this.cp);
            }
        }
        get sp() {
            return this.ms;
        }
        set sp(a) {
            let b = this.sp;
            if (a != b) {
                this.ms = a;
                this.vl("SubtitleTextStyle", b, this.sp);
            }
        }
        get s0() {
            return this.mu;
        }
        set s0(a) {
            let b = this.s0;
            if (a != b) {
                this.mu = a;
                this.vl("TitleTextStyle", b, this.s0);
            }
        }
        get dataChart() {
            return this.ek;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.ek = a;
                this.vl("DataChart", b, this.dataChart);
            }
        }
        get isDetached() {
            return this.f4 || this.f3;
        }
        onDetachedFromUI() {
            this.f4 = true;
            this.vc((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.f4 = false;
            this.vc((a) => a.onAttachedToUI());
        }
        uv() {
            this.bj = this.bl(true);
            let a = this.bj.dataSeries;
            a.collectionChanged = delegateCombine(a.collectionChanged, runOn(this, this.vf));
            this.bk = this.bl(false);
            let b = this.bk.dataSeries;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.vi));
        }
        wo(a, b, c) {
            if (a) {
                b.e = c;
            }
            else {
                b.n(c);
            }
        }
        wn(a, b, c) {
            if (a) {
                b.syncTarget = c;
            }
            else {
                b.o(c);
            }
        }
        wp(a, b, c) {
            if (a) {
                b.e = c;
            }
            else {
                b.n(c);
            }
        }
        bl(a) {
            this.hw = new List$1(MarkerType_$type, 0);
            let b = new DataSeriesAdapter().e;
            if (a) {
                this.a0 = new ChartSortDescriptionCollection();
                this.aw = new ChartSortDescriptionCollection();
                this.av = new ChartSortDescriptionCollection();
                this.a8 = new ChartSummaryDescriptionCollection();
                this.em = new FilterExpressionCollection();
                this.en = new FilterExpressionCollection();
            }
            this.wo(a, this.a6, b.sortDescriptions);
            this.wo(a, this.a1, b.groupDescriptions);
            this.wn(a, this.eq, b.filterExpressions);
            this.wn(a, this.er, b.highlightFilterExpressions);
            this.wp(a, this.ba, b.summaryDescriptions);
            this.wo(a, this.a2, b.postSortDescriptions);
            if (a) {
                this.eu = new SortGroupParser();
                this.ev = new SummaryParser();
                this.az = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.ay = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.ax = ((() => {
                    let $ret = new ChartSortDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.a7 = ((() => {
                    let $ret = new ChartSummaryDescriptionCollection();
                    $ret.i = true;
                    return $ret;
                })());
                this.eo = ((() => {
                    let $ret = new FilterExpressionCollection();
                    $ret.shouldDetachOnTargetChange = true;
                    return $ret;
                })());
                this.ep = ((() => {
                    let $ret = new FilterExpressionCollection();
                    $ret.shouldDetachOnTargetChange = true;
                    return $ret;
                })());
            }
            {
                if (this.eq.k.count == 0) {
                    this.wn(a, this.eo, b.filterExpressions);
                }
            }
            {
                if (this.er.k.count == 0) {
                    this.wn(a, this.ep, b.highlightFilterExpressions);
                }
            }
            {
                if (this.a6.j.count == 0) {
                    this.wo(a, this.az, b.sortDescriptions);
                }
                if (this.a2.j.count == 0) {
                    this.wo(a, this.ay, b.postSortDescriptions);
                }
            }
            {
                if (this.a1.j.count == 0) {
                    this.wo(a, this.ax, b.groupDescriptions);
                }
            }
            {
                if (this.ba.j.count == 0) {
                    this.wp(a, this.a7, b.summaryDescriptions);
                }
            }
            if (this.q != null) {
                b.includedProperties = this.q;
            }
            if (this.o != null) {
                b.excludedProperties = this.o;
            }
            b.supportedSeriesTypes = this.hy.toArray();
            b.rules.clear();
            for (let c of fromEnum(this.hx)) {
                b.rules.add(c);
            }
            let d = new List$1(String_$type, 0);
            for (let e of fromEnum(b.rules)) {
                d.add(getInstanceType(e).typeName);
            }
            return b;
        }
        ha(a) {
            return a != 24 && this.hy.contains(a);
        }
        notifyResized() {
            this.vc((a) => a.notifyContainerResized());
        }
        va() {
            this.vc((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].qj();
                }
            });
        }
        ug() {
            if (this.dataChart == null) {
                return;
            }
            if (this.g8) {
                this.ud();
            }
            this.dataChart.flush();
        }
        uo() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.nl();
        }
        v2(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        ui(a) {
            this.uj((b, c) => a(b));
        }
        uj(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        um(a) {
            this.un((b, c) => a(b));
        }
        un(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.ep) {
                    a(c, b);
                }
            }
        }
        uk(a) {
            this.ul((b, c) => a(b));
        }
        ul(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.eq) {
                    a(c, b);
                }
            }
        }
        wd() {
            this.ui((a) => a.rr());
        }
        vc(a) {
            this.vd(a, true);
        }
        vd(a, b) {
            this.ve(a, b, null);
        }
        ve(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        hc(a) {
            if (!this.ha(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        g2() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        qk(a) {
            let b = EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            let c = "series_" + (a.index + 1) + "_" + b;
            return c;
        }
        ql(a, b) {
            if (this.g5 && this.hk) {
                let c = "";
                let d = 5 + Math.round(DomainChart.l5.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        qj() {
            return stringEmpty();
        }
        vr() {
            let a = this.vt(runOn(this, this.ud), this.g8);
            this.g8 = a.p1;
        }
        t7() {
            if (this.dataChart == null) {
                return;
            }
            this.g7 = false;
            let a = false;
            if (this.gy()) {
                a = true;
                this.t6();
            }
            if (a) {
                this.uf();
                this.wr();
            }
        }
        wr() {
            this.ho.clear();
        }
        t6() {
            let a = 0;
            for (let b of fromEnum(this.bk.dataSeries)) {
                if (b.index == -1) {
                    b.index = a;
                }
                if (!stringIsNullOrEmpty(this.qk(b))) {
                    this.ho.item(this.qk(b), b);
                }
                a++;
            }
        }
        h2(a) {
            return a.data;
        }
        h3(a) {
            return a.highlightedData;
        }
        uf() {
            if (this.g8) {
                let a = 0;
                for (let b of fromEnum(this.bj.dataSeries)) {
                    if (b.index == -1) {
                        b.index = a;
                    }
                    if (!stringIsNullOrEmpty(this.qk(b))) {
                        if (this.ho.containsKey(this.qk(b))) {
                            let c = this.ho.item(this.qk(b));
                            b.highlightedData = c.data;
                        }
                    }
                    a++;
                }
            }
            if (!this.g8 && this.dataChart != null) {
                for (let d = 0; d < this.dataChart.series.count; d++) {
                    let e = this.dataChart.series._inner[d];
                    if (this.ho.containsKey(e.name)) {
                        e.highlightedItemsSource = this.h2(this.ho.item(e.name));
                    }
                }
            }
        }
        gy() {
            if (this.actualHighlightedItemsSource == null) {
                return false;
            }
            if (this.bk.dataSeries.count != this.bj.dataSeries.count) {
                return false;
            }
            if (this.bk.dataSeries.count == 0) {
                return false;
            }
            for (let a = 0; a < this.bk.dataSeries.count; a++) {
                if (!(this.bk.dataSeries._inner[a].isMatch(this.bj.dataSeries._inner[a]))) {
                    return false;
                }
            }
            return true;
        }
        wg() {
            if (this.dataChart == null) {
                return;
            }
            this.g8 = false;
            this.wi();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.bj.dataSeries)) {
                a.add(this.c4(b.suggestedMarker));
            }
            this.hw = a;
            let c = 0;
            for (let d of fromEnum(this.bj.dataSeries)) {
                if (!this.hc(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.we(d);
                this.wf(d);
                c++;
            }
            this.ws();
            this.uj(runOn(this, this.uy));
        }
        di(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        da() {
            return this.di(28);
        }
        dc() {
            return this.di(27);
        }
        de() {
            return this.di(29);
        }
        df() {
            return this.di(25);
        }
        db() {
            return this.di(26);
        }
        dd() {
            return this.di(32);
        }
        dh() {
            return this.di(33);
        }
        get ci() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get gx() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        g0(a) {
            if (!this.gx) {
                return false;
            }
            return this.ci.matchesType(a);
        }
        ws() {
            let a = this.hu("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        g3() {
            return this.bf == 0 || this.bf == 4 || this.bf == 2;
        }
        g4() {
            return this.bf == 0 || this.bf == 4 || this.bf == 3;
        }
        get_g1() {
            return this.gi;
        }
        get g1() {
            return this.get_g1();
        }
        hu(a, b) {
            if (!this.gx) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                let d = 1;
                if (this.fs) {
                    if (this.h0 == null) {
                        if (this.l9 != null || this.ma != null || this.l8 != null || this.l7 != null) {
                            for (let e of fromEnum(this.dataChart.series)) {
                                let f = this.da();
                                this.ci.setTargetSeries(f, e);
                                this.ci.setCollisionChannel(f, "MainChartCollisionChannel");
                                this.wm(f, e, this.bj.dataSeries._inner[d - 1]);
                                f.name = a + getInstanceType(f).typeName + d.toString();
                                c.add(f);
                                d++;
                            }
                            ;
                        }
                    }
                    else {
                        let g = this.da();
                        this.wm(g, null, this.bj.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        if (this.fs && this.fn) {
                            this.ci.setCollisionChannel(g, "MainChartCollisionChannel");
                        }
                        c.add(g);
                    }
                }
                if (this.fn) {
                    let h = this.da();
                    this.t8(h, this.hj);
                    h.name = a + getInstanceType(h).typeName + d.toString();
                    if (this.fs && this.fn) {
                        this.ci.setCollisionChannel(h, "MainChartCollisionChannel");
                    }
                    c.add(h);
                }
            }
            switch (this.be) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let i = this.dc();
                        this.ci.setCrosshairThickness(i, this.h8);
                        this.ci.setCrosshairUseInterpolation(i, !this.fu);
                        this.ci.setCrosshairHorizontalLineVisibility(i, this.g3() ? 0 : 1);
                        this.ci.setCrosshairHorizontalLineStroke(i, this.w4);
                        this.ci.setCrosshairVerticalLineVisibility(i, this.g4() ? 0 : 1);
                        this.ci.setCrosshairVerticalLineStroke(i, this.w5);
                        this.ci.setCrosshairOnAxesEnabled(i, this.ft);
                        this.ci.setCrosshairXAxisBackground(i, this.w0);
                        this.ci.setCrosshairXAxisForeground(i, this.w1);
                        this.ci.setCrosshairYAxisBackground(i, this.w2);
                        this.ci.setCrosshairYAxisForeground(i, this.w3);
                        this.ci.setCrosshairXAxisPrecision(i, this.ky);
                        this.ci.setCrosshairYAxisPrecision(i, this.kz);
                        c.add(i);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.f1) {
                let j = this.de();
                this.ci.setFinalValueBackground(j, this.xg);
                this.ci.setFinalValueForeground(j, this.xh);
                this.ci.setFinalValuePrecision(j, this.k2);
                c.add(j);
            }
            if (b) {
                switch (this.ec) {
                    case 1:
                        {
                            let k = this.df();
                            c.add(k);
                            break;
                        }
                    case 2:
                        {
                            let l = this.db();
                            c.add(l);
                            break;
                        }
                    case 4:
                        {
                            let m = this.dd();
                            c.add(m);
                            break;
                        }
                    case 3:
                        {
                            this.ui((n) => n.gn = false);
                            break;
                        }
                    case 0:
                        {
                            this.ui((n) => n.gn = true);
                            break;
                        }
                }
            }
            if (this.ej != null && this.ej.count > 0) {
                for (let n = 0; n < this.ej.count; n++) {
                    let o = this.dh();
                    this.ci.setValueMode(o, this.ej._inner[n]);
                    this.ci.setValueAxisAnnotationEnabled(o, true);
                    if (this.ai != null && n < this.ai.count) {
                        this.ci.setBrush(o, this.ai.item(n));
                    }
                    c.add(o);
                }
            }
            for (let p of fromEnum(c)) {
                if (stringIsNullOrEmpty(p.name) == false) {
                    continue;
                }
                p.name = a + getInstanceType(p).typeName;
            }
            return c;
        }
        t8(a, b) {
            this.ci.setIsAutoCalloutBehaviorEnabled(a, true);
            if (this.ak == 0) {
                this.ci.setGreedyCollisionMode(a, true);
            }
            this.ci.setUseDedicatedLanes(a, b);
        }
        wm(a, b, c) {
            a.itemsSource = this.h0 != null ? this.h0 : b.itemsSource;
            this.ci.setXMemberPath(a, this.l9);
            this.ci.setYMemberPath(a, this.ma);
            this.ci.setLabelMemberPath(a, this.l8);
            this.ci.setContentMemberPath(a, this.l7);
            if (this.al != null) {
                this.ci.setCalloutsAllowedPositions(a, this.al);
            }
        }
        wi() {
            this.wj(this.dataChart);
        }
        wj(a) {
            if (a != null && a == this.dataChart) {
                this.wh();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.ui((b) => {
                if (this.g0(b) && this.ci.isCalloutLayer(b)) {
                    this.ci.removeCalloutStyleUpdating(b, runOn(this, this.vv));
                }
                if (this.g0(b) && this.ci.isCalloutLayer(b)) {
                    this.ci.removeCalloutRenderStyleUpdating(b, runOn(this, this.vu));
                }
                this.wb(b);
            });
            for (let b of fromEnum(a.series)) {
                this.wk(b);
            }
            a.series.clear();
        }
        wk(a) {
            a.itemsSource = null;
            a.legend = null;
            a.o0();
        }
        vf(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.g8) {
                return;
            }
            let e = this.vt(runOn(this, this.ud), this.g8);
            this.g8 = e.p1;
        }
        vi(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.g7) {
                return;
            }
            let e = this.vt(runOn(this, this.uc), this.g7);
            this.g7 = e.p1;
        }
        uc() {
            this.t7();
        }
        ud() {
            let a = false;
            if (this.gy()) {
                a = true;
                this.t6();
                this.uf();
            }
            this.wg();
            if (a) {
                this.wr();
            }
        }
        ya(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.z, a);
        }
        yd(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.aa, a);
        }
        yb(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ad, a);
        }
        yc(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ae, a);
        }
        ym(a) {
            let b = new Color();
            if (this.z == null || this.z.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.ht, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.z, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.ht, a);
                }
                else {
                    b = ColorUtil.s(c);
                }
            }
            return b;
        }
        fi(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.x(a, 0.5));
            b.add(a);
            return b;
        }
        ac(a) {
            let b = this.fi(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get ht() {
            if (this.hr != null) {
                return this.hr;
            }
            this.hr = new List$1(Color.$, 0);
            this.hr.add(ColorUtil.t("#8BDC5C"));
            this.hr.add(ColorUtil.t("#8961A9"));
            this.hr.add(ColorUtil.t("#6DB1FF"));
            this.hr.add(ColorUtil.t("#82E9D9"));
            this.hr.add(ColorUtil.t("#EA3C63"));
            this.hr.add(ColorUtil.t("#735656"));
            this.hr.add(ColorUtil.t("#F8CE4F"));
            this.hr.add(ColorUtil.t("#A8A8B7"));
            this.hr.add(ColorUtil.t("#E051A9"));
            this.hr.add(ColorUtil.t("#FF903B"));
            return this.hr;
        }
        get_hj() {
            return false;
        }
        get hj() {
            return this.get_hj();
        }
        lv() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.x8();
        }
        u3(a, b) {
        }
        u4(a, b, c) {
        }
        c4(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.t5(a);
        }
        t5(a) {
            this.cl = a;
            if (this.dataChart != null) {
                if (!this.f6) {
                    this.f6 = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.ub(a);
        }
        ub(a) {
            if (this.dataChart != null) {
                this.f6 = false;
                this.dataChart.detachDataLegend(a);
            }
            this.cl = null;
        }
        getDataLegendSeries() {
            return this.p();
        }
        p() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        wt(a) {
            if (this.dataChart != null) {
                this.dataChart.rl(a);
            }
        }
        wu(a) {
            if (this.dataChart != null) {
                this.dataChart.rm(a);
            }
        }
        wl() {
            if (this.dataChart != null) {
                this.dataChart.qu();
            }
        }
        get_hb() {
            return false;
        }
        get hb() {
            return this.get_hb();
        }
        get cn() {
            if (this.cm == null) {
                this.cm = DVContainer.instance.createInstance(IDomainChartToolbarProvider_$type, () => "Domain chart toolbar module is not loaded.");
                this.cm.container = this.lu;
                this.cm.commandChanged = runOn(this, this.vm);
            }
            return this.cm;
        }
        vm(a) {
            for (let b of fromEnum(this.hp)) {
                b.onCommandStateChanged(a.c, a.a, a.b);
            }
        }
        getDesiredToolbarActions() {
            if (!this.hb) {
                return null;
            }
            if (this.dataChart != null) {
                let a = this.dataChart.getDesiredToolbarActions();
                a = this.cn.getDesiredToolbarActions(this, a);
                return a;
            }
            return null;
        }
        onToolCommandExecuting(a) {
            if (!this.hb) {
                return 1;
            }
            return this.cn.onToolCommandExecuting(this, a);
        }
        get commandCompleted() {
            return this._commandCompleted;
        }
        set commandCompleted(a) {
            this._commandCompleted = a;
        }
        get invalidateActions() {
            return this._invalidateActions;
        }
        set invalidateActions(a) {
            this._invalidateActions = a;
        }
        u2() {
            if (this.invalidateActions != null) {
                this.invalidateActions();
            }
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        addCommandStateChangedListener(a) {
            if (!this.hp.contains(a)) {
                this.hp.add(a);
            }
        }
        removeCommandStateChangedListener(a) {
            if (this.hp.contains(a)) {
                this.hp.remove(a);
            }
        }
        u9(source_, a, b, c) {
            if (this.bj != null) {
                this.bj.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.n4(source_, a, b, c);
            }
        }
        u5(source_) {
            if (this.bj != null) {
                this.bj.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.nv(source_);
            }
        }
        u6(source_, a, b) {
            if (this.bj != null) {
                this.bj.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.n2(source_, a, b);
            }
        }
        u7(source_, a, b) {
            if (this.bj != null) {
                this.bj.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.n3(source_, a, b);
            }
        }
        get b3() {
            return this.b2;
        }
        set b3(a) {
            let b = this.b2;
            this.b2 = a;
            if (b != this.b2) {
                this.vl("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.b2));
            }
        }
        get jp() {
            return this.ib;
        }
        set jp(a) {
            let b = this.ib;
            this.ib = a;
            if (b != this.ib) {
                this.vl("DataToolTipPositionOffsetX", b, this.ib);
            }
        }
        get jq() {
            return this.ic;
        }
        set jq(a) {
            let b = this.ic;
            this.ic = a;
            if (b != this.ic) {
                this.vl("DataToolTipPositionOffsetY", b, this.ic);
            }
        }
        get jn() {
            return this.h9;
        }
        set jn(a) {
            let b = this.h9;
            this.h9 = a;
            if (b != this.h9) {
                this.vl("DataToolTipDefaultPositionOffsetX", b, this.h9);
            }
        }
        get jo() {
            return this.ia;
        }
        set jo(a) {
            let b = this.ia;
            this.ia = a;
            if (b != this.ia) {
                this.vl("DataToolTipDefaultPositionOffsetY", b, this.ia);
            }
        }
        get bz() {
            return this.by;
        }
        set bz(a) {
            let b = this.by;
            this.by = a;
            if (b != this.by) {
                this.vl("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.by));
            }
        }
        get b1() {
            return this.b0;
        }
        set b1(a) {
            let b = this.b0;
            this.b0 = a;
            if (b != this.b0) {
                this.vl("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.b0));
            }
        }
        get gs() {
            return this.fx;
        }
        set gs(a) {
            let b = this.fx;
            this.fx = a;
            if (b != this.fx) {
                this.vl(DomainChart.o2, b, this.fx);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.vl("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.vl("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.vl("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.vl("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.vl("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.bg));
            }
        }
        get ld() {
            return this.k0;
        }
        set ld(a) {
            let b = this.k0;
            this.k0 = a;
            if (b != this.k0) {
                this.vl("DataToolTipValueFormatMaxFractions", b, this.k0);
            }
        }
        get le() {
            return this.k1;
        }
        set le(a) {
            let b = this.k1;
            this.k1 = a;
            if (b != this.k1) {
                this.vl("DataToolTipValueFormatMinFractions", b, this.k1);
            }
        }
        get bx() {
            return this.bw;
        }
        set bx(a) {
            let b = this.bw;
            this.bw = a;
            if (b != this.bw) {
                this.vl("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.bw));
            }
        }
        get pu() {
            return this.mi;
        }
        set pu(a) {
            let b = this.mi;
            this.mi = a;
            if (b != this.mi) {
                this.vl("DataToolTipValueFormatCulture", b, this.mi);
            }
        }
        get gt() {
            return this.fy;
        }
        set gt(a) {
            let b = this.fy;
            this.fy = a;
            if (b != this.fy) {
                this.vl("DataToolTipValueFormatUseGrouping", b, this.fy);
            }
        }
        get p0() {
            return this.mj;
        }
        set p0(a) {
            let b = this.mj;
            this.mj = a;
            if (b != this.mj) {
                this.vl("DataToolTipValueFormatString", b, this.mj);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.vl("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get zc() {
            return this.y0;
        }
        set zc(a) {
            let b = this.y0;
            this.y0 = a;
            if (b != this.y0) {
                this.vl("DataToolTipValueRowMargin", b, this.y0);
            }
        }
        get gu() {
            return this.fz;
        }
        set gu(a) {
            let b = this.fz;
            this.fz = a;
            if (b != this.fz) {
                this.vl("DataToolTipValueRowVisible", b, this.fz);
            }
        }
        get p9() {
            return this.mk;
        }
        set p9(a) {
            let b = this.mk;
            this.mk = a;
            if (b != this.mk) {
                this.vl("DataToolTipValueTextWhenMissingData", b, this.mk);
            }
        }
        get gv() {
            return this.f0;
        }
        set gv(a) {
            let b = this.f0;
            this.f0 = a;
            if (b != this.f0) {
                this.vl("DataToolTipValueTextUseSeriesColors", b, this.f0);
            }
        }
        get zd() {
            return this.y1;
        }
        set zd(a) {
            let b = this.y1;
            this.y1 = a;
            if (b != this.y1) {
                this.vl("DataToolTipValueTextMargin", b, this.y1);
            }
        }
        get x6() {
            return this.xf;
        }
        set x6(a) {
            let b = this.xf;
            this.xf = a;
            if (b != this.xf) {
                this.vl("DataToolTipValueTextColor", b, this.xf);
            }
        }
        get fh() {
            return this.e7;
        }
        set fh(a) {
            let b = this.e7;
            this.e7 = a;
            if (b != this.e7) {
                this.vl("DataToolTipValueTextStyle", b, this.e7);
            }
        }
        get ok() {
            return this.mc;
        }
        set ok(a) {
            let b = this.mc;
            this.mc = a;
            if (b != this.mc) {
                this.vl("DataToolTipHeaderFormatString", b, this.mc);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.vl("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get og() {
            return this.mb;
        }
        set og(a) {
            let b = this.mb;
            this.mb = a;
            if (b != this.mb) {
                this.vl("DataToolTipHeaderFormatCulture", b, this.mb);
            }
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.vl("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.bm));
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.vl("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.bo));
            }
        }
        get op() {
            return this.md;
        }
        set op(a) {
            let b = this.md;
            this.md = a;
            if (b != this.md) {
                this.vl("DataToolTipHeaderText", b, this.md);
            }
        }
        get xy() {
            return this.w7;
        }
        set xy(a) {
            let b = this.w7;
            this.w7 = a;
            if (b != this.w7) {
                this.vl("DataToolTipHeaderTextColor", b, this.w7);
            }
        }
        get y6() {
            return this.yu;
        }
        set y6(a) {
            let b = this.yu;
            this.yu = a;
            if (b != this.yu) {
                this.vl("DataToolTipHeaderTextMargin", b, this.yu);
            }
        }
        get y5() {
            return this.yt;
        }
        set y5(a) {
            let b = this.yt;
            this.yt = a;
            if (b != this.yt) {
                this.vl("DataToolTipHeaderRowMargin", b, this.yt);
            }
        }
        get gr() {
            return this.fw;
        }
        set gr(a) {
            let b = this.fw;
            this.fw = a;
            if (b != this.fw) {
                this.vl("DataToolTipHeaderRowVisible", b, this.fw);
            }
        }
        get e9() {
            return this.ez;
        }
        set e9(a) {
            let b = this.ez;
            this.ez = a;
            if (b != this.ez) {
                this.vl("DataToolTipHeaderTextStyle", b, this.ez);
            }
        }
        get xx() {
            return this.w6;
        }
        set xx(a) {
            let b = this.w6;
            this.w6 = a;
            if (b != this.w6) {
                this.vl("DataToolTipGroupTextColor", b, this.w6);
            }
        }
        get y4() {
            return this.ys;
        }
        set y4(a) {
            let b = this.ys;
            this.ys = a;
            if (b != this.ys) {
                this.vl("DataToolTipGroupTextMargin", b, this.ys);
            }
        }
        get y3() {
            return this.yr;
        }
        set y3(a) {
            let b = this.yr;
            this.yr = a;
            if (b != this.yr) {
                this.vl("DataToolTipGroupRowMargin", b, this.yr);
            }
        }
        get gq() {
            return this.fv;
        }
        set gq(a) {
            let b = this.fv;
            this.fv = a;
            if (b != this.fv) {
                this.vl("DataToolTipGroupRowVisible", b, this.fv);
            }
        }
        get e8() {
            return this.ey;
        }
        set e8(a) {
            let b = this.ey;
            this.ey = a;
            if (b != this.ey) {
                this.vl("DataToolTipGroupTextStyle", b, this.ey);
            }
        }
        get x1() {
            return this.xa;
        }
        set x1(a) {
            let b = this.xa;
            this.xa = a;
            if (b != this.xa) {
                this.vl("DataToolTipSummaryTitleTextColor", b, this.xa);
            }
        }
        get fc() {
            return this.e2;
        }
        set fc(a) {
            let b = this.e2;
            this.e2 = a;
            if (b != this.e2) {
                this.vl("DataToolTipSummaryTitleTextStyle", b, this.e2);
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.vl("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.bs));
            }
        }
        get o8() {
            return this.mf;
        }
        set o8(a) {
            let b = this.mf;
            this.mf = a;
            if (b != this.mf) {
                this.vl("DataToolTipSummaryTitleText", b, this.mf);
            }
        }
        get y9() {
            return this.yx;
        }
        set y9(a) {
            let b = this.yx;
            this.yx = a;
            if (b != this.yx) {
                this.vl("DataToolTipSummaryTitleTextMargin", b, this.yx);
            }
        }
        get y8() {
            return this.yw;
        }
        set y8(a) {
            let b = this.yw;
            this.yw = a;
            if (b != this.yw) {
                this.vl("DataToolTipSummaryRowMargin", b, this.yw);
            }
        }
        get x3() {
            return this.xc;
        }
        set x3(a) {
            let b = this.xc;
            this.xc = a;
            if (b != this.xc) {
                this.vl("DataToolTipSummaryValueTextColor", b, this.xc);
            }
        }
        get fe() {
            return this.e4;
        }
        set fe(a) {
            let b = this.e4;
            this.e4 = a;
            if (b != this.e4) {
                this.vl("DataToolTipSummaryValueTextStyle", b, this.e4);
            }
        }
        get o3() {
            return this.me;
        }
        set o3(a) {
            let b = this.me;
            this.me = a;
            if (b != this.me) {
                this.vl("DataToolTipSummaryLabelText", b, this.me);
            }
        }
        get x0() {
            return this.w9;
        }
        set x0(a) {
            let b = this.w9;
            this.w9 = a;
            if (b != this.w9) {
                this.vl("DataToolTipSummaryLabelTextColor", b, this.w9);
            }
        }
        get fb() {
            return this.e1;
        }
        set fb(a) {
            let b = this.e1;
            this.e1 = a;
            if (b != this.e1) {
                this.vl("DataToolTipSummaryLabelTextStyle", b, this.e1);
            }
        }
        get pe() {
            return this.mg;
        }
        set pe(a) {
            let b = this.mg;
            this.mg = a;
            if (b != this.mg) {
                this.vl("DataToolTipSummaryUnitsText", b, this.mg);
            }
        }
        get x2() {
            return this.xb;
        }
        set x2(a) {
            let b = this.xb;
            this.xb = a;
            if (b != this.xb) {
                this.vl("DataToolTipSummaryUnitsTextColor", b, this.xb);
            }
        }
        get fd() {
            return this.e3;
        }
        set fd(a) {
            let b = this.e3;
            this.e3 = a;
            if (b != this.e3) {
                this.vl("DataToolTipSummaryUnitsTextStyle", b, this.e3);
            }
        }
        get y2() {
            return this.yq;
        }
        set y2(a) {
            let b = this.yq;
            this.yq = a;
            if (b != this.yq) {
                this.vl("DataToolTipBadgeMargin", b, this.yq);
            }
        }
        get cw() {
            return this.cu;
        }
        set cw(a) {
            let b = this.cu;
            this.cu = a;
            if (b != this.cu) {
                this.vl("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cu));
            }
        }
        get bv() {
            return this.bu;
        }
        set bv(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.vl("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.bu));
            }
        }
        get po() {
            return this.mh;
        }
        set po(a) {
            let b = this.mh;
            this.mh = a;
            if (b != this.mh) {
                this.vl("DataToolTipUnitsText", b, this.mh);
            }
        }
        get x5() {
            return this.xe;
        }
        set x5(a) {
            let b = this.xe;
            this.xe = a;
            if (b != this.xe) {
                this.vl("DataToolTipUnitsTextColor", b, this.xe);
            }
        }
        get zb() {
            return this.yz;
        }
        set zb(a) {
            let b = this.yz;
            this.yz = a;
            if (b != this.yz) {
                this.vl("DataToolTipUnitsTextMargin", b, this.yz);
            }
        }
        get fg() {
            return this.e6;
        }
        set fg(a) {
            let b = this.e6;
            this.e6 = a;
            if (b != this.e6) {
                this.vl("DataToolTipUnitsTextStyle", b, this.e6);
            }
        }
        get za() {
            return this.yy;
        }
        set za(a) {
            let b = this.yy;
            this.yy = a;
            if (b != this.yy) {
                this.vl("DataToolTipTitleTextMargin", b, this.yy);
            }
        }
        get x4() {
            return this.xd;
        }
        set x4(a) {
            let b = this.xd;
            this.xd = a;
            if (b != this.xd) {
                this.vl("DataToolTipTitleTextColor", b, this.xd);
            }
        }
        get ff() {
            return this.e5;
        }
        set ff(a) {
            let b = this.e5;
            this.e5 = a;
            if (b != this.e5) {
                this.vl("DataToolTipTitleTextStyle", b, this.e5);
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.vl("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.bq));
            }
        }
        get xz() {
            return this.w8;
        }
        set xz(a) {
            let b = this.w8;
            this.w8 = a;
            if (b != this.w8) {
                this.vl("DataToolTipLabelTextColor", b, this.w8);
            }
        }
        get y7() {
            return this.yv;
        }
        set y7(a) {
            let b = this.yv;
            this.yv = a;
            if (b != this.yv) {
                this.vl("DataToolTipLabelTextMargin", b, this.yv);
            }
        }
        get fa() {
            return this.e0;
        }
        set fa(a) {
            let b = this.e0;
            this.e0 = a;
            if (b != this.e0) {
                this.vl("DataToolTipLabelTextStyle", b, this.e0);
            }
        }
        v4(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        wb(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        v7(a, b, c) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        v8(a, b, c) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        v9(a, b, c) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        v6(a, b, c) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        wa(a, b, c) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        v5(a, b, c) {
            if (this.seriesClick != null && a != null) {
                this.seriesClick(this, new DomainChartSeriesPointerEventArgs(a, b, c));
            }
        }
        vy(a) {
            if (this.plotAreaPointerEnter != null && this.dataChart != null) {
                this.plotAreaPointerEnter(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        vz(a) {
            if (this.plotAreaPointerLeave != null && this.dataChart != null) {
                this.plotAreaPointerLeave(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v0(a) {
            if (this.plotAreaPointerMove != null && this.dataChart != null) {
                this.plotAreaPointerMove(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        vx(a) {
            if (this.plotAreaPointerDown != null && this.dataChart != null) {
                this.plotAreaPointerDown(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        v1(a) {
            if (this.plotAreaPointerUp != null && this.dataChart != null) {
                this.plotAreaPointerUp(this, new DomainChartPlotAreaPointerEventArgs(this.dataChart, a));
            }
        }
        vv(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        vu(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        v3(a, b) {
            if (this.selectedSeriesItemsChanged != null && a != null) {
                this.selectedSeriesItemsChanged(this, b);
            }
        }
        vw(a, b) {
            if (this.focusedSeriesItemsChanged != null && a != null) {
                this.focusedSeriesItemsChanged(this, b);
            }
        }
        vs(a) {
            if (!this.hv.contains(a)) {
                this.hv.add(a);
                let b = false;
                let c = this.vt(() => {
                    a();
                    this.hv.remove(a);
                }, b);
                b = c.p1;
            }
        }
        vt(a, b) {
            if (!b) {
                b = true;
                if (this.lu != null) {
                    this.lu.setTimeout(a, 0);
                }
                else {
                    this.fj = a;
                }
            }
            return {
                p1: b
            };
        }
        get_hd() {
            return true;
        }
        get hd() {
            return this.get_hd();
        }
        us(a, b) {
            let c = a == this.dataChart;
            if (c) {
                a.ag = this.z;
            }
            if (c) {
                a.aj = this.aa;
            }
            a.c8.b4(b);
            a.ah = this.ad;
            a.ai = this.ae;
            a.bg = this.cz;
            a.legend = this.legend;
            a.ww = this.g6;
            a.wz = this.he && this.hd;
            a.f0 = this.hi;
            if (c) {
                if (this.ap != null && this.ap.count > 0) {
                    for (let d of fromEnum(this.ap)) {
                        a.focusedSeriesItems.add(d);
                    }
                }
                if (this.aq != null && this.aq.count > 0) {
                    for (let e of fromEnum(this.aq)) {
                        a.selectedSeriesItems.add(e);
                    }
                }
                a.ch = this.d6;
                a.ci = this.d7;
                a.hn = this.jr;
                a.uz = this.ye;
                a.ho = this.js;
                a.hp = this.jt;
                a.hq = this.ju;
                a.u0 = this.yf;
                a.ce = this.d3;
                a.ev = this.gz;
                a.hr = this.jv;
                a.hs = this.jw;
                a.ht = this.jx;
                a.ia = this.kk;
                a.u9 = this.yk;
                a.ih = this.kq;
                a.ib = this.kl;
                a.ic = this.km;
                a.va = this.yl;
                a.cl = this.eb;
                a.gd = this.hm;
                a.id = this.kn;
                a.ie = this.ko;
                a.ig = this.kp;
                a.ik = this.kr;
                a.il = this.ks;
                a.io = this.ku;
                a.im = this.kt;
                if (a.cb != this.d1 || a.b6 != this.dx) {
                    a.c8.b4(b);
                    a.cb = this.d1;
                    a.b6 = this.dx;
                }
                if (a.b9 != this.d0) {
                    a.c8.b4(b);
                    a.b9 = this.d0;
                }
                if (this.yh != null) {
                    a.u5 = this.yh;
                }
                if (this.x9 != null) {
                    a.uo = this.x9;
                }
                a.selectedSeriesItemsChanged = delegateCombine(a.selectedSeriesItemsChanged, runOn(this, this.v3));
                a.focusedSeriesItemsChanged = delegateCombine(a.focusedSeriesItemsChanged, runOn(this, this.vw));
                a.i0 = this.lj;
                a.iw = this.lg;
            }
            a.wh = this.dt;
            a.wk = this.dv;
            if (this.cl != null) {
                if (!this.f6) {
                    this.t5(this.cl);
                }
            }
            if (a.iy != this.lh) {
                a.iy = this.lh;
            }
            if (a.by != this.dp || a.bw != this.dm) {
                a.c8.b4(b);
                a.by = this.dp;
                a.bw = this.dm;
            }
            a.wa = this.bd();
            if (!isNaN_(this.j3)) {
                a.x1 = this.j3;
            }
            if (!isNaN_(this.j5)) {
                a.x3 = this.j5;
            }
            if (!isNaN_(this.j4)) {
                a.x2 = this.j4;
            }
            if (!isNaN_(this.j2)) {
                a.x0 = this.j2;
            }
            a.bd = this.cr;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (f, g) => this.v7(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (f, g) => this.v8(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (f, g) => this.v9(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (f, g) => this.v6(g.series, g.item, g.plotAreaPosition));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (f, g) => this.wa(g.series, g.item, g.plotAreaPosition));
            a.seriesClick = delegateCombine(a.seriesClick, (f, g) => this.v5(g.series, g.item, g.plotAreaPosition));
            a.plotAreaMouseEnter = delegateCombine(a.plotAreaMouseEnter, (f, g) => this.vy(g.plotAreaPosition));
            a.plotAreaMouseLeave = delegateCombine(a.plotAreaMouseLeave, (f, g) => this.vz(g.plotAreaPosition));
            a.plotAreaMouseOver = delegateCombine(a.plotAreaMouseOver, (f, g) => this.v0(g.plotAreaPosition));
            a.plotAreaMouseLeftButtonDown = delegateCombine(a.plotAreaMouseLeftButtonDown, (f, g) => this.vx(g.plotAreaPosition));
            a.plotAreaMouseLeftButtonUp = delegateCombine(a.plotAreaMouseLeftButtonUp, (f, g) => this.v1(g.plotAreaPosition));
            if (c) {
                a.v1 = this.yp;
            }
            if (c) {
                a.ls = this.st;
            }
            a.ui = this.wy;
            if (c) {
                a.lg = this.si;
            }
            a.uh = this.wx;
            a.ws = this.gf;
            a.eh = this.gg;
            a.hv = this.jy;
            a.h0 = this.j7;
            a.h9 = this.kh;
            a.hi = this.jk;
            if (a == this.dataChart) {
                this.ud();
            }
            if (this.highlightedItemsSource != null) {
                if (a == this.dataChart) {
                    this.uc();
                }
            }
            this.ut(a);
            this.uu(a);
            this.u2();
        }
        ag(a) {
            if (!this.hh || !this.hk || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.t(c);
                b.add(d);
            }
            return b;
        }
        yg(a) {
            if (!this.hh || !this.hk || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.h(0, 0, 0, 0);
            return b;
        }
        uy(a, b) {
            if (!isNaN_(this.j6)) {
                a.jh = this.j6;
            }
            if (!isNaN_(this.kc) && !a.eq) {
                a.jn = this.kc;
            }
            if (!isNaN_(this.jm) && a.en) {
                a.jn = this.jm;
            }
            if (!isNaN_(this.kj) && a.er) {
                a.jn = this.kj;
            }
            a.legendItemBadgeShape = this.cx;
            a.bc = this.ct;
            a.cg = this.dr;
            a.sf(this.c3);
            a.se(this.c1);
            a.je = this.jz;
            if (!isNaN_(this.j0)) {
                a.sg(this.j0);
            }
            if (!isNaN_(this.jj)) {
                a.ii = this.jj;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                let c = a;
                c.unknownValuePlotting = this.eh;
            }
            a.fb = this.g9;
            a.bt = this.dk;
            a.wp = this.zf;
            if (this.g0(a) && this.ci.isCalloutLayer(a)) {
                this.ci.setCalloutStyleUpdatingEventEnabled(a, this.gj);
                this.ci.addCalloutStyleUpdating(a, runOn(this, this.vv));
                this.ci.setUseValueForAutoCalloutLabels(a, this.hl);
                this.ci.setCollisionMode(a, this.ak);
                this.ci.setUseItemColorForFill(a, this.gl);
                this.ci.setUseItemColorForOutline(a, this.gm);
                this.ci.setCalloutStrokeThickness(a, this.jl);
                this.ci.setUseAutoContrastingLabelColors(a, this.gk);
                this.ci.setCalloutBackground(a, this.xq);
                if (this.la >= 0) {
                    this.ci.setAutoCalloutLabelPrecision(a, this.la);
                }
            }
            if (this.g0(a) && this.ci.isCalloutLayer(a)) {
                this.ci.setCalloutRenderStyleUpdatingEventEnabled(a, this.gj);
                this.ci.addCalloutRenderStyleUpdating(a, runOn(this, this.vu));
            }
            if (this.g0(a) && this.ci.isDataToolTipLayer(a)) {
                this.t1(a);
            }
            this.t3(a, b);
            this.t4(a, b);
            this.uz(a, b);
            this.u0(a, b);
            this.v4(a);
        }
        get gh() {
            return this.fm;
        }
        ue() {
            if (!this.fm) {
                this.fm = true;
                this.up();
            }
        }
        up() {
            this.uq();
            this.ur();
        }
        wc(a) {
            if (this.f6 && this.cl != null) {
                this.f6 = false;
                if (a != null) {
                    a.detachDataLegend(this.cl);
                }
            }
            this.wj(a);
        }
        t4(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ah, b);
                c.trendLineThickness = this.ki;
                c.trendLineType = this.ef;
                c.trendLinePeriod = this.ll;
            }
        }
        c6(a, b) {
            if (this.c9 == null || this.c9.count == 0) {
                let c = this.c7(a);
                if (this.hw == null || this.hw.count == 0) {
                    return a != null && a.fj ? c : 2;
                }
                let d = ArrayExtension.getModulus$1(MarkerType_$type, this.hw, b);
                if (d == 0 && a != null) {
                    d = a.fj ? c : 2;
                    if (d == 2) {
                        d = this.c5(a);
                    }
                }
                if (d == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return d;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.c9, b);
        }
        c5(a) {
            return 2;
        }
        c7(a) {
            return 1;
        }
        l1() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.hh) {
                return this.h4();
            }
            return null;
        }
        l0() {
            if (this.highlightedItemsSource != null) {
                return this.highlightedItemsSource;
            }
            return null;
        }
        get_g5() {
            if (this.itemsSource == null && this.hh) {
                if (this.h4() != null) {
                    return true;
                }
            }
            return false;
        }
        get g5() {
            return this.get_g5();
        }
        h4() {
            return null;
        }
        vl(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.wc(typeCast(XamDataChart.$, b));
                    this.us(typeCast(XamDataChart.$, c), this.lu);
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.l1();
                    this.z = this.ag(this.ab);
                    this.aa = this.ag(this.af);
                    break;
                case "ActualBrushes":
                    this.ve((d) => d.ag = this.z, true, a);
                    break;
                case "ActualOutlines":
                    this.ve((d) => d.aj = this.aa, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.hh) {
                        this.z = this.ag(this.ab);
                        this.aa = this.ag(this.af);
                    }
                    this.bj.itemsSource = this.actualItemsSource;
                    this.u2();
                    break;
                case "ActualHighlightedItemsSource":
                    this.bk.itemsSource = this.actualHighlightedItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.l1();
                    break;
                case "HighlightedItemsSource":
                    this.actualHighlightedItemsSource = this.l0();
                    break;
                case "IncludedProperties":
                    this.bj.includedProperties = this.q;
                    break;
                case "ExcludedProperties":
                    this.bj.excludedProperties = this.o;
                    break;
                case "Brushes":
                    this.z = this.ag(this.ab);
                    break;
                case "Outlines":
                    this.aa = this.ag(this.af);
                    break;
                case "Legend":
                    this.vc((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.vc((d) => d.by = this.dp);
                    break;
                case "HighlightingBehavior":
                    this.vc((d) => d.bw = this.dm);
                    break;
                case "LegendHighlightingMode":
                    this.vc((d) => d.bd = this.cr);
                    break;
                case "LegendItemBadgeShape":
                    this.vc((d) => d.bf = this.cx);
                    break;
                case "LegendItemBadgeMode":
                    this.vc((d) => d.be = this.ct);
                    break;
                case "PlotAreaMarginLeft":
                    this.vc((d) => d.x1 = this.j3);
                    break;
                case "PlotAreaMarginTop":
                    this.vc((d) => d.x3 = this.j5);
                    break;
                case "PlotAreaMarginRight":
                    this.vc((d) => d.x2 = this.j4);
                    break;
                case "PlotAreaMarginBottom":
                    this.vc((d) => d.x0 = this.j2);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.vc((d) => d.wa = this.bd());
                    break;
                case "IsHorizontalZoomEnabled":
                    this.vc((d) => d.ww = this.g6);
                    break;
                case "IsVerticalZoomEnabled":
                    this.vc((d) => d.wz = this.he);
                    break;
                case "WindowRect":
                    this.vd((d) => d.v1 = this.yp, false);
                    break;
                case "WindowRectMinWidth":
                    this.vd((d) => d.il = this.ks, false);
                    break;
                case "WindowRectMinHeight":
                    this.vd((d) => d.ik = this.kr, false);
                    break;
                case "WindowSizeMinWidth":
                    this.vd((d) => d.io = this.ku, false);
                    break;
                case "WindowSizeMinHeight":
                    this.vd((d) => d.im = this.kt, false);
                    break;
                case "Title":
                    this.vd((d) => d.ls = this.st, false);
                    break;
                case "Subtitle":
                    this.vd((d) => d.lg = this.si, false);
                    break;
                case "TitleAlignment":
                    this.vc((d) => d.ui = this.wy);
                    break;
                case "SubtitleAlignment":
                    this.vc((d) => d.uh = this.wx);
                    break;
                case "UnknownValuePlotting":
                    this.ui((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            let e = d;
                            e.unknownValuePlotting = this.eh;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.ui((d) => d.fb = this.g9);
                    break;
                case "HighlightedLegendItemVisibility":
                    this.ui((d) => d.wp = this.zf);
                    break;
                case "HighlightedValuesDisplayMode":
                    this.um((d) => d.bt = this.dk);
                    break;
                case "Thickness":
                    if (!isNaN_(this.kc)) {
                        this.um((d) => d.jn = this.kc);
                    }
                    break;
                case "OutlineMode":
                    this.um((d) => d.cg = this.dr);
                    break;
                case "MarkerFillOpacity":
                    this.um((d) => d.je = this.jz);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.j0)) {
                        this.um((d) => d.sg(this.j0));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.um((d) => d.sf(this.c3));
                    break;
                case "MarkerFillMode":
                    this.um((d) => d.se(this.c1));
                    break;
                case "Resolution":
                    if (!isNaN_(this.j6)) {
                        this.ui((d) => d.jh = this.j6);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.jj)) {
                        this.ui((d) => d.ii = this.jj);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.uh((d) => {
                        d.cu = this.hg;
                        d.cw = this.hg;
                    }, true);
                    break;
                case "ShouldPanOnMaximumZoom":
                    this.vc((d) => d.f0 = this.hi);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.uj((d, e) => this.t4(d, e));
                    break;
                case "MarkerMaxCount":
                    this.un((d, e) => this.t3(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.vj));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.vj));
                    }
                    this.un((f, g) => this.t3(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.vc((f) => f.bg = this.cz);
                    this.un((f, g) => this.t3(f, g));
                    break;
                case "MarkerBrushes":
                    this.vc((f) => f.ah = this.ad);
                    break;
                case "MarkerOutlines":
                    this.vc((f) => f.ai = this.ae);
                    break;
                case "AlignsGridLinesToPixels":
                    this.vc((f) => f.ws = this.gf);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.vc((f) => f.eh = this.gg);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "AutoCalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                case "CalloutsUseItemColorForFill":
                case "CalloutsBackground":
                case "CalloutsStrokeThickness":
                case "CalloutsUseItemColorForOutline":
                case "CalloutsUseAutoContrastingLabelColors":
                case "CalloutCollisionMode":
                    let f = this.vt(runOn(this, this.ud), this.g8);
                    this.g8 = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.o2:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipGroupTextColor":
                case "DataToolTipGroupTextMargin":
                case "DataToolTipGroupRowMargin":
                case "DataToolTipGroupRowVisible":
                case "DataToolTipGroupTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.vg(a, b, c);
                    break;
                case "SelectionMode":
                    this.vd((g) => g.cb = this.d1, false);
                    break;
                case "FocusMode":
                    this.vd((g) => g.b9 = this.d0, false);
                    break;
                case "SelectionBehavior":
                    this.vd((g) => g.b6 = this.dx, false);
                    break;
                case "SelectionBrush":
                    this.vd((g) => g.u5 = this.yh, false);
                    break;
                case "FocusBrush":
                    this.vd((g) => g.uo = this.x9, false);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.vc((g) => g.ch = this.d6);
                    break;
                case "VerticalViewScrollbarMode":
                    this.vc((g) => g.ci = this.d7);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.vc((g) => g.hn = this.jr);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.vc((g) => g.uz = this.ye);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.vc((g) => g.hq = this.ju);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.vc((g) => g.u0 = this.yf);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.vc((g) => g.hr = this.jv);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.vc((g) => g.ia = this.kk);
                    break;
                case "VerticalViewScrollbarFill":
                    this.vc((g) => g.u9 = this.yk);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.vc((g) => g.ic = this.km);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.vc((g) => g.va = this.yl);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.vc((g) => g.id = this.kn);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.vc((g) => g.ho = this.js);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.vc((g) => g.hp = this.jt);
                    break;
                case DomainChart.q2:
                    this.vc((g) => g.ev = this.gz);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.vc((g) => g.ht = this.jx);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.vc((g) => g.hs = this.jw);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.vc((g) => g.cl = this.eb);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.vc((g) => g.ce = this.d3);
                    break;
                case "ValueLines":
                    let g = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), b);
                    if (g != null) {
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.vn));
                    }
                    let h = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), c);
                    if (h != null) {
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.vn));
                    }
                    let i = this.vt(runOn(this, this.ud), this.g8);
                    this.g8 = i.p1;
                    break;
            }
            this.vo(a, b, c);
            this.vp(a, b, c);
            if (this.hb) {
                this.cn.onTargetPropertyChanged(this, a, b, c);
            }
        }
        vg(a, b, c) {
            this.t2(a, c);
        }
        t2(a, b) {
            if (!this.hn.containsKey(a)) {
                this.hq.add(a);
                this.hn.addItem(a, b);
            }
            else {
                this.hn.item(a, b);
            }
            this.uk((c) => {
                if (this.ci.isDataToolTipLayer(c)) {
                    this.t1(c);
                }
            });
        }
        t1(a) {
            for (let b = 0; b < this.hq.count; b++) {
                let c = this.hq._inner[b];
                let d = this.hn.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.ci.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        vj(a, b) {
            this.un((c, d) => this.t3(c, d));
        }
        vn(a, b) {
            let c = this.vt(runOn(this, this.ud), this.g8);
            this.g8 = c.p1;
        }
        get a6() {
            return this.a0;
        }
        get a2() {
            return this.aw;
        }
        get a1() {
            return this.av;
        }
        get eq() {
            return this.em;
        }
        get er() {
            return this.en;
        }
        get ba() {
            return this.a8;
        }
        get d1() {
            return this.dz;
        }
        set d1(a) {
            let b = this.dz;
            this.dz = a;
            if (b != this.dz) {
                this.vl("SelectionMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.dz));
            }
        }
        get d0() {
            return this.dy;
        }
        set d0(a) {
            let b = this.dy;
            this.dy = a;
            if (b != this.dy) {
                this.vl("FocusMode", enumGetBox(SeriesSelectionMode_$type, b), enumGetBox(SeriesSelectionMode_$type, this.dy));
            }
        }
        get yh() {
            return this.xl;
        }
        set yh(a) {
            let b = this.xl;
            this.xl = a;
            if (b != this.xl) {
                this.vl("SelectionBrush", b, this.xl);
            }
        }
        get x9() {
            return this.xi;
        }
        set x9(a) {
            let b = this.xi;
            this.xi = a;
            if (b != this.xi) {
                this.vl("FocusBrush", b, this.xi);
            }
        }
        get dx() {
            return this.dw;
        }
        set dx(a) {
            let b = this.dw;
            this.dw = a;
            if (b != this.dw) {
                this.vl("SelectionBehavior", enumGetBox(SeriesSelectionBehavior_$type, b), enumGetBox(SeriesSelectionBehavior_$type, this.dw));
            }
        }
        get selectedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.selectedSeriesItems;
            }
            return this.aq;
        }
        get focusedSeriesItems() {
            if (this.dataChart != null) {
                return this.dataChart.focusedSeriesItems;
            }
            return this.ap;
        }
        get a5() {
            return this.az;
        }
        get a4() {
            return this.ay;
        }
        get a3() {
            return this.ax;
        }
        get es() {
            return this.eo;
        }
        get et() {
            return this.ep;
        }
        get a9() {
            return this.a7;
        }
        get rd() {
            return this.mp;
        }
        set rd(a) {
            let b = this.mp;
            this.mp = a;
            if (b != a) {
                this.az.o();
                if (this.mp != null) {
                    this.eu.b(this.mp, (c, d, e) => this.az.j.add(new ChartSortDescription(2, c, d)));
                }
            }
        }
        get qm() {
            return this.ml;
        }
        set qm(a) {
            let b = this.ml;
            this.ml = a;
            if (b != a) {
                this.ay.o();
                this.eu.b(this.ml, (c, d, e) => this.ay.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get q9() {
            return this.mn;
        }
        set q9(a) {
            let b = this.mn;
            this.mn = a;
            if (b != a) {
                this.ax.o();
                if (this.mn != null) {
                    this.eu.b(this.mn, (c, d, e) => this.ax.j.add(new ChartSortDescription(2, c, d)));
                }
            }
        }
        get q7() {
            return this.mm;
        }
        set q7(a) {
            let b = this.mm;
            this.mm = a;
            if (b != a) {
                this.eo.clear();
                if (a != null) {
                    let c = FilterExpressionParsingHelper.getFilterExpression(a);
                    if (!stringIsNullOrEmpty(c.errors)) {
                        if (this.filterStringErrorsParsing != null) {
                            this.filterStringErrorsParsing(this, ((() => {
                                let $ret = new FilterStringErrorsParsingEventArgs();
                                $ret.propertyName = "InitialFilter";
                                $ret.errors = c.errors;
                                return $ret;
                            })()));
                        }
                        return;
                    }
                    this.eo.k.add(c.result);
                }
            }
        }
        get rb() {
            return this.mo;
        }
        set rb(a) {
            let b = this.mo;
            this.mo = a;
            if (b != a) {
                this.ep.clear();
                if (a != null) {
                    let c = FilterExpressionParsingHelper.getFilterExpression(a);
                    if (!stringIsNullOrEmpty(c.errors)) {
                        if (this.filterStringErrorsParsing != null) {
                            this.filterStringErrorsParsing(this, ((() => {
                                let $ret = new FilterStringErrorsParsingEventArgs();
                                $ret.propertyName = "InitialFilter";
                                $ret.errors = c.errors;
                                return $ret;
                            })()));
                        }
                        return;
                    }
                    this.ep.k.add(c.result);
                }
            }
        }
        get rf() {
            return this.mq;
        }
        set rf(a) {
            let b = this.mq;
            this.mq = a;
            if (b != a) {
                this.a7.o();
                if (this.mq != null) {
                    this.ev.a(this.mq, (c, d, e) => this.a7.j.add(((() => {
                        let $ret = new ChartSummaryDescription(2, c, d);
                        $ret.n = e;
                        return $ret;
                    })())));
                }
            }
        }
        get itemsSource() {
            return this.lp;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.lp = a;
                this.vl("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.ln;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.ln = a;
                this.vl("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get highlightedItemsSource() {
            return this.lo;
        }
        set highlightedItemsSource(a) {
            let b = this.highlightedItemsSource;
            if (b != a) {
                this.lo = a;
                this.vl("HighlightedItemsSource", b, this.highlightedItemsSource);
            }
        }
        get actualHighlightedItemsSource() {
            return this.lm;
        }
        set actualHighlightedItemsSource(a) {
            let b = this.actualHighlightedItemsSource;
            if (b != a) {
                this.lm = a;
                this.vl("ActualHighlightedItemsSource", b, this.actualHighlightedItemsSource);
            }
        }
        get q() {
            return this.h;
        }
        set q(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.vl("IncludedProperties", b, this.h);
            }
        }
        get o() {
            return this.g;
        }
        set o(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.vl("ExcludedProperties", b, this.g);
            }
        }
        get ab() {
            return this.t;
        }
        set ab(a) {
            let b = this.ab;
            if (a != b) {
                this.t = a;
                this.vl("Brushes", b, this.ab);
            }
        }
        get af() {
            return this.w;
        }
        set af(a) {
            let b = this.af;
            if (a != b) {
                this.w = a;
                this.vl("Outlines", b, this.af);
            }
        }
        get z() {
            return this.r;
        }
        set z(a) {
            let b = this.r;
            if (a != b) {
                this.r = a;
                this.vl("ActualBrushes", b, this.z);
            }
        }
        get aa() {
            return this.s;
        }
        set aa(a) {
            let b = this.s;
            if (a != b) {
                this.s = a;
                this.vl("ActualOutlines", b, this.aa);
            }
        }
        get legend() {
            return this.cj;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.cj = a;
                this.vl("Legend", b, this.legend);
            }
        }
        get_g6() {
            return this.f5;
        }
        set_g6(a) {
            let b = this.g6;
            if (a != b) {
                this.f5 = a;
                this.vl("IsHorizontalZoomEnabled", b, this.g6);
            }
        }
        get g6() {
            return this.get_g6();
        }
        set g6(a) {
            this.set_g6(a);
        }
        get_he() {
            return this.f8;
        }
        set_he(a) {
            let b = this.he;
            if (a != b) {
                this.f8 = a;
                this.vl("IsVerticalZoomEnabled", b, this.he);
            }
        }
        get he() {
            return this.get_he();
        }
        set he(a) {
            this.set_he(a);
        }
        get_hh() {
            return this.ga;
        }
        set_hh(a) {
            let b = this.hh;
            if (a != b) {
                this.ga = a;
                this.vl("ShouldDisplayMockData", b, this.hh);
            }
        }
        get hh() {
            return this.get_hh();
        }
        set hh(a) {
            this.set_hh(a);
        }
        get_hk() {
            return this.gc;
        }
        set_hk(a) {
            let b = this.hk;
            if (a != b) {
                this.gc = a;
                this.vl("ShouldUseSkeletonStyleForMockData", b, this.hk);
            }
        }
        get hk() {
            return this.get_hk();
        }
        set hk(a) {
            this.set_hk(a);
        }
        get_dk() {
            return this.dj;
        }
        set_dk(a) {
            let b = this.dk;
            if (a != b) {
                this.dj = a;
                this.vl("HighlightedValuesDisplayMode", enumGetBox(SeriesHighlightedValuesDisplayMode_$type, b), enumGetBox(SeriesHighlightedValuesDisplayMode_$type, this.dk));
            }
        }
        get dk() {
            return this.get_dk();
        }
        set dk(a) {
            this.set_dk(a);
        }
        get_g9() {
            return this.f7;
        }
        set_g9(a) {
            let b = this.g9;
            if (a != b) {
                this.f7 = a;
                this.vl("IsSeriesHighlightingEnabled", b, this.g9);
            }
        }
        get g9() {
            return this.get_g9();
        }
        set g9(a) {
            this.set_g9(a);
        }
        get_zf() {
            return this.ze;
        }
        set_zf(a) {
            let b = this.zf;
            if (a != b) {
                this.ze = a;
                this.vl("HighlightedLegendItemVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.zf));
            }
        }
        get zf() {
            return this.get_zf();
        }
        set zf(a) {
            this.set_zf(a);
        }
        get yp() {
            return this.yn;
        }
        set yp(a) {
            let b = this.yp;
            if (Rect.l_op_Inequality(a, b)) {
                this.yn = a;
                this.vl("WindowRect", b, this.yp);
            }
        }
        get yo() {
            return this.dataChart != null ? this.dataChart.v0 : Rect.empty;
        }
        get st() {
            return this.mt;
        }
        set st(a) {
            let b = this.st;
            if (a != b) {
                this.mt = a;
                this.vl("Title", b, this.st);
            }
        }
        get si() {
            return this.mr;
        }
        set si(a) {
            let b = this.si;
            if (a != b) {
                this.mr = a;
                this.vl("Subtitle", b, this.si);
            }
        }
        get wy() {
            return this.ww;
        }
        set wy(a) {
            let b = this.wy;
            if (b != a) {
                this.ww = a;
                this.vl("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.wy));
            }
        }
        get wx() {
            return this.wv;
        }
        set wx(a) {
            let b = this.wx;
            if (b != a) {
                this.wv = a;
                this.vl("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.wx));
            }
        }
        get eh() {
            return this.eg;
        }
        set eh(a) {
            let b = this.eh;
            if (a != b) {
                this.eg = a;
                this.vl("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.eh));
            }
        }
        get_j6() {
            return this.iu;
        }
        set_j6(a) {
            let b = this.j6;
            if (a != b) {
                this.iu = a;
                this.vl("Resolution", b, this.j6);
            }
        }
        get j6() {
            return this.get_j6();
        }
        set j6(a) {
            this.set_j6(a);
        }
        get kc() {
            return this.i0;
        }
        set kc(a) {
            let b = this.kc;
            if (a != b) {
                this.i0 = a;
                this.vl("Thickness", b, this.kc);
            }
        }
        get dr() {
            return this.dq;
        }
        set dr(a) {
            let b = this.dr;
            if (a != b) {
                this.dq = a;
                this.vl("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.dr));
            }
        }
        get c3() {
            return this.c2;
        }
        set c3(a) {
            let b = this.c3;
            if (a != b) {
                this.c2 = a;
                this.vl("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.c3));
            }
        }
        get c1() {
            return this.c0;
        }
        set c1(a) {
            let b = this.c1;
            if (a != b) {
                this.c0 = a;
                this.vl("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.c1));
            }
        }
        get jz() {
            return this.im;
        }
        set jz(a) {
            let b = this.jz;
            if (a != b) {
                this.im = a;
                this.vl("MarkerFillOpacity", b, this.jz);
            }
        }
        get j0() {
            return this.io;
        }
        set j0(a) {
            let b = this.j0;
            if (a != b) {
                this.io = a;
                this.vl("MarkerThickness", b, this.j0);
            }
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            let b = this.c9;
            if (a != b) {
                this.c8 = a;
                this.vl("MarkerTypes", b, this.c9);
            }
        }
        get cz() {
            return this.cy;
        }
        set cz(a) {
            let b = this.cz;
            if (a != b) {
                this.cy = a;
                this.vl("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.cz));
            }
        }
        get ad() {
            return this.u;
        }
        set ad(a) {
            let b = this.ad;
            if (a != b) {
                this.u = a;
                this.vl("MarkerBrushes", b, this.ad);
            }
        }
        get ae() {
            return this.v;
        }
        set ae(a) {
            let b = this.ae;
            if (!Base.equalsStatic(a, b)) {
                this.v = a;
                this.vl("MarkerOutlines", b, this.ae);
            }
        }
        get li() {
            return this.k5;
        }
        set li(a) {
            let b = this.k5;
            if (a != b) {
                this.k5 = a;
                this.vl("MarkerMaxCount", b, this.k5);
            }
        }
        get jj() {
            return this.h5;
        }
        set jj(a) {
            let b = this.jj;
            if (a != b) {
                this.h5 = a;
                this.vl("AreaFillOpacity", b, this.jj);
            }
        }
        get gg() {
            return this.fl;
        }
        set gg(a) {
            let b = this.fl;
            if (a != b) {
                this.fl = a;
                this.vl("AnimateSeriesWhenAxisRangeChanges", b, this.fl);
            }
        }
        get ah() {
            return this.x;
        }
        set ah(a) {
            let b = this.ah;
            if (a != b) {
                this.x = a;
                this.vl("TrendLineBrushes", b, this.ah);
            }
        }
        get ef() {
            return this.ee;
        }
        set ef(a) {
            let b = this.ef;
            if (a != b) {
                this.ee = a;
                this.vl("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ef));
            }
        }
        get ki() {
            return this.i6;
        }
        set ki(a) {
            let b = this.ki;
            if (a != b) {
                this.i6 = a;
                this.vl("TrendLineThickness", b, this.ki);
            }
        }
        get gf() {
            return this.fk;
        }
        set gf(a) {
            let b = this.gf;
            if (a != b) {
                this.fk = a;
                this.vl("AlignsGridLinesToPixels", b, this.gf);
            }
        }
        get j3() {
            return this.ir;
        }
        set j3(a) {
            let b = this.ir;
            this.ir = a;
            if (a != b) {
                this.vl("PlotAreaMarginLeft", b, a);
            }
        }
        get j5() {
            return this.it;
        }
        set j5(a) {
            let b = this.it;
            this.it = a;
            if (a != b) {
                this.vl("PlotAreaMarginTop", b, a);
            }
        }
        get j4() {
            return this.is;
        }
        set j4(a) {
            let b = this.is;
            this.is = a;
            if (a != b) {
                this.vl("PlotAreaMarginRight", b, a);
            }
        }
        get j2() {
            return this.iq;
        }
        set j2(a) {
            let b = this.iq;
            this.iq = a;
            if (a != b) {
                this.vl("PlotAreaMarginBottom", b, a);
            }
        }
        vk() {
        }
        get bc() {
            return this.bb;
        }
        set bc(a) {
            let b = this.bc;
            if (a != b) {
                this.bb = a;
                this.vl("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.bc));
            }
        }
        bd() {
            return this.bc;
        }
        get dt() {
            return this.ds;
        }
        set dt(a) {
            let b = this.dt;
            if (a != b) {
                this.ds = a;
                this.vl("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.dt));
            }
        }
        get dv() {
            return this.du;
        }
        set dv(a) {
            let b = this.dv;
            if (a != b) {
                this.du = a;
                this.vl("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.dv));
            }
        }
        get dp() {
            return this.dn;
        }
        set dp(a) {
            let b = this.dp;
            if (a != b) {
                this.dn = a;
                this.vl("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.dp));
            }
        }
        get dm() {
            return this.dl;
        }
        set dm(a) {
            let b = this.dm;
            if (a != b) {
                this.dl = a;
                this.vl("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.dm));
            }
        }
        get cr() {
            return this.cq;
        }
        set cr(a) {
            let b = this.cr;
            if (a != b) {
                this.cq = a;
                this.vl("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.cr));
            }
        }
        get cx() {
            return this.cv;
        }
        set cx(a) {
            let b = this.cx;
            if (a != b) {
                this.cv = a;
                this.vl("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cx));
            }
        }
        get ct() {
            return this.cs;
        }
        set ct(a) {
            let b = this.ct;
            if (a != b) {
                this.cs = a;
                this.vl("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.ct));
            }
        }
        get ll() {
            return this.k9;
        }
        set ll(a) {
            let b = this.ll;
            if (a != b) {
                this.k9 = a;
                this.vl("TrendLinePeriod", b, this.ll);
            }
        }
        get ed() {
            return this.ec;
        }
        set ed(a) {
            let b = this.ed;
            if (a != b) {
                this.ec = a;
                this.vl("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.ed));
            }
        }
        get bf() {
            return this.be;
        }
        set bf(a) {
            let b = this.bf;
            if (a != b) {
                this.be = a;
                this.vl("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.bf));
            }
        }
        get gp() {
            return this.fu;
        }
        set gp(a) {
            let b = this.gp;
            if (a != b) {
                this.fu = a;
                this.vl("CrosshairsSnapToData", b, this.gp);
            }
        }
        get xw() {
            return this.w5;
        }
        set xw(a) {
            let b = this.xw;
            if (a != b) {
                this.w5 = a;
                this.vl("CrosshairsLineVerticalStroke", b, this.xw);
            }
        }
        get jm() {
            return this.h8;
        }
        set jm(a) {
            let b = this.jm;
            if (a != b) {
                this.h8 = a;
                this.vl("CrosshairsLineThickness", b, this.jm);
            }
        }
        get xv() {
            return this.w4;
        }
        set xv(a) {
            let b = this.xv;
            if (a != b) {
                this.w4 = a;
                this.vl("CrosshairsLineHorizontalStroke", b, this.xv);
            }
        }
        get go() {
            return this.ft;
        }
        set go(a) {
            let b = this.go;
            if (a != b) {
                this.ft = a;
                this.vl("CrosshairsAnnotationEnabled", b, this.go);
            }
        }
        get xr() {
            return this.w0;
        }
        set xr(a) {
            let b = this.xr;
            if (a != b) {
                this.w0 = a;
                this.vl("CrosshairsAnnotationXAxisBackground", b, this.xr);
            }
        }
        get xt() {
            return this.w2;
        }
        set xt(a) {
            let b = this.xt;
            if (a != b) {
                this.w2 = a;
                this.vl("CrosshairsAnnotationYAxisBackground", b, this.xt);
            }
        }
        get xs() {
            return this.w1;
        }
        set xs(a) {
            let b = this.xs;
            if (a != b) {
                this.w1 = a;
                this.vl("CrosshairsAnnotationXAxisTextColor", b, this.xs);
            }
        }
        get xu() {
            return this.w3;
        }
        set xu(a) {
            let b = this.xu;
            if (a != b) {
                this.w3 = a;
                this.vl("CrosshairsAnnotationYAxisTextColor", b, this.xu);
            }
        }
        get lb() {
            return this.ky;
        }
        set lb(a) {
            let b = this.lb;
            if (a != b) {
                this.ky = a;
                this.vl("CrosshairsAnnotationXAxisPrecision", b, this.lb);
            }
        }
        get lc() {
            return this.kz;
        }
        set lc(a) {
            let b = this.lc;
            if (a != b) {
                this.kz = a;
                this.vl("CrosshairsAnnotationYAxisPrecision", b, this.lc);
            }
        }
        get hg() {
            return this.f9;
        }
        set hg(a) {
            let b = this.hg;
            if (a != b) {
                this.f9 = a;
                this.vl("ShouldAvoidAxisAnnotationCollisions", b, this.hg);
            }
        }
        get hi() {
            return this.gb;
        }
        set hi(a) {
            let b = this.gb;
            if (a != b) {
                this.gb = a;
                this.vl("ShouldPanOnMaximumZoom", b, this.gb);
            }
        }
        get gw() {
            return this.f1;
        }
        set gw(a) {
            let b = this.gw;
            if (a != b) {
                this.f1 = a;
                this.vl("FinalValueAnnotationsVisible", b, this.gw);
            }
        }
        get x7() {
            return this.xg;
        }
        set x7(a) {
            let b = this.x7;
            if (a != b) {
                this.xg = a;
                this.vl("FinalValueAnnotationsBackground", b, this.x7);
            }
        }
        get x8() {
            return this.xh;
        }
        set x8(a) {
            let b = this.x8;
            if (a != b) {
                this.xh = a;
                this.vl("FinalValueAnnotationsTextColor", b, this.x8);
            }
        }
        get lf() {
            return this.k2;
        }
        set lf(a) {
            let b = this.lf;
            if (a != b) {
                this.k2 = a;
                this.vl("FinalValueAnnotationsPrecision", b, this.lf);
            }
        }
        get gi() {
            return this.fn;
        }
        set gi(a) {
            let b = this.gi;
            if (a != b) {
                this.fn = a;
                this.vl("AutoCalloutsVisible", b, this.gi);
            }
        }
        get gn() {
            return this.fs;
        }
        set gn(a) {
            let b = this.gn;
            if (a != b) {
                this.fs = a;
                this.vl("CalloutsVisible", b, this.gn);
            }
        }
        get gj() {
            return this.fo;
        }
        set gj(a) {
            let b = this.gj;
            if (a != b) {
                this.fo = a;
                this.vl("CalloutStyleUpdatingEventEnabled", b, this.gj);
            }
        }
        get hl() {
            return this.gd;
        }
        set hl(a) {
            let b = this.hl;
            if (a != b) {
                this.gd = a;
                this.vl("UseValueForAutoCalloutLabels", b, this.hl);
            }
        }
        get ak() {
            return this.aj;
        }
        set ak(a) {
            let b = this.ak;
            if (a != b) {
                this.aj = a;
                this.vl("CalloutCollisionMode", enumGetBox(CalloutCollisionMode_$type, b), enumGetBox(CalloutCollisionMode_$type, this.ak));
            }
        }
        get gl() {
            return this.fq;
        }
        set gl(a) {
            let b = this.gl;
            if (a != b) {
                this.fq = a;
                this.vl("CalloutsUseItemColorForFill", b, this.gl);
            }
        }
        get gm() {
            return this.fr;
        }
        set gm(a) {
            let b = this.gm;
            if (a != b) {
                this.fr = a;
                this.vl("CalloutsUseItemColorForOutline", b, this.gm);
            }
        }
        get gk() {
            return this.fp;
        }
        set gk(a) {
            let b = this.gk;
            if (a != b) {
                this.fp = a;
                this.vl("CalloutsUseAutoContrastingLabelColors", b, this.gk);
            }
        }
        get jl() {
            return this.h7;
        }
        set jl(a) {
            let b = this.jl;
            if (a != b) {
                this.h7 = a;
                this.vl("CalloutsStrokeThickness", b, this.jl);
            }
        }
        get xq() {
            return this.wz;
        }
        set xq(a) {
            let b = this.xq;
            if (a != b) {
                this.wz = a;
                this.vl("CalloutsBackground", b, this.xq);
            }
        }
        get la() {
            return this.kx;
        }
        set la(a) {
            let b = this.la;
            if (a != b) {
                this.kx = a;
                this.vl("CalloutsAutoLabelPrecision", b, this.la);
            }
        }
        get calloutsItemsSource() {
            return this.h0;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.h0 = a;
                this.vl("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get am() {
            return this.al;
        }
        set am(a) {
            let b = this.am;
            if (a != b) {
                this.al = a;
                this.vl("CalloutsAllowedPositions", b, this.am);
            }
        }
        get nk() {
            return this.l9;
        }
        set nk(a) {
            let b = this.nk;
            if (a != b) {
                this.l9 = a;
                this.vl("CalloutsXMemberPath", b, this.nk);
            }
        }
        get nm() {
            return this.ma;
        }
        set nm(a) {
            let b = this.nm;
            if (a != b) {
                this.ma = a;
                this.vl("CalloutsYMemberPath", b, this.nm);
            }
        }
        get nc() {
            return this.l8;
        }
        set nc(a) {
            let b = this.nc;
            if (a != b) {
                this.l8 = a;
                this.vl("CalloutsLabelMemberPath", b, this.nc);
            }
        }
        get m9() {
            return this.l7;
        }
        set m9(a) {
            let b = this.m9;
            if (a != b) {
                this.l7 = a;
                this.vl("CalloutsContentMemberPath", b, this.m9);
            }
        }
        get ej() {
            return this.ei;
        }
        set ej(a) {
            let b = this.ei;
            if (a != b) {
                this.ei = a;
                this.vl("ValueLines", b, this.ei);
            }
        }
        get ai() {
            return this.y;
        }
        set ai(a) {
            let b = this.y;
            if (a != b) {
                this.y = a;
                this.vl("ValueLinesBrushes", b, this.y);
            }
        }
        get kj() {
            return this.i7;
        }
        set kj(a) {
            let b = this.i7;
            if (a != b) {
                this.i7 = a;
                this.vl("ValueLinesThickness", b, this.i7);
            }
        }
        get d6() {
            return this.d4;
        }
        set d6(a) {
            let b = this.d4;
            this.d4 = a;
            if (b != this.d4) {
                this.vl("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.d4));
            }
        }
        get d7() {
            return this.d5;
        }
        set d7(a) {
            let b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.vl("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.d5));
            }
        }
        get d3() {
            return this.d2;
        }
        set d3(a) {
            let b = this.d2;
            this.d2 = a;
            if (b != this.d2) {
                this.vl("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.d2));
            }
        }
        get eb() {
            return this.ea;
        }
        set eb(a) {
            let b = this.ea;
            this.ea = a;
            if (b != this.ea) {
                this.vl("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.ea));
            }
        }
        get ye() {
            return this.xj;
        }
        set ye(a) {
            let b = this.xj;
            this.xj = a;
            if (b != this.xj) {
                this.vl("HorizontalViewScrollbarFill", b, this.xj);
            }
        }
        get yf() {
            return this.xk;
        }
        set yf(a) {
            let b = this.xk;
            this.xk = a;
            if (b != this.xk) {
                this.vl("HorizontalViewScrollbarOutline", b, this.xk);
            }
        }
        get jv() {
            return this.ii;
        }
        set jv(a) {
            let b = this.ii;
            this.ii = a;
            if (b != this.ii) {
                this.vl("HorizontalViewScrollbarStrokeThickness", b, this.ii);
            }
        }
        get ju() {
            return this.ih;
        }
        set ju(a) {
            let b = this.ih;
            this.ih = a;
            if (b != this.ih) {
                this.vl("HorizontalViewScrollbarMaxOpacity", b, this.ih);
            }
        }
        get jr() {
            return this.id;
        }
        set jr(a) {
            let b = this.id;
            this.id = a;
            if (b != this.id) {
                this.vl("HorizontalViewScrollbarCornerRadius", b, this.id);
            }
        }
        get js() {
            return this.ie;
        }
        set js(a) {
            let b = this.ie;
            this.ie = a;
            if (b != this.ie) {
                this.vl("HorizontalViewScrollbarHeight", b, this.ie);
            }
        }
        get jt() {
            return this.ig;
        }
        set jt(a) {
            let b = this.ig;
            this.ig = a;
            if (b != this.ig) {
                this.vl("HorizontalViewScrollbarInset", b, this.ig);
            }
        }
        get jx() {
            return this.ik;
        }
        set jx(a) {
            let b = this.ik;
            this.ik = a;
            if (b != this.ik) {
                this.vl("HorizontalViewScrollbarTrackStartInset", b, this.ik);
            }
        }
        get jw() {
            return this.ij;
        }
        set jw(a) {
            let b = this.ij;
            this.ij = a;
            if (b != this.ij) {
                this.vl("HorizontalViewScrollbarTrackEndInset", b, this.ij);
            }
        }
        get gz() {
            return this.f2;
        }
        set gz(a) {
            let b = this.f2;
            this.f2 = a;
            if (b != this.f2) {
                this.vl(DomainChart.q2, b, this.f2);
            }
        }
        get yk() {
            return this.xo;
        }
        set yk(a) {
            let b = this.xo;
            this.xo = a;
            if (b != this.xo) {
                this.vl("VerticalViewScrollbarFill", b, this.xo);
            }
        }
        get yl() {
            return this.xp;
        }
        set yl(a) {
            let b = this.xp;
            this.xp = a;
            if (b != this.xp) {
                this.vl("VerticalViewScrollbarOutline", b, this.xp);
            }
        }
        get kn() {
            return this.jb;
        }
        set kn(a) {
            let b = this.jb;
            this.jb = a;
            if (b != this.jb) {
                this.vl("VerticalViewScrollbarStrokeThickness", b, this.jb);
            }
        }
        get km() {
            return this.ja;
        }
        set km(a) {
            let b = this.ja;
            this.ja = a;
            if (b != this.ja) {
                this.vl("VerticalViewScrollbarMaxOpacity", b, this.ja);
            }
        }
        get kk() {
            return this.i8;
        }
        set kk(a) {
            let b = this.i8;
            this.i8 = a;
            if (b != this.i8) {
                this.vl("VerticalViewScrollbarCornerRadius", b, this.i8);
            }
        }
        get kq() {
            return this.je;
        }
        set kq(a) {
            let b = this.je;
            this.je = a;
            if (b != this.je) {
                this.vl("VerticalViewScrollbarWidth", b, this.je);
            }
        }
        get kl() {
            return this.i9;
        }
        set kl(a) {
            let b = this.i9;
            this.i9 = a;
            if (b != this.i9) {
                this.vl("VerticalViewScrollbarInset", b, this.i9);
            }
        }
        get kp() {
            return this.jd;
        }
        set kp(a) {
            let b = this.jd;
            this.jd = a;
            if (b != this.jd) {
                this.vl("VerticalViewScrollbarTrackStartInset", b, this.jd);
            }
        }
        get ko() {
            return this.jc;
        }
        set ko(a) {
            let b = this.jc;
            this.jc = a;
            if (b != this.jc) {
                this.vl("VerticalViewScrollbarTrackEndInset", b, this.jc);
            }
        }
        get hm() {
            return this.ge;
        }
        set hm(a) {
            let b = this.ge;
            this.ge = a;
            if (b != this.ge) {
                this.vl(DomainChart.tq, b, this.ge);
            }
        }
        get ks() {
            return this.jg;
        }
        set ks(a) {
            let b = this.jg;
            this.jg = a;
            if (b != this.jg) {
                this.vl("WindowRectMinWidth", b, this.jg);
            }
        }
        get kr() {
            return this.jf;
        }
        set kr(a) {
            let b = this.jf;
            this.jf = a;
            if (b != this.jf) {
                this.vl("WindowRectMinHeight", b, this.jf);
            }
        }
        get ku() {
            return this.ji;
        }
        set ku(a) {
            let b = this.ji;
            this.ji = a;
            if (b != this.ji) {
                this.vl("WindowSizeMinWidth", b, this.ji);
            }
        }
        get kt() {
            return this.jh;
        }
        set kt(a) {
            let b = this.jh;
            this.jh = a;
            if (b != this.jh) {
                this.vl("WindowSizeMinHeight", b, this.jh);
            }
        }
    }
    DomainChart.$t = markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type, IToolbarTarget_$type]);
    DomainChart.l6 = new Random(0);
    DomainChart.l5 = new Random(0);
    DomainChart.o2 = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.q2 = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.tq = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
/**
 * @hidden
 */
export let IDomainChartToolbarProvider_$type = new Type(null, 'IDomainChartToolbarProvider');
