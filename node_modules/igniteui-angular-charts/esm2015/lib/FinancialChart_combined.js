/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-angular-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { DataSeriesType_$type } from "igniteui-angular-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-angular-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-angular-core";
import { SubCollectionsRule } from "igniteui-angular-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-angular-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-angular-core";
import { Series } from "./Series";
import { Rect } from "igniteui-angular-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-angular-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-angular-core";
import { timeSpanFromDays } from "igniteui-angular-core";
import { dateMaxValue, dateMinValue } from "igniteui-angular-core";
import { isNaN_, isInfinity } from "igniteui-angular-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-angular-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        constructor() {
            super();
            this.ah9 = null;
            this.ak7 = null;
            this.ak5 = null;
            this.ak2 = null;
            this.ak4 = null;
            this.ak6 = null;
            this.ak3 = null;
            this.ahf = null;
            this.alp = null;
            this.alq = null;
            this.alm = null;
            this.alr = null;
            this.als = null;
            this.aln = null;
            this.alo = null;
            this.aix = null;
            this.aj7 = 40;
            this.ah3 = null;
            this.ah1 = null;
            this.ah5 = null;
            this.aia = null;
            this.al0 = null;
            this.ait = null;
            this.ajj = false;
            this.aji = false;
            this.ajq = false;
            this.ai5 = false;
            this.ald = 10;
            this.ake = NaN;
            this.akg = NaN;
            this.akf = NaN;
            this.akh = 0;
            this.ahl = 0;
            this.aho = 0;
            this.aj9 = 3;
            this.akc = NaN;
            this.aka = NaN;
            this.akb = NaN;
            this.akd = NaN;
            this.ahq = 0;
            this.ai0 = true;
            this.ahh = 0;
            this.ai1 = false;
            this.ahv = null;
            this.ahx = null;
            this.ajs = null;
            this.ai3 = true;
            this.ai2 = false;
            this.ai4 = false;
            this.aiu = null;
            this.ahs = 1;
            this.agj = null;
            this.agk = null;
            this.agl = null;
            this.agm = null;
            this.ago = null;
            this.agn = null;
            this.agi = null;
            this.agh = null;
            this.aj8 = 1;
            this.aj6 = 1;
            this.aj5 = 2;
            this.aj4 = 1;
            this.ah7 = null;
            this.ak9 = -2147483648;
            this.aj3 = 2;
            this.alc = 3;
            this.ala = 10;
            this.ak8 = 30;
            this.alb = 9;
            this.ahc = null;
            this.ahd = null;
            this.ag8 = null;
            this.applyCustomIndicators = null;
            this.apu = null;
            this.aki = 1;
            this.aiz = false;
            this.ahz = null;
            this.aj0 = dateMinValue();
            this.ajz = dateMaxValue();
            this.ajx = null;
            this.ue();
            this.ajx = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.apj());
            }
            this.ao4();
        }
        vp(a, b, c) {
            super.vp(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.ahg = new FinancialChartToolbar(this, this.alx);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.aor));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.aou));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.aov));
                        d.l(null);
                    }
                    if (this.ahg != null) {
                        this.ahg.ac = this.ahn;
                        this.ahg.ai = this.ef;
                        this.ahg.y = this.ahi;
                        this.ahg.al = this.ajg;
                        if (this.ak4 != null) {
                            this.ahg.l(this.ak4);
                        }
                        let e = this.ahg;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.aor));
                        ;
                        let f = this.ahg;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.aou));
                        let g = this.ahg;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.aov));
                    }
                    break;
                case "ChartType":
                    if (this.ahg != null) {
                        this.ahg.y = this.ahi;
                    }
                    break;
                case "VolumeType":
                    if (this.ahg != null) {
                        this.ahg.ac = this.ahn;
                    }
                    break;
                case "TrendLineType":
                    if (this.ahg != null) {
                        this.ahg.ai = this.ef;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.ahg == null) {
                        break;
                    }
                    this.ahg.al = this.ajg;
                    this.setGridRows();
                    break;
            }
        }
        aov(a, b) {
            this.ahn = this.ahg.ac;
        }
        aou(a, b) {
            this.ef = this.ahg.ai;
        }
        aor(a, b) {
            this.ahi = this.ahg.y;
        }
        ao4() {
            this.ah9 = new IndicatorPane();
            this.ah0 = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.ak7 = a;
            this.app();
            this.setGridRows();
            if (this.ahg != null) {
                this.ahg.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.ahg != null) {
                this.ahg.bl(a);
            }
        }
        getContext() {
            let a = this.ahg.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.lu;
            b.toolbarContainer = this.ak4;
            b.legendContainer = this.ak3;
            b.indicatorsContainer = this.ak2;
            b.volumeContainer = this.ak5;
            b.zoomContainer = this.ak6;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.ahg == null) {
                    this.ahg = new FinancialChartToolbar(this, this.alx);
                }
                this.ahg.w.isIndicatorMenuVisible = this.ai7 && this.ai8;
                this.ak4 = b.getSubRenderer(d);
                this.ahg.l(this.ak4);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.ak3 = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.ak2 = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.ak5 = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.ak6 = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.ak4 = null;
                if (this.ahg != null) {
                    this.ahg.l(null);
                }
                if (this.aiy != null) {
                    this.aiy.provideContainer(null);
                    this.aiy = null;
                }
                if (this.ah0 != null) {
                    this.ah0.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.c8.b4(this.ak5);
                }
                if (this.ah9 != null) {
                    this.ah9.h(this.ak2);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.c8.b4(this.ak6);
                    if (a != null) {
                        this.aob();
                    }
                    else {
                        this.aiy = null;
                    }
                }
                if (this.ah0 != null) {
                    this.ah0.provideContainer(this.ak3);
                }
                this.setGridRows();
            }
        }
        apf(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.c8.b4(c);
            }
            this.setGridRows();
        }
        apt(a, b) {
            this.apf(a, b, this.ak6);
            if (b == null) {
                return;
            }
            this.aob();
        }
        aob() {
            if (this.ak6 == null) {
                return;
            }
            if (this.aiy != null) {
                this.aiy.provideContainer(null);
            }
            this.aiy = TypeRegistrar.create("ZoomSlider");
            this.aiy.provideContainer(this.ak6);
            let a = this.aiy;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.v1 = new Rect(0, this.aiy.windowRect.left, this.dataChart.vl.top, this.aiy.windowRect.width, this.dataChart.vl.height);
                }
            });
            this.aoc();
        }
        apr(a, b) {
            this.apf(a, b, this.ak5);
        }
        setGridRows() {
            if (this.ak7 == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.ajg ? this.ako : 0) + "px";
            a[1] = this.ajc ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.aiy != null) {
                if (a[5] == "0px") {
                    this.aiy.hide();
                }
                else {
                    this.aiy.show();
                }
            }
            this.ak7.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.ak7.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.lu == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.ah9 != null) {
                this.ah9.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.aiy != null) {
                this.aiy.notifySizeChanged();
            }
        }
        ux() {
            super.ux();
            this.zv = 1;
            this.afa = 0;
            this.abs = 0;
            this.af4 = null;
            this.afx = AxisDefaults.g;
            this.abc = AxisDefaults.e;
            this.abb = AxisDefaults.f;
            this.afy = AxisDefaults.j;
            this.afu = null;
            this.apv = AxisDefaults.h;
            this.ak1 = AxisDefaults.b;
            this.gw = true;
            this.go = true;
            this.gp = false;
            this.bf = 0;
            this.jm = Defaults.j;
            this.xw = Defaults.ae;
            this.xr = Defaults.af;
            this.xs = Defaults.ag;
            this.j6 = NaN;
            this.jy = 40;
            this.g6 = true;
            this.he = false;
            if (this.dataChart != null) {
                let a = this.dataChart.c8.j.e();
                this.agr = a.d;
                this.ags = a.e;
                this.agq = a.d;
                this.apv = this.dataChart.z6;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.n(d, 0.3));
            }
            this.agt = c;
            this.agu = b;
        }
        apb() {
            if (this.ah9 != null) {
                this.ah9.b = null;
                this.ah9.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        apc() {
            this.setGridRows();
        }
        apl() {
            this.apb();
        }
        aoa() {
            if (this.aiy == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.lu.rootWrapper.width();
            let b = this.dataChart.v0.left + this.dataChart.v0.width;
            let c = this.dataChart.v0.left;
            let d = a - b;
            this.aiy.startInset = c - this.aiy.trackStartInset;
            this.aiy.endInset = d - this.aiy.trackEndInset;
            if (this.aiy.endInset < 0) {
                let e = this.aiy.endInset;
                this.aiy.endInset = 0;
                this.dataChart.h0 += (e * -1);
            }
            if (this.aiy.startInset < 0) {
                let f = this.aiy.startInset;
                this.aiy.startInset = 0;
                this.dataChart.hv += (f * -1);
            }
            this.zoomSliderChart.hv = c;
            this.zoomSliderChart.h0 = d;
            this.zoomSliderChart.hi = this.aiy.barExtent;
        }
        ao1() {
            this.aoa();
        }
        uu(a) {
            super.uu(a);
            if (a != null) {
                a.hh = 0;
            }
        }
        apw(a) {
            return a.ve();
        }
        apz() {
            return this.ak3 == null ? null : this.apy(this.ak3.rootWrapper);
        }
        apx(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.apy(a.d.rootWrapper);
        }
        apy(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        akj() {
            if (this.ak7 == null) {
                return NaN;
            }
            let a = this.ak7.getOffset();
            return this.ak7.width() + (a == null ? 0 : a.left);
        }
        u6(source_, a, b) {
            super.u6(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.n2(source_, a, b);
            }
        }
        u7(source_, a, b) {
            super.u7(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.n3(source_, a, b);
            }
        }
        u5(source_) {
            super.u5(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.nv(source_);
            }
        }
        u9(source_, a, b, c) {
            super.u9(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.n4(source_, a, b, c);
            }
        }
        u0(a, b) {
            super.u0(a, b);
            if (this.ajd(a)) {
                a.toolTip = null;
            }
        }
        get ahg() {
            return this.ahf;
        }
        set ahg(a) {
            let b = this.ahg;
            if (a != b) {
                this.ahf = a;
                this.vl("Toolbar", b, this.ahg);
            }
        }
        get alw() {
            return this.alp;
        }
        set alw(a) {
            let b = this.alw;
            if (a != b) {
                this.alp = a;
                this.vl("RangeSelectorTemplate", b, this.alw);
            }
        }
        get alx() {
            return this.alq;
        }
        set alx(a) {
            let b = this.alx;
            if (a != b) {
                this.alq = a;
                this.vl("ToolbarTemplate", b, this.alx);
            }
        }
        get alt() {
            return this.alm;
        }
        set alt(a) {
            let b = this.alt;
            if (a != b) {
                this.alm = a;
                this.vl("ChartTypePickerTemplate", b, this.alt);
            }
        }
        get aly() {
            return this.alr;
        }
        set aly(a) {
            let b = this.aly;
            if (a != b) {
                this.alr = a;
                this.vl("TrendLineTypePickerTemplate", b, this.aly);
            }
        }
        get alz() {
            return this.als;
        }
        set alz(a) {
            let b = this.alz;
            if (a != b) {
                this.als = a;
                this.vl("VolumeTypePickerTemplate", b, this.alz);
            }
        }
        get alu() {
            return this.aln;
        }
        set alu(a) {
            let b = this.alu;
            if (a != b) {
                this.aln = a;
                this.vl("IndicatorMenuTemplate", b, this.alu);
            }
        }
        get alv() {
            return this.alo;
        }
        set alv(a) {
            let b = this.alv;
            if (a != b) {
                this.alo = a;
                this.vl("OverlayPickerTemplate", b, this.alv);
            }
        }
        get aiy() {
            return this.aix;
        }
        set aiy(a) {
            let b = this.aiy;
            if (a != b) {
                this.aix = a;
                this.vl("ZoomSlider", b, this.aiy);
            }
        }
        get_jy() {
            return super.get_jy();
        }
        set_jy(a) {
            super.set_jy(a);
        }
        get_g6() {
            return super.get_g6();
        }
        set_g6(a) {
            super.set_g6(a);
        }
        get ako() {
            return this.aj7;
        }
        set ako(a) {
            let b = this.ako;
            if (a != b) {
                this.aj7 = a;
                this.vl("ToolbarHeight", b, this.ako);
            }
        }
        zk() {
            return this.xAxis;
        }
        zl() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.aiy != null) {
                this.aiy.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.aiy != null) {
                this.aiy.onDetachedFromUI();
            }
        }
        bi(a) {
            return 20;
        }
        get_hy() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get hy() {
            return this.get_hy();
        }
        get_hx() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get hx() {
            return this.get_hx();
        }
        ag2(a) {
            return this.ag3(a);
        }
        aig(a) {
            return this.aih(a);
        }
        ag1(a) {
            let b = this.ag2(0);
            b.name = a;
            return b;
        }
        t9() {
            this.xAxis = this.ag1("xAxis");
            this.yAxis = this.aig(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.aig(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.ag1("volumeXAxis");
            this.aju = new List$1(NumericYAxis.$, 0);
            this.ajw = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.aig(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.ag1("indicatorXAxis_0");
            this.aju.add(this.indicatorAxis);
            this.ajw.add(this.indicatorXAxis);
            if (this.xAxis.az == null) {
                this.xAxis.az = new AxisLabelSettings();
            }
            if (this.yAxis.az == null) {
                this.yAxis.az = new AxisLabelSettings();
            }
            if (this.volumeAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.volumeXAxis.az == null) {
                this.volumeAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorAxis.az == null) {
                this.indicatorAxis.az = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.az == null) {
                this.indicatorXAxis.az = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.aig(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.ag1("zoomSliderXAxis");
            if (this.zoomSliderAxis.az == null) {
                this.zoomSliderAxis.az = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.az == null) {
                this.zoomSliderXAxis.az = new AxisLabelSettings();
            }
        }
        t3(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.w2 = this.c6(a, b);
            }
        }
        c5(a) {
            if (a != null) {
                return 1;
            }
            return super.c5(a);
        }
        we(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lj = true;
                this.yAxis.ma = 10;
            }
        }
        wh() {
            this.yAxis.lj = this.ajn;
            this.yAxis.ma = this.all;
        }
        ahk(a) {
            let b;
            if (this.ahi == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.ahi;
            }
            b = this.ahj(b);
            return b;
        }
        ahj(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        aht(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ahm(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        al8(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        ag3(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        aih(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        ain() {
            return this.di(1);
        }
        aio() {
            return this.di(0);
        }
        aim() {
            return this.di(2);
        }
        aip() {
            return this.di(20);
        }
        get ai6() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get ah4() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get ai9() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get ah2() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ai7() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get ah6() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get ai8() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get aib() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        dg(a, b) {
            let c = this.al8(a);
            switch (this.ahk(a)) {
                case 3:
                    let d = this.ain();
                    this.ah4.setValueMemberPath(d, c);
                    this.ah4.setXAxis(d, this.xAxis);
                    this.ah4.setYAxis(d, this.yAxis);
                    this.ah4.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.aio();
                    this.ah4.setValueMemberPath(e, c);
                    this.ah4.setXAxis(e, this.xAxis);
                    this.ah4.setYAxis(e, this.yAxis);
                    this.ah4.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.aip();
                    this.ah2.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.ah2.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.ah2.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.ah2.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.ah2.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.ah2.setXAxis(f, this.xAxis);
                    this.ah2.setYAxis(f, this.yAxis);
                    this.ah2.setDisplayType(f, this.ahi == 1 ? 1 : 0);
                    this.ah2.setCategoryMode(f, 1);
                    return f;
            }
        }
        wg() {
            super.wg();
            this.aoz(this.xAxis);
            this.apn(false);
            if (this.ahn != 0 && this.volumeChart != null) {
                this.ao6();
            }
            this.aoz(this.volumeXAxis);
            this.aoz(this.indicatorXAxis);
            this.apk();
            this.apm();
            if (this.ahu != 0) {
                this.ao7();
                this.aoz(this.zoomSliderXAxis);
            }
        }
        aew(a, b) {
            super.aew(a, b);
            a(this.volumeXAxis);
            if (this.ajw != null) {
                for (let c of fromEnum(this.ajw)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        ae1(a, b) {
            super.ae1(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.aju != null) {
                    for (let c of fromEnum(this.aju)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        ao3(a) {
            let b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
            if (b != null) {
                a(b);
            }
        }
        aez(a) {
            super.aez(a);
            this.aeq(this.volumeXAxis, a);
            this.aeq(this.indicatorXAxis, a);
            this.aeq(this.zoomSliderXAxis, a);
        }
        ae4(a) {
            super.ae4(a);
            this.aeq(this.volumeAxis, a);
            this.aeq(this.indicatorAxis, a);
            this.aeq(this.zoomSliderAxis, a);
        }
        ae2(a) {
            super.ae2(a);
            this.aep(this.volumeAxis, a);
            this.aep(this.indicatorAxis, a);
            this.aep(this.zoomSliderAxis, a);
        }
        aex(a) {
            super.aex(a);
            this.aep(this.volumeXAxis, a);
            this.aep(this.indicatorXAxis, a);
            this.aep(this.zoomSliderXAxis, a);
        }
        ut(a) {
            super.ut(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.ww = a.wz = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.am3();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.cw = 2;
        }
        am3() {
            if (this.al0 == null) {
                FinancialChart.alk++;
                this.al0 = FinancialChart.alk.toString();
            }
            return this.al0;
        }
        aol(a, b) {
            this.an7();
            this.ao1();
        }
        an7() {
            if (this.yAxis.b8()) {
                return;
            }
            let a = this.yAxis.aw.bd;
            if (this.ahn != 0) {
                a = Math.max(a, this.volumeAxis.aw.bd);
            }
            for (let b of fromEnum(this.aju)) {
                a = Math.max(a, b.aw.bd);
            }
            this.an8(a);
        }
        an8(a) {
            if (this.yAxis.b8()) {
                return;
            }
            this.yAxis.et = this.volumeAxis.et = a;
            for (let b of fromEnum(this.aju)) {
                b.et = a;
            }
            this.zoomSliderAxis.et = this.yAxis.et;
        }
        aod(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.ajb(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        aog(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.eq) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        aoe(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.ajd(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        aof(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ajd(d)) {
                    continue;
                }
                let e = this.ale(d, c);
                a(d, e);
            }
            if (b) {
                this.aoh(a);
            }
        }
        aoh(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.eq) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        ale(a, b) {
            if (a.c7 != this.dataChart) {
                return b;
            }
            let c = this.bj == null || this.bj.dataSeries == null ? 0 : this.bj.dataSeries.count;
            let d = this.ahy == null ? 0 : this.ahy.count;
            return b - (c * d);
        }
        uj(a) {
            super.uj(a);
            this.aog(a);
            this.aod(a);
            this.aoh(a);
        }
        get volumeChart() {
            return this.ait;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.ait = a;
                this.vl("VolumeChart", b, this.volumeChart);
            }
        }
        ao6() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.ajd(d) || d.eq) {
                    continue;
                }
                b++;
                let e;
                let f = this.ahn;
                f = this.ahm(f);
                switch (f) {
                    case 2:
                        e = this.aio();
                        break;
                    case 3:
                        e = this.aim();
                        break;
                    default:
                    case 1:
                        e = this.ain();
                        break;
                }
                this.ah4.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.ah4.setXAxis(e, this.volumeXAxis);
                this.ah4.setYAxis(e, this.volumeAxis);
                this.ah4.setValueMemberPath(e, this.bj != null && this.bj.dataSeries != null && this.bj.dataSeries.count > b ? this.bj.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.u9 = ArrayExtension.getModulus$1(Brush.$, this.agv, b);
                e.vp = ArrayExtension.getModulus$1(Brush.$, this.agw, b);
                e.jn = this.akp;
                a.add(e);
            }
            let g = this.hu("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.uy(i, h);
            }
        }
        aja(a) {
            if (!this.ai6) {
                return false;
            }
            return this.ah4.matchesType(a);
        }
        aje(a) {
            if (!this.ai9) {
                return false;
            }
            return this.ah2.matchesType(a);
        }
        ajb(a) {
            if (!this.ai7) {
                return false;
            }
            return this.ah6.matchesType(a);
        }
        ajd(a) {
            if (!this.ai8) {
                return false;
            }
            return this.aib.matchesType(a);
        }
        ao5() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.ahw == null ? 0 : this.ahw.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.ahw._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.ajd(l) || l.eq) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.aiq("Custom");
                        this.ah6.handleCustomIndicatorEvent(n, runOn(this, this.aoj));
                        m = n;
                    }
                    else {
                        m = this.ais(this.ahw._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.ah6.setXAxis(m, this.ajw._inner[e]);
                    this.ah6.setYAxis(m, this.aju._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.ah6.setOpenMemberPath(m, this.bj.dataSeries._inner[j].getMemberPathFor(11));
                    this.ah6.setHighMemberPath(m, this.bj.dataSeries._inner[j].getMemberPathFor(12));
                    this.ah6.setLowMemberPath(m, this.bj.dataSeries._inner[j].getMemberPathFor(13));
                    this.ah6.setCloseMemberPath(m, this.bj.dataSeries._inner[j].getMemberPathFor(14));
                    this.ah6.setVolumeMemberPath(m, this.bj.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.u9 = ArrayExtension.getModulus$1(Brush.$, this.agp, e);
                    m.jn = this.akl;
                    if (this.ajb(m)) {
                        this.ah6.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.agq, e));
                        this.ah6.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ah8, e));
                    }
                    if (this.alg != -2147483648 && this.ajb(m)) {
                        this.ah6.setPeriodOverride(m, this.alg);
                    }
                    if (this.ajb(m)) {
                        this.ah6.setSmoothingPeriod(m, this.alj);
                    }
                    if (this.ajb(m)) {
                        this.ah6.setSignalPeriod(m, this.ali);
                    }
                    if (this.ajb(m)) {
                        this.ah6.setShortPeriod(m, this.alh);
                        this.ah6.setLongPeriod(m, this.alf);
                    }
                    this.uy(m, e);
                    f.add(m);
                }
                let o = this.hu(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.uy(s, r);
                    }
                }
            }
        }
        aiq(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        ais(a) {
            return this.aiq(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        apn(a) {
            if (this.ahg == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.ahg.as = b.actualMinimumValue;
            this.ahg.ar = b.actualMaximumValue;
            if (a) {
                this.ahg.au = b.visibleMinimum;
                this.ahg.at = b.visibleMaximum;
            }
            this.ahg.bn();
        }
        lv() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.lv();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.x8();
                $ret.toolbar = this.ahg == null ? null : this.ahg.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.x8();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.x8());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.apw(this.dataChart).x;
                a.mainChartTop = this.apw(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.apw(this.volumeChart).x;
                a.volumeChartTop = this.apw(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.apw(this.zoomSliderChart).x;
                a.zoomChartTop = this.apw(this.zoomSliderChart).y;
            }
            if (this.ahg != null) {
                let c = this.apx(this.ahg);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.apw(d).x);
                    a.indicatorChartTops.add(this.apw(d).y);
                }
            }
            let e = this.apz();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.ah0 == null ? null : this.ah0.exportVisualData();
            return a;
        }
        al5() {
            let a = this.lv();
            a.scaleByViewport();
            return a.serialize();
        }
        air(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        apm() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.ajd(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.ahy == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.ajd(g) || g.eq) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.ahy.count; h++) {
                    let i = this.ahy._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.air(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.air(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.aib.setXAxis(j, this.xAxis);
                    this.aib.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.ahy.count + h;
                    j.u9 = ArrayExtension.getModulus$1(Brush.$, this.agt, k);
                    j.vp = ArrayExtension.getModulus$1(Brush.$, this.agu, k);
                    j.jn = this.akn;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.bj.dataSeries._inner[e];
                    this.aib.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.aib.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.aib.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.aib.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.aib.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.uy(q, p);
            }
        }
        apk() {
            if (this.ajj) {
                return;
            }
            this.ajj = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.ao0(b);
                }
            }
            if ((this.ahw == null || this.ahw.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.aju != null) {
                    this.aju.clear();
                }
                if (this.ajw != null) {
                    this.ajw.clear();
                }
                this.apb();
                this.apl();
                this.ajj = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.aju.clear();
            this.ajw.clear();
            let c = this.ahw == null ? 0 : this.ahw.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.aoy(g, null);
                let h = f >= c;
                if (h) {
                    g.ls = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.ls = this.al7(this.ahw._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.ce) {
                            j = this.ag2(0);
                        }
                        else {
                            j = this.ag2(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.aju.add(i);
                    this.ajw.add(j);
                    if (this.gh) {
                        this.aet(i);
                    }
                    if (this.gh) {
                        this.aer(j);
                    }
                }
            }
            this.apb();
            this.ao5();
            if (this.ahg != null) {
                this.ahg.ae = this.ahw;
            }
            this.an9();
            this.apl();
            this.ajj = false;
        }
        uq() {
            super.uq();
            this.aer(this.xAxis);
            this.aer(this.volumeXAxis);
            if (this.ajw != null) {
                for (let a of fromEnum(this.ajw)) {
                    this.aer(a);
                }
            }
            this.aet(this.yAxis);
            this.aet(this.volumeAxis);
            if (this.aju != null) {
                for (let b of fromEnum(this.aju)) {
                    this.aet(b);
                }
            }
            this.aer(this.zoomSliderXAxis);
            this.aet(this.zoomSliderAxis);
        }
        get_hd() {
            return !this.ajh;
        }
        get ajp() {
            return (this.externalObject._dynamicContent);
        }
        aps(a, b) {
            this.ape(a, b, this.ak6);
            this.an9();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.ao7();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.apc();
            this.apt(a, b);
        }
        ao7() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.ajd(c) || c.eq) {
                    continue;
                }
                let d;
                let e = this.ahu;
                e = this.aht(e);
                let f = this.ale(c, b);
                if (e == 1) {
                    switch (this.ahk(this.bj != null && this.bj.dataSeries != null && this.bj.dataSeries.count > f ? this.bj.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.aip();
                        this.ah2.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.aip();
                        this.ah2.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.aio();
                        break;
                    case 6:
                        d = this.aim();
                        break;
                    default:
                    case 4:
                        d = this.ain();
                        break;
                }
                let g = this.bj != null && this.bj.dataSeries != null && this.bj.dataSeries.count > f ? this.bj.dataSeries._inner[f] : null;
                if (d.ew && !d.e4) {
                    this.ah4.setCategoryMode(d, 1);
                    this.ah4.setXAxis(d, this.zoomSliderXAxis);
                    this.ah4.setYAxis(d, this.zoomSliderAxis);
                    this.ah4.setValueMemberPath(d, g == null ? null : this.al8(g));
                }
                else if (d.e4) {
                    this.ah2.setCategoryMode(d, 1);
                    this.ah2.setXAxis(d, this.zoomSliderXAxis);
                    this.ah2.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.ah2.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.ah2.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.ah2.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.ah2.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.ah2.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.jn = this.kc;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.uy(i, h);
            }
        }
        ve(a, b, c) {
            super.ve(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        aoj(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.c7);
            }
            e -= this.ahw == null ? 0 : this.ahw.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        apg(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.gh) {
                this.aer(c);
            }
        }
        get ajo() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        aok(a, b) {
            this.apk();
        }
        ajf(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        apa() {
            let a = this.ahe != null ? this.ahe : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.ajf(e, d)) {
                    b.add(e);
                }
            }
            this.ahd = b;
            if (this.ahg != null) {
                this.ahg.u = this.ahd;
            }
        }
        aoo(a, b) {
            this.apa();
        }
        aot(a, b) {
            this.ahy = this.ahg.ag;
        }
        aos(a, b) {
            this.ahw = this.ahg.ae;
        }
        aom(a, b) {
            this.apk();
        }
        aon(a, b) {
            this.apm();
        }
        aox(a, b) {
            let c = a;
            if (c.bg == null) {
                return;
            }
            if (this.ajh) {
                this.ao9(c.bg);
            }
        }
        ao0(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.aol));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.et = this.volumeAxis.et = this.indicatorAxis.et = 0;
                this.xAxis.az.visibility = this.agf;
            }
        }
        aoy(a, b) {
            let c = a != this.zoomSliderChart;
            if (c) {
                if (this.dataChart != null) {
                    a.v1 = new Rect(0, this.dataChart.vl.x, a.v1.y, this.dataChart.vl.width, a.v1.height);
                }
                let d = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, d);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.aol));
            this.us(a, b);
        }
        an9() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.aep(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.ajw.count; a++) {
                let b = this.ajw._inner[a];
                let c = a < this.ajw.count - 1 || this.volumeChart != null;
                this.aep(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        ape(a, b, c) {
            if (a != null) {
                this.ao0(a);
            }
            if (b != null) {
                this.aoy(b, c);
            }
        }
        apq(a, b) {
            this.ape(a, b, this.ak5);
            this.an9();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.ao6();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.apr(a, b);
        }
        aop(a, b) {
            this.apo();
        }
        apo() {
            if (this.ahg == null || +(this.ahg.au) == +(dateMaxValue()) || +(this.ahg.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.ahg.au, this.ahg.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.aji = true;
            this.dataChart.v1 = new Rect(0, b.left, this.dataChart.v1.top, b.width, this.dataChart.v1.height);
            if (this.aiy != null) {
                this.aiy.windowRect = this.dataChart.vl;
            }
            if (this.ajh) {
                this.ao9(this.dataChart);
            }
            this.aji = false;
        }
        aow(a, b) {
            this.apa();
            this.apn(!this.aji);
        }
        aoi(a, b) {
            if (!this.aji) {
                if (this.ajh) {
                    this.ao9(a);
                }
                let c = false;
                let d = this.vt(() => this.apn(true), c);
                c = d.p1;
                if (this.aiy != null) {
                    this.aiy.windowRect = this.dataChart.vl;
                }
            }
        }
        api(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.aji = true;
                a.v1 = new Rect(0, d, a.vl.top, c, a.vl.height);
                this.aji = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.ch, a.vp);
            for (let i of fromEnum(a.series)) {
                h.b = i.iw();
                let j = i.ay(a.vl);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.ek(j.c, h);
                let m = b.ek(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.vl.width;
            if (c != -1) {
                n = c;
            }
            let o = a.vl.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.aji = true;
            let p = new Rect(0, o, e, n, f - e);
            a.v1 = p;
            this.aji = false;
        }
        aph(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.api(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.api(this.volumeChart, this.volumeAxis, this.dataChart.vl.width, this.dataChart.vl.left);
                }
            }
            else if (a == this.volumeChart) {
                this.api(this.volumeChart, this.volumeAxis, -1, -1);
                this.api(this.dataChart, this.yAxis, this.volumeChart.vl.width, this.volumeChart.vl.left);
            }
        }
        ao9(a) {
            this.vs(() => this.aph(a));
        }
        aoq(a, b) {
            if (this.ajh) {
                this.ao9(a);
            }
        }
        app() {
            if (!this.ajp) {
                return;
            }
            this.aoc();
            if (this.ahu == 0) {
                this.wl();
                this.zoomSliderChart = null;
                this.ak6.rootWrapper.removeChildren();
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
                this.apc();
            }
            else {
                this.ao7();
            }
        }
        aoc() {
            let container_ = this.ak6.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.aiy != null && containerParent_ != null && !this.ajq) {
                this.ajq = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.aiy;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        apj() {
            if (this.ahp != 1) {
                return;
            }
            this.aev((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        wm(a, b, c) {
            super.wm(a, b, c);
            if (this.bj.dataSeries.count > 0) {
                if (this.ahp == 1 && stringIsNullOrEmpty(this.nk)) {
                    this.ci.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.nm)) {
                    this.ci.setYMemberPath(a, this.al8(c));
                }
                if (stringIsNullOrEmpty(this.nc)) {
                    this.ci.setLabelMemberPath(a, this.al8(c));
                }
                if (stringIsNullOrEmpty(this.m9)) {
                    this.ci.setContentMemberPath(a, this.al8(c));
                }
            }
        }
        al7(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        aer(a) {
            super.aer(a);
            let b = a;
            this.aoz(b);
            if (a.bg != null) {
                for (let c of fromEnum(a.bg.series)) {
                    if (this.aja(c)) {
                        this.ah4.setXAxis(c, b);
                    }
                    else if (this.aje(c)) {
                        this.ah2.setXAxis(c, b);
                    }
                    else if (this.ajb(c)) {
                        this.ah6.setXAxis(c, b);
                    }
                    else if (this.ajd(c)) {
                        this.aib.setXAxis(c, b);
                    }
                }
            }
            this.ao3((d) => {
                d.zoomMaximumCategoryRange = this.akq;
                d.zoomMaximumItemSpan = this.akr;
                d.zoomToCategoryRange = this.aks;
                d.zoomToCategoryStart = this.akt;
                d.zoomToItemSpan = this.aku;
            });
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jx = this.apv;
                a.es = this.ak1;
                this.aep(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.aj2;
            e.maximumValue = this.aj1;
            a.b1 = this.ajk;
        }
        aet(a) {
            super.aet(a);
            if (a.bg != null && a == this.yAxis) {
                for (let b of fromEnum(a.bg.series)) {
                    if (this.aja(b)) {
                        this.ah4.setYAxis(b, this.yAxis);
                    }
                    else if (this.aje(b)) {
                        this.ah2.setYAxis(b, this.yAxis);
                    }
                    else if (this.ajb(b)) {
                        this.ah6.setYAxis(b, this.yAxis);
                    }
                    else if (this.ajd(b)) {
                        this.aib.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.lb = this.ajl;
            a.l6 = this.akz;
            a.l5 = this.aky;
            if (a == this.yAxis) {
                a.l2 = this.akx;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.aep(a, (d) => d.visibility = 1);
            }
            a.b1 = this.ajm;
        }
        aoz(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.f1 = XYChart.ace(a, this.bj.dataSeries);
            if (this.bj.dataSeries.count > 0) {
                let b = this.bj.dataSeries._inner[0].getMemberPathFor(17);
                a.hz(b);
            }
        }
        uy(a, b) {
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.c7;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if (d && !a.eq && !this.ajd(a)) {
                a.l1 = "Financial Series";
            }
            super.uy(a, b);
            if ((d || c) && a.fk) {
                a.rx(this.agr != null ? ArrayExtension.getModulus$1(Brush.$, this.agr, b) : null, this.ags != null ? ArrayExtension.getModulus$1(Brush.$, this.ags, b) : null);
            }
            let e = this.ajb(a);
            if (this.ajd(a)) {
                a.u9 = this.agt != null ? ArrayExtension.getModulus$1(Brush.$, this.agt, b) : null;
                a.vp = this.agu != null ? ArrayExtension.getModulus$1(Brush.$, this.agu, b) : null;
                a.jn = this.akn;
            }
            else if (e) {
                a.u9 = this.agp != null ? ArrayExtension.getModulus$1(Brush.$, this.agp, b) : null;
                a.jn = this.akl;
            }
            else if (!a.eq && (d || c)) {
                a.u9 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, b) : null;
                a.vp = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.c7;
            if (f) {
                a.jn = this.akp;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.ajc ? this.ah0 : null;
        }
        uz(a, b) {
            super.uz(a, b);
            if (a == null) {
                return;
            }
        }
        vl(a, b, c) {
            super.vl(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.lj = this.ajn;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.lj = this.ajn;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.lj = this.ajn;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.ma = this.all;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.ma = this.all;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.ma = this.all;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.ahn == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.ao6();
                    }
                    break;
                case "VolumeChart":
                    this.apq(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.aol));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.aoi));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.aoq));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.aol));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.aoi));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.aoq));
                    }
                    this.app();
                    break;
                case "XAxisMode":
                    this.xAxis = this.ag2(this.ahp);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.ag2(this.ahp);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.ag2(this.ahp);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.ag2(this.ahp);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.aep(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.an9();
                    if (this.ahp == 1) {
                        this.apj();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.aig(this.ahr);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.aig(this.ahr);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.aig(this.ahr);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.aop));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.aos));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.aot));
                    }
                    if (this.ahg != null) {
                        this.ahg.ae = this.ahw;
                        this.ahg.ag = this.ahy;
                        this.ahg.u = this.ahd;
                        this.apn(true);
                        let j = this.ahg;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.aop));
                        let k = this.ahg;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.aos));
                        let l = this.ahg;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.aot));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.aow));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.gh) {
                        this.aer(this.xAxis);
                        this.ug();
                    }
                    this.apn(false);
                    this.apo();
                    this.apa();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.aow));
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.ao3((p) => p.zoomMaximumCategoryRange = this.akq);
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.ao3((p) => p.zoomMaximumItemSpan = this.akr);
                    break;
                case "XAxisZoomToCategoryRange":
                    this.ao3((p) => p.zoomToCategoryRange = this.aks);
                    break;
                case "XAxisZoomToCategoryStart":
                    this.ao3((p) => p.zoomToCategoryStart = this.akt);
                    break;
                case "XAxisZoomToItemSpan":
                    this.ao3((p) => p.zoomToItemSpan = this.aku);
                    break;
                case "ChartType":
                    this.ud();
                    break;
                case "VolumeXAxis":
                    this.apg(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.apg(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.apk();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.gh) {
                        this.aet(this.yAxis);
                        this.aet(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.aox));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.ao6();
                    }
                    if (this.gh) {
                        this.aet(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.aox));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.ahr == 1) {
                                y = this.aig(this.ahr);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.gh) {
                                this.aet(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.wz = this.he && this.hd;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.wz = this.he && this.hd;
                    }
                    if (this.ajh) {
                        this.aph(this.dataChart);
                    }
                    else {
                        this.volumeChart.x6 = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.aom));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.aom));
                    }
                    this.apk();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.aon));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.aon));
                    }
                    this.apm();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.ae0((ad) => ad.lb = this.ajl);
                    break;
                case "YAxisMinimumValue":
                    this.ae1((ad) => ad.l6 = this.akz, false);
                    break;
                case "YAxisMaximumValue":
                    this.ae1((ad) => ad.l5 = this.aky, false);
                    break;
                case "YAxisInterval":
                    this.ae1((ad) => ad.l2 = this.akx, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.app();
                    break;
                case "ZoomSliderChart":
                    if (!this.ajo) {
                        return;
                    }
                    this.aps(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aof((ad, ae) => {
                        if (ad.fk) {
                            ad.rx(this.agr != null ? ArrayExtension.getModulus$1(Brush.$, this.agr, ae) : null, this.ags != null ? ArrayExtension.getModulus$1(Brush.$, this.ags, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.aoe((ad, ae) => ad.u9 = this.agt != null ? ArrayExtension.getModulus$1(Brush.$, this.agt, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.aoe((ad, ae) => ad.vp = this.agu != null ? ArrayExtension.getModulus$1(Brush.$, this.agu, ae) : null);
                    break;
                case "OverlayThickness":
                    this.aoe((ad, ae) => ad.jn = this.akn);
                    break;
                case "OverlayMultiplier":
                    this.aoe((ad, ae) => this.aib.setMultiplier(ad, this.akm));
                    break;
                case "VolumeBrushes":
                    this.aog((ad, ae) => ad.u9 = ArrayExtension.getModulus$1(Brush.$, this.agv, ae));
                    break;
                case "VolumeOutlines":
                    this.aog((ad, ae) => ad.vp = ArrayExtension.getModulus$1(Brush.$, this.agw, ae));
                    break;
                case "VolumeThickness":
                    this.aog((ad, ae) => ad.jn = this.akp);
                    break;
                case "IndicatorNegativeBrushes":
                    this.aod((ad, ae) => this.ah6.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.agq, ae)));
                    break;
                case "IndicatorBrushes":
                    this.aod((ad, ae) => ad.u9 = ArrayExtension.getModulus$1(Brush.$, this.agp, ae));
                    break;
                case "IndicatorThickness":
                    this.aod((ad, ae) => ad.jn = this.akl);
                    break;
                case "IndicatorDisplayTypes":
                    this.aod((ad, ae) => this.ah6.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.ah8, ae)));
                    break;
                case "IndicatorPeriod":
                    this.aod((ad, ae) => {
                        if (this.alg == -2147483648) {
                            return;
                        }
                        this.ah6.setPeriodOverride(ad, this.alg);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.aod((ad, ae) => this.ah6.setMultiplier(ad, this.akk));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.aod((ad, ae) => this.ah6.setSmoothingPeriod(ad, this.alj));
                    break;
                case "IndicatorShortPeriod":
                    this.aod((ad, ae) => this.ah6.setShortPeriod(ad, this.alh));
                    break;
                case "IndicatorLongPeriod":
                    this.aod((ad, ae) => this.ah6.setLongPeriod(ad, this.alf));
                    break;
                case "IndicatorSignalPeriod":
                    this.aod((ad, ae) => this.ah6.setSignalPeriod(ad, this.ali));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.aoo));
                    }
                    if (this.ahe != null) {
                        let ae = this.ahe;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.aoo));
                    }
                    this.apa();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.aok));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.aok));
                    }
                    this.apk();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.aof((ah, ai) => ah.u9 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, ai) : null, true);
                    break;
                case "Outlines":
                    this.aof((ah, ai) => ah.vp = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.agf == 0 && this.zoomSliderXAxis != null) {
                        this.aep(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.an9();
                    break;
                case "YAxisLabelVisibility":
                    if (this.agg != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.aep(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jx = this.apv;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.es = this.ak1;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.ajc && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.ah0 : null;
                            }
                        };
                        this.aof(ai, false);
                        this.aoe(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.ao7();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.gh) {
                            this.aet(this.zoomSliderAxis);
                        }
                        this.aep(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.aev((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.aj2;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.aev((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.aj1;
                        }
                    });
                    break;
                case FinancialChart.ang:
                    this.aew((ak) => ak.b1 = this.ajk, a);
                    break;
                case FinancialChart.anr:
                    this.ae0((ak) => ak.b1 = this.ajm);
                    break;
            }
        }
        get_cf() {
            return 1;
        }
        get cf() {
            return this.get_cf();
        }
        get ajn() {
            return this.ai5;
        }
        set ajn(a) {
            let b = this.ajn;
            if (a != b) {
                this.ai5 = a;
                this.vl("YAxisIsLogarithmic", b, this.ajn);
            }
        }
        get all() {
            return this.ald;
        }
        set all(a) {
            let b = this.all;
            if (a != b) {
                this.ald = a;
                this.vl("YAxisLogarithmBase", b, this.all);
            }
        }
        get akx() {
            return this.ake;
        }
        set akx(a) {
            let b = this.akx;
            if (a != b) {
                this.ake = a;
                this.vl("YAxisInterval", b, this.akx);
            }
        }
        get akz() {
            return this.akg;
        }
        set akz(a) {
            let b = this.akz;
            if (a != b) {
                this.akg = a;
                this.vl("YAxisMinimumValue", b, this.akz);
            }
        }
        get aky() {
            return this.akf;
        }
        set aky(a) {
            let b = this.aky;
            if (a != b) {
                this.akf = a;
                this.vl("YAxisMaximumValue", b, this.aky);
            }
        }
        get ak0() {
            return this.akh;
        }
        set ak0(a) {
            let b = this.ak0;
            if (a != b) {
                this.akh = a;
                this.vl("YAxisMinorInterval", b, this.ak0);
            }
        }
        get akw() {
            return this.yAxis.ly;
        }
        get akv() {
            return this.yAxis.lx;
        }
        get ahn() {
            return this.ahl;
        }
        set ahn(a) {
            let b = this.ahn;
            if (a != b) {
                this.ahl = a;
                this.vl("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ahn));
            }
        }
        get ahp() {
            return this.aho;
        }
        set ahp(a) {
            let b = this.ahp;
            if (a != b) {
                this.aho = a;
                this.vl("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.ahp));
            }
        }
        get akq() {
            return this.aj9;
        }
        set akq(a) {
            let b = this.akq;
            if (a != b) {
                this.aj9 = a;
                this.vl("XAxisZoomMaximumCategoryRange", b, this.akq);
            }
        }
        get akt() {
            return this.akc;
        }
        set akt(a) {
            let b = this.akt;
            if (a != b) {
                this.akc = a;
                this.vl("XAxisZoomToCategoryStart", b, this.akt);
            }
        }
        get akr() {
            return this.aka;
        }
        set akr(a) {
            let b = this.akr;
            if (a != b) {
                this.aka = a;
                this.vl("XAxisZoomMaximumItemSpan", b, this.akr);
            }
        }
        get aks() {
            return this.akb;
        }
        set aks(a) {
            let b = this.aks;
            if (a != b) {
                this.akb = a;
                this.vl("XAxisZoomToCategoryRange", b, this.aks);
            }
        }
        get aku() {
            return this.akd;
        }
        set aku(a) {
            let b = this.aku;
            if (a != b) {
                this.akd = a;
                this.vl("XAxisZoomToItemSpan", b, this.aku);
            }
        }
        get ahr() {
            return this.ahq;
        }
        set ahr(a) {
            let b = this.ahr;
            if (a != b) {
                this.ahq = a;
                this.vl("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.ahr));
            }
        }
        get ajg() {
            return this.ai0;
        }
        set ajg(a) {
            let b = this.ajg;
            if (a != b) {
                this.ai0 = a;
                this.vl("IsToolbarVisible", b, this.ajg);
            }
        }
        get ahi() {
            return this.ahh;
        }
        set ahi(a) {
            let b = this.ahi;
            if (a != b) {
                this.ahh = a;
                this.vl("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.ahi));
            }
        }
        get_afa() {
            return super.get_afa();
        }
        set_afa(a) {
            super.set_afa(a);
        }
        get ajh() {
            return this.ai1;
        }
        set ajh(a) {
            let b = this.ajh;
            if (a != b) {
                this.ai1 = a;
                this.vl("IsWindowSyncedToVisibleRange", b, this.ajh);
            }
        }
        get ahw() {
            return this.ahv;
        }
        set ahw(a) {
            let b = this.ahw;
            if (a != b) {
                this.ahv = a;
                this.vl("IndicatorTypes", b, this.ahw);
            }
        }
        get ahy() {
            return this.ahx;
        }
        set ahy(a) {
            let b = this.ahy;
            if (a != b) {
                this.ahx = a;
                this.vl("OverlayTypes", b, this.ahy);
            }
        }
        get indicatorCharts() {
            return this.ajs;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.ajs = a;
                this.vl("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get ajl() {
            return this.ai3;
        }
        set ajl(a) {
            let b = this.ajl;
            if (a != b) {
                this.ai3 = a;
                this.vl("YAxisAbbreviateLargeNumbers", b, this.ajl);
            }
        }
        get_j6() {
            return super.get_j6();
        }
        set_j6(a) {
            super.set_j6(a);
        }
        get ajk() {
            return this.ai2;
        }
        set ajk(a) {
            let b = this.ajk;
            if (a != b) {
                this.ai2 = a;
                this.vl(FinancialChart.ang, b, this.ajk);
            }
        }
        get ajm() {
            return this.ai4;
        }
        set ajm(a) {
            let b = this.ajm;
            if (a != b) {
                this.ai4 = a;
                this.vl(FinancialChart.anr, b, this.ajm);
            }
        }
        get zoomSliderChart() {
            return this.aiu;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.aiu = a;
                this.vl("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.aif;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.aif = a;
                this.vl("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.ag0;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.ag0 = a;
                this.vl("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get ahu() {
            return this.ahs;
        }
        set ahu(a) {
            let b = this.ahu;
            if (a != b) {
                this.ahs = a;
                this.vl("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.ahu));
            }
        }
        get agr() {
            return this.agj;
        }
        set agr(a) {
            let b = this.agr;
            if (a != b) {
                this.agj = a;
                this.vl("NegativeBrushes", b, this.agr);
            }
        }
        get ags() {
            return this.agk;
        }
        set ags(a) {
            let b = this.ags;
            if (a != b) {
                this.agk = a;
                this.vl("NegativeOutlines", b, this.ags);
            }
        }
        get agt() {
            return this.agl;
        }
        set agt(a) {
            let b = this.agt;
            if (a != b) {
                this.agl = a;
                this.vl("OverlayBrushes", b, this.agt);
            }
        }
        get agu() {
            return this.agm;
        }
        set agu(a) {
            let b = this.agu;
            if (a != b) {
                this.agm = a;
                this.vl("OverlayOutlines", b, this.agu);
            }
        }
        get agw() {
            return this.ago;
        }
        set agw(a) {
            let b = this.agw;
            if (a != b) {
                this.ago = a;
                this.vl("VolumeOutlines", b, this.agw);
            }
        }
        get agv() {
            return this.agn;
        }
        set agv(a) {
            let b = this.agv;
            if (a != b) {
                this.agn = a;
                this.vl("VolumeBrushes", b, this.agv);
            }
        }
        get agq() {
            return this.agi;
        }
        set agq(a) {
            let b = this.agq;
            if (a != b) {
                this.agi = a;
                this.vl("IndicatorNegativeBrushes", b, this.agq);
            }
        }
        get agp() {
            return this.agh;
        }
        set agp(a) {
            let b = this.agp;
            if (a != b) {
                this.agh = a;
                this.vl("IndicatorBrushes", b, this.agp);
            }
        }
        get akp() {
            return this.aj8;
        }
        set akp(a) {
            let b = this.akp;
            if (a != b) {
                this.aj8 = a;
                this.vl("VolumeThickness", b, this.akp);
            }
        }
        get akn() {
            return this.aj6;
        }
        set akn(a) {
            let b = this.akn;
            if (a != b) {
                this.aj6 = a;
                this.vl("OverlayThickness", b, this.akn);
            }
        }
        get akm() {
            return this.aj5;
        }
        set akm(a) {
            let b = this.akm;
            if (a != b) {
                this.aj5 = a;
                this.vl("OverlayMultiplier", b, this.akm);
            }
        }
        get akl() {
            return this.aj4;
        }
        set akl(a) {
            let b = this.akl;
            if (a != b) {
                this.aj4 = a;
                this.vl("IndicatorThickness", b, this.akl);
            }
        }
        get ah8() {
            return this.ah7;
        }
        set ah8(a) {
            let b = this.ah8;
            if (a != b) {
                this.ah7 = a;
                this.vl("IndicatorDisplayTypes", b, this.ah8);
            }
        }
        get alg() {
            return this.ak9;
        }
        set alg(a) {
            let b = this.alg;
            if (a != b) {
                this.ak9 = a;
                this.vl("IndicatorPeriod", b, this.alg);
            }
        }
        get akk() {
            return this.aj3;
        }
        set akk(a) {
            let b = this.akk;
            if (a != b) {
                this.aj3 = a;
                this.vl("IndicatorMultiplier", b, this.akk);
            }
        }
        get alj() {
            return this.alc;
        }
        set alj(a) {
            let b = this.alj;
            if (a != b) {
                this.alc = a;
                this.vl("IndicatorSmoothingPeriod", b, this.alj);
            }
        }
        get alh() {
            return this.ala;
        }
        set alh(a) {
            let b = this.alh;
            if (a != b) {
                this.ala = a;
                this.vl("IndicatorShortPeriod", b, this.alh);
            }
        }
        get alf() {
            return this.ak8;
        }
        set alf(a) {
            let b = this.alf;
            if (a != b) {
                this.ak8 = a;
                this.vl("IndicatorLongPeriod", b, this.alf);
            }
        }
        get ali() {
            return this.alb;
        }
        set ali(a) {
            let b = this.ali;
            if (a != b) {
                this.alb = a;
                this.vl("IndicatorSignalPeriod", b, this.ali);
            }
        }
        get ahe() {
            return this.ahc;
        }
        set ahe(a) {
            let b = this.ahe;
            if (a != b) {
                this.ahc = a;
                this.vl("RangeSelectorOptions", b, this.ahe);
            }
        }
        get customIndicatorNames() {
            return this.ag8;
        }
        set customIndicatorNames(a) {
            let b = this.ag8;
            if (a != b) {
                this.ag8 = a;
                this.vl("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_he() {
            return super.get_he();
        }
        set_he(a) {
            super.set_he(a);
        }
        get apv() {
            return this.apu;
        }
        set apv(a) {
            let b = this.apv;
            if (a != b) {
                this.apu = a;
                this.vl("ZoomSliderXAxisMajorStroke", b, this.apv);
            }
        }
        get ak1() {
            return this.aki;
        }
        set ak1(a) {
            let b = this.ak1;
            if (a != b) {
                this.aki = a;
                this.vl("ZoomSliderXAxisMajorStrokeThickness", b, this.ak1);
            }
        }
        get ajc() {
            return this.aiz;
        }
        set ajc(a) {
            let b = this.ajc;
            if (a != b) {
                this.aiz = a;
                this.vl("IsLegendVisible", b, this.ajc);
            }
        }
        get ah0() {
            return this.ahz;
        }
        set ah0(a) {
            let b = this.ah0;
            if (a != b) {
                this.ahz = a;
                this.vl("FinancialChartLegend", b, this.ah0);
            }
        }
        get xAxis() {
            return this.agz;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.agz = a;
                this.vl("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.aie;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.aie = a;
                this.vl("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.aid;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.aid = a;
                this.vl("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.agy;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.agy = a;
                this.vl("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.aic;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.aic = a;
                this.vl("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.agx;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.agx = a;
                this.vl("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get aju() {
            return this.ajr;
        }
        set aju(a) {
            let b = this.aju;
            if (a != b) {
                this.ajr = a;
                this.vl("IndicatorAxes", b, this.aju);
            }
        }
        get ajw() {
            return this.ajt;
        }
        set ajw(a) {
            let b = this.ajw;
            if (a != b) {
                this.ajt = a;
                this.vl("IndicatorXAxes", b, this.ajw);
            }
        }
        get aj2() {
            return this.aj0;
        }
        set aj2(a) {
            let b = this.aj2;
            if (+a != +b) {
                this.aj0 = a;
                this.vl("XAxisMinimumValue", b, this.aj2);
            }
        }
        get aj1() {
            return this.ajz;
        }
        set aj1(a) {
            let b = this.aj1;
            if (+a != +b) {
                this.ajz = a;
                this.vl("XAxisMaximumValue", b, this.aj1);
            }
        }
        get xAxisBreaks() {
            return this.ajx;
        }
    }
    FinancialChart.$t = markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.alk = 0;
    FinancialChart.ang = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.anr = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.alw : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.alt : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.alu : null);
        }
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            let a = false;
            if (this.q != null) {
                a = this.q.p();
            }
            if (this.p != null) {
                this.p.i(this.o);
                if (a) {
                    if (this.q.notifyChanged != null) {
                        this.q.notifyChanged();
                    }
                }
            }
        }
    }
    FinancialChartRangeSelector.$t = markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
