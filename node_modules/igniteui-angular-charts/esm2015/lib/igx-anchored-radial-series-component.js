import { Component, Input } from '@angular/core';
import { TrendLineType_$type } from "igniteui-angular-core";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { ensureBool, ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
export let IgxAnchoredRadialSeriesComponent = /*@__PURE__*/ (() => {
    class IgxAnchoredRadialSeriesComponent extends IgxRadialBaseComponent {
        constructor() {
            super();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets whether to normalize the values against the category values if using a proportional category axis.
        */
        get useCategoryNormalizedValues() {
            return this.i.ab6;
        }
        set useCategoryNormalizedValues(v) {
            this.i.ab6 = ensureBool(v);
        }
        /**
         * Gets or sets the item path that provides the values for the current series.
        */
        get valueMemberPath() {
            return this.i.acm;
        }
        set valueMemberPath(v) {
            this.i.acm = v;
        }
        /**
         * Gets or sets the value mapping property for the current series object.
        */
        get highlightedValueMemberPath() {
            return this.i.ace;
        }
        set highlightedValueMemberPath(v) {
            this.i.ace = v;
        }
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get valueMemberAsLegendLabel() {
            return this.i.aci;
        }
        set valueMemberAsLegendLabel(v) {
            this.i.aci = v;
        }
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get valueMemberAsLegendUnit() {
            return this.i.ack;
        }
        set valueMemberAsLegendUnit(v) {
            this.i.ack = v;
        }
        /**
         * Gets or sets the trend type for the current series object.
        */
        get trendLineType() {
            return this.i.abv;
        }
        set trendLineType(v) {
            this.i.abv = ensureEnum(TrendLineType_$type, v);
        }
        /**
         * Gets or sets the brush that specifies how to the current series
         * object's Trend line is drawn.
        */
        get trendLineBrush() {
            return brushToString(this.i.ac9);
        }
        set trendLineBrush(v) {
            this.i.ac9 = stringToBrush(v);
        }
        /**
         * Gets the effective TrendLineBrush for this series.
        */
        get actualTrendLineBrush() {
            return brushToString(this.i.ac8);
        }
        set actualTrendLineBrush(v) {
            this.i.ac8 = stringToBrush(v);
        }
        /**
         * Gets or sets the thickness of the current series object's trend line.
        */
        get trendLineThickness() {
            return this.i.acb;
        }
        set trendLineThickness(v) {
            this.i.acb = +v;
        }
        /**
         * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
         * is used to draw the trend line for the current series object.
        */
        get trendLineDashArray() {
            return fromDoubleCollection(this.i.ada);
        }
        set trendLineDashArray(v) {
            this.i.ada = toDoubleCollection(v);
        }
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for bollinger band periods is 20.
        */
        get trendLinePeriod() {
            return this.i.acc;
        }
        set trendLinePeriod(v) {
            this.i.acc = +v;
        }
        /**
         * Sets or Gets the Z index of the trendline.
        */
        get trendLineZIndex() {
            return this.i.acd;
        }
        set trendLineZIndex(v) {
            this.i.acd = +v;
        }
        get hasValueAxis() {
            return this.i.ei;
        }
        get isValueAxisInverted() {
            return this.i.f3;
        }
        getItemValue(item, memberPathName) {
            let iv = this.i.ko(item, memberPathName);
            return (iv);
        }
        /**
         * Gets the value of a requested member path from the series.
        
        * @param memberPathName  * The property name of a valid member path for the series
        */
        getMemberPathValue(memberPathName) {
            let iv = this.i.mb(memberPathName);
            return (iv);
        }
        getPreviousOrExactIndex(world, skipUnknowns) {
            let iv = this.i.j8(toPoint(world), skipUnknowns);
            return (iv);
        }
        getNextOrExactIndex(world, skipUnknowns) {
            let iv = this.i.j6(toPoint(world), skipUnknowns);
            return (iv);
        }
        getSeriesValue(world, useInterpolation, skipUnknowns) {
            let iv = this.i.i3(toPoint(world), useInterpolation, skipUnknowns);
            return (iv);
        }
        getSeriesValuePosition(world, useInterpolation, skipUnknowns) {
            let iv = this.i.v6(toPoint(world), useInterpolation, skipUnknowns);
            return fromPoint(iv);
        }
        /**
         * Returns the offset value for this series if grouped on a category axis.
        
        */
        getOffsetValue() {
            let iv = this.i.getOffsetValue();
            return (iv);
        }
        /**
         * Returns the width of the category grouping this series is in.
        
        */
        getCategoryWidth() {
            let iv = this.i.getCategoryWidth();
            return (iv);
        }
        /**
         * Scrolls the specified item into the view.
        
        * @param item  * The item to scroll into view.
        */
        scrollIntoView(item) {
            let iv = this.i.gb(item);
            return (iv);
        }
    }
    IgxAnchoredRadialSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredRadialSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxAnchoredRadialSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxAnchoredRadialSeriesComponent, selector: "ng-component", inputs: { useCategoryNormalizedValues: "useCategoryNormalizedValues", valueMemberPath: "valueMemberPath", highlightedValueMemberPath: "highlightedValueMemberPath", valueMemberAsLegendLabel: "valueMemberAsLegendLabel", valueMemberAsLegendUnit: "valueMemberAsLegendUnit", trendLineType: "trendLineType", trendLineBrush: "trendLineBrush", actualTrendLineBrush: "actualTrendLineBrush", trendLineThickness: "trendLineThickness", trendLineDashArray: "trendLineDashArray", trendLinePeriod: "trendLinePeriod", trendLineZIndex: "trendLineZIndex" }, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
    return IgxAnchoredRadialSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredRadialSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { useCategoryNormalizedValues: [{
                type: Input
            }], valueMemberPath: [{
                type: Input
            }], highlightedValueMemberPath: [{
                type: Input
            }], valueMemberAsLegendLabel: [{
                type: Input
            }], valueMemberAsLegendUnit: [{
                type: Input
            }], trendLineType: [{
                type: Input
            }], trendLineBrush: [{
                type: Input
            }], actualTrendLineBrush: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], trendLineDashArray: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], trendLineZIndex: [{
                type: Input
            }] } });
