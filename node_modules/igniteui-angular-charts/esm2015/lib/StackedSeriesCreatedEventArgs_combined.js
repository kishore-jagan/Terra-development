/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, Point_$type, runOn, typeCast, IList$1_$type, Number_$type, markDep, IEnumerable_$type, Array_$type, delegateCombine, fromEnum, Boolean_$type, enumGetBox, fromEn, String_$type, getInstanceType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, Delegate_$type, toNullable, TypeRegistrar } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { DataTemplate } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { PenLineCap_$type } from "igniteui-angular-core";
import { Style } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { Series } from "./Series";
import { List$1 } from "igniteui-angular-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-angular-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { ObservableCollection$1 } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { isNaN_, isInfinity, truncate } from "igniteui-angular-core";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { Path } from "igniteui-angular-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FrameworkElement } from "igniteui-angular-core";
import { XamDataChart } from "./XamDataChart";
import { DependencyProperty } from "igniteui-angular-core";
import { DependencyObject } from "igniteui-angular-core";
import { NumericYAxis } from "./NumericYAxis";
import { Defaults } from "./Defaults";
import { Pool$1 } from "igniteui-angular-core";
import { Rectangle } from "igniteui-angular-core";
import { DataContext } from "igniteui-angular-core";
import { Dictionary$2 } from "igniteui-angular-core";
import { IScaler_$type } from "./IScaler";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-angular-core";
import { dateMinValue, dateMaxValue } from "igniteui-angular-core";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { IStacked100Series_$type } from "./IStacked100Series";
import { NotImplementedException } from "igniteui-angular-core";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-angular-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { CategoryXAxis } from "./CategoryXAxis";
import { IBarSeries_$type } from "./IBarSeries";
import { Color } from "igniteui-angular-core";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { LegendItemBadgeMode_$type } from "igniteui-angular-core";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { SeriesHighlightedValuesDisplayMode_$type } from "./SeriesHighlightedValuesDisplayMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { PropertyUpdatedEventArgs } from "igniteui-angular-core";
import { DataLegendSeriesValueInfo } from "igniteui-angular-core";
import { DataLegendSeriesContext } from "igniteui-angular-core";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { stringIsNullOrEmpty } from "igniteui-angular-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-angular-core";
import { Panel } from "igniteui-angular-core";
import { PlatformConstants } from "igniteui-angular-core";
/**
 * @hidden
 */
export let StackedSeriesCreatedEventArgs = /*@__PURE__*/ (() => {
    class StackedSeriesCreatedEventArgs extends EventArgs {
        constructor(a) {
            super();
            this.c = null;
            this.c = a;
        }
        get brush() {
            return this.c.kz;
        }
        set brush(a) {
            this.c.kz = a;
        }
        get legendItemTemplate() {
            return this.c.hr;
        }
        set legendItemTemplate(a) {
            this.c.hr = a;
        }
        get legendItemBadgeTemplate() {
            return this.c.hq;
        }
        set legendItemBadgeTemplate(a) {
            this.c.hq = a;
        }
        get legendItemVisibility() {
            return this.c.lu;
        }
        set legendItemVisibility(a) {
            this.c.lu = a;
        }
        get outline() {
            return this.c.k3;
        }
        set outline(a) {
            this.c.k3 = a;
        }
        get dashArray() {
            return this.c.k8;
        }
        set dashArray(a) {
            this.c.k8 = a;
        }
        get dashCap() {
            return this.c.lb;
        }
        set dashCap(a) {
            this.c.lb = a;
        }
        get index() {
            return this.c.cc;
        }
        get thickness() {
            return this.c.b4;
        }
        set thickness(a) {
            this.c.b4 = a;
        }
        get title() {
            return this.c.cj;
        }
        set title(a) {
            this.c.cj = a;
        }
        get transitionDuration() {
            return this.c.cd;
        }
        set transitionDuration(a) {
            this.c.cd = a;
        }
        get transitionEasingFunction() {
            return this.c.ai;
        }
        set transitionEasingFunction(a) {
            this.c.ai = a;
        }
        get markerBrush() {
            return this.c.k0;
        }
        set markerBrush(a) {
            this.c.k0 = a;
        }
        get markerOutline() {
            return this.c.k1;
        }
        set markerOutline(a) {
            this.c.k1 = a;
        }
        get markerStyle() {
            return this.c.lr;
        }
        set markerStyle(a) {
            this.c.lr = a;
        }
        get markerTemplate() {
            return this.c.hs;
        }
        set markerTemplate(a) {
            this.c.hs = a;
        }
        get markerType() {
            return this.c.x;
        }
        set markerType(a) {
            this.c.x = a;
        }
        get markerThickness() {
            return this.c.bx;
        }
        set markerThickness(a) {
            this.c.bx = a;
        }
        get lineCap() {
            return this.c.la;
        }
        set lineCap(a) {
            this.c.lc = a;
        }
    }
    StackedSeriesCreatedEventArgs.$t = markType(StackedSeriesCreatedEventArgs, 'StackedSeriesCreatedEventArgs', EventArgs.$);
    return StackedSeriesCreatedEventArgs;
})();
/**
 * @hidden
 */
export let FragmentBase = /*@__PURE__*/ (() => {
    class FragmentBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.___neverPassByValue = true;
            this.ace = null;
            this._logicalSeriesLink = null;
            this.acg = null;
            this.ace = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.acg;
        }
        set parentSeries(a) {
            this.acg = a;
        }
        get_e3() {
            return false;
        }
        get_e9() {
            return true;
        }
        na() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.e0;
            }
            return null;
        }
        j0() {
            let a = this.parentSeries;
            if (a.index == -1 || a.aak == null || a.aak.f.indexOf(this) == -1) {
                return -1;
            }
            return a.aak.f.indexOf(this);
        }
        p5(a) {
            super.p5(a);
            a.parentSeries = this.parentSeries;
            a.logicalSeriesLink = this.logicalSeriesLink;
        }
        j5() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.aao) {
                return -1 + a.index + a.aaf.count - a.aak.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        bn() {
            return this.parentSeries;
        }
        yk() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchXAxis();
        }
        acd() {
            if (this.parentSeries == null) {
                return this.yq;
            }
            return this.parentSeries.yq;
        }
        y0() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        acj(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = c[1];
            let k = new Rect(0, i - 5, j - 5, 11, 11);
            if (!isNaN_(i) && !isNaN_(j) && !isInfinity(i) && !isInfinity(j) && d.tryAdd(k)) {
                b.n.add({ $type: Point_$type, x: i, y: j });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        z1(a, b) {
            a.v();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a8.count == 0 || this.logicalSeriesLink.a7.count == 0) {
                return;
            }
            this.yr(b).d(a, b);
        }
        v6(a, b, c) {
            return this.v8(a, b, c, this.acd().r(this.yk(), this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct)), this.y0(), this.yk(), runOn(this, this.ack), (d, e) => this.j9(d, e, this.yk(), runOn(this, this.zk), this.valueColumn != null ? new FragmentBaseValueList(this) : null), (d, e) => this.j7(d, e, this.yk(), runOn(this, this.zk), this.valueColumn != null ? new FragmentBaseValueList(this) : null));
        }
        ai() {
            return [this.yk(), this.y0()];
        }
        ack(a, b, c) {
            if (this.c9 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.ct);
            let e = new ScalerParams(0, this.c9.vl, this.ct.bx, this.yk().ch, d);
            let f = this.yq.r(this.yk(), this.c9.vl, this.ct.bx, d);
            return this.i5(this.valueColumn != null ? new FragmentBaseValueList(this) : null, a, this.yk(), e, f, runOn(this, this.zk), b, c);
        }
        acm(a, b, c) {
            let d = this.aaq(c);
            let e = d;
            let f = this.logicalSeriesLink.az;
            let g = f ? this.parentSeries.aak.e : this.parentSeries.aak.d;
            let h = this;
            if (this.bl != null) {
                h = this.bl;
            }
            let i = g.indexOf(h);
            if (a.count == 0) {
                return;
            }
            if (i == -1) {
                return;
            }
            let j = false;
            for (let k = i; k >= 0; k--) {
                if (j) {
                    break;
                }
                if (k == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let l = typeCast(FragmentBase.$, g._inner[k - 1]);
                if (l != null && l.ace != null && l.ace.o.count > 0 && this.ct != null && l.hc(this.ct.bx, this.ct.by, this.ct)) {
                    j = true;
                    for (let m = l.ace.o.count - 1; m >= 0; m--) {
                        a.add(l.ace.o._inner[m]);
                    }
                }
            }
        }
        hc(a, b, c) {
            let d = super.hc(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.dl == null || e.bi == null || f.bi == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        aaq(a) {
            let b = 0;
            let c = a.by;
            let d = a.bx;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.y0().ch, e);
            f.b = this.iw();
            if (!c.isEmpty && !d.isEmpty && this.y0() != null) {
                b = this.y0().ek(0, f);
            }
            return b;
        }
        ax(a) {
            return null;
        }
        acl() {
            if (this.parentSeries == null) {
                return -1;
            }
            let a = this.parentSeries.index;
            let b = 0;
            let c = 1;
            if (this.parentSeries.aao) {
                b = this.parentSeries.aaf.count - 1;
                c = -1;
            }
            for (let d = b; this.parentSeries.aao ? d >= 0 : d < this.parentSeries.aaf.count; d += c) {
                let e = this.parentSeries.aaf._inner[d];
                if (e.visualSeriesLink == this) {
                    return a;
                }
                if (this.parentSeries.a4 == null || e.lt != 0 || e.ls != 0) {
                    continue;
                }
                a++;
            }
            return -1;
        }
        acn(a) {
            if (a == null) {
            }
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            if (this.parentSeries == null) {
                return;
            }
            let e = typeCast(NumericAxisBase.$, this.parentSeries.fetchYAxis());
            if (e == null) {
                return;
            }
            switch (b) {
                case "ValueColumn":
                    if (this.aae.c8) {
                        this.aae.c7.g$i();
                    }
                    if (e != null && !e.c1()) {
                        this.parentSeries.aae().cw.g(this.ib);
                        this.rn(this.ge && this.d5);
                    }
                    break;
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.ku = this.u3;
                    }
                    break;
            }
        }
        rp(a, b) {
            super.rp(a, b);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    FragmentBase.$t = markType(FragmentBase, 'FragmentBase', HorizontalAnchoredCategorySeries.$);
    return FragmentBase;
})();
/**
 * @hidden
 */
export let AreaFragment = /*@__PURE__*/ (() => {
    class AreaFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = AreaFragment.$;
        }
        bi() {
            return new AreaFragment();
        }
        cq() {
            return new AreaFragmentView(this);
        }
        qx(a) {
            super.qx(a);
            this.aco = a;
        }
        get_et() {
            return true;
        }
        get_es() {
            return true;
        }
        yv() {
            return 1;
        }
        acq(a, b) {
            let c = this.aco.dl.an;
            if (this.gw(a, c)) {
                return true;
            }
            let d = this.aco.dm.an;
            if (this.gw(a, d)) {
                return true;
            }
            return false;
        }
        gu(a, b) {
            if (this.acp(a, b)) {
                return true;
            }
            if (this.acq(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        acp(a, b) {
            let c = this.aco.dn.an;
            if (this.gv(a, b, c)) {
                return true;
            }
            let d = this.aco.dp.an;
            if (this.gv(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.dg();
        }
        z4(a, b) {
            super.z4(a, b);
            this.ace.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(AreaFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(c);
            this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
            let f = false;
            let g = this.yt.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.by, b.bx, this.abu.ch, e);
                this.z0(d, -1, this.valueColumn.count, this.abu, h, b.q, -1);
            }
            this.yt.ad(c.dn, true, false, true, true);
            this.yt.ad(c.dp, true, false, true, true);
            this.yt.ad(c.dl, false, true, false, false);
            this.yt.ad(c.dm, false, true, false, false);
            let i = c.cw.d;
            this.ace.i(c.dl, c.dn, c.dm, c.dp, a.f.count, a.f, true, i, this.ib, (j, k, l, m, n) => this.acm(j, a.f, b), 0);
            c.dl._opacity = this.yt.j * this.h7;
            c.dm._opacity = 0.5 * this.yt.j * this.h7;
        }
        r7() {
            let a = (typeCast(XamDataChart.$, this.c9));
            if (a != null) {
                this.h7 = isNaN_(this.ii) ? this.parentSeries.h7 : this.ii;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    AreaFragment.$t = markType(AreaFragment, 'AreaFragment', FragmentBase.$);
    return AreaFragment;
})();
/**
 * @hidden
 */
export let ColumnFragment = /*@__PURE__*/ (() => {
    class ColumnFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = ColumnFragment.$;
        }
        bi() {
            return new ColumnFragment();
        }
        get_ex() {
            return true;
        }
        get_fj() {
            return true;
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return super.ji();
            }
            return Defaults.h;
        }
        yv() {
            return 1;
        }
        cq() {
            return new ColumnFragmentView(this);
        }
        qx(a) {
            super.qx(a);
            this.acp = a;
        }
        get fragmentXAxis() {
            return this.parentSeries != null ? typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis()) : null;
        }
        get fragmentYAxis() {
            return this.parentSeries != null ? typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis()) : null;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        yk() {
            return this.fragmentXAxis;
        }
        y0() {
            return this.fragmentYAxis;
        }
        get_eb() {
            return true;
        }
        fetchXAxis() {
            return null;
        }
        fetchYAxis() {
            return null;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            if (a && c.dg != null) {
                this.yl.n.clear();
                c.dg.count = 0;
            }
        }
        ax(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        hc(a, b, c) {
            if (this.parentSeries == null) {
                return false;
            }
            return this.parentSeries.aap(this, a, b, this.acr(c));
        }
        g9() {
            return true;
        }
        zm(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.zm(this.parentSeries.ct);
            }
            return super.zm(a);
        }
        zn(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.zn(this.parentSeries.ct);
            }
            return super.zm(a);
        }
        zo(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.zo(this.parentSeries.ct);
            }
            return super.zo(a);
        }
        wh(a) {
            if (this.yk() == null || this.fragmentYAxis == null) {
                return Rect.empty;
            }
            let b = this.v1(a);
            let c = this.ct.by;
            let d = this.ct.bx;
            let e = this.getEffectiveViewport1(this.ct);
            let f = new ScalerParams(0, c, d, this.fragmentYAxis.ch, e);
            let g = this.am(this.yk(), this.yl.f, this.zm(this.ct), this.zn(this.ct), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.yk().k5(c, d, e);
            if (j < k) {
                let m = h[0] - 0.5 * l;
                let n = h[1];
                let o = h[2];
                return new Rect(0, m, Math.min(n, o), l, Math.max(n, o) - Math.min(n, o));
            }
            else {
                let p = i[0] - 0.5 * l;
                let q = i[1];
                let r = i[2];
                return new Rect(0, p, Math.min(q, r), l, Math.max(q, r) - Math.min(q, r));
            }
        }
        gu(a, b) {
            if (this.gx(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        gx(a, b) {
            let c = this.wi(a);
            if (c.isEmpty) {
                return false;
            }
            let d = this.acy(c, this.is(b));
            return d.containsPoint(a);
        }
        acy(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - ((a.width / 2) + b);
            let f = d - (a.height / 2);
            let g = a.height;
            let h = a.width + b * 2;
            return new Rect(0, e, f, h, g);
        }
        kv(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = c != null ? typeCast(DataContext.$, c.dataContext) : null;
            let e = d != null ? d.item : null;
            if (e == null) {
                let f = this.ct.bx;
                let g = this.c9 != null ? this.c9.vl : Rect.empty;
                let h = { $type: Point_$type, x: g.left + g.width * (b.x - f.left) / f.width, y: g.top + g.height * (b.y - f.top) / f.height };
                e = this.kl(h);
            }
            return e;
        }
        kl(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.yk()) !== null) {
                b = this.j3(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.j1(a);
            }
            return b >= 0 && this.dl != null && b < this.dl.count ? this.dl.item(b) : null;
        }
        j3(a) {
            let b = this.ct.by;
            let c = this.ct.bx;
            let d = this.getEffectiveViewport1(this.ct);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = this.yk();
            let f = new ScalerParams(0, b, c, e.ch, d);
            let g = typeCast(ISortingAxis_$type, this.fragmentXAxis);
            let h = this.wd(this.ct);
            let i = e.en(h.left, f);
            let j = e.en(h.right, f);
            let k = (a.x - b.left) / b.width;
            let l = i + ((j - i) * k);
            if (truncate(l) <= dateMinValue().getTime() || truncate(l) >= dateMaxValue().getTime()) {
                return -1;
            }
            let m = g.i$f(l);
            return m;
        }
        j1(a) {
            if (this.parentSeries == null) {
                return -1;
            }
            return this.parentSeries.aav(a);
        }
        acj(a, b, c, d, e, f, g, h) {
            let i = 0;
            let j = c[0];
            let k = e < i ? c[2] : c[1];
            let l = new Rect(0, j - 5, k - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k) && d.tryAdd(l)) {
                b.n.add({ $type: Point_$type, x: j, y: k });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        acr(a) {
            if (a.p) {
                return this.parentSeries.a9.a$j.item(a.ad);
            }
            else if (a == this.cs) {
                return this.parentSeries.cs;
            }
            else {
                return this.parentSeries.yu;
            }
        }
        rm(a, b, c, d, e) {
            this.a9.a$z(this, a, b, d, e);
            let f = this.a9.a$j.item(d);
            let g = f;
            f.a3(c);
            let h = this.acr(f);
            h.cw.g(this.ib);
            if (this.d3(g)) {
                return;
            }
            if (this.aaf == null) {
                this.aaf = new CategoryFrame(3);
            }
            this.aaf.v();
            this.z1(this.aaf, g);
            this.z4(this.aaf, g);
        }
        z1(a, b) {
            a.v();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null || this.logicalSeriesLink.a7.count == 0 || this.logicalSeriesLink.a8.count == 0) {
                return;
            }
            let c;
            if (b.p) {
                c = this.parentSeries.aad;
            }
            else if (b == this.cs) {
                c = this.parentSeries.yo;
            }
            else {
                c = this.parentSeries.yl;
            }
            let d = typeCast(CategorySeriesView.$, this.acr(b));
            a.f.clear();
            if (a.m != null) {
                a.m.clear();
            }
            a.n.clear();
            let e = d.cw.e;
            let f = d.cw.f;
            let g = this.parentSeries.yq.h.yScaler;
            let h = typeCast(ISortingAxis_$type, this.parentSeries.yq.h.scaler);
            let i = typeCast(NumericAxisBase.$, g) !== null && g.lk;
            let j = typeCast(StackedBucketCalculator.$, d.cw);
            let k = d.cw.d;
            let l = 0;
            if (e <= f) {
                for (let m = e; m <= f; m++) {
                    let n = m * k;
                    if (this._visibility != 0) {
                        break;
                    }
                    if (m >= this.valueColumn.count || m >= c.f.count + e) {
                        continue;
                    }
                    let o = this.valueColumn.item(m);
                    let p = !i || (i && o > 0);
                    let q;
                    if (h == null) {
                        q = j.getBucket1(this, m, m, b.by, b.bx, c);
                    }
                    else {
                        q = j.getBucket1(this, m, h.i$b._inner[m], b.by, b.bx, c);
                    }
                    a.f.add(q);
                    if (h != null) {
                        if (a.m == null) {
                            a.m = new List$1(Number_$type, 0);
                        }
                        a.m.add(n);
                    }
                    if (p) {
                        if (this.acj(b, a, q, this.yq.h.provideCollisionDetector(), o, n, l, a.f.count - 1)) {
                            l++;
                        }
                    }
                }
            }
            b.cz.count = l;
        }
        z4(a, b) {
            super.z4(a, b);
            if (this.parentSeries == null) {
                return;
            }
            this.parentSeries.aa4(this, a, b, runOn(this, this.ye));
            CategoryMarkerManager.e(this, a.n, b.cz, this.xa);
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    ColumnFragment.$t = markType(ColumnFragment, 'ColumnFragment', FragmentBase.$);
    ColumnFragment.$$p = markDep(DependencyProperty, PropertyMetadata, ColumnFragment, 'raisePropertyChanged', ['RadiusX:acs:acw', [1, 0], 'RadiusY:act:acx', [1, 0]]);
    return ColumnFragment;
})();
/**
 * @hidden
 */
export let BarFragment = /*@__PURE__*/ (() => {
    class BarFragment extends ColumnFragment {
        constructor() {
            super();
            this.ab = BarFragment.$;
        }
        get_ev() {
            return true;
        }
        get_fj() {
            return true;
        }
        get_ex() {
            return false;
        }
        yv() {
            return 1;
        }
        get barFragmentXAxis() {
            return this.parentSeries != null ? this.parentSeries.xAxis : null;
        }
        get barFragmentYAxis() {
            return this.parentSeries != null ? this.parentSeries.yAxis : null;
        }
        yk() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        get_isVertical() {
            return true;
        }
        ip(a) {
            let b = this.c9 != null ? this.c9.vl : Rect.empty;
            let c = this.ct.bx;
            let d = this.wd(this.ct);
            let e = this.getEffectiveViewport1(this.ct);
            let f = this.yk();
            let g = -1;
            if (f != null && !b.isEmpty && !c.isEmpty) {
                let h = new ScalerParams(0, b, c, f.ch, e);
                let i = f.en(d.top, h);
                let j = f.en(d.bottom, h);
                let k = (a.y - b.top) / b.height;
                let l = i + (k * (j - i));
                if (f.categoryMode != 0) {
                    l -= 0.5;
                }
                g = l;
            }
            return g;
        }
        y0() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.y0();
        }
        acy(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - (a.width / 2);
            let f = d - ((a.height / 2) + b);
            let g = a.height + b * 2;
            let h = a.width;
            return new Rect(0, e, f, h, g);
        }
        wh(a) {
            if (this.yk() == null) {
                return Rect.empty;
            }
            let b = this.v1(a);
            let c = this.ct.by;
            let d = this.ct.bx;
            let e = this.getEffectiveViewport1(this.ct);
            let f = this.yk();
            let g = new ScalerParams(0, c, d, f.ch, e);
            let h = this.am(this.yk(), this.yl.f, this.zm(this.ct), this.zn(this.ct), a, true);
            if (h == null) {
                return Rect.empty;
            }
            let i = h[0];
            let j = h[1];
            let k = Math.abs(b.y - i[0]);
            let l = Math.abs(b.y - j[0]);
            let m = f.k5(c, d, e);
            if (k < l) {
                let n = i[0] - 0.5 * m;
                let o = i[2];
                let p = i[1];
                return new Rect(0, o, n, Math.max(p, o) - Math.min(p, o), m);
            }
            else {
                let q = j[0] - 0.5 * m;
                let r = j[2];
                let s = j[1];
                return new Rect(0, r, q, Math.max(s, r) - Math.min(s, r), m);
            }
        }
        gu(a, b) {
            if (this.gx(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        acj(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = e < 0 ? c[2] : c[1];
            let k = new Rect(0, j - 5, i - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(i) && !isInfinity(j) && !isInfinity(i) && d.tryAdd(k)) {
                b.n.add({ $type: Point_$type, x: j, y: i });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        kl(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.barFragmentYAxis) !== null) {
                b = this.j3(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.j1(a);
            }
            return b >= 0 && this.dl != null && b < this.dl.count ? this.dl.item(b) : null;
        }
        j3(a) {
            let b = this.ct.by;
            let c = this.ct.bx;
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let d = this.getEffectiveViewport1(this.ct);
            let e = new ScalerParams(0, b, c, this.barFragmentYAxis.ch, d);
            let f = typeCast(ISortingAxis_$type, this.barFragmentYAxis);
            let g = this.wd(this.ct);
            let h = this.barFragmentYAxis.en(g.top, e);
            let i = this.barFragmentYAxis.en(g.bottom, e);
            let j = (a.y - b.top) / b.height;
            let k = h + ((i - h) * j);
            if (truncate(k) <= dateMinValue().getTime() || truncate(k) >= dateMaxValue().getTime()) {
                return -1;
            }
            let l = f.i$f(k);
            return l;
        }
        aaq(a) {
            let b = 0;
            let c = a.by;
            let d = a.bx;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.barFragmentXAxis.ch, e);
            if (!c.isEmpty && !d.isEmpty && this.barFragmentXAxis != null) {
                b = this.barFragmentXAxis.ek(0, f);
            }
            return b;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            if (this.parentSeries == null || this.barFragmentXAxis == null) {
                return;
            }
            let e = this.barFragmentXAxis;
            switch (b) {
                case "ValueColumn":
                    if (this.aae.c8) {
                        this.aae.c7.g$i();
                    }
                    if (e != null && !e.c1()) {
                        this.parentSeries.aae().cw.g(this.ib);
                        this.rn(this.ge && this.d5);
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    BarFragment.$t = markType(BarFragment, 'BarFragment', ColumnFragment.$);
    return BarFragment;
})();
/**
 * @hidden
 */
export let AreaFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c5.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c5.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = this.i.c5;
            let g = f.parentSeries;
            let h = typeCast(IStacked100Series_$type, g) !== null;
            let i = this.i.c5.valueColumn;
            let j = g.aab;
            let k = g.aac;
            let l = f.logicalSeriesLink.a8;
            let m = f.logicalSeriesLink.a7;
            for (let n = b; n <= c; ++n) {
                let o = i.item(n);
                if (isNaN_(o) || isInfinity(o)) {
                    o = 0;
                }
                let p = Math.abs(k[n]) + j[n];
                if (h) {
                    if (p == 0) {
                        o = 0;
                    }
                    else if (o < 0) {
                        o = (l._inner[n] + o) / p * 100;
                    }
                    else {
                        o = (m._inner[n] + o) / p * 100;
                    }
                }
                else {
                    o = o < 0 ? l._inner[n] + o : m._inner[n] + o;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(o)) {
                        d = Math.min(d, o);
                        e = Math.max(e, o);
                    }
                }
                else {
                    d = o;
                    e = o;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    AreaFragmentBucketCalculator.$t = markType(AreaFragmentBucketCalculator, 'AreaFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return AreaFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c5.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c5.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(FragmentBase.$, this.i.c5);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c5.valueColumn.item(h);
                let j = Math.abs(g.aac[h]) + g.aab[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a8._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.a7._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a8._inner[h] + i : f.logicalSeriesLink.a7._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    LineFragmentBucketCalculator.$t = markType(LineFragmentBucketCalculator, 'LineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return LineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let SplineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c5.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c5.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(SplineFragmentBase.$, this.i.c5);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c5.valueColumn.item(h);
                let j = Math.abs(g.aac[h]) + g.aab[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a8._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.a7._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a8._inner[h] + i : f.logicalSeriesLink.a7._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    SplineFragmentBucketCalculator.$t = markType(SplineFragmentBucketCalculator, 'SplineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return SplineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = typeCast(StackedSeriesBase.$, this.c.cy);
            let c = Math.min(b.aac != null ? b.aac.length : 0, b.aab != null ? b.aab.length : 0);
            let d = Math.min(a * this.d, c - 1);
            let e = Math.min(d + this.d - 1, c - 1);
            let f = NaN;
            let g = NaN;
            for (let h = d; h <= e; ++h) {
                let i = Math.min(b.aac[h], b.aab[h]);
                let j = Math.max(b.aac[h], b.aab[h]);
                if (!isNaN_(f)) {
                    if (!isNaN_(i)) {
                        f = Math.min(f, i);
                        g = Math.max(g, i);
                    }
                    if (!isNaN_(j)) {
                        f = Math.min(f, j);
                        g = Math.max(g, j);
                    }
                }
                else {
                    f = i;
                    g = j;
                }
            }
            if (!isNaN_(f) && !isNaN_(g)) {
                return [0.5 * (d + e), f, g];
            }
            return [NaN, NaN, NaN];
        }
        getBucket1(a, b, c, d, e, f) {
            return null;
        }
    }
    StackedBucketCalculator.$t = markType(StackedBucketCalculator, 'StackedBucketCalculator', CategoryBucketCalculator.$);
    return StackedBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBarBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBarBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        g(a) {
            let b = this.c.by;
            let c = this.c.bx;
            let d = typeCast(StackedBarSeries.$, this.c.cy);
            let e = this.c.cy.dl;
            if (b.isEmpty || c.isEmpty || d.yAxis == null || e == null || e.count == 0) {
                this.d = 0;
                return;
            }
            let f = d.getEffectiveViewport1(this.c);
            let g = new ScalerParams(0, b, c, d.yAxis.ch, f);
            let h = d.wd(this.c);
            let i = Math.floor(d.yAxis.eo(h.top, g, 0));
            let j = Math.ceil(d.yAxis.eo(h.bottom, g, 0));
            if (!d.yAxis.ch) {
                j = Math.ceil(d.yAxis.eo(h.top, g, 0));
                i = Math.floor(d.yAxis.eo(h.bottom, g, 0));
            }
            let k = Math.floor((j - i + 1) * a / h.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(BarFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedBarSeries.$, this.c.cy);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.aac != null ? i.aac.length : 0, i.aab != null ? i.aab.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a8._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a8._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.a7._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.a7._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.xAxis.ch, p);
            g = [f.f._inner[b - this.e][0], i.xAxis.ek(m, u), i.xAxis.ek(l, u)];
            return g;
        }
    }
    StackedBarBucketCalculator.$t = markType(StackedBarBucketCalculator, 'StackedBarBucketCalculator', StackedBucketCalculator.$);
    return StackedBarBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedColumnBucketCalculator = /*@__PURE__*/ (() => {
    class StackedColumnBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(ColumnFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedColumnSeries.$, this.c.cy);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.aac != null ? i.aac.length : 0, i.aab != null ? i.aab.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a8._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a8._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.a7._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.a7._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.yAxis.ch, p);
            g = [f.f._inner[b - this.e][0], i.yAxis.ek(m, u), i.yAxis.ek(l, u)];
            return g;
        }
    }
    StackedColumnBucketCalculator.$t = markType(StackedColumnBucketCalculator, 'StackedColumnBucketCalculator', StackedBucketCalculator.$);
    return StackedColumnBucketCalculator;
})();
/**
 * @hidden
 */
export let FragmentBaseValueList = /*@__PURE__*/ (() => {
    class FragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.aan;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                if (c.aac == null || c.aab == null || c.aac.length == 0 || c.aab.length == 0) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.aac[a]) + c.aab[a];
                let f = this.a.logicalSeriesLink.a7;
                let g = this.a.logicalSeriesLink.a8;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    FragmentBaseValueList.$t = markType(FragmentBaseValueList, 'FragmentBaseValueList', Base.$, [IList$1_$type.specialize(Number_$type)]);
    return FragmentBaseValueList;
})();
/**
 * @hidden
 */
export let LineFragment = /*@__PURE__*/ (() => {
    class LineFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = LineFragment.$;
        }
        bi() {
            return new LineFragment();
        }
        get_fi() {
            return true;
        }
        zf() {
            return true;
        }
        cq() {
            return new LineFragmentView(this);
        }
        qx(a) {
            super.qx(a);
            this.aco = a;
        }
        acq(a, b) {
            let c = this.aco.dk.an;
            if (this.gw(a, c)) {
                return true;
            }
            return false;
        }
        get_et() {
            return true;
        }
        gu(a, b) {
            if (this.acp(a, b)) {
                return true;
            }
            if (this.acq(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        acp(a, b) {
            let c = this.aco.dl.an;
            if (this.gv(a, b, c)) {
                return true;
            }
            let d = this.aco.dm.an;
            if (this.gv(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.dg();
        }
        z4(a, b) {
            super.z4(a, b);
            let c = (d) => a.f._inner[d][0];
            let d = (e) => a.f._inner[e][1];
            let e = (f) => a.f._inner[f][0];
            let f = (g) => a.f._inner[g][2];
            this.ace.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let g = b.cw.d;
            let h = typeCast(LineFragmentView.$, b);
            let i = this.getEffectiveViewport1(b);
            let j = a.f;
            this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
            let k = false;
            let l = this.yt.b;
            if (l != null) {
                k = true;
            }
            if (k) {
                let m = new ScalerParams(0, b.by, b.bx, this.abu.ch, i);
                this.z0(j, -1, this.valueColumn.count, this.abu, m, b.q, -1);
            }
            this.yt.ad(h.dl, true, false, true, false);
            this.yt.ad(h.dm, true, false, true, false);
            this.yt.ad(h.dk, false, true, false, false);
            h.dk._opacity = 0.75 * this.yt.j;
            this.ace.m(h.dl, h.dk, h.dm, a.f.count, a.f, true, 0, this.aac(a.f, a.f.count - 1, b.bx, b.by), g, this.ib);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    LineFragment.$t = markType(LineFragment, 'LineFragment', FragmentBase.$);
    return LineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBase = /*@__PURE__*/ (() => {
    class SplineFragmentBase extends SplineSeriesBase {
        constructor() {
            super();
            this._logicalSeriesLink = null;
            this.acx = null;
            this.acz = null;
            this.acx = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.acz;
        }
        set parentSeries(a) {
            this.acz = a;
        }
        p5(a) {
            super.p5(a);
            a.parentSeries = this.parentSeries;
            a.logicalSeriesLink = this.logicalSeriesLink;
        }
        get_e3() {
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get_e9() {
            return true;
        }
        na() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.e0;
            }
            return null;
        }
        v6(a, b, c) {
            return this.v8(a, b, c, this.yq.r(this.yk(), this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct)), this.y0(), this.yk(), runOn(this, this.ac1), (d, e) => this.j9(d, e, this.yk(), runOn(this, this.zk), new SplineFragmentBaseValueList(this)), (d, e) => this.j7(d, e, this.yk(), runOn(this, this.zk), new SplineFragmentBaseValueList(this)));
        }
        ai() {
            return [this.yk(), this.y0()];
        }
        ac1(a, b, c) {
            if (this.c9 == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.ct);
            let e = new ScalerParams(0, this.c9.vl, this.ct.bx, this.yk().ch, d);
            let f = this.yq.r(this.yk(), this.c9.vl, this.ct.bx, d);
            return this.i5(new SplineFragmentBaseValueList(this), a, this.yk(), e, f, runOn(this, this.zk), b, c);
        }
        j0() {
            let a = this.parentSeries;
            if (a.index == -1 || a.aak == null || a.aak.f.indexOf(this) == -1) {
                return -1;
            }
            return a.aak.f.indexOf(this);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.aao) {
                return -1 + a.index + a.aaf.count - a.aak.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        j5() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        bn() {
            return this.parentSeries;
        }
        acj(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && !isInfinity(h) && !isInfinity(i) && c.tryAdd(j)) {
                a.n.add({ $type: Point_$type, x: h, y: i });
                let k = f.cz.item(e);
                k.content.item = this.dl.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        hc(a, b, c) {
            let d = super.hc(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.dl == null || e.bi == null || f.bi == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        ax(a) {
            return null;
        }
        ac2(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            if (g == null) {
                return;
            }
            let h = this.getEffectiveViewport1(f);
            let i = new ScalerParams(0, b, c, d.ch, h);
            let j = new ScalerParams(0, b, c, e.ch, h);
            let k = d.en(2, i) - d.en(1, i);
            let l = this.w8();
            let m = 0;
            let n = this.acn(d, b, c, h);
            let o = (p) => Math.abs(this.parentSeries.aac[p]) + this.parentSeries.aab[p];
            let p = (q) => q;
            let q = (r) => {
                let s = g.i$b._inner[r];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(s) < 0 ? (this.logicalSeriesLink.a8._inner[s] + this.valueColumn.item(s)) / o(s) * 100 : (this.logicalSeriesLink.a7._inner[s] + this.valueColumn.item(s)) / o(s) * 100;
                }
                else {
                    return this.valueColumn.item(s) < 0 ? this.logicalSeriesLink.a8._inner[s] + this.valueColumn.item(s) : this.logicalSeriesLink.a7._inner[s] + this.valueColumn.item(s);
                }
            };
            let r = this.yu.cw.f;
            let s = this.yu.cw.e;
            let t = truncate(Math.ceil(c.width / (r - s)));
            let u = new CollisionAvoider();
            let v = this.yu.cw.d;
            if (v <= 0 || (s <= 0 && r <= 0)) {
                this.yu.cz.count = m;
                return;
            }
            let w = 0;
            for (let x = s; x < r + 1; ++x) {
                let y = null;
                let z = x * v;
                if (g != null && g.i$b != null && z >= 0 && z < g.i$b.count) {
                    z = g.i$b._inner[z];
                }
                if (x >= (this.valueColumn.count - 1)) {
                    if (l && this.acj(a, a.f._inner[a.f.count - 1], u, Math.min(z, this.dl.count - 1), m, f, w - 1)) {
                        ++m;
                    }
                    break;
                }
                let aa = p(x);
                let ab = q(x);
                let ac = p(x + 1);
                let ad = q(x + 1);
                let ae = ac - aa;
                let af = this.acf[x];
                let ag = this.acf[x + 1];
                let ah = g.i$d(g.i$b._inner[x]);
                let ai = d.ek(ah, i) + n;
                let aj = e.ek(ab, j);
                a.f.add([ai, aj, aj]);
                w++;
                for (let ak = 1; ak < t; ++ak) {
                    let al = ak / t;
                    let am = aa + ae * al;
                    let an = (ac - am) / ae;
                    let ao = (am - aa) / ae;
                    let ap = an * ab + ao * ad + ((an * an * an - an) * af + (ao * ao * ao - ao) * ag) * (ae * ae) / 6;
                    let aq = g.i$d(g.i$b._inner[x]);
                    let ar = g.i$d(g.i$b._inner[x + 1]);
                    if (aq == ar && ab == ad) {
                        break;
                    }
                    let as = aq + (ar - aq) * al;
                    am = d.ek(as, i) + n;
                    ap = e.ek(ap, j);
                    a.f.add([am, ap, ap]);
                    w++;
                }
                if (l) {
                    y = [ai, aj, aj];
                }
                if (l && this.acj(a, y, u, Math.min(z, this.dl.count - 1), m, f, w - 1)) {
                    ++m;
                }
            }
            this.yu.cz.count = m;
        }
        z1(a, b) {
            a.v();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a8.count == 0 || this.logicalSeriesLink.a7.count == 0) {
                return;
            }
            if (this.yu.cw.d == 0) {
                return;
            }
            super.z1(a, b);
            if (a.f.count <= 1) {
                return;
            }
            let c = b.by;
            let d = b.bx;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis());
            let h = new ScalerParams(0, c, d, f.ch, e);
            let i = new ScalerParams(0, c, d, g.ch, e);
            a.f.clear();
            a.n.clear();
            let j = this.w8();
            let k = 0;
            let l;
            let m;
            if (b.p) {
                l = this.parentSeries.aad;
                m = this.parentSeries.a9.a$j.item(b.ad);
            }
            else if (b == this.cs) {
                l = this.parentSeries.yo;
                m = typeCast(CategorySeriesView.$, this.parentSeries.cs);
            }
            else {
                l = this.parentSeries.yl;
                m = this.parentSeries.yu;
            }
            let n = m.cw.d;
            let o = typeCast(ISortingAxis_$type, f);
            if (o != null && o.i$b.count != this.dl.count) {
                return;
            }
            let p = this.preferredCategoryMode(f);
            if (p == 0 && f.categoryMode != 0) {
                p = 1;
            }
            let q = 0;
            switch (p) {
                case 0:
                    q = 0;
                    break;
                case 1:
                    q = 0.5 * f.getCategorySize(c, d, e);
                    break;
                case 2:
                    let r = this.index;
                    q = f.getGroupCenter(this.index, c, d, e);
                    break;
            }
            if (f.ch) {
                q = -q;
            }
            let s = (t) => Math.abs(this.parentSeries.aac[t]) + this.parentSeries.aab[t];
            let t = (u) => u;
            let u = (v) => {
                let w = this.valueColumn.item(v);
                if (isNaN_(w) || isInfinity(w)) {
                    w = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (s(v) == 0) {
                        return 0;
                    }
                    return w < 0 ? (this.logicalSeriesLink.a8._inner[v] + w) / s(v) * 100 : (this.logicalSeriesLink.a7._inner[v] + w) / s(v) * 100;
                }
                return w < 0 ? this.logicalSeriesLink.a8._inner[v] + w : this.logicalSeriesLink.a7._inner[v] + w;
            };
            let v = b.cw.d;
            this.acs(b);
            let w = m.cw.e;
            let x = m.cw.f;
            let y = truncate(Math.ceil(d.width / (x - w)));
            let z = new CollisionAvoider();
            if (o != null) {
                this.ac2(a, c, d, f, g, b);
                return;
            }
            let aa = 0;
            let ab = 0;
            for (let ac = w; ac < x + 1; ++ac) {
                if (ac >= this.valueColumn.count) {
                    break;
                }
                let ad = null;
                if (v == 1) {
                    if (ac >= (this.valueColumn.count - 1)) {
                        if (j && a.f.count > 0 && this.acj(a, a.f._inner[a.f.count - 1], z, Math.min(ac * v, this.dl.count - 1), k, b, aa - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ae = t(ac);
                    let af = t(ac + 1);
                    let ag = u(ac);
                    let ah = u(ac + 1);
                    let ai = af - ae;
                    let aj = this.acf[ac];
                    let ak = this.acf[ac + 1];
                    let al = f.ek(ae, h) + q;
                    let am = g.ek(ag, i);
                    a.f.add([al, am, am]);
                    aa++;
                    ab = aa;
                    for (let an = 1; an < y; ++an) {
                        let ao = ae + ai * an / y;
                        let ap = (af - ao) / ai;
                        let aq = (ao - ae) / ai;
                        let ar = ap * ag + aq * ah + ((ap * ap * ap - ap) * aj + (aq * aq * aq - aq) * ak) * (ai * ai) / 6;
                        ao = f.ek(ao, h) + q;
                        ar = g.ek(ar, i);
                        a.f.add([ao, ar, ar]);
                        aa++;
                    }
                    if (j) {
                        ad = [al, am, am];
                    }
                }
                else {
                    ad = b.cw.getBucket(ac);
                    if (!isNaN_(ad[0])) {
                        ad[0] = f.ek(ad[0], h) + q;
                        ad[1] = g.ek(ad[1], i);
                        ad[2] = g.ek(ad[2], i);
                        a.f.add(ad);
                        aa++;
                        ab = aa;
                    }
                }
                if (j && this.acj(a, ad, z, Math.min(ac * v, this.dl.count - 1), k, b, ab - 1)) {
                    ++k;
                }
            }
            b.cz.count = k;
        }
        acd(a) {
            let b = (c) => Math.abs(this.parentSeries.aac[c]) + this.parentSeries.aab[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a8._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.a7._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a8._inner[e] + f : this.logicalSeriesLink.a7._inner[e] + f;
            };
            let e = new List$1(Array_$type, 0);
            let f = a.by;
            let g = a.bx;
            let h = typeCast(ISortingAxis_$type, this.abu);
            let i = 0;
            let j = 0;
            let k = 0;
            let l = this.ib;
            let m = this.wd(this.ct);
            let n = this.abu;
            let o = this.getEffectiveViewport1(a);
            if (h == null || h.i$b == null) {
                let p = new ScalerParams(0, f, g, n.ch, o);
                let q = 0;
                let r = n.lh - 1;
                let s = Math.floor((r - q + 1) * l / m.width);
                i = truncate(Math.max(1, s));
                j = truncate(Math.max(0, Math.floor(q / i) - 1));
                k = truncate(Math.ceil(r / i));
            }
            else {
                j = 0;
                k = n.lh - 1;
                i = 1;
            }
            let t = truncate(Math.ceil(g.width / (k - j)));
            let u = new CollisionAvoider();
            if (h != null) {
                return this.ace(a);
            }
            let v = 0;
            let w = 0;
            for (let x = j; x < k + 1; ++x) {
                if (x >= this.valueColumn.count) {
                    break;
                }
                let y = null;
                if (i == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        break;
                    }
                    let z = c(x);
                    let aa = c(x + 1);
                    let ab = d(x);
                    let ac = d(x + 1);
                    let ad = aa - z;
                    let ae = this.acf[x];
                    let af = this.acf[x + 1];
                    e.add([ab, ab]);
                    for (let ag = 1; ag < t; ++ag) {
                        let ah = z + ad * ag / t;
                        let ai = (aa - ah) / ad;
                        let aj = (ah - z) / ad;
                        let ak = ai * ab + aj * ac + ((ai * ai * ai - ai) * ae + (aj * aj * aj - aj) * af) * (ad * ad) / 6;
                        e.add([ak, ak]);
                    }
                }
                else {
                    y = a.cw.getBucket(x);
                    if (!isNaN_(y[0])) {
                        e.add([y[0], y[1]]);
                    }
                }
            }
            return e.toArray();
        }
        ace(a) {
            let b = new List$1(Array_$type, 0);
            let c = a.by;
            let d = a.bx;
            let e = this.abu;
            let f = typeCast(ISortingAxis_$type, e);
            if (f == null) {
                return null;
            }
            let g = this.getEffectiveViewport1(a);
            let h = this.w8();
            let i = 0;
            let j = (k) => Math.abs(this.parentSeries.aac[k]) + this.parentSeries.aab[k];
            let k = (l) => l;
            let l = (m) => {
                let n = f.i$b._inner[m];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(n) < 0 ? (this.logicalSeriesLink.a8._inner[n] + this.valueColumn.item(n)) / j(n) * 100 : (this.logicalSeriesLink.a7._inner[n] + this.valueColumn.item(n)) / j(n) * 100;
                }
                else {
                    return this.valueColumn.item(n) < 0 ? this.logicalSeriesLink.a8._inner[n] + this.valueColumn.item(n) : this.logicalSeriesLink.a7._inner[n] + this.valueColumn.item(n);
                }
            };
            let m = 0;
            let n = 0;
            let o = 0;
            let p = this.ib;
            let q = this.wd(this.ct);
            if (f == null || f.i$b == null) {
                let r = 0;
                let s = e.lh - 1;
                let t = Math.floor((s - r + 1) * p / q.width);
                m = truncate(Math.max(1, t));
                n = truncate(Math.max(0, Math.floor(r / m) - 1));
                o = truncate(Math.ceil(s / m));
            }
            else {
                n = 0;
                o = e.lh - 1;
                m = 1;
            }
            if (m <= 0 || (n <= 0 && o <= 0)) {
                this.yu.cz.count = i;
                return null;
            }
            let u = truncate(Math.ceil(d.width / (o - n)));
            let v = new CollisionAvoider();
            let w = 0;
            for (let x = n; x < o + 1; ++x) {
                let y = null;
                if (x >= (this.valueColumn.count - 1)) {
                    break;
                }
                let z = k(x);
                let aa = l(x);
                let ab = k(x + 1);
                let ac = l(x + 1);
                let ad = ab - z;
                let ae = this.acf[x];
                let af = this.acf[x + 1];
                b.add([aa, aa]);
                for (let ag = 1; ag < u; ++ag) {
                    let ah = ag / u;
                    let ai = z + ad * ah;
                    let aj = (ab - ai) / ad;
                    let ak = (ai - z) / ad;
                    let al = aj * aa + ak * ac + ((aj * aj * aj - aj) * ae + (ak * ak * ak - ak) * af) * (ad * ad) / 6;
                    b.add([al, al]);
                }
            }
            return b.toArray();
        }
        acs(a) {
            super.acs(a);
            let b = (c) => Math.abs(this.parentSeries.aac[c]) + this.parentSeries.aab[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a8._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.a7._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a8._inner[e] + f : this.logicalSeriesLink.a7._inner[e] + f;
            };
            let e = this.abu;
            let f = this.ach == 0 ? NaN : 0;
            if (e != null && typeCast(ISortingAxis_$type, e) !== null && e.i$b != null) {
                let g = new SafeSortedReadOnlyDoubleCollection(0, this.valueColumn, e.i$b);
                d = (h) => g.item(h);
            }
            this.acf = Numeric.c(this.valueColumn.count, c, d, f, f);
            if (this.aci) {
                let h = -1.7976931348623157E+308;
                let i = 1.7976931348623157E+308;
                let j = this.acd(a);
                if (j == null) {
                    return;
                }
                for (let k = 0; k < j.length; k++) {
                    if (isNaN_(j[k][0]) || isNaN_(j[k][1])) {
                        continue;
                    }
                    if (j[k][1] > h) {
                        h = j[k][1];
                    }
                    if (j[k][0] < i) {
                        i = j[k][0];
                    }
                }
                this.acp = i;
                this.aco = h;
            }
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.ku = this.u3;
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    SplineFragmentBase.$t = markType(SplineFragmentBase, 'SplineFragmentBase', SplineSeriesBase.$);
    return SplineFragmentBase;
})();
/**
 * @hidden
 */
export let SplineAreaFragment = /*@__PURE__*/ (() => {
    class SplineAreaFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.ac7 = null;
            this.ab = SplineAreaFragment.$;
        }
        bi() {
            return new SplineAreaFragment();
        }
        cq() {
            return new SplineAreaFragmentView(this);
        }
        qx(a) {
            super.qx(a);
            this.ac3 = typeCast(SplineAreaFragmentView.$, a);
        }
        ac() {
            super.ac();
            this.rn(false);
        }
        get_et() {
            return true;
        }
        get_es() {
            return true;
        }
        get_fy() {
            return true;
        }
        yv() {
            return 1;
        }
        ac5(a, b) {
            let c = this.ac3.dn.an;
            if (this.gw(a, c)) {
                return true;
            }
            let d = this.ac3.dp.an;
            if (this.gw(a, d)) {
                return true;
            }
            return false;
        }
        gu(a, b) {
            if (this.ac4(a, b)) {
                return true;
            }
            if (this.ac5(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        ac4(a, b) {
            let c = this.ac3.dq.an;
            if (this.gv(a, b, c)) {
                return true;
            }
            let d = this.ac3.dr.an;
            if (this.gv(a, b, d)) {
                return true;
            }
            return false;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.di();
        }
        z4(a, b) {
            super.z4(a, b);
            this.acx.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = a.f;
            let d = this.getEffectiveViewport1(b);
            this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
            let e = false;
            let f = this.yt.b;
            if (f != null) {
                e = true;
            }
            if (e) {
                let g = new ScalerParams(0, b.by, b.bx, this.abu.ch, d);
                this.z0(c, -1, this.valueColumn.count, this.abu, g, b.q, -1);
            }
            let h = typeCast(SplineAreaFragmentView.$, b);
            let i = b.cw.d;
            this.yt.ad(h.dq, true, false, true, true);
            this.yt.ad(h.dr, true, false, true, true);
            this.yt.ad(h.dn, false, true, false, false);
            this.yt.ad(h.dp, false, true, false, false);
            h.dn._opacity = this.yt.j * this.h7;
            h.dp._opacity = 0.5 * this.yt.j * this.h7;
            this.acx.i(h.dn, h.dq, h.dp, h.dr, a.f.count, a.f, true, i, this.ib, (j, k, l, m, n) => this.ac6(j, a.f, b), 1);
        }
        rp(a, b) {
            super.rp(a, b);
        }
        ac6(a, b, c) {
            let d = this.aaq(c);
            let e = d;
            let f = this.logicalSeriesLink.az;
            let g = f ? this.parentSeries.aak.e : this.parentSeries.aak.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(SplineFragmentBase.$, g._inner[j - 1]);
                if (k != null && k.acx != null && k.acx.o.count > 0 && this.ct != null && k.hc(this.ct.bx, this.ct.by, this.ct)) {
                    i = true;
                    for (let l = k.acx.o.count - 1; l >= 0; l--) {
                        a.add(k.acx.o._inner[l]);
                    }
                }
            }
        }
        aaq(a) {
            let b = 0;
            let c = a.by;
            let d = a.bx;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.ch, e);
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.ek(0, f);
            }
            return b;
        }
        r7() {
            let a = (typeCast(XamDataChart.$, this.c9));
            if (a != null) {
                this.h7 = isNaN_(this.ii) ? this.parentSeries.h7 : this.ii;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    SplineAreaFragment.$t = markType(SplineAreaFragment, 'SplineAreaFragment', SplineFragmentBase.$);
    return SplineAreaFragment;
})();
/**
 * @hidden
 */
export let SplineFragment = /*@__PURE__*/ (() => {
    class SplineFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.ab = SplineFragment.$;
        }
        bi() {
            return new SplineFragment();
        }
        get_fy() {
            return true;
        }
        zf() {
            return true;
        }
        cq() {
            return new SplineFragmentView(this);
        }
        qx(a) {
            super.qx(a);
            this.ac3 = a;
        }
        ac5(a, b) {
            let c = this.ac3.dm.an;
            if (this.gw(a, c)) {
                return true;
            }
            return false;
        }
        get_et() {
            return true;
        }
        gu(a, b) {
            if (this.ac4(a, b)) {
                return true;
            }
            if (this.ac5(a, b)) {
                return true;
            }
            if (this.w9(a, b)) {
                return true;
            }
            return false;
        }
        ac4(a, b) {
            let c = this.ac3.dn.an;
            if (this.gv(a, b, c)) {
                return true;
            }
            let d = this.ac3.dp.an;
            if (this.gv(a, b, d)) {
                return true;
            }
            return false;
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.di();
        }
        z4(a, b) {
            super.z4(a, b);
            this.acx.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(b);
            this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
            let f = false;
            let g = this.yt.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.by, b.bx, this.abu.ch, e);
                this.z0(d, -1, this.valueColumn.count, this.abu, h, b.q, -1);
            }
            this.yt.ad(c.dn, true, false, true, false);
            this.yt.ad(c.dp, true, false, true, false);
            this.yt.ad(c.dm, false, true, false, false);
            c.dm._opacity = 0.75 * this.yt.j;
            let i = c.cw.d;
            this.acx.m(c.dn, c.dm, c.dp, a.f.count, a.f, true, 1, this.aac(a.f, a.f.count - 1, b.bx, b.by), i, this.ib);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    SplineFragment.$t = markType(SplineFragment, 'SplineFragment', SplineFragmentBase.$);
    return SplineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBaseValueList = /*@__PURE__*/ (() => {
    class SplineFragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.aan;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.aac[a]) + c.aab[a];
                let f = this.a.logicalSeriesLink.a7;
                let g = this.a.logicalSeriesLink.a8;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    SplineFragmentBaseValueList.$t = markType(SplineFragmentBaseValueList, 'SplineFragmentBaseValueList', Base.$, [IList$1_$type.specialize(Number_$type)]);
    return SplineFragmentBaseValueList;
})();
/**
 * @hidden
 */
export let StackedSeriesBase = /*@__PURE__*/ (() => {
    class StackedSeriesBase extends CategorySeries {
        constructor() {
            super();
            this._series = null;
            this.seriesCreated = null;
            this.aau = 0;
            this.aat = 0;
            this.aab = null;
            this.aac = null;
            this.aaj = null;
            this.aag = null;
            this.aaq = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.aad = null;
            this.series = new StackedSeriesCollection();
            let a = this.series;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.aa6));
            let b = this.series;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.aa5));
            this.yq = new StackedSeriesFramePreparer(1, this, this.aal, this, this, this.aal.cw);
            this.aag = new StackedSeriesCollection();
            let c = this.aag;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.aa5));
            let d = this.aag;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.aa0));
        }
        qc() {
            for (let a of fromEnum(this.aaf)) {
                a.gw();
            }
            super.qc();
        }
        get_fc() {
            return false;
        }
        getHostReferenceValue() {
            return this.iw();
        }
        cq() {
            return new StackedSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.aal = a;
        }
        qy(a, b) {
            super.qy(a, b);
            for (let c of fromEnum(this.series)) {
                c.visualSeriesLink.ct.bx = b;
            }
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        ka() {
            if (this.series == null) {
                return -1;
            }
            return this.series.count;
        }
        pz(a) {
            for (let b = 0; b < this.aak.f.count; b++) {
                let c = this.aak.f._inner[b];
                if (!a(c)) {
                    break;
                }
            }
            super.pz(a);
        }
        get_isStacked() {
            return true;
        }
        get aak() {
            if (this.aaj == null) {
                this.aaj = new StackedSeriesManager(this);
            }
            return this.aaj;
        }
        set aak(a) {
            this.aaj = a;
        }
        get aaf() {
            return this.aam ? this.aag : this.series;
        }
        aa0(a, b) {
            for (let c of fromEnum(this.aag)) {
                if (this.aak != null && this.aak.c.contains(c)) {
                    c.parentSeries = null;
                    this.aak.c.remove(c);
                }
            }
        }
        aa6(a, b) {
            for (let c of fromEnum(this.series)) {
                if (this.aak != null && this.aak.c.contains(c)) {
                    c.parentSeries = null;
                    this.aak.c.remove(c);
                }
            }
        }
        aa5(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (this.aak != null && this.aak.c.contains(c)) {
                        c.parentSeries = null;
                        this.aak.c.remove(c);
                    }
                }
            }
            if (b.newItems != null) {
                let d = b.newStartingIndex;
                for (let e of fromEn(b.newItems)) {
                    if (this.aak != null && !this.aak.c.contains(e)) {
                        e.parentSeries = this;
                        e.gc();
                        e.g3();
                        e.g4();
                        e.hi();
                        e.g5();
                        e.g6();
                        e.f4();
                        e.f5();
                        e.gb();
                        e.ga();
                        e.f6();
                        e.gd();
                        e.gj();
                        e.gk();
                        e.gl();
                        e.gu();
                        e.gw();
                        e.go();
                        e.gr();
                        e.gt();
                        e.gu();
                        e.gv();
                        e.gs();
                        e.gp();
                        e.hg();
                        e.hk();
                        e.hj();
                        e.f7();
                        e.f8();
                        e.gx();
                        e.gy();
                        e.gz();
                        e.f9();
                        e.f3();
                        e.g1();
                        e.g2();
                        e.gm();
                        e.g7();
                        e.gn();
                        e.g9();
                        e.gq();
                        e.g0();
                        e.ha();
                        e.hb();
                        e.gf();
                        e.hf();
                        e.hc();
                        e.he();
                        e.hh();
                        e.hm();
                        if (!this.aam) {
                            this.aak.c.insert(d, e);
                            d++;
                        }
                    }
                }
            }
            if (!this.aam) {
                this.aa7();
            }
        }
        r0(a) {
            this.c7.c8.c8(a, true, false);
        }
        yr(a) {
            if (a != null && a.q) {
                if (a.p) {
                    return new StackedSeriesFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, a), a, this, a.cw);
                }
                else {
                    let b = typeCast(CategorySeriesView.$, this.cs);
                    return new StackedSeriesFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.c9.c8.o, this, b.cw);
                }
            }
            else {
                return this.yq;
            }
        }
        z1(a, b) {
            a.v();
            this.aa3();
            this.yr(b).d(a, b);
        }
        ro(a) {
            super.ro(a);
            this.aak.h(a);
        }
        get_gr() {
            return false;
        }
        o3(a, b) {
            super.o3(a, b);
            for (let c of fromEnum(this.aaf)) {
                if (c.visualSeriesLink != null) {
                    c.visualSeriesLink.o3(a, c.visualSeriesLink.ct);
                }
            }
        }
        aa1() {
            this.aa3();
        }
        aa7() {
            let a = this.fetchXAxis();
            if (a != null) {
                a.c2(true);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.c2(true);
            }
        }
        get_aan() {
            return false;
        }
        get aan() {
            return this.get_aan();
        }
        gb(a) {
            let b = this.dl != null ? this.dl.indexOf(a) : -1;
            let c = this.c9 != null ? this.c9.vl : Rect.empty;
            c = c.copy();
            let d = this.ct.bx;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.wf(this.ct);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                let g = this.fetchXAxis();
                if (g != null) {
                    let h = new ScalerParams(0, e, e, g.ch, f);
                    let i = g.ek(b, h);
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                let j = this.fetchYAxis();
                if (j != null && this.aab != null && b < this.aab.length) {
                    let k = new ScalerParams(0, e, e, j.ch, f);
                    let l = j.ek(this.aab[b], k);
                    let m = j.ek(this.aac[b], k);
                    if (!isNaN_(l) && !isNaN_(m)) {
                        let n = Math.abs(m - l);
                        if (c.height < n) {
                            c.height = n;
                            c.y = Math.min(m, l);
                        }
                        else {
                            if (m < c.top + 0.1 * c.height) {
                                m = m + 0.4 * c.height;
                            }
                            if (m > c.bottom - 0.1 * c.height) {
                                m = m - 0.4 * c.height;
                            }
                            c.y = m - 0.5 * c.height;
                        }
                    }
                }
                this.c1.au(this.c9, c, true);
            }
            return b >= 0;
        }
        ax(a) {
            if (this.aac == null || this.aac.length == 0 || this.aab == null || this.aab.length == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.aac.length, this.aab.length);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        w8() {
            return false;
        }
        o9(a, b, c, d) {
            this.aa3();
            this.zg();
            this.rn(true);
        }
        aae() {
            return this.aal;
        }
        aar() {
            let a = 0;
            let b = this.ct.by;
            let c = this.ct.bx;
            let d = this.getEffectiveViewport1(this.ct);
            let e = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!b.isEmpty && !c.isEmpty && e != null) {
                let f = new ScalerParams(0, b, c, e.ch, d);
                a = e.ek(e.l8, f);
            }
            return a;
        }
        aas() {
            let a = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (a != null) {
                return a.l8;
            }
            return 0;
        }
        aaw(a) {
            return this.index < 0 || this.aaf == null || this.aaf.count == 0 ? -1 : this.index + this.aaf.indexOf(a);
        }
        aav(a) {
            let b = this.c9 != null ? this.c9.vl : Rect.empty;
            let c = this.ct.bx;
            let d = this.getEffectiveViewport1(this.ct);
            let e = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let f = -1;
            if (e != null && !b.isEmpty && !c.isEmpty) {
                let g = new ScalerParams(0, b, c, e.ch, d);
                let h = this.wd(this.ct);
                let i = e.en(h.left, g);
                let j = e.en(h.right, g);
                let k = (a.x - b.left) / b.width;
                let l = i + (k * (j - i));
                if (e.categoryMode != 0) {
                    l -= 0.5;
                }
                let m = truncate(Math.round(l));
                f = m;
            }
            return f;
        }
        aap(a, b, c, d) {
            let e = true;
            let f = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!d.o() || c.isEmpty || b.isEmpty || f == null || f.itemsSource == null || g == null || this.dl == null || f.bi == null || g.bi == null || g.ly == g.lx) {
                e = false;
            }
            let h = d;
            let i = h.cw.d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || i < 1 || a._visibility != 0) {
                e = false;
            }
            return e;
        }
        aa2() {
            if (this.c9 == null || this.aak == null) {
                return;
            }
            if (!this.aam) {
                this.aag.clear();
                for (let a of fromEnum(this.series)) {
                    if (!this.aak.c.contains(a)) {
                        this.aak.c.add(a);
                    }
                }
                this.aa7();
                return;
            }
        }
        z4(a, b) {
            super.z4(a, b);
        }
        aa4(a, b, c, d) {
        }
        ay(a) {
            if (a.isEmpty && this.c9 != null) {
                a = this.c9.vl;
            }
            let b = this.yk();
            if (this.aab == null || this.aac == null) {
                return null;
            }
            let c = this.wd(this.ct);
            let d = new ScalerParams(0, a, this.c9.v0, b.ch, this.getEffectiveViewport());
            let e = (b.en(c.left, d));
            let f = (b.en(c.right, d));
            if (b.ch) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cn) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.aac.length - 1, e));
            f = Math.max(0, Math.min(this.aac.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.aac[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.aab[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.y0();
            o = this.aw(o, p, a);
            return o;
        }
        rr() {
            super.rr();
            for (let a of fromEnum(this.aaf)) {
                a.f1();
            }
        }
        aa3() {
            if (this.dl == null) {
                return;
            }
            let a = this.dl.count;
            this.aab = new Array(a);
            this.aac = new Array(a);
            for (let b = 0; b < a; b++) {
                this.aab[b] = 0;
                this.aac[b] = 0;
            }
            this.aau = Number.POSITIVE_INFINITY;
            this.aat = Number.NEGATIVE_INFINITY;
            let c = 0;
            for (let d of fromEnum(this.aaf)) {
                if (d.itemsSource != null && d.visualSeriesLink == null) {
                    continue;
                }
                if (d.itemsSource != null) {
                    d.ak = d.visualSeriesLink.valueColumn;
                }
                if (d.itemsSource == null) {
                    this.dl.deregisterColumn(d.ak);
                    d.ak = this.di(d.ft);
                }
                if (d.visualSeriesLink != null && d.itemsSource == null) {
                    d.visualSeriesLink.aan = true;
                    d.visualSeriesLink.valueColumn = d.ak;
                    d.visualSeriesLink.aan = false;
                }
                d.az = true;
                if (d.ak != null) {
                    d.a7.clear();
                    d.a8.clear();
                    for (let e = 0; e < d.ak.count; e++) {
                        let f = d.ak.item(e);
                        if (f < c) {
                            d.a7.add(c);
                            d.a8.add(this.aac[e]);
                            this.aac[e] = this.aac[e] + f;
                            if (d.az) {
                                d.az = false;
                            }
                        }
                        else if (f >= c) {
                            d.a7.add(this.aab[e]);
                            d.a8.add(c);
                            this.aab[e] = this.aab[e] + f;
                        }
                        else if (isNaN_(f) || isInfinity(f)) {
                            d.a7.add(this.aab[e]);
                            d.a8.add(this.aac[e]);
                        }
                    }
                }
            }
            for (let g = 0; g < a; g++) {
                this.aau = Math.min(this.aau, this.aac[g]);
                this.aat = Math.max(this.aat, this.aab[g]);
            }
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.pa(this.fetchXAxis());
                        this.pa(this.fetchYAxis());
                    }
                    if (c == null && d != null) {
                        this.rd(this.fetchXAxis());
                        this.rd(this.fetchYAxis());
                    }
                    if (this.aaf != null) {
                        for (let e of fromEnum(this.aaf)) {
                            e.af = this.c9;
                        }
                        this.rn(false);
                    }
                    break;
                case "ItemsSource":
                    if (this.aaf != null) {
                        for (let f of fromEnum(this.aaf)) {
                            if (f.itemsSource == null) {
                                if (f.visualSeriesLink != null) {
                                    f.visualSeriesLink.itemsSource = d;
                                }
                            }
                        }
                    }
                    break;
                case "HighlightedItemsSource":
                    if (this.aaf != null) {
                        for (let g of fromEnum(this.aaf)) {
                            if (g.highlightedItemsSource == null) {
                                if (g.visualSeriesLink != null) {
                                    g.visualSeriesLink.highlightedItemsSource = d;
                                }
                            }
                        }
                    }
                    break;
                case "FastItemsSource":
                    if (this.aam) {
                        this.aa2();
                    }
                    if (!this.zg()) {
                        this.aal.cw.g(this.ib);
                    }
                    this.rn(this.ge && c != null);
                    break;
                case StackedSeriesBase.$$p[0]:
                    this.aa2();
                    break;
                case StackedSeriesBase.$$p[1]:
                    if (this.c9 != null) {
                        this.c9.o1(this.aak.f);
                    }
                    break;
                case StackedSeriesBase.$$p[2]:
                    for (let h of fromEnum(this.aaf)) {
                        h.hm();
                    }
                    break;
                case "Brush":
                    for (let i of fromEnum(this.aaf)) {
                        i.f4();
                    }
                    break;
                case "DashArray":
                    for (let j of fromEnum(this.aaf)) {
                        j.f5();
                    }
                    break;
                case "HighlightingFadeOpacity":
                    for (let k of fromEnum(this.aaf)) {
                        k.gb();
                    }
                    break;
                case "HighlightedValuesDisplayMode":
                    for (let l of fromEnum(this.aaf)) {
                        l.ga();
                    }
                    break;
                case "DashCap":
                    for (let m of fromEnum(this.aaf)) {
                        m.f6();
                    }
                    break;
                case "IsDropShadowEnabled":
                    for (let n of fromEnum(this.aaf)) {
                        n.gc();
                    }
                    break;
                case "ShadowBlur":
                    for (let o of fromEnum(this.aaf)) {
                        o.g3();
                    }
                    break;
                case "ShadowColor":
                    for (let p of fromEnum(this.aaf)) {
                        p.g4();
                    }
                    break;
                case "UseSingleShadow":
                    for (let q of fromEnum(this.aaf)) {
                        q.hi();
                    }
                    break;
                case "ShadowOffsetX":
                    for (let r of fromEnum(this.aaf)) {
                        r.g5();
                    }
                    break;
                case "ShadowOffsetY":
                    for (let s of fromEnum(this.aaf)) {
                        s.g6();
                    }
                    break;
                case "IsHitTestVisible":
                    for (let t of fromEnum(this.aaf)) {
                        t.gd();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                    for (let u of fromEnum(this.aaf)) {
                        u.gj();
                    }
                    break;
                case "LegendItemTemplate":
                    for (let v of fromEnum(this.aaf)) {
                        v.gk();
                    }
                    break;
                case "LegendItemVisibility":
                    for (let w of fromEnum(this.aaf)) {
                        w.gl();
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let x of fromEnum(this.aaf)) {
                        x.gi();
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let y of fromEnum(this.aaf)) {
                        y.gh();
                    }
                    break;
                case "MarkerTemplate":
                    for (let z of fromEnum(this.aaf)) {
                        z.gu();
                    }
                    break;
                case "MarkerType":
                    for (let aa of fromEnum(this.aaf)) {
                        aa.gw();
                    }
                    break;
                case "MarkerThickness":
                    for (let ab of fromEnum(this.aaf)) {
                        ab.gv();
                    }
                    break;
                case "MarkerBrush":
                    for (let ac of fromEnum(this.aaf)) {
                        ac.go();
                    }
                    break;
                case "MarkerOutline":
                    for (let ad of fromEnum(this.aaf)) {
                        ad.gr();
                    }
                    break;
                case "MarkerOutlineMode":
                    for (let ae of fromEnum(this.aaf)) {
                        ae.gs();
                    }
                    break;
                case "MarkerFillMode":
                    for (let af of fromEnum(this.aaf)) {
                        af.gp();
                    }
                    break;
                case "MarkerStyle":
                    for (let ag of fromEnum(this.aaf)) {
                        ag.gt();
                    }
                    break;
                case "Opacity":
                    for (let ah of fromEnum(this.aaf)) {
                        ah.gx();
                    }
                    break;
                case "OpacityMask":
                    for (let ai of fromEnum(this.aaf)) {
                        ai.gy();
                    }
                    break;
                case "AreaFillOpacity":
                    for (let aj of fromEnum(this.aaf)) {
                        aj.f3();
                    }
                    break;
                case "Outline":
                    for (let ak of fromEnum(this.aaf)) {
                        ak.gz();
                    }
                    break;
                case "LineCap":
                    for (let al of fromEnum(this.aaf)) {
                        al.gm();
                    }
                    break;
                case "OutlineMode":
                    for (let am of fromEnum(this.aaf)) {
                        am.g0();
                    }
                    break;
                case "MarkerFillOpacity":
                    for (let an of fromEnum(this.aaf)) {
                        an.gq();
                    }
                    break;
                case "Thickness":
                    for (let ao of fromEnum(this.aaf)) {
                        ao.g7();
                    }
                    break;
                case "LineJoin":
                    for (let ap of fromEnum(this.aaf)) {
                        ap.gn();
                    }
                    break;
                case "ToolTip":
                    for (let aq of fromEnum(this.aaf)) {
                        aq.g9();
                    }
                    break;
                case "TransitionEasingFunction":
                    for (let ar of fromEnum(this.aaf)) {
                        ar.hb();
                    }
                    break;
                case "TransitionDuration":
                    for (let as of fromEnum(this.aaf)) {
                        as.ha();
                    }
                    break;
                case "IsTransitionInEnabled":
                    for (let at of fromEnum(this.aaf)) {
                        at.gf();
                    }
                    break;
                case "TransitionInMode":
                    for (let au of fromEnum(this.aaf)) {
                        au.he();
                    }
                    break;
                case "TransitionInDuration":
                    for (let av of fromEnum(this.aaf)) {
                        av.gf();
                    }
                    break;
                case "TransitionInSpeedType":
                    for (let aw of fromEnum(this.aaf)) {
                        aw.gf();
                    }
                    break;
                case "TransitionInEasingFunction":
                    for (let ax of fromEnum(this.aaf)) {
                        ax.hd();
                    }
                    break;
                case "UseLightweightMarkers":
                    for (let ay of fromEnum(this.aaf)) {
                        ay.hh();
                    }
                    break;
                case "UseHighMarkerFidelity":
                    for (let az of fromEnum(this.aaf)) {
                        az.hg();
                    }
                    break;
            }
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.yk()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.yk());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.y0());
        }
        get bucketizer() {
            return this.yu.cw;
        }
        get currentMode2Index() {
            return this.zp();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        gl() {
            return false;
        }
        get_e3() {
            return false;
        }
        rp(a, b) {
            let c = this.gy;
            super.rp(a, b);
            if (!c) {
                this.ct.a4(b);
                return;
            }
            this.ct.a4(b);
            if (this.d3(this.cs)) {
                return;
            }
            for (let d of fromEnum(this.series)) {
                d.visualSeriesLink.rp(a, b);
            }
            this.gy = false;
        }
        rm(a, b, c, d, e) {
            super.rm(a, b, c, d, e);
            let f = this.a9.a$j.item(d);
            f.cw.g(this.ib);
            f.a3(c);
            if (this.d3(f)) {
                return;
            }
            if (this.aad == null) {
                this.aad = new CategoryFrame(3);
            }
            this.aad.v();
            this.aa3();
            this.yr(f).d(this.aad, f);
            this.z4(this.aad, f);
            for (let g of fromEnum(this.series)) {
                g.visualSeriesLink.rm(a, b, c, d, e);
            }
        }
        kk() {
            let a = this.bb.exportStackedVisualData(this, this.wl);
            for (let b of fromEnum(this.series)) {
                let c = this.bb.createFragmentVisualData(this, this.wl, getInstanceType(b).typeName, b.e0);
                b.visualSeriesLink.ct.an(c);
                this.bb.addSubSeriesVisualData(a, c);
                for (let d of fromEnum(b.visualSeriesLink.actualLayers)) {
                    let e = this.bb.createFragmentVisualData(this, this.wl, getInstanceType(d.target).typeName, d.target.name);
                    d.target.ct.an(e);
                    this.bb.addSubSeriesLayerVisualData(c, e);
                }
            }
            this.pv(a);
            this.ct.an(a);
            return a;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedSeriesBase.$t = markType(StackedSeriesBase, 'StackedSeriesBase', CategorySeries.$, [IIsCategoryBased_$type]);
    StackedSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, StackedSeriesBase, 'raisePropertyChanged', ['AutoGenerateSeries:aam:aa8', [0, false], 'ReverseLegendOrder:aao:aa9', [0, false], 'SeriesVisibility:abb:aba', [Visibility_$type, enumGetBox(Visibility_$type, 0)]]);
    return StackedSeriesBase;
})();
/**
 * @hidden
 */
export let HorizontalStackedSeriesBase = /*@__PURE__*/ (() => {
    class HorizontalStackedSeriesBase extends StackedSeriesBase {
        get_ei() {
            return true;
        }
        get_f3() {
            return this.y0() != null && this.y0().ch;
        }
        ci() {
            return 1;
        }
        cj() {
            if (this.yAxis != null && this.yAxis.ch) {
                return 4;
            }
            return 3;
        }
        getOffsetValue() {
            return this.yq.r(this.xAxis, this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ai() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        zg() {
            return this.yAxis != null && this.yAxis.c1();
        }
        r7() {
            let a = (typeCast(XamDataChart.$, this.c9));
            if (a != null) {
                this.h7 = isNaN_(this.ii) ? a.wl.fp : this.ii;
                for (let b of fromEnum(this.aaf)) {
                    b.f3();
                }
            }
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case "Resolution":
                    this.aak.j();
                    break;
                case HorizontalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.pa(typeCast(Axis.$, c));
                        this.rd(typeCast(Axis.$, d));
                        this.yu.cw.g(this.ib);
                        this.rn(false);
                        this.qh();
                    }
                    break;
                case HorizontalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.pa(typeCast(Axis.$, c));
                        this.rd(typeCast(Axis.$, d));
                        this.yu.cw.g(this.ib);
                        if (this.c9 != null) {
                            this.c9.nq();
                        }
                        this.zg();
                        this.rn(false);
                        this.qh();
                    }
                    break;
            }
        }
        abf(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        abe(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.ce) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    HorizontalStackedSeriesBase.$t = markType(HorizontalStackedSeriesBase, 'HorizontalStackedSeriesBase', StackedSeriesBase.$);
    HorizontalStackedSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, HorizontalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::abi', [CategoryAxisBase.$, null], 'YAxis::abj', [NumericYAxis.$, null]]);
    return HorizontalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedAreaSeries = /*@__PURE__*/ (() => {
    class StackedAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedAreaSeries.$;
        }
        bi() {
            return new StackedAreaSeries();
        }
        get_es() {
            return true;
        }
        ac() {
            super.ac();
            this.rn(false);
        }
        cq() {
            return new StackedAreaSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.abk = a;
        }
        ax(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.dl.count - 1);
            }
            if (a == this.yAxis) {
                this.aa3();
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedAreaSeries.$t = markType(StackedAreaSeries, 'StackedAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedAreaSeries;
})();
/**
 * @hidden
 */
export let VerticalStackedSeriesBase = /*@__PURE__*/ (() => {
    class VerticalStackedSeriesBase extends StackedSeriesBase {
        yk() {
            return this.yAxis;
        }
        y0() {
            return this.xAxis;
        }
        ci() {
            if (this.xAxis != null && this.xAxis.ch) {
                return 4;
            }
            return 3;
        }
        cj() {
            return 1;
        }
        ay(a) {
            if (a.isEmpty && this.c9 != null) {
                a = this.c9.vl;
            }
            let b = this.yk();
            if (this.aab == null || this.aac == null) {
                return null;
            }
            let c = this.wd(this.ct);
            let d = new ScalerParams(0, a, this.c9.v0, b.ch, this.getEffectiveViewport());
            let e = (b.en(c.top, d));
            let f = (b.en(c.bottom, d));
            if (!b.ch) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cn) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.aac.length - 1, e));
            f = Math.max(0, Math.min(this.aac.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.aac[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.aab[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.y0();
            o = this.aw(o, p, a);
            return o;
        }
        getOffsetValue() {
            return this.yq.r(this.yAxis, this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
        }
        get_isVertical() {
            return true;
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        zg() {
            return this.xAxis != null && this.xAxis.c1();
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case VerticalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.pa(typeCast(Axis.$, c));
                        this.rd(typeCast(Axis.$, d));
                        this.yu.cw.g(this.ib);
                        if (this.c9 != null) {
                            this.c9.nq();
                        }
                        this.rn(false);
                        this.qh();
                    }
                    break;
                case VerticalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.pa(typeCast(Axis.$, c));
                        this.rd(typeCast(Axis.$, d));
                        this.yu.cw.g(this.ib);
                        this.zg();
                        this.rn(false);
                        this.qh();
                    }
                    break;
            }
        }
        abf(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        abe(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    VerticalStackedSeriesBase.$t = markType(VerticalStackedSeriesBase, 'VerticalStackedSeriesBase', StackedSeriesBase.$);
    VerticalStackedSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, VerticalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::abi', [NumericXAxis.$, null], 'YAxis::abj', [CategoryYAxis.$, null]]);
    return VerticalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedBarSeries = /*@__PURE__*/ (() => {
    class StackedBarSeries extends VerticalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedBarSeries.$;
        }
        bi() {
            return new StackedBarSeries();
        }
        get_ev() {
            return true;
        }
        get_fj() {
            return true;
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return super.ji();
            }
            return Defaults.h;
        }
        ac() {
            super.ac();
            this.rn(false);
        }
        cq() {
            return new StackedBarSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.abk = a;
        }
        aae() {
            return this.abk;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        zp() {
            let a = 0;
            for (let b of fromEnum(this.c9.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        aar() {
            let a = 0;
            let b = this.c9 != null ? this.c9.vl : Rect.empty;
            let c = this.ct.bx;
            if (!b.isEmpty && !c.isEmpty && this.xAxis != null) {
                let d = this.getEffectiveViewport1(this.ct);
                let e = new ScalerParams(0, b, c, this.xAxis.ch, d);
                a = this.xAxis.ek(this.xAxis.l8, e);
            }
            return a;
        }
        aas() {
            if (this.xAxis != null) {
                return this.xAxis.l8;
            }
            return 0;
        }
        ax(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.dl.count - 1);
            }
            if (a == this.xAxis) {
                this.aa3();
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        gb(a) {
            let b = this.dl != null ? this.dl.indexOf(a) : -1;
            let c = this.c9 != null ? this.c9.vl : Rect.empty;
            c = c.copy();
            let d = this.ct.bx;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.wf(this.ct);
            let g = new ScalerParams(0, e, e, this.xAxis.ch, f);
            let h = new ScalerParams(0, e, e, this.yAxis.ch, f);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.yAxis != null) {
                    let i = this.yAxis.ek(b, h);
                    if (i < c.top + 0.1 * c.height) {
                        i = i + 0.4 * c.height;
                    }
                    if (i > c.bottom - 0.1 * c.height) {
                        i = i - 0.4 * c.height;
                    }
                    c.y = i - 0.5 * c.height;
                }
                if (this.xAxis != null && this.aab != null && b < this.aab.length) {
                    let j = this.xAxis.ek(this.aab[b], g);
                    let k = this.xAxis.ek(this.aac[b], g);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(k - j);
                        if (c.width < l) {
                            c.width = l;
                            c.x = Math.min(k, j);
                        }
                        else {
                            if (k < c.left + 0.1 * c.width) {
                                k = k + 0.4 * c.width;
                            }
                            if (k > c.right - 0.1 * c.width) {
                                k = k - 0.4 * c.width;
                            }
                            c.x = k - 0.5 * c.width;
                        }
                    }
                }
                this.c1.au(this.c9, c, true);
            }
            return b >= 0;
        }
        hc(a, b, c) {
            let d = true;
            let e = c;
            if (!c.o() || b.isEmpty || a.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.dl == null || this.xAxis.bi == null || this.yAxis.bi == null || this.xAxis.ly == this.xAxis.lx) {
                e.cw.d = 0;
                d = false;
            }
            return d;
        }
        o9(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.yu.cw.g(this.ib);
                    break;
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.rn(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.rn(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.rn(true);
                    }
                    break;
                case 2:
                    if (this.yu.cw.d > 0) {
                        this.rn(true);
                    }
                    break;
                case 3:
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.rn(true);
                    }
                    break;
            }
        }
        j1(a) {
            let b = this.c9 != null ? this.c9.vl : Rect.empty;
            let c = this.ct.bx;
            let d = this.getEffectiveViewport1(this.ct);
            let e = -1;
            if (this.yAxis != null && !b.isEmpty && !c.isEmpty) {
                let f = new ScalerParams(0, b, c, this.yAxis.ch, d);
                let g = this.wd(this.ct);
                let h = this.yAxis.en(g.top, f);
                let i = this.yAxis.en(g.bottom, f);
                let j = (a.y - b.top) / b.height;
                let k = h + (j * (i - h));
                if (this.yAxis.categoryMode != 0) {
                    k -= 0.5;
                }
                let l = truncate(Math.round(k));
                e = l;
            }
            return e;
        }
        kl(a) {
            let b = this.j1(a);
            return b >= 0 && this.dl != null && b < this.dl.count ? this.dl.item(b) : null;
        }
        aa7() {
            if (this.xAxis != null) {
                this.xAxis.c2(true);
            }
            if (this.yAxis != null) {
                this.yAxis.c2(true);
            }
        }
        aav(a) {
            return this.j1(a);
        }
        aap(a, b, c, d) {
            let e = true;
            if (!d.o() || c.isEmpty || b.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.dl == null || this.xAxis.bi == null || this.yAxis.bi == null) {
                e = false;
            }
            let f = d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || f.cw.d < 1) {
                e = false;
            }
            return e;
        }
        iu() {
            return this.yAxis.k5(this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
        }
        aa4(a, b, c, d) {
            let e = typeCast(BarFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.hc(c.bx, c.by, c) || e == null || f == null) {
                return;
            }
            let g = this.yAxis.k5(c.by, c.bx, this.getEffectiveViewport1(c));
            if (isNaN_(g) || isInfinity(g)) {
                e.acp.dg.count = 0;
                return;
            }
            let h = 0;
            e.yt.a2(e, e.zd(), d, e.zm(c), e.zn(c));
            e.yt.r = e.acs;
            e.yt.s = e.act;
            e.yt.k = e.acs;
            e.yt.l = e.act;
            let i = e.valueColumn.count;
            let j = c.by;
            let k = c.bx;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.yt.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.yk();
            let q = new ScalerParams(0, j, k, p.ch, l);
            let r = 0;
            for (let s of fromEnum(b.f)) {
                if (isInfinity(s[0]) || isNaN_(s[0]) || isInfinity(s[1]) || isInfinity(s[2]) || isNaN_(s[1]) || isNaN_(s[2])) {
                    r++;
                    continue;
                }
                let t = s[0] - 0.5 * g;
                let u = s[1];
                let v = s[2];
                v = Math.max(v, -100);
                u = Math.min(u, c.bx.right + 100);
                let w = f.dg.item(h);
                w.height = g;
                w.width = Math.abs(u - v);
                let x = this.yt.aw(i, r)[0];
                if (m) {
                    e.z0(o, r, i, p, q, c.q, x);
                }
                e.yt.ad(w, false, false, false, false);
                w.ap = e.yt.k;
                w.aq = e.yt.l;
                f.dn(w, Math.min(u, v), t);
                h++;
                r++;
            }
            f.dg.count = h;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case StackedBarSeries.$$p[0]:
                case StackedBarSeries.$$p[1]:
                    for (let e of fromEnum(this.aaf)) {
                        e.g1();
                        e.g2();
                    }
                    this.rn(false);
                    break;
                case "SyncLink":
                    if (this.xAxis != null) {
                        this.xAxis.c1();
                    }
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.c1()) {
                        this.abk.cw.g(this.ib);
                    }
                    this.rn(this.ge && c != null);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.pa(this.xAxis);
                        this.pa(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.rd(this.xAxis);
                        this.rd(this.yAxis);
                    }
                    this.abk.cw.g(this.ib);
                    this.rn(false);
                    if (this.xAxis != null) {
                        this.xAxis.c1();
                    }
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedBarSeries.$t = markType(StackedBarSeries, 'StackedBarSeries', VerticalStackedSeriesBase.$, [IBarSeries_$type]);
    StackedBarSeries.$$p = markDep(DependencyProperty, PropertyMetadata, StackedBarSeries, 'raisePropertyChanged', ['RadiusX:abl:abp', [1, 0], 'RadiusY:abm:abq', [1, 0]]);
    return StackedBarSeries;
})();
/**
 * @hidden
 */
export let StackedColumnSeries = /*@__PURE__*/ (() => {
    class StackedColumnSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedColumnSeries.$;
        }
        bi() {
            return new StackedColumnSeries();
        }
        get_ex() {
            return true;
        }
        get_fj() {
            return true;
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return super.ji();
            }
            return Defaults.h;
        }
        cq() {
            return new StackedColumnSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.abk = a;
        }
        aae() {
            return this.abk;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        ax(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.dl.count - 1);
            }
            if (a == this.yAxis) {
                this.aa3();
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        iu() {
            let a = this.getEffectiveViewport1(this.ct);
            return this.xAxis.k5(this.ct.by, this.ct.bx, a);
        }
        aa4(a, b, c, d) {
            let e = typeCast(ColumnFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.hc(c.bx, c.by, c) || e == null || f == null) {
                return;
            }
            if (e == null) {
                return;
            }
            let g = this.getEffectiveViewport1(c);
            let h = this.xAxis.k5(c.by, c.bx, g);
            if (isNaN_(h) || isInfinity(h)) {
                e.acp.dg.count = 0;
                return;
            }
            let i = 0;
            e.yt.a2(e, e.zd(), d, e.zm(c), e.zn(c));
            e.yt.r = e.acs;
            e.yt.s = e.act;
            e.yt.k = e.acs;
            e.yt.l = e.act;
            let j = c.by;
            let k = c.bx;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.yt.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.yk();
            let q = new ScalerParams(0, j, k, p.ch, l);
            let r = e.valueColumn.count;
            let s = typeCast(ISortingAxis_$type, this.xAxis) !== null;
            let t = 0;
            for (let u of fromEnum(b.f)) {
                if (isInfinity(u[0]) || isNaN_(u[0]) || isInfinity(u[1]) || isInfinity(u[2]) || isNaN_(u[1]) || isNaN_(u[2])) {
                    t++;
                    continue;
                }
                let v = u[0] - 0.5 * h;
                let w = u[1];
                let x = u[2];
                w = Math.max(w, -100);
                x = Math.min(x, c.bx.bottom + 100);
                let y = f.dg.item(t);
                y.width = h;
                y.height = Math.abs(x - w);
                let z = this.yt.aw(r, t)[0];
                if (s && b.m != null && i >= 0 && i < b.m.count) {
                    z = truncate(Math.round(b.m._inner[i]));
                }
                if (m) {
                    e.z0(o, t, r, p, q, c.q, z);
                }
                e.yt.ad(y, false, false, false, false);
                y.ap = e.yt.k;
                y.aq = e.yt.l;
                f.dn(y, v, Math.min(x, w));
                i++;
                t++;
            }
            f.dg.count = t;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case StackedColumnSeries.$$p[0]:
                case StackedColumnSeries.$$p[1]:
                    for (let e of fromEnum(this.aaf)) {
                        e.g1();
                        e.g2();
                    }
                    this.rn(false);
                    break;
                case "SyncLink":
                    if (this.yAxis != null) {
                        this.yAxis.c1();
                    }
                    break;
                case "SeriesViewer":
                    if (this.yAxis != null) {
                        this.yAxis.c1();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedColumnSeries.$t = markType(StackedColumnSeries, 'StackedColumnSeries', HorizontalStackedSeriesBase.$);
    StackedColumnSeries.$$p = markDep(DependencyProperty, PropertyMetadata, StackedColumnSeries, 'raisePropertyChanged', ['RadiusX:abl:abp', [1, 0], 'RadiusY:abm:abq', [1, 0]]);
    return StackedColumnSeries;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeries = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineAreaSeries.$;
        }
        bi() {
            return new StackedSplineAreaSeries();
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return super.ji();
            }
            return this.abk.da();
        }
        get_es() {
            return true;
        }
        get_fy() {
            return true;
        }
        ac() {
            super.ac();
            this.rn(false);
        }
        cq() {
            return new StackedSplineAreaSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.abk = a;
        }
        ax(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.dl.count - 1);
            }
            if (a == this.yAxis) {
                this.aa3();
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case StackedSplineAreaSeries.$$p[0]:
                    for (let e of fromEnum(this.aaf)) {
                        e.ge();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedSplineAreaSeries.$t = markType(StackedSplineAreaSeries, 'StackedSplineAreaSeries', HorizontalStackedSeriesBase.$);
    StackedSplineAreaSeries.$$p = markDep(DependencyProperty, PropertyMetadata, StackedSplineAreaSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:abl:abn', [0, false]]);
    return StackedSplineAreaSeries;
})();
/**
 * @hidden
 */
export let StackedSplineSeries = /*@__PURE__*/ (() => {
    class StackedSplineSeries extends HorizontalStackedSeriesBase {
        constructor() {
            super();
            this.ab = StackedSplineSeries.$;
        }
        bi() {
            return new StackedSplineSeries();
        }
        get_fy() {
            return true;
        }
        ji() {
            if (!isNaN_(this.jh)) {
                return super.ji();
            }
            return this.abk.da();
        }
        ac() {
            super.ac();
            this.rn(false);
        }
        cq() {
            return new StackedSplineSeriesView(this);
        }
        qx(a) {
            super.qx(a);
            this.abk = a;
        }
        ax(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.dl.count - 1);
            }
            if (a == this.yAxis) {
                this.aa3();
                return new AxisRange(this.aau, this.aat);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.zh;
        }
    }
    StackedSplineSeries.$t = markType(StackedSplineSeries, 'StackedSplineSeries', HorizontalStackedSeriesBase.$);
    StackedSplineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, StackedSplineSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:abl:abn', [0, false]]);
    return StackedSplineSeries;
})();
/**
 * @hidden
 */
export let StackedFragmentSeries = /*@__PURE__*/ (() => {
    class StackedFragmentSeries extends DependencyObject {
        constructor() {
            super();
            this._parentSeries = null;
            this.cc = 0;
            this.af = null;
            this.ak = null;
            this._visualSeriesLink = null;
            this.a7 = null;
            this.a8 = null;
            this.a6 = null;
            this.az = false;
            this.b5 = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.a5 = new List$1(String_$type, 0);
            this.a7 = new List$1(Number_$type, 0);
            this.a8 = new List$1(Number_$type, 0);
            this.a6 = new List$1(Array_$type, 0);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.fy(a, b.propertyName, b.oldValue, b.newValue));
        }
        cg(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.l = this.bt({ $type: Point_$type, x: a, y: b }, false, false);
            c.q = "Value";
            c.r = this.ft != null ? this.ft : "Value";
            c.s = this.fp != null ? this.fp : "";
            c.t = this.fr != null ? this.fr : "";
            let d = new DataLegendSeriesContext();
            d.e = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.h = this.eb();
            return d;
        }
        eb() {
            return "Stacked";
        }
        get parentSeries() {
            return this._parentSeries;
        }
        set parentSeries(a) {
            this._parentSeries = a;
        }
        get visualSeriesLink() {
            return this._visualSeriesLink;
        }
        set visualSeriesLink(a) {
            this._visualSeriesLink = a;
        }
        b8(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.j1(a);
            }
            return -1;
        }
        ch(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.kl(a);
            }
            return null;
        }
        cb(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.j8(a, b);
            }
            return -1;
        }
        ca(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.j6(a, b);
            }
            return -1;
        }
        bt(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.i3(a, b, c);
            }
            return NaN;
        }
        li(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v6(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        lm(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.wh(a);
            }
            return Rect.empty;
        }
        j(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.an(a);
            }
            return null;
        }
        ln(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.wi(a);
            }
            return Rect.empty;
        }
        k(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ao(a);
            }
            return null;
        }
        lo(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.wj(a);
            }
            return Rect.empty;
        }
        lp(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.wk(a);
            }
            return Rect.empty;
        }
        bp(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.iz(a, b, c);
            }
            return NaN;
        }
        le(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v2(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        br(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.i1(a, b, c);
            }
            return NaN;
        }
        lg(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v4(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        lj(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v7(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bu(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.i4(a, b, c);
            }
            return NaN;
        }
        lf(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v3(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bq(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.i0(a, b, c);
            }
            return NaN;
        }
        lh(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v5(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bs(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.i2(a, b, c);
            }
            return NaN;
        }
        b9(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.j2(a);
            }
            return -1;
        }
        bo() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.iu();
            }
            return 0;
        }
        bn(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.iq(a);
            }
            return NaN;
        }
        ci(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.km(a);
            }
            return null;
        }
        as(a, b, c, d) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.d9(a, b, c, d);
            }
            return false;
        }
        lk(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.wb(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        ld(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.v1(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        a0(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gb(a);
            }
            return false;
        }
        ll() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.getEffectiveViewport();
            }
            return Rect.empty;
        }
        fx() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qj();
            }
        }
        f2(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.r0(a);
            }
        }
        a1(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gu(a, b);
            }
            return false;
        }
        fw(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.p8(a);
            }
        }
        provideRenderer(a) {
            this.b5 = a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.provideRenderer(a);
            }
        }
        hm() {
            if (this.parentSeries == null) {
                return;
            }
            this.lt = this.parentSeries._visibility != 0 ? 1 : this.lv;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._visibility = this.lt;
            }
        }
        gu() {
            if (this.parentSeries == null) {
                return;
            }
            this.hp = this.hs != null ? this.hs : this.parentSeries.xu;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.xu = this.hp;
            }
        }
        gw() {
            if (this.parentSeries == null) {
                return;
            }
            let a = this.x == 0 || this.x == 2;
            let b = a ? this.parentSeries.w0 : this.x;
            if (b == 2 || b == 0) {
                b = 1;
            }
            this.w = b;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.w2 = this.w;
            }
        }
        f4() {
            if (this.parentSeries == null) {
                return;
            }
            this.k4 = this.kz != null ? this.kz : this.parentSeries.u9;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.u9 = this.k4;
            }
        }
        f5() {
            if (this.parentSeries == null) {
                return;
            }
            this.k7 = this.k8 != null ? this.k8 : this.parentSeries.vw;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.vw = this.k7;
            }
        }
        gb() {
            if (this.parentSeries == null) {
                return;
            }
            this.bc = !isNaN_(this.bv) ? this.bv : this.parentSeries.jd;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.jd = this.bc;
            }
        }
        ga() {
            if (this.parentSeries == null) {
                return;
            }
            this.z = this.parentSeries.bt;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.bt = this.z;
            }
        }
        g0() {
            if (this.parentSeries == null) {
                return;
            }
            this.aa = this.ab != 0 ? this.ab : this.parentSeries.cg;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.cg = this.aa;
            }
        }
        gq() {
            if (this.parentSeries == null) {
                return;
            }
            this.bd = !isNaN_(this.bw) || this.ay("MarkerFillOpacity") ? this.bw : this.parentSeries.je;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.je = this.bd;
            }
        }
        f6() {
            if (this.parentSeries == null) {
                return;
            }
            this.k9 = this.at("DashCap") ? this.parentSeries.vx : this.lb;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.vx = this.k9;
            }
        }
        gc() {
            if (this.parentSeries == null) {
                return;
            }
            this.al = this.at("IsDropShadowEnabled") ? this.parentSeries.e2 : this.au;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.e2 = this.al;
            }
        }
        g3() {
            if (this.parentSeries == null) {
                return;
            }
            this.bi = !isNaN_(this.b1) || this.ay("ShadowBlur") ? this.b1 : this.parentSeries.jk;
            if (this.visualSeriesLink != null && !isNaN_(this.bi)) {
                this.visualSeriesLink.jk = this.bi;
            }
        }
        g4() {
            if (this.parentSeries == null) {
                return;
            }
            this.k5 = Color.e(toNullable(Color.$, this.k6), toNullable(Color.$, null)) ? this.k6 : this.parentSeries.vv;
            if (this.visualSeriesLink != null && Color.e(toNullable(Color.$, this.k5), toNullable(Color.$, null))) {
                this.visualSeriesLink.vv = this.k5;
            }
        }
        hi() {
            if (this.parentSeries == null) {
                return;
            }
            this.ar = this.at("UseSingleShadow") ? this.parentSeries.ha : this.a4;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ha = this.ar;
            }
        }
        g5() {
            if (this.parentSeries == null) {
                return;
            }
            this.bj = !isNaN_(this.b2) || this.ay("ShadowOffsetX") ? this.b2 : this.parentSeries.jl;
            if (this.visualSeriesLink != null && !isNaN_(this.bj)) {
                this.visualSeriesLink.jl = this.bj;
            }
        }
        g6() {
            if (this.parentSeries == null) {
                return;
            }
            this.bk = !isNaN_(this.b3) || this.ay("ShadowOffsetY") ? this.b3 : this.parentSeries.jm;
            if (this.visualSeriesLink != null && !isNaN_(this.bk)) {
                this.visualSeriesLink.jm = this.bk;
            }
        }
        gd() {
            if (this.parentSeries == null) {
                return;
            }
            this.am = this.av;
        }
        gj() {
            if (this.parentSeries == null) {
                return;
            }
            this.hn = this.hq != null ? this.hq : this.parentSeries.legendItemBadgeTemplate;
            if (this.visualSeriesLink != null) {
                if (this.hn != null) {
                    this.visualSeriesLink.legendItemBadgeTemplate = this.hn;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeTemplate = null;
                }
            }
        }
        gk() {
            if (this.parentSeries == null) {
                return;
            }
            this.ho = this.hr != null ? this.hr : this.parentSeries.legendItemTemplate;
            if (this.visualSeriesLink != null) {
                if (this.ho != null) {
                    this.visualSeriesLink.legendItemTemplate = this.ho;
                }
                else {
                    this.visualSeriesLink.legendItemTemplate = null;
                }
            }
        }
        gl() {
            if (this.parentSeries == null) {
                return;
            }
            this.ls = this.parentSeries.legendItemVisibility != 0 ? 1 : this.lu;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.legendItemVisibility = this.ls;
            }
        }
        gi() {
            if (this.parentSeries == null) {
                return;
            }
            this.q = this.r != 0 ? this.r : this.parentSeries.legendItemBadgeShape;
            if (this.visualSeriesLink != null) {
                if (this.q != 0) {
                    this.visualSeriesLink.legendItemBadgeShape = this.q;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeShape = 0;
                }
            }
        }
        gh() {
            if (this.parentSeries == null) {
                return;
            }
            this.o = this.p != 0 ? this.p : this.parentSeries.bc;
            if (this.visualSeriesLink != null) {
                if (this.o != 0) {
                    this.visualSeriesLink.bc = this.o;
                }
                else {
                    this.visualSeriesLink.bc = 0;
                }
            }
        }
        go() {
            if (this.parentSeries == null) {
                return;
            }
            this.kv = this.k0 != null ? this.k0 : this.parentSeries.yb;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.yb = this.kv;
            }
        }
        gr() {
            if (this.parentSeries == null) {
                return;
            }
            this.kw = this.k1 != null ? this.k1 : this.parentSeries.yc;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.yc = this.kw;
            }
        }
        gt() {
            if (this.parentSeries == null) {
                return;
            }
            this.lq = this.lr != null ? this.lr : this.parentSeries.yd;
            if (this.visualSeriesLink != null) {
                if (this.lq != null) {
                    this.visualSeriesLink.yd = this.lq;
                }
                else {
                    this.visualSeriesLink.yd = null;
                }
            }
        }
        gx() {
            if (this.parentSeries == null) {
                return;
            }
            this.bf = !isNaN_(this.by) || this.ay("Opacity") ? this.by : this.parentSeries._opacity;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._opacity = this.bf;
            }
        }
        gy() {
        }
        gz() {
            if (this.parentSeries == null) {
                return;
            }
            this.ky = this.k3 != null ? this.k3 : this.parentSeries.vp;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.vp = this.ky;
            }
        }
        gg() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.itemsSource = this.itemsSource;
            }
        }
        f9() {
            let a = this.highlightedItemsSource;
            if (a == null && this.parentSeries != null) {
                a = this.parentSeries.highlightedItemsSource;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.highlightedItemsSource = a;
            }
        }
        f3() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.es && !this.parentSeries.fy) {
                a = this.parentSeries.h7;
            }
            if (this.parentSeries.isStacked && this.parentSeries.es && this.parentSeries.fy) {
                a = this.parentSeries.h7;
            }
            this.bb = !isNaN_(this.bm) || this.ay("AreaFillOpacity") ? this.bm : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(AreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.ii = this.bb;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.ii = this.bb;
                }
            }
        }
        ge() {
            if (this.parentSeries == null) {
                return;
            }
            let a = false;
            if (this.parentSeries.isStacked && this.parentSeries.fy && this.parentSeries.es) {
                a = this.parentSeries.abl;
            }
            if (this.parentSeries.isStacked && this.parentSeries.ev) {
                a = this.parentSeries.abl;
            }
            this.an = a;
            if (this.visualSeriesLink != null) {
                if (typeCast(SplineFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.aci = this.an;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.aci = this.an;
                }
            }
        }
        g1() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.ex) {
                a = this.parentSeries.abl;
            }
            if (this.parentSeries.isStacked && this.parentSeries.ev) {
                a = this.parentSeries.abl;
            }
            this.bg = !isNaN_(this.bz) && this.bz != a ? this.bz : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.acs = this.bg;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.acs = this.bg;
                }
            }
        }
        g2() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.ex) {
                a = this.parentSeries.abm;
            }
            if (this.parentSeries.isStacked && this.parentSeries.ev) {
                a = this.parentSeries.abm;
            }
            this.bh = !isNaN_(this.b0) && this.b0 != a ? this.b0 : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.act = this.bh;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.act = this.bh;
                }
            }
        }
        gm() {
            if (this.parentSeries == null) {
                return;
            }
            this.la = this.at("StartCap") ? this.parentSeries.vy : this.lc;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.vy = this.la;
            }
        }
        g7() {
            if (this.parentSeries == null) {
                return;
            }
            this.bl = !isNaN_(this.b4) && this.b4 != this.parentSeries.jn ? this.b4 : this.parentSeries.jn;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.jn = this.bl;
            }
        }
        gn() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.vz = this.parentSeries.vz;
            }
        }
        gv() {
            if (this.parentSeries == null) {
                return;
            }
            this.be = !isNaN_(this.bx) || this.ay("MarkerThickness") ? this.bx : this.parentSeries.xb;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.xb = this.be;
            }
        }
        g9() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.toolTip = this.ck;
            }
        }
        hb() {
            if (this.parentSeries == null) {
                return;
            }
            this.ag = this.ai || this.parentSeries.db;
        }
        ha() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.kb != 0) {
                this.b6 = this.parentSeries.kb;
                return;
            }
            this.b6 = this.at("IsDropShadowEnabled") ? this.parentSeries.kb : this.cd;
        }
        hd() {
            if (this.parentSeries == null) {
                return;
            }
            this.ah = this.at("IsDropShadowEnabled") ? this.parentSeries.dc : this.aj;
        }
        he() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.yw != 0) {
                this.m = this.parentSeries.yw;
                return;
            }
            this.m = this.n;
        }
        hf() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.c3 != 0) {
                this.ad = this.parentSeries.c3;
                return;
            }
            this.ad = this.ae;
        }
        gf() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.zc != false) {
                this.ao = this.parentSeries.zc;
                return;
            }
            this.ao = this.ax;
        }
        hc() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.kc != 1000) {
                this.b7 = this.parentSeries.kc;
                return;
            }
            this.b7 = this.ce;
        }
        hh() {
            if (this.parentSeries == null) {
                return;
            }
            this.aq = this.at("UseLightweightMarkers") ? this.parentSeries.xa : this.a3;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.xa = this.aq;
            }
        }
        g8() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.title = this.cj;
            }
        }
        gp() {
            if (this.parentSeries == null) {
                return;
            }
            this.s = this.t != 0 ? this.t : this.parentSeries.ws;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ws = this.s;
            }
        }
        gs() {
            if (this.parentSeries == null) {
                return;
            }
            this.u = this.v != 0 ? this.v : this.parentSeries.ww;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ww = this.u;
            }
        }
        hg() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.zh = this.ay("UseHighMarkerFidelity") ? this.a2 : this.parentSeries.zh;
            }
        }
        hk() {
            if (this.parentSeries == null) {
                return;
            }
            this.d2 = this.ay("ValueMemberAsLegendUnit") ? this.fr : null;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.aa2 = this.fr;
            }
        }
        hj() {
            if (this.parentSeries == null) {
                return;
            }
            this.d0 = this.ay("ValueMemberAsLegendLabel") ? this.fp : this.cj != null ? this.cj.toString() : null;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.aa0 = this.d0;
            }
        }
        f7() {
            if (this.parentSeries == null) {
                return;
            }
            this.cp = this.ay("DataLegendGroup") ? this.d9 : this.eb();
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.l1 = this.cp;
            }
        }
        f8() {
            if (this.parentSeries == null) {
                return;
            }
            this.cr = this.ay("HighlightedDataLegendGroup") ? this.ed : this.d9;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mh = this.cr;
            }
        }
        hl() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.aa4 = this.ft;
            }
        }
        f0(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        at(a) {
            return !this.a5.contains(a);
        }
        ay(a) {
            return this.a5.contains(a);
        }
        fy(a, b, c, d) {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.a5.contains(b)) {
                this.a5.add(b);
            }
            switch (b) {
                case StackedFragmentSeries.$$p[92]:
                    this.g8();
                    break;
                case StackedFragmentSeries.$$p[105]:
                    this.hl();
                    break;
                case StackedFragmentSeries.$$p[104]:
                    this.hk();
                    break;
                case StackedFragmentSeries.$$p[103]:
                    this.hj();
                    break;
                case StackedFragmentSeries.$$p[106]:
                    this.hm();
                    break;
                case StackedFragmentSeries.$$p[52]:
                    this.f4();
                    break;
                case StackedFragmentSeries.$$p[53]:
                    this.f5();
                    break;
                case StackedFragmentSeries.$$p[54]:
                    this.f6();
                    break;
                case StackedFragmentSeries.$$p[59]:
                    this.gc();
                    break;
                case StackedFragmentSeries.$$p[87]:
                    this.g3();
                    break;
                case StackedFragmentSeries.$$p[88]:
                    this.g4();
                    break;
                case StackedFragmentSeries.$$p[102]:
                    this.hi();
                    break;
                case StackedFragmentSeries.$$p[89]:
                    this.g5();
                    break;
                case StackedFragmentSeries.$$p[90]:
                    this.g6();
                    break;
                case StackedFragmentSeries.$$p[69]:
                    this.gm();
                    break;
                case StackedFragmentSeries.$$p[60]:
                    this.gd();
                    break;
                case StackedFragmentSeries.$$p[76]:
                    this.gu();
                    break;
                case StackedFragmentSeries.$$p[78]:
                    this.gw();
                    break;
                case StackedFragmentSeries.$$p[71]:
                    this.gp();
                    break;
                case StackedFragmentSeries.$$p[73]:
                    this.gs();
                    break;
                case StackedFragmentSeries.$$p[66]:
                    this.gj();
                    break;
                case StackedFragmentSeries.$$p[67]:
                    this.gk();
                    break;
                case StackedFragmentSeries.$$p[68]:
                    this.gl();
                    break;
                case StackedFragmentSeries.$$p[65]:
                    this.gi();
                    break;
                case StackedFragmentSeries.$$p[64]:
                    this.gh();
                    break;
                case StackedFragmentSeries.$$p[70]:
                    this.go();
                    break;
                case StackedFragmentSeries.$$p[74]:
                    this.gr();
                    break;
                case StackedFragmentSeries.$$p[75]:
                    this.gt();
                    break;
                case StackedFragmentSeries.$$p[77]:
                    this.gv();
                    break;
                case StackedFragmentSeries.$$p[81]:
                    this.gx();
                    break;
                case StackedFragmentSeries.$$p[80]:
                    this.gy();
                    break;
                case StackedFragmentSeries.$$p[63]:
                    this.gg();
                    break;
                case StackedFragmentSeries.$$p[56]:
                    this.f9();
                    break;
                case StackedFragmentSeries.$$p[83]:
                    this.gz();
                    break;
                case StackedFragmentSeries.$$p[82]:
                    this.g0();
                    break;
                case StackedFragmentSeries.$$p[72]:
                    this.gq();
                    break;
                case StackedFragmentSeries.$$p[51]:
                    this.f3();
                    break;
                case StackedFragmentSeries.$$p[85]:
                    this.g1();
                    break;
                case StackedFragmentSeries.$$p[86]:
                    this.g2();
                    break;
                case StackedFragmentSeries.$$p[61]:
                    this.ge();
                    break;
                case StackedFragmentSeries.$$p[91]:
                    this.g7();
                    break;
                case StackedFragmentSeries.$$p[93]:
                    this.g9();
                    break;
                case StackedFragmentSeries.$$p[95]:
                    this.hb();
                    break;
                case StackedFragmentSeries.$$p[97]:
                    this.hd();
                    break;
                case StackedFragmentSeries.$$p[94]:
                    this.ha();
                    break;
                case StackedFragmentSeries.$$p[62]:
                    this.gf();
                    break;
                case StackedFragmentSeries.$$p[98]:
                    this.he();
                    break;
                case StackedFragmentSeries.$$p[99]:
                    this.hf();
                    break;
                case StackedFragmentSeries.$$p[96]:
                    this.hc();
                    break;
                case StackedFragmentSeries.$$p[101]:
                    this.hh();
                    break;
                case StackedFragmentSeries.$$p[100]:
                    this.hg();
                    break;
            }
            this.parentSeries.rn(false);
        }
        f1() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.rr();
            }
        }
    }
    StackedFragmentSeries.$t = markType(StackedFragmentSeries, 'StackedFragmentSeries', DependencyObject.$, [INotifyPropertyChanged_$type]);
    StackedFragmentSeries.$$p = markDep(DependencyProperty, PropertyMetadata, StackedFragmentSeries, 'f0', ['ActualAreaFillOpacity:bb:ht', [1, NaN], 'ActualBrush:ku:hu', [Brush.$], 'ActualDashArray:k7:hv', [DoubleCollection.$], 'ActualDashCap:k9:hw', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'ActualDataLegendGroup:cp:hx', [2, null], 'ActualHighlightedValuesDataLegendGroup:cr:hy', [2, null], 'ActualHighlightedValuesDisplayMode:z:hz', [SeriesHighlightedValuesDisplayMode_$type, enumGetBox(SeriesHighlightedValuesDisplayMode_$type, 1)], 'ActualHighlightingFadeOpacity:bc:h0', [1, NaN], 'ActualIsDropShadowEnabled:al:h1', [0, false], 'ActualIsHitTestVisible:am:h2', [0, true], 'ActualIsSplineShapePartOfRange:an:h3', [0, false], 'ActualIsTransitionInEnabled:ao:h4', [0], 'ActualLegendItemBadgeMode:o:h5', [LegendItemBadgeMode_$type], 'ActualLegendItemBadgeShape:q:h6', [LegendItemBadgeShape_$type], 'ActualLegendItemBadgeTemplate:hn:h7', [DataTemplate.$], 'ActualLegendItemTemplate:ho:h8', [DataTemplate.$], 'ActualLegendItemVisibility:ls:h9', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'ActualLineCap:la:ia', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'ActualMarkerBrush:kv:ib', [Brush.$], 'ActualMarkerFillMode:s:ic', [MarkerFillMode_$type, enumGetBox(MarkerFillMode_$type, 0)], 'ActualMarkerFillOpacity:bd:id', [1, NaN], 'ActualMarkerOutlineMode:u:ie', [MarkerOutlineMode_$type, enumGetBox(MarkerOutlineMode_$type, 0)], 'ActualMarkerOutline:kw:ig', [Brush.$], 'ActualMarkerStyle:lq:ih', [Style.$], 'ActualMarkerTemplate:hp:ii', [DataTemplate.$], 'ActualMarkerThickness:be:ij', [1, 1], 'ActualMarkerType:w:ik', [MarkerType_$type, enumGetBox(MarkerType_$type, 1)], 'ActualOpacityMask:kx:il', [Brush.$], 'ActualOpacity:bf:im', [1, NaN], 'ActualOutlineMode:aa:io', [SeriesOutlineMode_$type, enumGetBox(SeriesOutlineMode_$type, 0)], 'ActualOutline:ky:ip', [Brush.$], 'ActualRadiusX:bg:iq', [1, 0], 'ActualRadiusY:bh:ir', [1, 0], 'ActualShadowBlur:bi:is', [1, NaN], 'ActualShadowColor:k5:it', [Color.$], 'ActualShadowOffsetX:bj:iu', [1, NaN], 'ActualShadowOffsetY:bk:iv', [1, NaN], 'ActualThickness:bl:iw', [1, 1], 'ActualToolTip:cf:ix', [4], 'ActualTransitionDuration:b6:iy', [1], 'ActualTransitionEasingFunction:ag:iz', [Delegate_$type], 'ActualTransitionInDuration:b7:i0', [1], 'ActualTransitionInEasingFunction:ah:i1', [Delegate_$type], 'ActualTransitionInMode:m:i2', [CategoryTransitionInMode_$type], 'ActualTransitionInSpeedType:ad:i3', [TransitionInSpeedType_$type], 'ActualUseHighMarkerFidelity:ap:i4', [0, false], 'ActualUseLightweightMarkers:aq:i5', [0, false], 'ActualUseSingleShadow:ar:i6', [0, true], 'ActualValueMemberAsLegendLabel:d0:i7', [2, null], 'ActualValueMemberAsLegendUnit:d2:i8', [2, null], 'ActualVisibility:lt:i9', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'AreaFillOpacity:bm:ja', [1, NaN], 'Brush:kz:jb', [Brush.$], 'DashArray:k8:jc', [DoubleCollection.$], 'DashCap:lb:jd', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'DataLegendGroup:d9:je', [2, null], 'HighlightedItemsSource::jf', [IEnumerable_$type, null], 'HighlightedValuesDataLegendGroup:ed:jg', [2, null], 'HighlightingFadeOpacity:bv:jh', [1, NaN], 'IsDropShadowEnabled:au:ji', [0], 'IsHitTestVisible:av:jj', [0, true], 'IsSplineShapePartOfRange:aw:jk', [0, false], 'IsTransitionInEnabled:ax:jl', [0, false], 'ItemsSource::jm', [IEnumerable_$type, null], 'LegendItemBadgeMode:p:jn', [LegendItemBadgeMode_$type, enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape:r:jo', [LegendItemBadgeShape_$type, enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemBadgeTemplate:hq:jp', [DataTemplate.$, null], 'LegendItemTemplate:hr:jq', [DataTemplate.$, null], 'LegendItemVisibility:lu:jr', [Visibility_$type, enumGetBox(Visibility_$type, 0)], 'LineCap:lc:js', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)], 'MarkerBrush:k0:jt', [Brush.$], 'MarkerFillMode:t:ju', [MarkerFillMode_$type, enumGetBox(MarkerFillMode_$type, 0)], 'MarkerFillOpacity:bw:jv', [1, NaN], 'MarkerOutlineMode:v:jw', [MarkerOutlineMode_$type, enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:k1:jx', [Brush.$], 'MarkerStyle:lr:jy', [Style.$], 'MarkerTemplate:hs:jz', [DataTemplate.$, null], 'MarkerThickness:bx:j0', [1, NaN], 'MarkerType:x:j1', [MarkerType_$type, enumGetBox(MarkerType_$type, 2)], 'Name:e0:j2', [2], 'OpacityMask:k2:j3', [Brush.$], 'Opacity:by:j4', [1, 1], 'OutlineMode:ab:j5', [SeriesOutlineMode_$type, enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:k3:j6', [Brush.$, null], 'ParentOrLocalBrush:k4:j7', [Brush.$], 'RadiusX:bz:j8', [1, NaN], 'RadiusY:b0:j9', [1, NaN], 'ShadowBlur:b1:ka', [1, NaN], 'ShadowColor:k6:kb', [Color.$], 'ShadowOffsetX:b2:kc', [1, NaN], 'ShadowOffsetY:b3:kd', [1, NaN], 'Thickness:b4:ke', [1, NaN], 'Title:cj:kf', [4, "Series Title"], 'ToolTip:ck:kg', [4, null], 'TransitionDuration:cd:kh', [1, 0], 'TransitionEasingFunction:ai:ki', [Delegate_$type, null], 'TransitionInDuration:ce:kj', [1, 1000], 'TransitionInEasingFunction:aj:kk', [Delegate_$type, null], 'TransitionInMode:n:kl', [CategoryTransitionInMode_$type, enumGetBox(CategoryTransitionInMode_$type, 0)], 'TransitionInSpeedType:ae:km', [TransitionInSpeedType_$type, enumGetBox(TransitionInSpeedType_$type, 0)], 'UseHighMarkerFidelity:a2:kn', [0, false], 'UseLightweightMarkers:a3:ko', [0, false], 'UseSingleShadow:a4:kp', [0], 'ValueMemberAsLegendLabel:fp:kq', [2, null], 'ValueMemberAsLegendUnit:fr:kr', [2, null], 'ValueMemberPath:ft:ks', [2, null], 'Visibility:lv:kt', [Visibility_$type, enumGetBox(Visibility_$type, 0)]]);
    return StackedFragmentSeries;
})();
/**
 * @hidden
 */
export let StackedSeriesCollection = /*@__PURE__*/ (() => {
    class StackedSeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(StackedFragmentSeries.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    StackedSeriesCollection.$t = markType(StackedSeriesCollection, 'StackedSeriesCollection', ObservableCollection$1.$.specialize(StackedFragmentSeries.$));
    return StackedSeriesCollection;
})();
/**
 * @hidden
 */
export let StackedSeriesFramePreparer = /*@__PURE__*/ (() => {
    class StackedSeriesFramePreparer extends CategoryFramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                    }
                    break;
            }
        }
        j(a) {
            let b = new SingleValuesHolder();
            if (typeCast(StackedColumnSeries.$, this.h) !== null || typeCast(StackedBarSeries.$, this.h) !== null) {
                let c = typeCast(StackedSeriesBase.$, this.h);
                if (c.aaf.count > 0) {
                    b.f = c.aaf._inner[0].ak;
                }
                return b;
            }
            let d = this.ad.valueColumn;
            b.f = d;
            return b;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h;
            let i = a.d != null;
            let j = this.h.provideCollisionDetector();
            let k = a.f;
            let l = a.n;
            let m = this.h.mayContainUnknowns;
            let n = new ScalerParams(0, a.p, a.o, a.b.j$b, l);
            let o = new ScalerParams(0, a.p, a.o, a.c.j$b, l);
            o.b = this.h.getHostReferenceValue();
            let p = (a.b.j$d(2, n) - a.b.j$d(1, n));
            let q = a.p;
            let r = a.o;
            let s = typeCast(NumericAxisBase.$, a.c) !== null && a.c.lk;
            for (let t = a.k; t <= a.l; ++t) {
                let u;
                if (a.d == null) {
                    if (!m) {
                        u = this.g.getBucketWithoutUnknowns(t);
                    }
                    else {
                        u = this.g.getBucket(t);
                    }
                }
                else {
                    u = ((() => { let v = this.f(a, t, b, p, g, h, c); t = v.p1; g = v.p4; h = v.p5; return v.ret; })());
                }
                let v = !s || (s && u[1] > 0);
                let w = u[0];
                if (!isNaN_(u[0])) {
                    this.x(a, u, c, i, n, o);
                    a.a.f.add(u);
                    let x = t * a.j;
                    let y = x;
                    if (a.d != null && a.d.i$b != null && x >= 0 && x < a.d.i$b.count) {
                        x = a.d.i$b._inner[x];
                    }
                    let z = u;
                    if (k && x < b.e) {
                        z = new Array(u.length);
                        z[0] = w;
                        this.z(b, x, true, a.e);
                        z[1] = b.c;
                        z[2] = b.d;
                        this.x(a, z, c, i, n, o);
                    }
                    if (d && v && this.l(a.a, z, j, Math.min(x, b.e - 1), f, a.a.f.count - 1)) {
                        ++f;
                    }
                }
            }
            return f;
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            if (typeCast(IBarSeries_$type, this.c) !== null) {
                h = b[0];
                g = b[1];
            }
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.n.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
    }
    StackedSeriesFramePreparer.$t = markType(StackedSeriesFramePreparer, 'StackedSeriesFramePreparer', CategoryFramePreparer.$);
    return StackedSeriesFramePreparer;
})();
/**
 * @hidden
 */
export let AreaFragmentView = /*@__PURE__*/ (() => {
    class AreaFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.df = null;
            this.dl = new Path();
            this.dn = new Path();
            this.dm = new Path();
            this.dp = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.di = new Path();
            this.dk = new Path();
            this.df = a;
        }
        au() {
            super.au();
            if (!this.q) {
            }
        }
        dg() {
            this.dl.an = null;
            this.dm.an = null;
            this.dn.an = null;
            this.dp.an = null;
            this.dh.an = null;
            this.di.an = null;
            this.dj.an = null;
            this.dk.an = null;
        }
        cx() {
            return new AreaFragmentBucketCalculator(this);
        }
        bd() {
            super.bd();
        }
        be() {
            super.be();
            let a = this.br();
            this.dh.an = this.dl.an;
            this.di.an = this.dm.an;
            this.dj.an = this.dn.an;
            this.dk.an = this.dp.an;
            this.dh._fill = a;
            this.di._fill = a;
            this.dh._opacity = 1;
            this.di._opacity = 1;
            this.dj._stroke = a;
            this.dj.ad = this.e.ic + 3;
            this.dk._stroke = a;
            this.dk.ad = this.e.ic + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dh);
                    a.t(this.di);
                    a.t(this.dj);
                    a.t(this.dk);
                }
                else {
                    a.t(this.dl);
                    a.t(this.dm);
                    a.t(this.dn);
                    a.t(this.dp);
                }
            }
        }
        get_index() {
            let a = this.df.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.df.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.ct.index;
            return e + d;
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.dn, "lowerShape", ["Lower"]);
            this.e.bb.exportPathData(a, this.dp, "upperShape", ["Upper", "Main"]);
            this.e.bb.exportPathData(a, this.dm, "translucentShape", ["Translucent"]);
            this.e.bb.exportPathData(a, this.dl, "fillShape", ["Fill"]);
        }
    }
    AreaFragmentView.$t = markType(AreaFragmentView, 'AreaFragmentView', AnchoredCategorySeriesView.$);
    return AreaFragmentView;
})();
/**
 * @hidden
 */
export let ColumnFragmentView = /*@__PURE__*/ (() => {
    class ColumnFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.df = null;
            this.dj = null;
            this.dg = null;
            this.dh = null;
            this.di = null;
            this.dp = new Rectangle();
            this.df = a;
            this.dh = new List$1(Number_$type, 0);
            this.di = new List$1(Number_$type, 0);
            this.dg = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dq);
                $ret.activate = runOn(this, this.dk);
                $ret.disactivate = runOn(this, this.dm);
                $ret.destroy = runOn(this, this.dl);
                return $ret;
            })());
            this.dj = new List$1(Rectangle.$, 0);
        }
        au() {
            super.au();
            if (!this.q) {
            }
        }
        dq() {
            let a = ((() => {
                let $ret = new Rectangle();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.dj.add(a);
            a._visibility = 1;
            return a;
        }
        dk(a) {
            a._visibility = 0;
        }
        dm(a) {
            a._visibility = 1;
        }
        dl(a) {
            this.dj.remove(a);
        }
        bg(a, b) {
            super.bg(a, b);
            let c = a;
        }
        dn(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.as();
            }
        }
        bh(a, b) {
            super.bh(a, b);
        }
        ac(a) {
            return this.dj._inner[a];
        }
        ab(a) {
            let b = this.dj._inner[a];
            this.dp._visibility = b._visibility;
            this.dp.n = b.n;
            this.dp.o = b.o;
            this.dp.width = b.width;
            this.dp.height = b.height;
            let c = this.bs(a);
            this.dp._fill = c;
            this.dp._stroke = c;
            this.dp.ad = this.e.ic + 3;
            return this.dp;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                for (let c = 0; c < this.dj.count; c++) {
                    let d = this.aa(c, b);
                    this.bf(d, c, b);
                    a.w(d);
                }
            }
        }
        get_index() {
            let a = this.df.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.df.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.ct.index;
            return e + d;
        }
        an(a) {
            super.an(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.dg.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.bb.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            let b = null;
            if (this.df.yk().cb) {
                b = this.df.fragmentXAxis;
            }
            else if (this.df.fragmentYAxis.cb) {
                b = this.df.fragmentYAxis;
            }
            if (b.ce) {
                let c = b;
                a += "<span>${item." + c.dateTimeMemberPath + "}</span><br/>";
            }
            if (b != null && b.f1 != null) {
                a += "<span>${item." + b.f1 + "}</span><br/>";
            }
            a += "<span";
            let d = this.e.a9.a$u(this.e);
            if (!stringIsNullOrEmpty(d)) {
                a += " style='color:" + d + "'";
            }
            a += ">" + this.df.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.df.aa4 + "}</span></div>";
            return a;
        }
    }
    ColumnFragmentView.$t = markType(ColumnFragmentView, 'ColumnFragmentView', AnchoredCategorySeriesView.$);
    return ColumnFragmentView;
})();
/**
 * @hidden
 */
export let LineFragmentView = /*@__PURE__*/ (() => {
    class LineFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.df = null;
            this.dl = new Path();
            this.dk = new Path();
            this.dm = new Path();
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.df = a;
        }
        dg() {
            this.dk.an = null;
            this.dl.an = null;
            this.dm.an = null;
            this.dh.an = null;
            this.di.an = null;
            this.dj.an = null;
        }
        cx() {
            return new LineFragmentBucketCalculator(this);
        }
        bd() {
            super.bd();
        }
        be() {
            super.be();
            let a = this.br();
            this.dh.an = this.dk.an;
            this.di.an = this.dl.an;
            this.dj.an = this.dm.an;
            this.di._stroke = a;
            this.di.ad = this.e.ic + 3;
            this.dj._stroke = a;
            this.dj.ad = this.e.ic + 3;
            this.dh._fill = a;
            this.dh._opacity = 1;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dh);
                    a.t(this.di);
                    a.t(this.dj);
                }
                else {
                    a.t(this.dk);
                    a.t(this.dl);
                    a.t(this.dm);
                }
            }
        }
        get_index() {
            let a = this.df.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.df.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.ct.index;
            return e + d;
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.dl, "lowerShape", ["Lower", "Main"]);
            this.e.bb.exportPathData(a, this.dm, "upperShape", ["Upper"]);
            this.e.bb.exportPathData(a, this.dk, "translucentShape", ["Translucent"]);
        }
    }
    LineFragmentView.$t = markType(LineFragmentView, 'LineFragmentView', AnchoredCategorySeriesView.$);
    return LineFragmentView;
})();
/**
 * @hidden
 */
export let SplineAreaFragmentView = /*@__PURE__*/ (() => {
    class SplineAreaFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dh = null;
            this.dn = new Path();
            this.dq = new Path();
            this.dp = new Path();
            this.dr = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.dk = new Path();
            this.dm = new Path();
            this.dh = a;
        }
        au() {
            super.au();
            if (!this.q) {
            }
        }
        di() {
            this.dn.an = null;
            this.dp.an = null;
            this.dq.an = null;
            this.dr.an = null;
            this.dj.an = null;
            this.dk.an = null;
            this.dl.an = null;
            this.dm.an = null;
        }
        bd() {
            super.bd();
        }
        be() {
            super.be();
            let a = this.br();
            this.dj.an = this.dn.an;
            this.dk.an = this.dp.an;
            this.dl.an = this.dq.an;
            this.dm.an = this.dr.an;
            this.dj._fill = a;
            this.dk._fill = a;
            this.dk._opacity = 1;
            this.dj._opacity = 1;
            this.dl._stroke = a;
            this.dl.ad = this.e.ic + 3;
            this.dm._stroke = a;
            this.dm.ad = this.e.ic + 3;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dj);
                    a.t(this.dk);
                    a.t(this.dl);
                    a.t(this.dm);
                }
                else {
                    a.t(this.dn);
                    a.t(this.dp);
                    a.t(this.dq);
                    a.t(this.dr);
                }
            }
        }
        get_index() {
            let a = this.dh.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dh.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.ct.index;
            return e + d;
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.dq, "lowerShape", ["Lower"]);
            this.e.bb.exportPathData(a, this.dr, "upperShape", ["Upper", "Main"]);
            this.e.bb.exportPathData(a, this.dp, "translucentShape", ["Translucent"]);
            this.e.bb.exportPathData(a, this.dn, "fillShape", ["Fill"]);
        }
    }
    SplineAreaFragmentView.$t = markType(SplineAreaFragmentView, 'SplineAreaFragmentView', SplineSeriesBaseView.$);
    return SplineAreaFragmentView;
})();
/**
 * @hidden
 */
export let SplineFragmentView = /*@__PURE__*/ (() => {
    class SplineFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dh = null;
            this.dn = new Path();
            this.dm = new Path();
            this.dp = new Path();
            this.dk = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.dh = a;
        }
        cx() {
            return new SplineFragmentBucketCalculator(this);
        }
        di() {
            this.dm.an = null;
            this.dn.an = null;
            this.dp.an = null;
            this.dj.an = null;
            this.dk.an = null;
            this.dl.an = null;
        }
        bd() {
            super.bd();
        }
        be() {
            super.be();
            let a = this.br();
            this.dj.an = this.dm.an;
            this.dk.an = this.dn.an;
            this.dl.an = this.dp.an;
            this.dk._stroke = a;
            this.dk.ad = this.e.ic + 3;
            this.dl._stroke = a;
            this.dl.ad = this.e.ic + 3;
            this.dj._fill = a;
            this.dj._opacity = 0.75;
        }
        a8(a, b) {
            super.a8(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dj);
                    a.t(this.dk);
                    a.t(this.dl);
                }
                else {
                    a.t(this.dm);
                    a.t(this.dn);
                    a.t(this.dp);
                }
            }
        }
        get_index() {
            let a = this.dh.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dh.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.ct.index;
            return e + d;
        }
        an(a) {
            super.an(a);
            this.e.bb.exportPathData(a, this.dn, "lowerShape", ["Lower", "Main"]);
            this.e.bb.exportPathData(a, this.dp, "upperShape", ["Upper"]);
            this.e.bb.exportPathData(a, this.dm, "translucentShape", ["Translucent"]);
        }
    }
    SplineFragmentView.$t = markType(SplineFragmentView, 'SplineFragmentView', SplineSeriesBaseView.$);
    return SplineFragmentView;
})();
/**
 * @hidden
 */
export let StackedSeriesView = /*@__PURE__*/ (() => {
    class StackedSeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c6 = new Canvas();
            this.c8 = new Panel();
            this.c5 = a;
        }
        get c7() {
            return this.c6;
        }
        get c9() {
            return this.c8;
        }
        cx() {
            return new StackedBucketCalculator(this);
        }
        ar() {
            super.ar();
            for (let a = 0; a < this.c5.aak.f.count; a++) {
                this.c5.aak.f._inner[a].ct.ar();
            }
        }
        at(a, b) {
            super.at(a, b);
            for (let c of fromEnum(this.c5.series)) {
                c.visualSeriesLink.ct.at(a, b);
            }
        }
        af() {
            let a = "rgba(95,95,95,0.5)";
            let b = true;
            let c = 5, d = 5, e = 5;
            let f = this.e;
            if ((f.isStacked && f.es) || (f.isStacked && f.fy && f.es)) {
                d = 1;
                e = -3;
            }
            else if ((f.isStacked && f.fi) || (f.isStacked && f.fy)) {
                c = 3;
                d = 1;
                e = 4;
                b = false;
            }
            else if ((f.isStacked && f.ex)) {
                d = 5;
                e = 0;
            }
            let g = new Color();
            g.colorString = a;
            f.vv = g;
            f.jk = c;
            f.jl = d;
            f.jm = e;
            f.ha = b;
        }
    }
    StackedSeriesView.$t = markType(StackedSeriesView, 'StackedSeriesView', CategorySeriesView.$);
    return StackedSeriesView;
})();
/**
 * @hidden
 */
export let StackedBarSeriesView = /*@__PURE__*/ (() => {
    class StackedBarSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.da = a;
        }
        cx() {
            return new StackedBarBucketCalculator(this);
        }
        au() {
            super.au();
            if (!this.q) {
                this.c5.w2 = Defaults.c;
                this.c5.jn = Defaults.i;
            }
        }
    }
    StackedBarSeriesView.$t = markType(StackedBarSeriesView, 'StackedBarSeriesView', StackedSeriesView.$);
    return StackedBarSeriesView;
})();
/**
 * @hidden
 */
export let StackedColumnSeriesView = /*@__PURE__*/ (() => {
    class StackedColumnSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        cx() {
            return new StackedColumnBucketCalculator(this);
        }
        au() {
            super.au();
            if (!this.q) {
                this.c5.w2 = Defaults.c;
                this.c5.jn = Defaults.i;
            }
        }
    }
    StackedColumnSeriesView.$t = markType(StackedColumnSeriesView, 'StackedColumnSeriesView', StackedSeriesView.$);
    return StackedColumnSeriesView;
})();
/**
 * @hidden
 */
export let StackedAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        au() {
            super.au();
            if (!this.q) {
                this.c5.w2 = Defaults.e;
            }
        }
    }
    StackedAreaSeriesView.$t = markType(StackedAreaSeriesView, 'StackedAreaSeriesView', StackedSeriesView.$);
    return StackedAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        au() {
            super.au();
            if (!this.q) {
                this.c5.w2 = Defaults.e;
            }
        }
        da() {
            let a = 1;
            if (this.c5.c9 != null) {
                a = this.c5.c9.hb;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineAreaSeriesView.$t = markType(StackedSplineAreaSeriesView, 'StackedSplineAreaSeriesView', StackedSeriesView.$);
    return StackedSplineAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        au() {
            super.au();
            if (!this.q) {
                this.c5.w2 = Defaults.e;
            }
        }
        da() {
            let a = 1;
            if (this.c5.c9 != null) {
                a = this.c5.c9.hb;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineSeriesView.$t = markType(StackedSplineSeriesView, 'StackedSplineSeriesView', StackedSeriesView.$);
    return StackedSplineSeriesView;
})();
/**
 * @hidden
 */
export let StackedSeriesManager = /*@__PURE__*/ (() => {
    class StackedSeriesManager extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.d = null;
            this.k = null;
            this.l = null;
            if (a == null) {
                return;
            }
            this.b = a;
            this.f = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.c = new StackedSeriesCollection();
            this.e = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.d = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.k = this.b.aal.c7;
            this.l = this.b.aal.c9;
            let b = this.c;
            b.collectionChanged = delegateCombine(b.collectionChanged, (b, c) => {
                if (c.oldItems != null) {
                    for (let d of fromEn(c.oldItems)) {
                        if (this.f.contains(d.visualSeriesLink)) {
                            this.f.remove(d.visualSeriesLink);
                        }
                    }
                }
                if (c.newItems != null) {
                    let e = c.newStartingIndex;
                    for (let f of fromEn(c.newItems)) {
                        let g = this.a(f);
                        this.f.insert(e, g);
                        e++;
                    }
                }
            });
            let c = this.f;
            c.collectionChanged = delegateCombine(c.collectionChanged, (c, d) => {
                if (d.oldItems != null) {
                    for (let e of fromEn(d.oldItems)) {
                        Series.pk(e, this.b.c9, true);
                        e.o3(true, e.ct);
                        e.c9 = null;
                        e.c1 = null;
                        e.itemsSource = null;
                        e.legend = null;
                        if (this.l != null && this.l.ab.contains(e)) {
                            this.l.ab.remove(e);
                        }
                        if (this.b.c9 != null) {
                            this.b.c9.qq(e);
                        }
                    }
                }
                if (d.newItems != null) {
                    for (let f of fromEn(d.newItems)) {
                        Series.pk(f, this.b.c9, false);
                        f.c9 = this.b.c9;
                        f.c1 = this.b.c1;
                        if (!this.l.ab.contains(f)) {
                            this.l.ab.add(f);
                        }
                        if (this.b.c9 != null) {
                            this.b.c9.mw(f);
                        }
                    }
                }
                this.b.rn(false);
            });
        }
        a(a) {
            if (this.b.isStacked && this.b.fi) {
                let b = new LineFragment();
                b.provideRenderer(a.b5);
                b.parentSeries = this.b;
                a.visualSeriesLink = b;
                b.logicalSeriesLink = a;
                b.ct.bx = this.b.ct.bx;
                this.i(b, a);
                this.g(b);
                return b;
            }
            if (this.b.isStacked && this.b.ex) {
                let c = new ColumnFragment();
                c.provideRenderer(a.b5);
                c.parentSeries = this.b;
                a.visualSeriesLink = c;
                c.logicalSeriesLink = a;
                c.ct.bx = this.b.ct.bx;
                this.i(c, a);
                this.g(c);
                return c;
            }
            if (this.b.isStacked && this.b.ev) {
                let d = new BarFragment();
                d.provideRenderer(a.b5);
                d.parentSeries = typeCast(StackedBarSeries.$, this.b);
                a.visualSeriesLink = d;
                d.logicalSeriesLink = a;
                d.ct.bx = this.b.ct.bx;
                this.i(d, a);
                this.g(d);
                return d;
            }
            if (this.b.isStacked && this.b.es && !this.b.fy) {
                let e = new AreaFragment();
                e.provideRenderer(a.b5);
                e.parentSeries = this.b;
                a.visualSeriesLink = e;
                e.logicalSeriesLink = a;
                e.ct.bx = this.b.ct.bx;
                this.i(e, a);
                this.g(e);
                return e;
            }
            if (this.b.isStacked && this.b.fy && !this.b.es) {
                let f = new SplineFragment();
                f.provideRenderer(a.b5);
                f.parentSeries = this.b;
                a.visualSeriesLink = f;
                f.logicalSeriesLink = a;
                f.ct.bx = this.b.ct.bx;
                this.i(f, a);
                this.g(f);
                return f;
            }
            if (this.b.isStacked && this.b.fy && this.b.es) {
                let g = new SplineAreaFragment();
                g.provideRenderer(a.b5);
                g.parentSeries = this.b;
                a.visualSeriesLink = g;
                g.logicalSeriesLink = a;
                g.ct.bx = this.b.ct.bx;
                this.i(g, a);
                this.g(g);
                return g;
            }
            return null;
        }
        j() {
            if (this.b == null) {
                return;
            }
            for (let a of fromEnum(this.f)) {
                a.jh = this.b.ib;
            }
        }
        i(a, b) {
            if (b.itemsSource == null) {
                a.itemsSource = this.b.itemsSource;
            }
            else {
                a.itemsSource = b.itemsSource;
            }
            if (b.highlightedItemsSource == null) {
                a.highlightedItemsSource = this.b.highlightedItemsSource;
            }
            else {
                a.highlightedItemsSource = b.highlightedItemsSource;
            }
            a.legend = this.b.a4;
            a.legendItemTemplate = b.ho;
            a.legendItemVisibility = b.ls;
            a.jf = this.b.jf;
            a.vy = b.la;
            a.vw = b.k7;
            a.vx = b.k9;
            a.u9 = b.k4;
            a._opacity = b.by;
            a.vp = b.ky;
            a.cg = b.aa;
            a.jh = this.b.jh;
            a.jn = b.bl;
            a.title = b.cj;
            a.aa4 = b.ft;
            a.aa0 = b.fp;
            a.aa2 = b.fr;
            a._visibility = b.lt;
            a.jd = b.bc;
            a.bt = b.z;
            a.l1 = b.d9;
            a.mh = b.ed;
            a.yb = b.kv;
            a.yc = b.kw;
            a.ww = b.u;
            a.yd = b.lq;
            a.xu = b.hp;
            a.w2 = b.w;
            a.xb = b.be;
            a.je = b.bd;
            a.ws = b.s;
            a.xa = b.aq;
            a.zh = b.ap;
            a.kb = b.b6;
            a.db = b.ag;
            a.kc = b.b7;
            a.yw = b.m;
            a.c3 = b.ad;
            a.kc = b.b7;
            a.dc = b.ah;
            a.zc = b.ao;
            let c = typeCast(AreaFragment.$, a);
            if (c != null) {
                c.h7 = b.bb;
            }
            let d = typeCast(SplineAreaFragment.$, a);
            if (d != null) {
                d.h7 = b.bb;
            }
            let e = typeCast(ColumnFragment.$, a);
            if (e != null) {
                e.acs = b.bg;
                e.act = b.bh;
            }
            let f = typeCast(BarFragment.$, a);
            if (f != null) {
                f.acs = b.bg;
                f.act = b.bh;
            }
            a.toolTip = b.ck;
            a.e2 = b.al;
            a.ha = b.ar;
            b.g3();
            b.g4();
            b.g5();
            b.g6();
        }
        h(a) {
            this.e.clear();
            this.d.clear();
            let b = 0;
            for (let c of fromEnum(this.f)) {
                c.gy = true;
                c.index = this.b.aaw(this.c._inner[b]);
                c.c1 = this.b.c1;
                c.c9 = this.b.c9;
                if (this.c._inner[b].az) {
                    this.e.add(c);
                }
                else {
                    this.d.add(c);
                }
                if ((this.b.isStacked && this.b.fi) || (this.b.isStacked && this.b.es) || (this.b.isStacked && this.b.fy)) {
                    c.aa8(this.b.fetchXAxis());
                    c.aa9(this.b.fetchYAxis());
                }
                c.rn(a);
                b++;
            }
        }
        g(a) {
            let fragment_ = a;
            fragment_.externalObject = TypeRegistrar.createFromInternal(fragment_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            fragment_.externalObject._implementation = fragment_;
        }
    }
    StackedSeriesManager.$t = markType(StackedSeriesManager, 'StackedSeriesManager');
    return StackedSeriesManager;
})();
