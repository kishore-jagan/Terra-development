import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { IgxHorizontalAnchoredCategorySeriesComponent } from "./igx-horizontal-anchored-category-series-component";
import { IgxAnchoredCategorySeriesComponent } from "./igx-anchored-category-series-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { LineSeries } from "./LineSeries";
import { ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent line series.
 * Displays trend over time or ordered categories.
 * Useful when there are many data points and the order is important.
*
* `LineSeries` belongs to a group of `CategorySeries` and it is rendered using a collection of points connected by straight line segments.
*
* ```html
*  <igx-data-chart
*     [dataSource]="data">
*     <igx-category-x-axis
*         label="label"
*         #xAxis>
*     </igx-category-x-axis>
*     <igx-numeric-y-axis
*         #yAxis>
*     </igx-numeric-y-axis>
*     <igx-line-series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value">
*     </igx-line-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series: IgxLineSeriesComponent = new IgxLineSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath = "value";
* this.chart.series.add(series);
* ```
*/
export let IgxLineSeriesComponent = /*@__PURE__*/ (() => {
    class IgxLineSeriesComponent extends IgxHorizontalAnchoredCategorySeriesComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new LineSeries();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the current series shows only line shapes.
        */
        get isLineOnly() {
            return this.i.fi;
        }
        /**
         * Gets whether the current series shows an area or line shape.
        *
        * Gets whether the `Series` shows an area or a line shape.
        *
        * ```ts
        * let isAreaOrLine: boolean = series.isAreaOrLine;
        * ```
        */
        get isAreaOrLine() {
            return this.i.et;
        }
        /**
         * Determines how unknown values will be plotted on the chart.
         * Null and Double.NaN are two examples of unknown values.
        *
        * Determines how unknown values will be plotted for the `Series`. This can be set to `LinearInterpolate` to create a continous shape or `DontPlot` to create breaks in the series.
        *
        * Null and Double.NaN are two examples of unknown values.
        *
        * ```html
        * <igx-data-chart #chart
        *     [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *         #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-line-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         valueMemberPath="value"
        *         unknownValuePlotting="LinearInterpolate">
        *     </igx-line-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.unknownValuePlotting = UnknownValuePlotting.LinearInterpolate;
        * ```
        */
        get unknownValuePlotting() {
            return this.i.unknownValuePlotting;
        }
        set unknownValuePlotting(v) {
            this.i.unknownValuePlotting = ensureEnum(UnknownValuePlotting_$type, v);
        }
    }
    IgxLineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxLineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxLineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxLineSeriesComponent, selector: "igx-line-series", inputs: { unknownValuePlotting: "unknownValuePlotting" }, providers: [{ provide: IgxHorizontalAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxLineSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxLineSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-line-series',
                    template: ``,
                    providers: [{ provide: IgxHorizontalAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxAnchoredCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxLineSeriesComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { unknownValuePlotting: [{
                type: Input
            }] } });
