import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { IgxSeriesComponent } from "./igx-series-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { IgxAnnotationLayerComponent } from "./igx-annotation-layer-component";
import { ValueLayer } from "./ValueLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
export let IgxValueLayerComponent = /*@__PURE__*/ (() => {
    class IgxValueLayerComponent extends IgxAnnotationLayerComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new ValueLayer();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the series is an crosshair annotation layer.
        */
        get isAnnotationValueLayer() {
            return this.i.er;
        }
        /**
         * Gets or sets the value mode for the overlay.
        */
        get valueMode() {
            return this.i.zu;
        }
        set valueMode(v) {
            this.i.zu = ensureEnum(ValueLayerValueMode_$type, v);
        }
        /**
         * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
        */
        get horizontalLineStroke() {
            return brushToString(this.i.aci);
        }
        set horizontalLineStroke(v) {
            this.i.aci = stringToBrush(v);
        }
        /**
         * Gets or sets the color to use for vertical line. Leave null for an automatic value.
        */
        get verticalLineStroke() {
            return brushToString(this.i.acj);
        }
        set verticalLineStroke(v) {
            this.i.acj = stringToBrush(v);
        }
        /**
         * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get targetSeriesName() {
            return this.i.aan;
        }
        set targetSeriesName(v) {
            this.i.aan = v;
        }
        /**
         * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get targetSeries() {
            const r = this.i.zs;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxSeriesComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set targetSeries(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.zs = null : this.i.zs = v.i;
        }
        /**
         * Gets or sets the name of the axis to target this annotation to. If null, this annotation targets all axis simultaneously.
        */
        get targetAxisName() {
            return this.i.aak;
        }
        set targetAxisName(v) {
            this.i.aak = v;
        }
        /**
         * Gets or sets the axis to target this annotation to. If null, this annotation targets all value axis simultaneously.
        */
        get targetAxis() {
            const r = this.i.zp;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set targetAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.zp = null : this.i.zp = v.i;
        }
        /**
         * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
        */
        get useInterpolation() {
            return this.i.zz;
        }
        set useInterpolation(v) {
            this.i.zz = ensureBool(v);
        }
        /**
         * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
        */
        get isAxisAnnotationEnabled() {
            return this.i.zw;
        }
        set isAxisAnnotationEnabled(v) {
            this.i.zw = ensureBool(v);
        }
        /**
         * Sets or gets a function which takes an object that produces a formatted label for the x axis annotation.
        */
        get xAxisAnnotationFormatLabel() {
            return this.i.zq;
        }
        set xAxisAnnotationFormatLabel(v) {
            this.i.zq = v;
        }
        /**
         * Sets or gets a function which takes an object that produces a formatted label for the y axis annotation.
        */
        get yAxisAnnotationFormatLabel() {
            return this.i.zr;
        }
        set yAxisAnnotationFormatLabel(v) {
            this.i.zr = v;
        }
        /**
         * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
        */
        get xAxisAnnotationTextColor() {
            return brushToString(this.i.acm);
        }
        set xAxisAnnotationTextColor(v) {
            this.i.acm = stringToBrush(v);
        }
        /**
         * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get xAxisAnnotationBackground() {
            return brushToString(this.i.ack);
        }
        set xAxisAnnotationBackground(v) {
            this.i.ack = stringToBrush(v);
        }
        /**
         * Gets or sets the corner radius to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get xAxisAnnotationBackgroundCornerRadius() {
            return this.i.z2;
        }
        set xAxisAnnotationBackgroundCornerRadius(v) {
            this.i.z2 = +v;
        }
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get xAxisAnnotationInterpolatedValuePrecision() {
            return this.i.aae;
        }
        set xAxisAnnotationInterpolatedValuePrecision(v) {
            this.i.aae = +v;
        }
        /**
         * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
        */
        get xAxisAnnotationOutline() {
            return brushToString(this.i.acl);
        }
        set xAxisAnnotationOutline(v) {
            this.i.acl = stringToBrush(v);
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get xAxisAnnotationPaddingLeft() {
            return this.i.z4;
        }
        set xAxisAnnotationPaddingLeft(v) {
            this.i.z4 = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get xAxisAnnotationPaddingTop() {
            return this.i.z6;
        }
        set xAxisAnnotationPaddingTop(v) {
            this.i.z6 = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get xAxisAnnotationPaddingRight() {
            return this.i.z5;
        }
        set xAxisAnnotationPaddingRight(v) {
            this.i.z5 = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get xAxisAnnotationPaddingBottom() {
            return this.i.z3;
        }
        set xAxisAnnotationPaddingBottom(v) {
            this.i.z3 = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get yAxisAnnotationPaddingLeft() {
            return this.i.aaa;
        }
        set yAxisAnnotationPaddingLeft(v) {
            this.i.aaa = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get yAxisAnnotationPaddingTop() {
            return this.i.aac;
        }
        set yAxisAnnotationPaddingTop(v) {
            this.i.aac = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get yAxisAnnotationPaddingRight() {
            return this.i.aab;
        }
        set yAxisAnnotationPaddingRight(v) {
            this.i.aab = +v;
        }
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get yAxisAnnotationPaddingBottom() {
            return this.i.z9;
        }
        set yAxisAnnotationPaddingBottom(v) {
            this.i.z9 = +v;
        }
        /**
         * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
        */
        get xAxisAnnotationStrokeThickness() {
            return this.i.z7;
        }
        set xAxisAnnotationStrokeThickness(v) {
            this.i.z7 = +v;
        }
        /**
         * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
        */
        get yAxisAnnotationTextColor() {
            return brushToString(this.i.acp);
        }
        set yAxisAnnotationTextColor(v) {
            this.i.acp = stringToBrush(v);
        }
        /**
         * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get yAxisAnnotationBackground() {
            return brushToString(this.i.acn);
        }
        set yAxisAnnotationBackground(v) {
            this.i.acn = stringToBrush(v);
        }
        /**
         * Gets or sets the corner radius to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get yAxisAnnotationBackgroundCornerRadius() {
            return this.i.z8;
        }
        set yAxisAnnotationBackgroundCornerRadius(v) {
            this.i.z8 = +v;
        }
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get yAxisAnnotationInterpolatedValuePrecision() {
            return this.i.aaf;
        }
        set yAxisAnnotationInterpolatedValuePrecision(v) {
            this.i.aaf = +v;
        }
        /**
         * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
        */
        get yAxisAnnotationOutline() {
            return brushToString(this.i.aco);
        }
        set yAxisAnnotationOutline(v) {
            this.i.aco = stringToBrush(v);
        }
        /**
         * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
        */
        get yAxisAnnotationStrokeThickness() {
            return this.i.aad;
        }
        set yAxisAnnotationStrokeThickness(v) {
            this.i.aad = +v;
        }
        /**
         * Gets or sets whether to skip unknown values when searching for series values.
        */
        get skipUnknownValues() {
            return this.i.zy;
        }
        set skipUnknownValues(v) {
            this.i.zy = ensureBool(v);
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
                return this.targetSeries;
            }
            if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
                return this.targetAxis;
            }
            return null;
        }
        _styling(container, component, parent) {
            super._styling(container, component, parent);
            this._inStyling = true;
            if (this.targetSeries && this.targetSeries._styling) {
                this.targetSeries._styling(container, component, this);
            }
            if (this.targetAxis && this.targetAxis._styling) {
                this.targetAxis._styling(container, component, this);
            }
            this._inStyling = false;
        }
    }
    IgxValueLayerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxValueLayerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxValueLayerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxValueLayerComponent, selector: "igx-value-layer", inputs: { valueMode: "valueMode", horizontalLineStroke: "horizontalLineStroke", verticalLineStroke: "verticalLineStroke", targetSeriesName: "targetSeriesName", targetSeries: "targetSeries", targetAxisName: "targetAxisName", targetAxis: "targetAxis", useInterpolation: "useInterpolation", isAxisAnnotationEnabled: "isAxisAnnotationEnabled", xAxisAnnotationFormatLabel: "xAxisAnnotationFormatLabel", yAxisAnnotationFormatLabel: "yAxisAnnotationFormatLabel", xAxisAnnotationTextColor: "xAxisAnnotationTextColor", xAxisAnnotationBackground: "xAxisAnnotationBackground", xAxisAnnotationBackgroundCornerRadius: "xAxisAnnotationBackgroundCornerRadius", xAxisAnnotationInterpolatedValuePrecision: "xAxisAnnotationInterpolatedValuePrecision", xAxisAnnotationOutline: "xAxisAnnotationOutline", xAxisAnnotationPaddingLeft: "xAxisAnnotationPaddingLeft", xAxisAnnotationPaddingTop: "xAxisAnnotationPaddingTop", xAxisAnnotationPaddingRight: "xAxisAnnotationPaddingRight", xAxisAnnotationPaddingBottom: "xAxisAnnotationPaddingBottom", yAxisAnnotationPaddingLeft: "yAxisAnnotationPaddingLeft", yAxisAnnotationPaddingTop: "yAxisAnnotationPaddingTop", yAxisAnnotationPaddingRight: "yAxisAnnotationPaddingRight", yAxisAnnotationPaddingBottom: "yAxisAnnotationPaddingBottom", xAxisAnnotationStrokeThickness: "xAxisAnnotationStrokeThickness", yAxisAnnotationTextColor: "yAxisAnnotationTextColor", yAxisAnnotationBackground: "yAxisAnnotationBackground", yAxisAnnotationBackgroundCornerRadius: "yAxisAnnotationBackgroundCornerRadius", yAxisAnnotationInterpolatedValuePrecision: "yAxisAnnotationInterpolatedValuePrecision", yAxisAnnotationOutline: "yAxisAnnotationOutline", yAxisAnnotationStrokeThickness: "yAxisAnnotationStrokeThickness", skipUnknownValues: "skipUnknownValues" }, providers: [{ provide: IgxAnnotationLayerComponent, useExisting: forwardRef(() => IgxValueLayerComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxValueLayerComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxValueLayerComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxValueLayerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-value-layer',
                    template: ``,
                    providers: [{ provide: IgxAnnotationLayerComponent, useExisting: forwardRef(() => IgxValueLayerComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxValueLayerComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { valueMode: [{
                type: Input
            }], horizontalLineStroke: [{
                type: Input
            }], verticalLineStroke: [{
                type: Input
            }], targetSeriesName: [{
                type: Input
            }], targetSeries: [{
                type: Input
            }], targetAxisName: [{
                type: Input
            }], targetAxis: [{
                type: Input
            }], useInterpolation: [{
                type: Input
            }], isAxisAnnotationEnabled: [{
                type: Input
            }], xAxisAnnotationFormatLabel: [{
                type: Input
            }], yAxisAnnotationFormatLabel: [{
                type: Input
            }], xAxisAnnotationTextColor: [{
                type: Input
            }], xAxisAnnotationBackground: [{
                type: Input
            }], xAxisAnnotationBackgroundCornerRadius: [{
                type: Input
            }], xAxisAnnotationInterpolatedValuePrecision: [{
                type: Input
            }], xAxisAnnotationOutline: [{
                type: Input
            }], xAxisAnnotationPaddingLeft: [{
                type: Input
            }], xAxisAnnotationPaddingTop: [{
                type: Input
            }], xAxisAnnotationPaddingRight: [{
                type: Input
            }], xAxisAnnotationPaddingBottom: [{
                type: Input
            }], yAxisAnnotationPaddingLeft: [{
                type: Input
            }], yAxisAnnotationPaddingTop: [{
                type: Input
            }], yAxisAnnotationPaddingRight: [{
                type: Input
            }], yAxisAnnotationPaddingBottom: [{
                type: Input
            }], xAxisAnnotationStrokeThickness: [{
                type: Input
            }], yAxisAnnotationTextColor: [{
                type: Input
            }], yAxisAnnotationBackground: [{
                type: Input
            }], yAxisAnnotationBackgroundCornerRadius: [{
                type: Input
            }], yAxisAnnotationInterpolatedValuePrecision: [{
                type: Input
            }], yAxisAnnotationOutline: [{
                type: Input
            }], yAxisAnnotationStrokeThickness: [{
                type: Input
            }], skipUnknownValues: [{
                type: Input
            }] } });
