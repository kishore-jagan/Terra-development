/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DependencyProperty } from "igniteui-angular-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-angular-core";
import { Series } from "./Series";
import { Rect } from "igniteui-angular-core";
import { Base, enumGetBox, EnumUtil, fromEnum, typeCast, String_$type, typeGetValue, Point_$type, Array_$type, markType, markDep, runOn, TypeRegistrar } from "igniteui-angular-core";
import { Size } from "igniteui-angular-core";
import { RectUtil } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-angular-core";
import { DataAbbreviationMode_$type } from "igniteui-angular-core";
import { DataLegendValueMode_$type } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-angular-core";
import { DataLegendSummaryType_$type } from "igniteui-angular-core";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { DataLegendLayoutMode_$type } from "igniteui-angular-core";
import { DataLegendUnitsMode_$type } from "igniteui-angular-core";
import { DataLegendLabelMode_$type } from "igniteui-angular-core";
import { DataToolTipLayerFrame } from "./DataToolTipLayerFrame";
import { Dictionary$2 } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { DataToolTipSeriesInfo } from "./DataToolTipSeriesInfo";
import { DataContext } from "igniteui-angular-core";
import { DataTooltipCollisionInfo } from "./DataTooltipCollisionInfo";
import { DeviceUtils } from "igniteui-angular-core";
import { HashSet$1 } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { isNaN_ } from "igniteui-angular-core";
import { stringEmpty } from "igniteui-angular-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { IOnDemandRender_$type } from "igniteui-angular-core";
/**
 * @hidden
 */
export let DataToolTipLayer = /*@__PURE__*/ (() => {
    class DataToolTipLayer extends AnnotationLayer {
        constructor() {
            super();
            this.aaf = 1;
            this.abk = new Dictionary$2(String_$type, Base.$, 0);
            this.abl = new List$1(String_$type, 0);
            this.z7 = 8;
            this.aab = 11;
            this.aav = null;
            this.aan = null;
            this.aam = null;
            this.aaq = null;
            this.aas = null;
            this.aap = null;
            this.aar = null;
            this.aau = null;
            this.aat = null;
            this.aao = null;
            let a = new DataToolTipLayerFrame();
            let b = new DataToolTipLayerFrame();
            let c = new DataToolTipLayerFrame();
            this.w4 = a;
            this.w3 = b;
            this.w5 = c;
            this.ab = DataToolTipLayer.$;
        }
        bi() {
            return new DataToolTipLayer();
        }
        get_ep() {
            return true;
        }
        cq() {
            return new DataToolTipLayerView(this);
        }
        qx(a) {
            super.qx(a);
            this.aaj = a;
        }
        get_e0() {
            return true;
        }
        get aag() {
            return this.aaf;
        }
        set aag(a) {
            let b = this.aaf;
            this.aaf = a;
            if (b != this.aaf) {
                this.raisePropertyChanged("ActualGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.aaf));
            }
        }
        aai() {
            let a = true;
            let b = true;
            let c = true;
            let d = true;
            if (this.aah != 0) {
                return this.aah;
            }
            let e = this.zx();
            if (e != null) {
                for (let f of fromEnum(e.db())) {
                    if (!f.eq && !f.fu) {
                        a = false;
                    }
                    if (!f.eq && !f.fn) {
                        b = false;
                    }
                    if (!f.eq && !f.fv) {
                        c = false;
                    }
                    if (!f.eq && !f.fr) {
                        d = false;
                    }
                }
            }
            if (a || b || c || d) {
                return 2;
            }
            return 1;
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            switch (b) {
                case DataToolTipLayer.$$p[42]:
                    this.rn(true);
                    break;
                case DataToolTipLayer.$$p[49]:
                    this.rn(true);
                    break;
                case DataToolTipLayer.$$p[12]:
                    this.aag = this.aai();
                    break;
                case "ActualGroupingMode":
                    this.rn(true);
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.z8 = this.aaa();
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.aac = this.aae();
                    break;
                case "SeriesViewer":
                    this.aaj.cl();
                    break;
                case DataToolTipLayer.$$p[31]:
                case DataToolTipLayer.$$p[24]:
                case DataToolTipLayer.$$p[5]:
                case DataToolTipLayer.$$p[23]:
                case DataToolTipLayer.$$p[4]:
                case DataToolTipLayer.$$p[28]:
                case DataToolTipLayer.$$p[50]:
                case DataToolTipLayer.$$p[52]:
                case DataToolTipLayer.$$p[53]:
                case DataToolTipLayer.$$p[54]:
                case DataToolTipLayer.$$p[51]:
                case DataToolTipLayer.$$p[57]:
                case DataToolTipLayer.$$p[56]:
                case DataToolTipLayer.$$p[55]:
                case DataToolTipLayer.$$p[58]:
                case DataToolTipLayer.$$p[59]:
                case DataToolTipLayer.$$p[63]:
                case DataToolTipLayer.$$p[62]:
                case DataToolTipLayer.$$p[61]:
                case DataToolTipLayer.$$p[60]:
                case "ValueTextStyle":
                case DataToolTipLayer.$$p[16]:
                case DataToolTipLayer.$$p[15]:
                case DataToolTipLayer.$$p[13]:
                case DataToolTipLayer.$$p[14]:
                case DataToolTipLayer.$$p[17]:
                case DataToolTipLayer.$$p[22]:
                case DataToolTipLayer.$$p[20]:
                case DataToolTipLayer.$$p[21]:
                case DataToolTipLayer.$$p[18]:
                case DataToolTipLayer.$$p[19]:
                case "HeaderTextStyle":
                case DataToolTipLayer.$$p[8]:
                case DataToolTipLayer.$$p[9]:
                case DataToolTipLayer.$$p[6]:
                case DataToolTipLayer.$$p[7]:
                case "GroupTextStyle":
                case DataToolTipLayer.$$p[35]:
                case "SummaryTitleTextStyle":
                case DataToolTipLayer.$$p[38]:
                case DataToolTipLayer.$$p[37]:
                case DataToolTipLayer.$$p[36]:
                case DataToolTipLayer.$$p[34]:
                case DataToolTipLayer.$$p[41]:
                case "SummaryValueTextStyle":
                case DataToolTipLayer.$$p[33]:
                case DataToolTipLayer.$$p[32]:
                case "SummaryLabelTextStyle":
                case DataToolTipLayer.$$p[40]:
                case DataToolTipLayer.$$p[39]:
                case "SummaryUnitsTextStyle":
                case DataToolTipLayer.$$p[0]:
                case DataToolTipLayer.$$p[1]:
                case DataToolTipLayer.$$p[45]:
                case DataToolTipLayer.$$p[48]:
                case DataToolTipLayer.$$p[46]:
                case DataToolTipLayer.$$p[47]:
                case "UnitsTextStyle":
                case DataToolTipLayer.$$p[44]:
                case DataToolTipLayer.$$p[43]:
                case "TitleTextStyle":
                case DataToolTipLayer.$$p[25]:
                case DataToolTipLayer.$$p[26]:
                case DataToolTipLayer.$$p[27]:
                case "LabelTextStyle":
                    this.ae8(b, c, d);
                    break;
            }
        }
        ae8(a, b, c) {
            if (!this.abk.containsKey(a)) {
                this.abl.add(a);
                this.abk.addItem(a, c);
            }
            else {
                this.abk.item(a, c);
            }
            this.rn(true);
        }
        afc(a, b) {
            switch (a) {
                case DataToolTipLayer.$$p[12]:
                    this.aah = EnumUtil.getEnumValue(DataToolTipLayerGroupingMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[29]:
                    this.abp = b;
                    break;
                case DataToolTipLayer.$$p[30]:
                    this.abq = b;
                    break;
                case DataToolTipLayer.$$p[2]:
                    this.abn = b;
                    break;
                case DataToolTipLayer.$$p[3]:
                    this.abo = b;
                    break;
                case DataToolTipLayer.$$p[10]:
                    this.z9 = EnumUtil.getEnumValue(DataTooltipGroupedPositionX_$type, b);
                    break;
                case DataToolTipLayer.$$p[11]:
                    this.aad = EnumUtil.getEnumValue(DataTooltipGroupedPositionY_$type, b);
                    break;
                case DataToolTipLayer.$$p[31]:
                    this.abf = b;
                    break;
                case DataToolTipLayer.$$p[24]:
                    this.zv = b;
                    break;
                case DataToolTipLayer.$$p[5]:
                    this.zq = b;
                    break;
                case DataToolTipLayer.$$p[23]:
                    this.zu = b;
                    break;
                case DataToolTipLayer.$$p[4]:
                    this.zp = b;
                    break;
                case DataToolTipLayer.$$p[50]:
                    this.zz = EnumUtil.getEnumValue(DataAbbreviationMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[52]:
                    this.acp = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[53]:
                    this.acq = typeGetValue(b);
                    break;
                case DataToolTipLayer.$$p[54]:
                    this.z6 = EnumUtil.getEnumValue(DataLegendValueMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[51]:
                    this.aeq = b;
                    break;
                case DataToolTipLayer.$$p[57]:
                    this.abh = b;
                    break;
                case DataToolTipLayer.$$p[56]:
                    this.aew = b;
                    break;
                case DataToolTipLayer.$$p[55]:
                    this.zw = b;
                    break;
                case DataToolTipLayer.$$p[58]:
                    this.ahv = b;
                    break;
                case DataToolTipLayer.$$p[59]:
                    this.abi = b;
                    break;
                case DataToolTipLayer.$$p[63]:
                    this.ae5 = b;
                    break;
                case DataToolTipLayer.$$p[62]:
                    this.abj = b;
                    break;
                case DataToolTipLayer.$$p[61]:
                    this.ahw = b;
                    break;
                case DataToolTipLayer.$$p[60]:
                    this.ahe = b;
                    break;
                case "ValueTextStyle":
                    this.aa5 = b;
                    break;
                case DataToolTipLayer.$$p[16]:
                    this.add = b;
                    break;
                case DataToolTipLayer.$$p[15]:
                    this.zt = b;
                    break;
                case DataToolTipLayer.$$p[13]:
                    this.ac9 = b;
                    break;
                case DataToolTipLayer.$$p[14]:
                    this.z0 = EnumUtil.getEnumValue(DataLegendHeaderDateMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[17]:
                    this.z1 = EnumUtil.getEnumValue(DataLegendHeaderTimeMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[22]:
                    this.adi = b;
                    break;
                case DataToolTipLayer.$$p[20]:
                    this.ag6 = b;
                    break;
                case DataToolTipLayer.$$p[21]:
                    this.ahp = b;
                    break;
                case DataToolTipLayer.$$p[18]:
                    this.aho = b;
                    break;
                case DataToolTipLayer.$$p[19]:
                    this.aa8 = b;
                    break;
                case "HeaderTextStyle":
                    this.aax = b;
                    break;
                case DataToolTipLayer.$$p[28]:
                    this.z3 = EnumUtil.getEnumValue(DataLegendLayoutMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[8]:
                    this.ag5 = b;
                    break;
                case DataToolTipLayer.$$p[9]:
                    this.ahn = b;
                    break;
                case DataToolTipLayer.$$p[6]:
                    this.ahm = b;
                    break;
                case DataToolTipLayer.$$p[7]:
                    this.aa7 = b;
                    break;
                case "GroupTextStyle":
                    this.aaw = b;
                    break;
                case DataToolTipLayer.$$p[35]:
                    this.ag9 = b;
                    break;
                case "SummaryTitleTextStyle":
                    this.aa0 = b;
                    break;
                case DataToolTipLayer.$$p[38]:
                    this.z4 = EnumUtil.getEnumValue(DataLegendSummaryType_$type, b);
                    break;
                case DataToolTipLayer.$$p[37]:
                    this.ad2 = b;
                    break;
                case DataToolTipLayer.$$p[36]:
                    this.ahs = b;
                    break;
                case DataToolTipLayer.$$p[34]:
                    this.ahr = b;
                    break;
                case DataToolTipLayer.$$p[41]:
                    this.ahb = b;
                    break;
                case "SummaryValueTextStyle":
                    this.aa2 = b;
                    break;
                case DataToolTipLayer.$$p[33]:
                    this.adx = b;
                    break;
                case DataToolTipLayer.$$p[32]:
                    this.ag8 = b;
                    break;
                case "SummaryLabelTextStyle":
                    this.aaz = b;
                    break;
                case DataToolTipLayer.$$p[40]:
                    this.ad8 = b;
                    break;
                case DataToolTipLayer.$$p[39]:
                    this.aha = b;
                    break;
                case "SummaryUnitsTextStyle":
                    this.aa1 = b;
                    break;
                case DataToolTipLayer.$$p[0]:
                    this.ahl = b;
                    break;
                case DataToolTipLayer.$$p[1]:
                    this.aal = EnumUtil.getEnumValue(LegendItemBadgeShape_$type, b);
                    break;
                case DataToolTipLayer.$$p[45]:
                    this.z5 = EnumUtil.getEnumValue(DataLegendUnitsMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[48]:
                    this.aej = b;
                    break;
                case DataToolTipLayer.$$p[46]:
                    this.ahd = b;
                    break;
                case DataToolTipLayer.$$p[47]:
                    this.ahu = b;
                    break;
                case "UnitsTextStyle":
                    this.aa4 = b;
                    break;
                case DataToolTipLayer.$$p[44]:
                    this.aht = b;
                    break;
                case DataToolTipLayer.$$p[43]:
                    this.ahc = b;
                    break;
                case "TitleTextStyle":
                    this.aa3 = b;
                    break;
                case DataToolTipLayer.$$p[25]:
                    this.z2 = EnumUtil.getEnumValue(DataLegendLabelMode_$type, b);
                    break;
                case DataToolTipLayer.$$p[26]:
                    this.ag7 = b;
                    break;
                case DataToolTipLayer.$$p[27]:
                    this.ahq = b;
                    break;
                case "LabelTextStyle":
                    this.aay = b;
                    break;
            }
        }
        ae9(a) {
            for (let b = 0; b < this.abl.count; b++) {
                let c = this.abl._inner[b];
                a.updatePropertyByName(c, this.abk.item(c));
            }
        }
        yg(a, b) {
            {
                if (!this.a0.c) {
                    this.rn(b);
                }
            }
        }
        yh(a, b) {
            if (!this.a0.c) {
                this.rn(b);
            }
        }
        yj(a, b) {
            super.yj(a, b);
            this.aaf = this.aai();
            let c = a;
            let d = this.aaj.b9;
            let e = this.abg;
            let f = false;
            c.m.clear();
            c.i.clear();
            c.l.clear();
            c.g.clear();
            c.f.clear();
            c.k.clear();
            c.j.clear();
            c.h.clear();
            if (isNaN_(this.zm.x) && isNaN_(this.zm.y)) {
                d.count = 0;
                return;
            }
            {
                if (this.aag == 2) {
                    let g = 0;
                    {
                        for (let h of fromEnum(this.c9.series)) {
                            if (this.xa(h)) {
                                this.afb(h, c, e, f, g);
                                g++;
                            }
                            if (h.isStacked) {
                                h.pz((i) => {
                                    if (this.xa(i)) {
                                        this.afb(i, c, e, f, g);
                                        g++;
                                    }
                                    if (i.ee) {
                                        i.px((j) => {
                                            if (this.xa(j)) {
                                                this.afb(j, c, e, f, g);
                                                g++;
                                            }
                                            return true;
                                        });
                                    }
                                    return true;
                                });
                            }
                            if (h.ee) {
                                h.px((i) => {
                                    if (this.xa(i)) {
                                        this.afb(i, c, e, f, g);
                                        g++;
                                    }
                                    return true;
                                });
                            }
                        }
                        this.ae7(c);
                    }
                    d.count = g;
                }
                else {
                    let i = this.zx();
                    let j = this.abm(i);
                    let k = this.aak(i, j, e);
                    this.afa(k, c, e);
                }
            }
        }
        abm(a) {
            let b = new List$1(Series.$, 0);
            if (a == null) {
                return b;
            }
            for (let c of fromEnum(a.de)) {
                b.add(c);
            }
            return b;
        }
        zx() {
            if (this.zy != null) {
                return this.zy;
            }
            if (this.c9 == null) {
                return null;
            }
            for (let a of fromEnum(this.c9.series)) {
                if (a.ew) {
                    let b = a.az();
                    if (b != null && b.co()) {
                        return b;
                    }
                }
            }
            for (let c of fromEnum(this.c9.series)) {
                if (!c.ew) {
                    let d = c.ai();
                    let e = d != null && d.length > 0 ? d[0] : null;
                    if (e != null && e.co()) {
                        return e;
                    }
                }
            }
            return null;
        }
        aak(a, b, c) {
            let d = 1.7976931348623157E+308;
            let e = -1.7976931348623157E+308;
            let f = new List$1(DataContext.$, 0);
            let g = new List$1(Base.$, 0);
            let h = false;
            let i = true;
            let j = { $type: Point_$type, x: NaN, y: NaN };
            let k = 0;
            let l = 0;
            for (let m = 0; m < b.count; m++) {
                let n = b.item(m);
                k = n.c9.l;
                l = n.c9.m;
                if (n.ew) {
                    let o = n;
                    let p = new List$1(Series.$, 0);
                    if (o.isStacked) {
                        o.pz((q) => {
                            p.add(q);
                            if (q.ee) {
                                q.px((r) => {
                                    p.add(r);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (o.ee) {
                        p.add(o);
                        o.px((q) => {
                            p.add(q);
                            return true;
                        });
                    }
                    else {
                        p.add(o);
                    }
                    for (let q = 0; q < p.count; q++) {
                        let r = p._inner[q];
                        let s = p._inner[q];
                        if (!r.categoryAxis.co()) {
                            continue;
                        }
                        if (i) {
                            h = s.isVertical;
                        }
                        else {
                            if (h != s.isVertical) {
                                continue;
                            }
                        }
                        let t = this.yc(s);
                        if (!t.c) {
                            continue;
                        }
                        j = s.v1(t.d);
                        let u = s.v6(t.d, c, false);
                        if (h) {
                            if (!isNaN_(u.y)) {
                                d = Math.min(d, u.y);
                                e = Math.max(e, u.y);
                            }
                        }
                        else {
                            if (!isNaN_(u.x)) {
                                d = Math.min(d, u.x);
                                e = Math.max(e, u.x);
                            }
                        }
                    }
                }
                else {
                    let v = n.ai();
                    for (let w = 0; w < v.length; w++) {
                        if (!v[w].co()) {
                            continue;
                        }
                    }
                    let x = n.v6(this.zm, c, false);
                    j = n.v1(this.zm);
                    if (h) {
                        if (!isNaN_(x.y)) {
                            d = Math.min(d, x.y);
                            e = Math.max(e, x.y);
                        }
                    }
                    else {
                        if (!isNaN_(x.x)) {
                            d = Math.min(d, x.x);
                            e = Math.max(e, x.x);
                        }
                    }
                }
                let y = null;
                let z = n.kl(this.zm);
                if (n.e1 && z != null) {
                    y = n.a2(z);
                }
                else {
                    y = new DataContext();
                    y.item = z;
                    y.series = n;
                }
                f.add(y);
            }
            let aa = 0;
            let ab = 0;
            if (h) {
                ab = (d + e) / 2;
                aa = this.wl.right;
                if (!isNaN_(j.x)) {
                    aa = j.x;
                }
                if (ab < 0 || ab > this.wl.bottom) {
                    ab = NaN;
                }
            }
            else {
                aa = (d + e) / 2;
                if (!isNaN_(j.y)) {
                    ab = j.y;
                }
                if (aa < 0 || aa > this.wl.right) {
                    aa = NaN;
                }
            }
            let ac = new DataToolTipSeriesInfo();
            ac.f = { $type: Point_$type, x: aa, y: ab };
            ac.e = { $type: Point_$type, x: j.x, y: j.y };
            ac.b = f;
            ac.a = h;
            return ac;
        }
        p2() {
            this.zm = { $type: Point_$type, x: NaN, y: NaN };
            this.rn(false);
            this.aaj.cj(false);
        }
        p3() {
            this.zm = { $type: Point_$type, x: NaN, y: NaN };
            this.rn(false);
            this.aaj.cj(true);
        }
        get ahi() {
            let a = RectUtil.n(this.ct.bx);
            let b = new Size(1, this.ct.bx.width, this.ct.bx.height);
            return new Rect(3, a, b);
        }
        get ahh() {
            let a = RectUtil.n(this.ct.bx);
            let b = new Size(1, this.ct.bx.width, this.ct.bx.height);
            return new Rect(3, this.aaj.cm(a), b);
        }
        get ahg() {
            let a = new Rect(0, 0, 0, this.c9.m, this.c9.l);
            let b = RectUtil.n(a);
            let c = new Size(1, a.width, a.height);
            return new Rect(3, this.aaj.cm(b), c);
        }
        get ahk() {
            let a = { $type: Point_$type, x: 0, y: 0 };
            return new Rect(3, a, this.aaj.cr());
        }
        ahj() {
            return this.ahi;
        }
        abc(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.top;
            return c < d;
        }
        aa9(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.bottom;
            return c + d.height >= e;
        }
        aba(a, b, c) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let d = a.left;
            return c < d;
        }
        abb(a, b, c, d) {
            if (Rect.l_op_Equality(a, Rect.empty)) {
                return false;
            }
            let e = a.right;
            return c + d.width > e;
        }
        acf(a, b) {
            return a.top + b;
        }
        acd(a, b, c) {
            return a.bottom - c.height - b;
        }
        ace(a, b) {
            return ((a.bottom + a.top) / 2) - (b.height / 2);
        }
        aco(a, b, c, d, e) {
            let f = c.y - d.height - b;
            return f;
        }
        acm(a, b, c, d, e) {
            let f = c.y + b;
            return f;
        }
        acn(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        aci(a, b, c, d, e) {
            let f = c.y - d.height;
            f = f - b;
            return f;
        }
        acg(a, b, c, d, e) {
            let f = c.y;
            f = f + b;
            return f;
        }
        ach(a, b, c, d, e) {
            let f = c.y - (d.height / 2);
            return f;
        }
        aby(a, b) {
            return a.left + b;
        }
        ab0(a, b, c) {
            return (a.right - (c.width)) - b;
        }
        abz(a, b, c) {
            return ((a.right + a.left) / 2) - (c.width / 2) + b;
        }
        ab7(a, b, c, d, e) {
            let f = (c.x - d.width) - b;
            return f;
        }
        ab9(a, b, c, d, e) {
            let f = c.x + b;
            return f;
        }
        ab8(a, b, c, d, e) {
            let f = (c.x - (d.width / 2));
            f = f + b;
            return f;
        }
        ab4(a, b, c, d, e) {
            let f = c.x - d.width;
            f = f - b;
            return f;
        }
        ab6(a, b, c, d, e) {
            let f = c.x;
            f = f + b;
            return f;
        }
        ab5(a, b, c, d, e) {
            let f = c.x - (d.width / 2);
            f = f + b;
            return f;
        }
        abu(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 1:
                    {
                        return this.aci(e, b, h, f, true);
                    }
                case 2:
                    {
                        return this.acg(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.ach(e, b, h, f, true);
                    }
                case 5: return this.acj(e, c, b, h, f);
                case 6: return this.ack(e, c, b, h, f);
                case 4: return this.acl(e, c, b, h, f);
                case 8: return this.aca(e, c, b, h, f);
                case 9: return this.acb(e, c, b, h, f);
                case 7: return this.acc(e, c, b, h, f);
                case 13: return this.acf(d, b);
                case 14: return this.acd(d, b, f);
                case 15: return this.ace(d, f);
                case 10: return this.aco(e, b, g, f, true);
                case 12: return this.acn(e, b, g, f, true);
                case 11:
                default: return this.acm(e, b, g, f, true);
            }
        }
        ab1(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        ab2(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        ab3(a, b, c, d, e) {
            let f = d.x;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        abv(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width;
            f = f - c;
            return f;
        }
        abw(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f - e.width / 2;
            f = f + c;
            return f;
        }
        abx(a, b, c, d, e) {
            let f = d.x;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        acc(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        acb(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        aca(a, b, c, d, e) {
            let f = d.y;
            f = f + b / 2;
            f = f + c;
            return f;
        }
        acl(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height;
            f = f - c;
            return f;
        }
        ack(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f - e.height / 2;
            f = f + c;
            return f;
        }
        acj(a, b, c, d, e) {
            let f = d.y;
            f = f - b / 2;
            f = f + c;
            return f;
        }
        abt(a, b, c, d, e, f, g, h) {
            switch (a) {
                case 10: return this.ab7(e, b, g, f, true);
                case 11: return this.ab9(e, b, g, f, true);
                case 12: return this.ab8(e, b, g, f, true);
                case 13: return this.aby(d, b);
                case 14: return this.ab0(e, b, f);
                case 15: return this.abz(e, b, f);
                case 5: return this.abx(e, c, b, h, f);
                case 6: return this.abw(e, c, b, h, f);
                case 4: return this.abv(e, c, b, h, f);
                case 8: return this.ab3(e, c, b, h, f);
                case 9: return this.ab2(e, c, b, h, f);
                case 7: return this.ab1(e, c, b, h, f);
                case 1:
                    {
                        return this.ab4(e, b, h, f, true);
                    }
                case 3:
                    {
                        return this.ab5(e, b, h, f, true);
                    }
                case 2:
                default:
                    {
                        return this.ab6(e, b, h, f, true);
                    }
            }
        }
        ahf(a, b, c, d) {
            let e = this.z8;
            let f = this.aac;
            let g = this.zx();
            let h = 0;
            if (g != null && g.cb && this.c9 != null) {
                h = g.getCategorySize(this.c9.vl, this.wl, this.getEffectiveViewport());
                if (g.categoryMode == 0) {
                    h = 0;
                }
            }
            let i = this.abr(e);
            let j = this.abs(f);
            let k = this.abt(e, i, h, this.ahi, a, b, c, d);
            let l = this.abu(f, j, h, this.ahi, a, b, c, d);
            let m = this.abd(a, i, k, b);
            let n = this.abe(a, j, l, b);
            if (!m) {
                let o = this.zr(e);
                let p = 0;
                while (!m && p < o.length) {
                    e = o[p];
                    i = this.abr(e);
                    k = this.abt(e, i, h, this.ahi, a, b, c, d);
                    m = this.abd(a, i, k, b);
                    p++;
                }
            }
            if (!n) {
                let q = this.zs(f);
                let r = 0;
                while (!n && r < q.length) {
                    f = q[r];
                    j = this.abs(f);
                    l = this.abu(f, j, h, this.ahi, a, b, c, d);
                    n = this.abe(a, j, l, b);
                    r++;
                }
            }
            return { $type: Point_$type, x: k, y: l };
        }
        abs(a) {
            if (!isNaN_(this.abq)) {
                return this.abq;
            }
            switch (a) {
                case 1: return this.abo;
                case 2: return this.abo;
                case 3: return 0;
                case 4: return this.abo;
                case 5: return this.abo;
                case 6: return this.abo;
                case 7: return this.abo;
                case 8: return this.abo;
                case 9: return 0;
                case 10: return this.abo;
                case 11: return this.abo;
                case 12: return 0;
                case 13: return this.abo;
                case 14: return this.abo;
                case 15: return 0;
            }
            return this.abo;
        }
        abr(a) {
            if (!isNaN_(this.abp)) {
                return this.abp;
            }
            switch (a) {
                case 4: return this.abn;
                case 6: return 0;
                case 5: return this.abn;
                case 13: return this.abn;
                case 15: return 0;
                case 14: return this.abn;
                case 7: return this.abn;
                case 9: return 0;
                case 8: return this.abn;
                case 1: return this.abn;
                case 3: return 0;
                case 2: return this.abn;
                case 10: return this.abn;
                case 12: return 0;
                case 11: return this.abn;
            }
            return this.abn;
        }
        zs(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 3, 13, 14];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 14, 13];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        zr(a) {
            let b = [a];
            switch (a) {
                case 1:
                    b = [2, 3, 13, 14];
                    break;
                case 2:
                    b = [1, 3, 14, 13];
                    break;
                case 3:
                    b = [1, 2];
                    break;
                case 4:
                    b = [8, 7, 3, 13, 14];
                    break;
                case 5:
                    b = [7, 8, 1, 14, 13];
                    break;
                case 6:
                    b = [9, 8, 4, 3];
                    break;
                case 7:
                    b = [5, 4, 2, 14, 13];
                    break;
                case 8:
                    b = [4, 5, 3, 13, 14];
                    break;
                case 9:
                    b = [6, 4, 8, 3];
                    break;
                case 10:
                    b = [11, 12, 2, 1, 3, 13, 14];
                    break;
                case 11:
                    b = [10, 12, 1, 2, 3, 14, 13];
                    break;
                case 12:
                    b = [10, 11];
                    break;
                case 13: break;
                case 14: break;
                case 15: break;
            }
            return b;
        }
        abd(a, b, c, d) {
            return !(this.aba(a, b, c) || this.abb(a, b, c, d));
        }
        abe(a, b, c, d) {
            return !(this.abc(a, b, c) || this.aa9(a, b, c, d));
        }
        ae7(a) {
            let b = new List$1(DataTooltipCollisionInfo.$, 0);
            for (let c = 0; c < a.f.count; c++) {
                let d = new DataTooltipCollisionInfo();
                d.d = c;
                d.e = { $type: Point_$type, x: a.f._inner[c], y: a.g._inner[c] };
                d.c = a.k._inner[c];
                d.a = a.j._inner[c];
                d.b = a.m._inner[c];
                if (isNaN_(d.e.x) || isNaN_(d.e.y)) {
                    continue;
                }
                b.add(d);
            }
            b.aa((e, f) => {
                if (e.e.y < f.e.y) {
                    return -1;
                }
                if (e.e.y > f.e.y) {
                    return 1;
                }
                if (e.b < f.b) {
                    return -1;
                }
                if (e.b > f.b) {
                    return 1;
                }
                return 0;
            });
            let e = this.aa6(b);
            if (!e) {
                return;
            }
            for (let f = 0; f < b.count - 1; f++) {
                let g = b._inner[f];
                let h = b._inner[f + 1];
                let i = new Rect(0, g.e.x, g.e.y, g.c, g.a);
                let j = new Rect(0, h.e.x, h.e.y, h.c, h.a);
                if (i.intersectsWith(j) || i.top > j.bottom) {
                    h.e = { $type: Point_$type, x: h.e.x, y: i.bottom + 1 };
                }
            }
            if (b._inner[b.count - 1].e.y + b._inner[b.count - 1].a > this.ct.bx.height) {
                b._inner[b.count - 1].e = { $type: Point_$type, x: b._inner[b.count - 1].e.x, y: b._inner[b.count - 1].e.y - ((b._inner[b.count - 1].e.y + b._inner[b.count - 1].a) - this.ct.bx.height) };
            }
            for (let k = b.count - 1; k >= 1; k--) {
                let l = b._inner[k];
                let m = b._inner[k - 1];
                let n = new Rect(0, l.e.x, l.e.y, l.c, l.a);
                let o = new Rect(0, m.e.x, m.e.y, m.c, m.a);
                if (n.intersectsWith(o) || n.top < o.bottom) {
                    m.e = { $type: Point_$type, x: m.e.x, y: n.top - (o.height + 1) };
                }
            }
            for (let p = 0; p < b.count; p++) {
                let q = b._inner[p].d;
                let r = b._inner[p];
                a.f._inner[q] = r.e.x;
                a.g._inner[q] = r.e.y;
            }
        }
        aa6(a) {
            if (a.count <= 1) {
                return false;
            }
            let b = this.ct.bx;
            for (let c = 0; c < a.count - 1; c++) {
                let d = a._inner[c];
                let e = a._inner[c + 1];
                let f = new Rect(0, d.e.x, d.e.y, d.c, d.a);
                let g = new Rect(0, e.e.x, e.e.y, e.c, e.a);
                if (f.intersectsWith(g)) {
                    return true;
                }
            }
            return false;
        }
        afb(a, b, c, d, e) {
            let f = this.yc(a);
            if (!f.c) {
                return;
            }
            let g = a.v6(f.d, c, d);
            let h = this.aaj.b9;
            let i = this.zm;
            if (!c) {
                i = this.wb(g);
            }
            let j = a.kl(i);
            let k = h.item(e);
            let l = this.ct.bx;
            let m = this.aaj.b8(k);
            if (!Base.equalsStatic(m.target, this.c9)) {
                m.target = this.c9;
            }
            let n = new List$1(String_$type, 0);
            if (a.ee && this.aag == 2) {
                a.px((o) => {
                    if (this.xa(o)) {
                        n.add(o.dataLegendKey);
                    }
                    return true;
                });
            }
            m.includedSeries = [a.dataLegendKey];
            m.excludedSeries = n.toArray();
            this.ae9(m);
            m.targetCursorPositionX = this.zm.x;
            m.targetCursorPositionY = this.zm.y;
            if (!this.aaj.cb(k, a)) {
                return;
            }
            let o = this.aaj.cq(k);
            b.i.add1(k);
            let p = g.x;
            let q = g.x;
            q = Math.max(q, l.left);
            q = Math.min(q, l.right);
            b.l.add(q);
            let r = g.y;
            r = Math.max(r, l.top);
            r = Math.min(r, l.bottom);
            b.m.add(r);
            let s = DeviceUtils.g(10);
            let t = g.x + s;
            if (t + o.width > l.right) {
                t = (l.right - o.width) - s;
            }
            if (t < l.left) {
                t = l.left;
            }
            b.f.add(t);
            let u = (g.y - o.height) - s;
            if (u + o.height > l.bottom) {
                u = (l.bottom - o.height) - s;
            }
            if (u < l.top) {
                u = l.top;
            }
            b.g.add(u);
            b.k.add(o.width);
            b.j.add(o.height);
            let v = this.u3;
            if (v == null) {
                v = this.u9;
            }
            if (v == null) {
                v = a.u3;
            }
            b.h.add(v);
        }
        afa(a, b, c) {
            this.z7 = this.aaa();
            this.aab = this.aae();
            let d = a.f;
            let e = a.e;
            let f = 0;
            let g = this.aaj.b9.item(0);
            this.aaj.cb(g, null);
            let h = this.aaj.b8(g);
            if (!Base.equalsStatic(h.target, this.c9)) {
                h.target = this.c9;
            }
            let i = new List$1(String_$type, 0);
            let j = this.zx();
            if (j != null) {
                for (let k of fromEnum(j.db())) {
                    if (k.isStacked) {
                        k.pz((l) => {
                            i.add(l.dataLegendKey);
                            if (l.ee) {
                                l.px((m) => {
                                    i.add(m.dataLegendKey);
                                    return true;
                                });
                            }
                            return true;
                        });
                    }
                    else if (k.ee) {
                        i.add(k.dataLegendKey);
                        k.px((l) => {
                            i.add(l.dataLegendKey);
                            return true;
                        });
                    }
                    else {
                        i.add(k.dataLegendKey);
                    }
                }
                h.includedSeries = i.toArray();
                h.excludedSeries = null;
            }
            else {
                h.includedSeries = null;
                h.excludedSeries = null;
            }
            this.ae9(h);
            h.targetCursorPositionX = this.zm.x;
            h.targetCursorPositionY = this.zm.y;
            let l = this.aaj.cq(g);
            let m = 0;
            let n = 0;
            let o = 0;
            let p = 0;
            let q = false;
            let r = false;
            o = d.x;
            p = d.y;
            let s = this.ct.bx;
            let t = this.aaj.cr();
            let u = this.ahj();
            let v = this.ahf(u, l, e, d);
            let w = v.x;
            let x = v.y;
            {
            }
            b.l.add(w);
            b.m.add(x);
            b.f.add(w);
            b.g.add(x);
            b.k.add(l.width);
            b.j.add(l.height);
            b.i.add1(g);
            let y = null;
            b.h.add(y);
            this.aaj.b9.count = 1;
        }
        acr(a) {
            return a.toolTip;
        }
        ym(a, b) {
            super.ym(a, b);
            let c = a;
            let d = c.m.count;
            let e = b.bx.left;
            let f = b.bx.right;
            let g = b.bx.top;
            let h = b.bx.bottom;
            for (let i = 0; i < d; i++) {
                if (isNaN_(c.l._inner[i]) || isNaN_(c.m._inner[i]) || isNaN_(c.f._inner[i]) || isNaN_(c.g._inner[i])) {
                    this.aaj.ci(c.i._inner[i]);
                    continue;
                }
                let j = c.f._inner[i];
                let k = c.g._inner[i];
                let l = c.k._inner[i];
                let m = c.j._inner[i];
                let n = false;
                if (n) {
                    this.aaj.ci(c.i._inner[i]);
                    continue;
                }
                let o = c.i._inner[i];
                let p = Math.min(c.f._inner[i], c.l._inner[i]);
                let q = Math.min(c.g._inner[i], c.m._inner[i]);
                let r = c.l._inner[i] - c.f._inner[i];
                let s = c.m._inner[i] - c.g._inner[i];
                if (o != null) {
                    this.aaj.ck(o, p, q, r, s);
                }
            }
        }
        f8() {
            return true;
        }
        get z8() {
            return this.z7;
        }
        set z8(a) {
            let b = this.z7;
            this.z7 = a;
            if (b != this.z7) {
                this.raisePropertyChanged("ActualGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.z7));
            }
        }
        aaa() {
            if (this.c9 == null) {
                return 2;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = false;
            let e = this.zx();
            if (e == null) {
                if (this.z9 != 0) {
                    return this.z9;
                }
                else {
                    return 2;
                }
            }
            for (let f of fromEnum(e.de)) {
                if (f.ex) {
                    a = true;
                }
                if (f.isVertical) {
                    b = true;
                }
                if (f.fn) {
                    c = true;
                }
                if (f.fu) {
                    d = true;
                }
            }
            let g = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionX_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let h = g.contains(this.z9);
            if (this.z9 != 0) {
                return this.z9;
            }
            if (h && b) {
                return 11;
            }
            if (c || d) {
                return 11;
            }
            if (b) {
                return 11;
            }
            if (a) {
                return 8;
            }
            return 8;
        }
        get aac() {
            return this.aab;
        }
        set aac(a) {
            let b = this.aab;
            this.aab = a;
            if (b != this.aab) {
                this.raisePropertyChanged("ActualPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.aab));
            }
        }
        aae() {
            if (this.c9 == null) {
                return 11;
            }
            let a = false;
            let b = false;
            let c = false;
            let d = this.zx();
            if (d == null) {
                if (this.aad != 0) {
                    return this.aad;
                }
                else {
                    return 11;
                }
            }
            for (let e of fromEnum(d.db())) {
                if (e.isVertical) {
                    a = true;
                }
                if (e.fn) {
                    b = true;
                }
                if (e.fu) {
                    c = true;
                }
            }
            let f = ((() => {
                let $ret = new HashSet$1(DataTooltipGroupedPositionY_$type, 0);
                $ret.add_1(1);
                $ret.add_1(2);
                $ret.add_1(3);
                $ret.add_1(4);
                $ret.add_1(5);
                $ret.add_1(6);
                $ret.add_1(7);
                $ret.add_1(8);
                $ret.add_1(9);
                return $ret;
            })());
            let g = f.contains(this.aad);
            if (this.aad != 0) {
                return this.aad;
            }
            if (g && !a) {
                return 11;
            }
            if (b || c) {
                return 11;
            }
            if (a) {
                return 8;
            }
            if (!a) {
                return 11;
            }
            return 11;
        }
        get aa5() {
            return this.aav;
        }
        set aa5(a) {
            let b = this.aav;
            this.aav = a;
            if (b != this.aav) {
                this.raisePropertyChanged("ValueTextStyle", b, this.aav);
            }
        }
        get aax() {
            return this.aan;
        }
        set aax(a) {
            let b = this.aan;
            this.aan = a;
            if (b != this.aan) {
                this.raisePropertyChanged("HeaderTextStyle", b, this.aan);
            }
        }
        get aaw() {
            return this.aam;
        }
        set aaw(a) {
            let b = this.aam;
            this.aam = a;
            if (b != this.aam) {
                this.raisePropertyChanged("GroupTextStyle", b, this.aam);
            }
        }
        get aa0() {
            return this.aaq;
        }
        set aa0(a) {
            let b = this.aaq;
            this.aaq = a;
            if (b != this.aaq) {
                this.raisePropertyChanged("SummaryTitleTextStyle", b, this.aaq);
            }
        }
        get aa2() {
            return this.aas;
        }
        set aa2(a) {
            let b = this.aas;
            this.aas = a;
            if (b != this.aas) {
                this.raisePropertyChanged("SummaryValueTextStyle", b, this.aas);
            }
        }
        get aaz() {
            return this.aap;
        }
        set aaz(a) {
            let b = this.aap;
            this.aap = a;
            if (b != this.aap) {
                this.raisePropertyChanged("SummaryLabelTextStyle", b, this.aap);
            }
        }
        get aa1() {
            return this.aar;
        }
        set aa1(a) {
            let b = this.aar;
            this.aar = a;
            if (b != this.aar) {
                this.raisePropertyChanged("SummaryUnitsTextStyle", b, this.aar);
            }
        }
        get aa4() {
            return this.aau;
        }
        set aa4(a) {
            let b = this.aau;
            this.aau = a;
            if (b != this.aau) {
                this.raisePropertyChanged("UnitsTextStyle", b, this.aau);
            }
        }
        get aa3() {
            return this.aat;
        }
        set aa3(a) {
            let b = this.aat;
            this.aat = a;
            if (b != this.aat) {
                this.raisePropertyChanged("TitleTextStyle", b, this.aat);
            }
        }
        get aay() {
            return this.aao;
        }
        set aay(a) {
            let b = this.aao;
            this.aao = a;
            if (b != this.aao) {
                this.raisePropertyChanged("LabelTextStyle", b, this.aao);
            }
        }
    }
    DataToolTipLayer.$t = markType(DataToolTipLayer, 'DataToolTipLayer', AnnotationLayer.$);
    DataToolTipLayer.$$p = markDep(DependencyProperty, PropertyMetadata, DataToolTipLayer, 'raisePropertyChanged', ['BadgeMargin:ahl:afd', [Thickness.$, new Thickness(1, 0, 0, 0, 0)], 'BadgeShape:aal:afe', [LegendItemBadgeShape_$type, enumGetBox(LegendItemBadgeShape_$type, 0)], 'DefaultPositionOffsetX:abn:aff', [1, DeviceUtils.g(10)], 'DefaultPositionOffsetY:abo:afg', [1, DeviceUtils.g(10)], 'ExcludedColumns:zp:afh', [Array_$type, null], 'ExcludedSeries:zq:afi', [Array_$type, null], 'GroupRowMargin:ahm:afm', [Thickness.$, new Thickness(0, 5)], 'GroupRowVisible:aa7:afn', [0, false], 'GroupTextColor:ag5:afo', [Brush.$, null], 'GroupTextMargin:ahn:afp', [Thickness.$, new Thickness(1, 2, 0, 0, 0)], 'GroupedPositionModeX:z9:afj', [DataTooltipGroupedPositionX_$type, enumGetBox(DataTooltipGroupedPositionX_$type, 0)], 'GroupedPositionModeY:aad:afk', [DataTooltipGroupedPositionY_$type, enumGetBox(DataTooltipGroupedPositionY_$type, 0)], 'GroupingMode:aah:afl', [DataToolTipLayerGroupingMode_$type, enumGetBox(DataToolTipLayerGroupingMode_$type, 0)], 'HeaderFormatCulture:ac9:afq', [2, stringEmpty()], 'HeaderFormatDate:z0:afr', [DataLegendHeaderDateMode_$type, enumGetBox(DataLegendHeaderDateMode_$type, 0)], 'HeaderFormatSpecifiers:zt:afs', [Array_$type, null], 'HeaderFormatString:add:aft', [2, null], 'HeaderFormatTime:z1:afu', [DataLegendHeaderTimeMode_$type, enumGetBox(DataLegendHeaderTimeMode_$type, 0)], 'HeaderRowMargin:aho:afv', [Thickness.$, new Thickness(0, 5)], 'HeaderRowVisible:aa8:afw', [0, true], 'HeaderTextColor:ag6:afx', [Brush.$, null], 'HeaderTextMargin:ahp:afy', [Thickness.$, new Thickness(1, 2, 0, 0, 0)], 'HeaderText:adi:afz', [2, null], 'IncludedColumns:zu:af0', [Array_$type, null], 'IncludedSeries:zv:af1', [Array_$type, null], 'LabelDisplayMode:z2:af2', [DataLegendLabelMode_$type, enumGetBox(DataLegendLabelMode_$type, 0)], 'LabelTextColor:ag7:af3', [Brush.$, null], 'LabelTextMargin:ahq:af4', [Thickness.$, new Thickness(1, 8, 0, 0, 0)], 'LayoutMode:z3:af5', [DataLegendLayoutMode_$type, enumGetBox(DataLegendLayoutMode_$type, 0)], 'PositionOffsetX:abp:af6', [1, NaN], 'PositionOffsetY:abq:af7', [1, NaN], 'ShouldUpdateWhenSeriesDataChanges:abf:af8', [0, true], 'SummaryLabelTextColor:ag8:af9', [Brush.$, null], 'SummaryLabelText:adx:aga', [2, null], 'SummaryRowMargin:ahr:agb', [Thickness.$, new Thickness(0, 5)], 'SummaryTitleTextColor:ag9:agc', [Brush.$, null], 'SummaryTitleTextMargin:ahs:agd', [Thickness.$, new Thickness(1, 2, 0, 0, 0)], 'SummaryTitleText:ad2:age', [2, null], 'SummaryType:z4:agf', [DataLegendSummaryType_$type, enumGetBox(DataLegendSummaryType_$type, 0)], 'SummaryUnitsTextColor:aha:agg', [Brush.$, null], 'SummaryUnitsText:ad8:agh', [2, null], 'SummaryValueTextColor:ahb:agi', [Brush.$, null], 'TargetAxis:zy:agj', [Axis.$, null], 'TitleTextColor:ahc:agk', [Brush.$, null], 'TitleTextMargin:aht:agl', [Thickness.$, new Thickness(1, 0, 0, 0, 0)], 'UnitsDisplayMode:z5:agm', [DataLegendUnitsMode_$type, enumGetBox(DataLegendUnitsMode_$type, 0)], 'UnitsTextColor:ahd:agn', [Brush.$, null], 'UnitsTextMargin:ahu:ago', [Thickness.$, new Thickness(1, 0, 0, 0, 0)], 'UnitsText:aej:agp', [2, null], 'UseInterpolation:abg:agq', [0, false], 'ValueFormatAbbreviation:zz:agr', [DataAbbreviationMode_$type, enumGetBox(DataAbbreviationMode_$type, 0)], 'ValueFormatCulture:aeq:ags', [2, stringEmpty()], 'ValueFormatMaxFractions:acp:agt', [1, -1], 'ValueFormatMinFractions:acq:agu', [1, -1], 'ValueFormatMode:z6:agv', [DataLegendValueMode_$type, enumGetBox(DataLegendValueMode_$type, 0)], 'ValueFormatSpecifiers:zw:agw', [Array_$type, null], 'ValueFormatString:aew:agx', [2, null], 'ValueFormatUseGrouping:abh:agy', [0, true], 'ValueRowMargin:ahv:agz', [Thickness.$, new Thickness(0, 5)], 'ValueRowVisible:abi:ag0', [0, true], 'ValueTextColor:ahe:ag1', [Brush.$, null], 'ValueTextMargin:ahw:ag2', [Thickness.$, new Thickness(1, 2, 0, 2, 0)], 'ValueTextUseSeriesColors:abj:ag3', [0, false], 'ValueTextWhenMissingData:ae5:ag4', [2, "N/A"]]);
    return DataToolTipLayer;
})();
/**
 * @hidden
 */
export let DataToolTipLayerView = /*@__PURE__*/ (() => {
    class DataToolTipLayerView extends AnnotationLayerView {
        constructor(a) {
            super(a);
            this.b9 = null;
            this.cc = null;
            this.b7 = null;
            this.ca = false;
            this._htmlTest = null;
            this.b7 = a;
            this.htmlTest = /^[^<]*(<[\w\W]+>)[^>]*$/;
            this.cc = new List$1(PointerTooltip.$, 0);
        }
        ak() {
            super.ak();
            for (let a = 0; a < this.b9.a.count; a++) {
                this.b9.a._inner[a].br();
            }
            for (let b = 0; b < this.b9.b.count; b++) {
                this.b9.b._inner[b].br();
            }
            this.b9.clear();
        }
        cd() {
            let a = new PointerTooltip();
            a.bw(this.e.jx);
            a._visibility = 1;
            a.ap = this.e.c9.c8.k;
            let b = null;
            if (TypeRegistrar.isRegistered("XamDataLegend")) {
                b = TypeRegistrar.create("XamDataLegend");
            }
            b.pixelScalingRatio = 1;
            if (this.e.c9 != null) {
                let c = this.e.c9.c8.j.ae.createElement("div");
                let ren_ = this.e.c9.c8.j.ae.getSubRenderer(c);
                let len_ = b;
                len_.provideContainer(ren_);
            }
            a.ai = typeCast(IOnDemandRender_$type, b);
            a.ai.shouldOnDemandRender = true;
            this.cc.add(a);
            return a;
        }
        cf(a) {
            let b = a;
        }
        ch(a) {
            let b = a;
            b._visibility = 1;
        }
        cg(a) {
            let b = a;
            b.bz();
            b.content = null;
            this.cc.remove1(a);
        }
        au() {
            super.au();
            this.b9 = ((() => {
                let $ret = new Pool$1(Base.$);
                $ret.create = runOn(this, this.cd);
                $ret.activate = runOn(this, this.cf);
                $ret.disactivate = runOn(this, this.ch);
                $ret.destroy = runOn(this, this.cg);
                return $ret;
            })());
        }
        get htmlTest() {
            return this._htmlTest;
        }
        set htmlTest(a) {
            this._htmlTest = a;
        }
        cb(a, b) {
            let c = a;
            let d = c.ai;
            return true;
        }
        cq(a) {
            let b = a;
            let c = new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            b.cy = 1;
            let d = b.cx(new Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
            b.cy = 0;
            return d;
        }
        cp() {
            if (this.e.c9 != null) {
                let a = this.e.c9.ve();
                let b = this.e.c9.c8.a8;
                let c = this.e.c9.c8.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        co() {
            if (this.e.c9 != null) {
                let a = this.e.c9.ve();
                let b = this.e.c9.c8.a8;
                let c = this.e.c9.c8.a7;
                return new Rect(0, 0, 0, b, c);
            }
            return Rect.empty;
        }
        cn() {
            let a = 0;
            let b = 0;
            if (this.e.c9 != null) {
                let c = this.e.c9.ve();
                a += c.x;
                b += c.y;
                let d = this.e.c9.c8.a8;
                let e = this.e.c9.c8.a7;
                return new Rect(0, a, b, d, e);
            }
            return Rect.empty;
        }
        cm(a) {
            let b = 0;
            let c = 0;
            if (this.e.c9 != null) {
                let d = this.e.c9.ve();
                b += d.x;
                c += d.y;
            }
            return { $type: Point_$type, x: b + a.x, y: c + a.y };
        }
        ck(a, b, c, d, e) {
            let f = null;
            if (this.e.c9 != null) {
                f = this.e.c9.c8.j.i();
            }
            let g = a;
            if (g == null) {
                return;
            }
            if (d == 0 && e == 0) {
                g.cy = 1;
            }
            else {
                g.cy = 0;
            }
            g.aq = f;
            g.cs = { $type: Point_$type, x: d, y: e };
            g._visibility = 0;
            g.n = b;
            g.o = c;
        }
        cr() {
            let a = (window.innerWidth);
            let b = (window.innerHeight);
            return new Size(1, a, b);
        }
        ci(a) {
            if (a != null) {
                let b = a;
                b._visibility = 1;
            }
        }
        cl() {
            if (this.e.c9 == null) {
                this.cj(true);
            }
        }
        a8(a, b) {
            super.a8(a, b);
            if (b) {
                return;
            }
            let c = 0;
            let d = 0;
            let e = this.e.c9;
            if (e != null) {
                let f = e.c8.j.b8();
                c += f.x;
                d += f.y;
            }
            for (let g = 0; g < this.cc.count; g++) {
                this.cc._inner[g].by(this.cc._inner[g].n + c, this.cc._inner[g].o + d);
            }
        }
        an(a) {
            super.an(a);
            for (let b = 0; b < this.cc.count; b++) {
                let c = this.cc._inner[b];
                let d = 0;
                let e = 0;
                if (this.e.c9 != null) {
                    let f = this.e.c9.ve();
                    d += f.x;
                    e += f.y;
                }
                let g = c.a5();
                let h = c.n - d;
                let i = c.o - e;
                let j = c.ai;
                let k = null;
                if (j != null) {
                    k = j.exportVisualData();
                }
                this.e.bb.addPointerTooltipWithDataLegend(a, g, h, i, k);
            }
        }
        b8(a) {
            let b = a;
            return b.ai;
        }
        cj(a) {
            this.as();
            for (let b = 0; b < this.cc.count; b++) {
                this.ci(this.cc._inner[b]);
                if (a) {
                    this.cc._inner[b].bs();
                }
            }
        }
    }
    DataToolTipLayerView.$t = markType(DataToolTipLayerView, 'DataToolTipLayerView', AnnotationLayerView.$);
    return DataToolTipLayerView;
})();
