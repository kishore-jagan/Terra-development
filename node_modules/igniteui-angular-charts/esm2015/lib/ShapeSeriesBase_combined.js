/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-angular-core";
import { HighlightingInfo } from "igniteui-angular-core";
import { ShapeItemSearchMode_$type } from "./ShapeItemSearchMode";
import { IEnumerable$1_$type, enumGetBox, Number_$type, Point_$type, String_$type, typeCast, runOn, delegateCombine, fromEnum, Array_$type, markType, markDep } from "igniteui-angular-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { FrameworkElement } from "igniteui-angular-core";
import { IFastItemsSource_$type } from "igniteui-angular-core";
import { DataContext } from "igniteui-angular-core";
import { Tuple$2 } from "igniteui-angular-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { RectUtil } from "igniteui-angular-core";
import { Tuple$3 } from "igniteui-angular-core";
import { GeometryUtil } from "igniteui-angular-core";
import { AssigningShapeStyleEventArgs } from "./AssigningShapeStyleEventArgs";
import { AssigningShapeMarkerStyleEventArgs } from "./AssigningShapeMarkerStyleEventArgs";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { PointCollectionUtil } from "igniteui-angular-core";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { Clipper } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-angular-core";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { PolySimplification } from "igniteui-angular-core";
import { DefaultFlattener } from "./DefaultFlattener";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { boxArray$1 } from "igniteui-angular-core";
import { InvalidOperationException } from "igniteui-angular-core";
import { isNaN_, truncate } from "igniteui-angular-core";
import { FastItemObjectColumn } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { Pool$1 } from "igniteui-angular-core";
import { PointCollection } from "igniteui-angular-core";
import { PathGeometry } from "igniteui-angular-core";
import { PolyLineSegment } from "igniteui-angular-core";
import { PathFigure } from "igniteui-angular-core";
import { PolygonUtil } from "igniteui-angular-core";
/**
 * @hidden
 */
export let ShapeSeriesBase = /*@__PURE__*/ (() => {
    class ShapeSeriesBase extends Series {
        constructor() {
            super();
            this.xj = false;
            this.xi = false;
            this.xe = null;
            this.xf = null;
            this.w5 = 1;
            this.wu = null;
            this.wv = null;
            this.assigningShapeStyle = null;
            this.assigningShapeMarkerStyle = null;
            this.w9 = null;
            this.xg = null;
            this.w1 = null;
            this.w3 = null;
            this.x3 = 0;
            this.xz = null;
            this.wr = null;
            this.wt = null;
            this.ws = null;
            this.wq = null;
            this.ze = null;
            this.x6 = 0;
            this.styleShape = null;
            this.w9 = new ShapeSeriesRenderManager();
            FastItemObjectColumn.m();
            this.x6 = this.x5;
            this.ze = Rect.empty;
        }
        o0() {
            super.o0();
            this.w2 = null;
            this.w4 = null;
        }
        ai() {
            return [this.w2, this.w4];
        }
        ko(a, b) {
            let c = this.nb(b);
            if (c == ShapeSeriesBase.$$p[6]) {
                return this.kp(a, b, this.yl);
            }
            return null;
        }
        mb(a) {
            let b = this.nb(a);
            if (b == ShapeSeriesBase.$$p[6]) {
                return this.yl;
            }
            return super.mb(a);
        }
        get_fc() {
            return true;
        }
        get_eb() {
            return true;
        }
        xc(a, b, c) {
            if (this.dl == null) {
                return null;
            }
            let d = this.v1(b);
            let e = this.xa.c2(d, false);
            let f = -1;
            if (e == null) {
                if (a != null) {
                    f = this.dl.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else if (e.dataContext != null) {
                f = e.dataContext.c;
            }
            if (f == -1) {
                return null;
            }
            let g = new HighlightingInfo();
            g.i = this;
            g.g = f;
            g.f = f;
            g.c = false;
            if (c != null && c.g == g.g && c.f == g.f) {
                return c;
            }
            return g;
        }
        xd(a, b, c) {
            if (this.dl == null) {
                return null;
            }
            let d = this.xa.b4(this.v1(b));
            let e = -1;
            if (d == null) {
                if (a != null) {
                    e = this.dl.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else {
                e = d.ak;
            }
            if (e == -1) {
                return null;
            }
            let f = new HighlightingInfo();
            f.i = this;
            f.g = e;
            f.f = e;
            f.c = false;
            f.d = true;
            if (c != null && c.g == f.g && c.f == f.f) {
                return c;
            }
            return f;
        }
        get w6() {
            return this.w5;
        }
        set w6(a) {
            let b = this.w5;
            this.w5 = a;
            if (b != this.w5) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ShapeItemSearchMode_$type, b), enumGetBox(ShapeItemSearchMode_$type, this.w5));
            }
        }
        w7() {
            if (this.w8 != 0) {
                return this.w8;
            }
            return 1;
        }
        ip(a) {
            switch (this.w6) {
                case 1: return this.yr(a).c;
                case 2: return this.x4(a);
                case 3: return this.x4(a);
            }
            return -1;
        }
        yr(a) {
            let b = this.v1(a);
            let c = { $type: Point_$type, x: NaN, y: NaN };
            let d = this.xa.ce;
            if (d == null) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            let e = this.xa.b5(b, false, !this.xk);
            if (e != null) {
                c = RectUtil.l(e.d);
                return new Tuple$2(Number_$type, Point_$type, e.b, c);
            }
            let f = b.x;
            let g = b.y;
            if (this.dl == null || this.w2 == null || this.w4 == null || this.xz == null) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            if (this.dl.count > this.x9) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            let h = 1.7976931348623157E+308;
            let i = -1;
            for (let j = 0; j < d.count; j++) {
                let k = d._inner[j].d;
                let l = RectUtil.g(k, b);
                if (l < h) {
                    h = l;
                    i = d._inner[j].b;
                    c = RectUtil.l(d._inner[j].d);
                }
            }
            return new Tuple$2(Number_$type, Point_$type, i, c);
        }
        yq(a) {
            let b = this.v1(a);
            let c = b.x;
            let d = b.y;
            let e = { $type: Point_$type, x: NaN, y: NaN };
            if (this.dl == null || this.w2 == null || this.w4 == null || this.xz == null) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            if (this.dl.count > this.x9) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            let f = 1.7976931348623157E+308;
            let g = this.xa.ce;
            if (g == null) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            let h = this.xa.b5(b, false, !this.xk);
            if (h != null) {
                let i = RectUtil.l(h.d);
                let j = this.yp(b, h.a, this.xk);
                return new Tuple$3(Number_$type, Point_$type, Point_$type, h.b, j.d, i);
            }
            for (let k = 0; k < g.count; k++) {
                let l = g._inner[k].d;
                let m = RectUtil.g(l, b);
                let n = (l.width * l.width) + (l.height * l.height) + m;
                if (n <= f) {
                    f = n;
                }
            }
            let o = 1.7976931348623157E+308;
            let p = -1;
            for (let q = 0; q < g.count; q++) {
                let r = g._inner[q].d;
                let s = RectUtil.g(r, b);
                if (s < f) {
                    let t = this.yp(b, g._inner[q].a, this.xk);
                    if (t.c < o) {
                        o = t.c;
                        e = t.d;
                        p = q;
                    }
                }
            }
            if (p >= 0) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, g._inner[p].b, e, RectUtil.l(g._inner[p].d));
            }
            return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
        }
        get_xk() {
            return true;
        }
        get xk() {
            return this.get_xk();
        }
        yp(a, b, c) {
            let d = { $type: Point_$type, x: NaN, y: NaN };
            let e = 1.7976931348623157E+308;
            let f = { $type: Point_$type, x: NaN, y: NaN };
            let g = false;
            let h = -1;
            for (let i = 0; i < b.count; i++) {
                let j = b._inner[i];
                if (i >= 1) {
                    let k = GeometryUtil.g(a, d, j);
                    if (k < e) {
                        e = k;
                        g = true;
                        h = i;
                    }
                }
                d = j;
            }
            if (c) {
                let l = b._inner[0];
                let m = GeometryUtil.g(a, d, l);
                if (m < e) {
                    e = m;
                    let n = GeometryUtil.l(a, d, l);
                    f = { $type: Point_$type, x: d.x + (l.x - d.x) * n, y: d.y + (l.y - d.y) * n };
                    return new Tuple$2(Number_$type, Point_$type, e, f);
                }
            }
            if (g) {
                let o = b._inner[h - 1];
                let p = b._inner[h];
                let q = GeometryUtil.l(a, o, p);
                f = { $type: Point_$type, x: o.x + (p.x - o.x) * q, y: o.y + (p.y - o.y) * q };
            }
            return new Tuple$2(Number_$type, Point_$type, e, f);
        }
        x4(a) {
            return this.yq(a).c;
        }
        v6(a, b, c) {
            if (this.w2 == null || this.w4 == null || this.xz == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            switch (this.w6) {
                case 1:
                    let d = this.yr(a);
                    return d.d;
                case 2:
                    let e = this.yq(a);
                    return e.e;
                case 3:
                    let f = this.yq(a);
                    return f.d;
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        kl(a) {
            let b = this.j1(a);
            if (this.dl != null && b >= 0 && b < this.dl.count) {
                return this.dl.item(b);
            }
            return null;
        }
        xb(a, b, c) {
            let d = new HighlightingInfo();
            d.i = this;
            d.g = 0;
            d.f = this.dl.count - 1;
            d.c = true;
            if (c != null && c.g == d.g && c.f == d.f) {
                return c;
            }
            return d;
        }
        de(a, b, c) {
            if (this.eb && this.fx(this.bv) && !c) {
                let d = this.xc(a, b, this.xe);
                this.xe = d;
                return d;
            }
            else {
                let e = this.xb(a, b, this.xe);
                this.xe = e;
                return e;
            }
        }
        df(a, b, c) {
            if (this.fx(this.bv) && !c) {
                let d = this.xd(a, b, this.xf);
                this.xf = d;
                return d;
            }
            else {
                let e = this.xb(a, b, this.xf);
                e.d = true;
                this.xf = e;
                return e;
            }
        }
        xx() {
            return (this.assigningShapeStyle != null && this.xj) || this.d0 || (this.bv != 1) || (this.cn != 1) || (this.cm != 1);
        }
        xw() {
            return (this.assigningShapeMarkerStyle != null && this.xi) || this.d0 || (this.bv != 1) || (this.cn != 1) || (this.cm != 1);
        }
        get yc() {
            return this.c(ShapeSeriesBase.y4);
        }
        set yc(a) {
            this.h(ShapeSeriesBase.y4, a);
        }
        f9() {
            return this.highlightedItemsSource != null || this.yc != null;
        }
        hr() {
            let a = super.hr();
            {
                let b = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.ad = "ShapeMemberPath";
                    $ret.p = true;
                    $ret.y = "HighlightedShapeMemberPath";
                    $ret.q = true;
                    return $ret;
                })());
                b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.yt));
                a.add(b);
            }
            {
                let c = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Brush";
                    $ret.p = true;
                    $ret.y = "ActualBrush";
                    $ret.q = true;
                    return $ret;
                })());
                c.valueResolving = delegateCombine(c.valueResolving, runOn(this, this.rv));
                a.add(c);
            }
            {
                let d = ((() => {
                    let $ret = new SeriesLayerPropertyOverlay();
                    $ret.r = true;
                    $ret.ad = "Outline";
                    $ret.p = true;
                    $ret.y = "ActualOutline";
                    $ret.q = true;
                    return $ret;
                })());
                d.valueResolving = delegateCombine(d.valueResolving, runOn(this, this.rv));
                a.add(d);
            }
            return a;
        }
        yt(a, b) {
            if (this.yc != null) {
                b.value = this.yc;
                return;
            }
            b.value = this.yl;
        }
        get xh() {
            return this.xg;
        }
        set xh(a) {
            let b = this.xh != a;
            if (b) {
                let c = this.xh;
                this.xg = a;
                this.raisePropertyChanged("ShapeColumn", c, this.xh);
            }
        }
        xo(array_) {
            let a = (Array.isArray(array_));
            return a;
        }
        static xs(a) {
            if (a == null) {
                return true;
            }
            let val_ = a;
            return (val_ == undefined);
        }
        convertToListList(a) {
            if (a == null) {
                return null;
            }
            let b = new List$1(List$1.$.specialize(Point_$type), 0);
            let c;
            let curr_;
            let d;
            let e;
            let f = false;
            let g = false;
            for (let h = 0; h < a.length; h++) {
                c = a[h];
                if (c == null) {
                    continue;
                }
                let i = new List$1(Point_$type, 0);
                for (let j = 0; j < c.length; j++) {
                    curr_ = c[j];
                    if (f) {
                        d = (curr_.X);
                        e = (curr_.Y);
                    }
                    else {
                        d = (curr_.x);
                        e = (curr_.y);
                    }
                    if (!g) {
                        if ((isNaN_(d) || ShapeSeriesBase.xs(d)) && (isNaN_(e) || ShapeSeriesBase.xs(e))) {
                            d = (curr_.X);
                            e = (curr_.Y);
                            if (!isNaN_(d) && !ShapeSeriesBase.xs(d) && !isNaN_(e) && !ShapeSeriesBase.xs(e)) {
                                g = true;
                                f = true;
                            }
                        }
                        else {
                            g = true;
                        }
                    }
                    i.add({ $type: Point_$type, x: d, y: e });
                }
                b.add(i);
            }
            return b;
        }
        dk(a) {
            if (this.dl != null && this.xo(this.itemsSource) && a != null && a.split('!').length != 2) {
                if (this.coercionMethods == null) {
                    this.coercionMethods = {};
                }
                let methods_ = this.coercionMethods;
                methods_.convertToListList = this.convertToListList;
                a += "!convertToListList";
            }
            return super.dk(a);
        }
        q5(a, b, c, d) {
            super.q5(a, b, c, d);
            let e = false;
            let f = false;
            switch (b) {
                case ShapeSeriesBase.$$p[2]:
                    this.w6 = this.w7();
                    break;
                case "FastItemsSource":
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.xh);
                        this.xh = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.xh = this.dk(this.yl);
                    }
                    e = this.w2 != null && !this.w2.c1();
                    f = this.w4 != null && !this.w4.c1();
                    if (e || f) {
                        this.rn(this.ge && c != null);
                    }
                    break;
                case ShapeSeriesBase.$$p[6]:
                    if (this.dl != null) {
                        this.dl.deregisterColumn(this.xh);
                        this.xh = this.dk(this.yl);
                    }
                    break;
                case "ShapeColumn":
                    this.y1();
                    e = this.w2 != null && !this.w2.c1();
                    f = this.w4 != null && !this.w4.c1();
                    if (e || f) {
                        this.rn(this.ge && this.d5);
                    }
                    this.qh();
                    break;
                case ShapeSeriesBase.$$p[7]:
                case ShapeSeriesBase.$$p[8]:
                    this.w1 = this.w2;
                    this.w3 = this.w4;
                    let i = c;
                    let j = d;
                    this.y2(i);
                    this.yu(j);
                    if ((j != null && !j.c1()) || (j == null && i != null)) {
                        this.rn(false);
                    }
                    this.qh();
                    break;
                case "ActualResolution":
                    this.x3 = this.ib;
                    this.qh();
                    break;
                case "ActualBrush":
                    this.rn(false);
                    break;
                case ShapeSeriesBase.$$p[5]:
                    this.x6 = this.x5;
                    this.rn(false);
                    this.qh();
                    break;
                case "ActualThickness":
                    this.rn(false);
                    this.qh();
                    break;
                case ShapeSeriesBase.$$p[1]:
                    this.xj = this.xv();
                    this.rn(false);
                    break;
                case ShapeSeriesBase.$$p[0]:
                    this.xi = this.xu();
                    this.rn(false);
                    break;
            }
        }
        xv() {
            return this.xr;
        }
        xu() {
            return this.xq;
        }
        xm(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        xl(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        y1() {
            this.xz = null;
            if (this.xh == null) {
                return;
            }
            this.xz = new List$1(Rect.$, 2, this.xh.count);
            for (let a = 0; a < this.xh.count; a++) {
                this.xz.add(PointCollectionUtil.j(this.xh.item(a)));
            }
        }
        zf(a) {
            if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), a) !== null) {
                return PointCollectionUtil.h(a);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), a) !== null) {
                return PointCollectionUtil.g(a);
            }
            return Rect.empty;
        }
        x1(a, b, c, d, e, f, g) {
            return this.x2(a, b, c, d, e, f, g);
            if (typeCast(List$1.$.specialize(List$1.$.specialize(Point_$type)), c) !== null) {
                return this.x2(a, b, c, d, e, f, g);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), c) !== null) {
                let h = c;
                let i = new List$1(FlattenedShape.$, 0);
                let j = null;
                for (let k of fromEnum(h)) {
                    j = this.w0(a, b, PointCollectionUtil.b(k), d, e, f, g);
                    if (j == null) {
                        continue;
                    }
                    i.add(j);
                }
                return i;
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), c) !== null) {
                let l = c;
                let m = this.w0(a, b, PointCollectionUtil.b(l), d, e, f, g);
                let n = new List$1(FlattenedShape.$, 0);
                if (m != null) {
                    n.add(m);
                }
                return n;
            }
            else {
                throw new InvalidOperationException(1, "Unrecognized data in ShapeColumn");
            }
        }
        get_xp() {
            return true;
        }
        get xp() {
            return this.get_xp();
        }
        xy() {
            return false;
        }
        ro(a) {
            this.y0(this.ct);
        }
        rm(a, b, c, d, e) {
            super.rm(a, b, c, d, e);
            let f = this.a9.a$j.item(d);
            let g = f;
            f.a3(c);
            if (this.d3(f)) {
                return;
            }
            this.y0(f);
        }
        y0(a) {
            if (this.d3(a)) {
                return;
            }
            let b;
            let c;
            let d = a;
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            if (c.width < 1 || c.height < 1 || this.xh == null) {
                return;
            }
            let f = this.w2;
            let g = this.w4;
            let h = this.getEffectiveViewport1(a);
            let i = new ScalerParams(1, b, c, f.ch);
            i.c = h;
            let j = new ScalerParams(1, b, c, g.ch);
            j.c = h;
            if (!this.gp) {
                d.cu();
                let k = new Rect(0, 0, 0, 0, 0);
                let l;
                let m;
                let n;
                let o;
                let p = this.xh.count;
                if (this.wt == null || this.wt.length != p) {
                    this.wt = new Array(p);
                    this.wr = new Array(p);
                    this.ws = new Array(p);
                    this.wq = new Array(p);
                }
                let q = this.wt;
                let r = this.wr;
                let s = this.ws;
                let t = this.wq;
                let u;
                for (let v = 0; v < p; v++) {
                    u = this.xz._inner[v];
                    q[v] = u.top;
                    r[v] = u.left;
                    s[v] = u.right;
                    t[v] = u.bottom;
                }
                this.w1.ho(boxArray$1(r), 0, r.length, i);
                this.w1.ho(boxArray$1(s), 0, s.length, i);
                this.w3.ho(boxArray$1(q), 0, q.length, j);
                this.w3.ho(boxArray$1(t), 0, t.length, j);
                d.cv(r, q, s, t);
                let w = this.xh;
                let x = this.dl;
                this.y3(d);
                let y = c.left;
                let z = c.right;
                let aa = c.top;
                let ab = c.bottom;
                let ac = null;
                if (this.ze.isEmpty) {
                    ac = null;
                }
                else {
                    ac = new Clipper(1, this.ze.left, this.ze.bottom, this.ze.right, this.ze.top, this.xp);
                }
                let ad = this.xy();
                if (ad) {
                    d.cc.clear();
                }
                let ae = false;
                let af = true;
                let ag = 0;
                if (this.c9 != null) {
                    if (this.c9.fz()) {
                        let ah = this.c9.mt(b, i);
                        ae = ah.c;
                        ag = ah.d;
                    }
                }
                let ai;
                for (let aj = 0; aj < p; aj++) {
                    n = r[aj];
                    l = q[aj];
                    m = t[aj];
                    o = s[aj];
                    k.x = Math.min(n, o);
                    k.y = Math.min(l, m);
                    k.width = Math.max(n, o) - k.x;
                    k.height = Math.max(l, m) - k.y;
                    if (k.intersectsWith(c)) {
                        if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                            ai = ac;
                        }
                        else {
                            ai = null;
                        }
                        let ak = this.x1(a, ai, w.item(aj), i, j, 0, ag);
                        if (ad) {
                            ShapeSeriesBase.yz(d, aj, ak);
                        }
                        d.ci(aj, x.item(aj), k, ak);
                    }
                    else if (ae) {
                        k.x = k.x + ag;
                        if (k.intersectsWith(c)) {
                            if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                                ai = ac;
                            }
                            else {
                                ai = null;
                            }
                            let al = this.x1(a, ai, w.item(aj), i, j, ag, ag);
                            if (ad) {
                                ShapeSeriesBase.yz(d, aj, al);
                            }
                            d.ci(aj, x.item(aj), k, al);
                        }
                    }
                }
                d.ct();
            }
            let am = this.xx();
            this.w9.az(this, this.xx(), runOn(this, this.ww));
            let an = false;
            let ao = this.w9.b;
            if (ao != null) {
                an = true;
            }
            let ap = a.q;
            let aq = this.fw;
            let ar = d.ca;
            d.cp((as) => {
                let at = as.dataContext != null ? as.dataContext.item : null;
                let au = as.dataContext != null ? as.dataContext.c : -1;
                d.cm(as, at, am);
                if (an) {
                    this.yw(as, aq, au, this.xh.count, ap, ar);
                }
                else {
                    if (ar) {
                        {
                            this.w9.a1(as, this.h9, ar);
                        }
                    }
                }
                {
                    this.w9.ad(as, false, false, false, false);
                }
            });
        }
        yw(a, b, c, d, e, f) {
            let g = this.bv != 1;
            let h = this.cn != 1;
            let i = this.cm != 1;
            this.w9.a0(this.w9.b, c, d, false);
            {
                this.w9.a1(a, this.h9, f);
            }
            let j = this.w9.ax;
            let k = null;
            let l = null;
            let m = null;
            let n = this.dl;
            if (g && this.c9 != null) {
                k = this.c9.dj.getHighlightingInfo(this, n, j.z, j.y, false);
                j.c = k;
            }
            if (h && this.c9 != null) {
                l = this.c9.dk.getHighlightingInfo(this, n, j.z, j.y, false);
                if (l == null && this.bl != null) {
                    l = this.c9.dk.getHighlightingInfo(this.bl, this.bl.dl, j.z, j.y, false);
                }
                j.d = l;
            }
            if (i && this.c9 != null) {
                m = this.c9.di.getHighlightingInfo(this, n, j.z, j.y, false);
                j.b = m;
            }
            j.h = e;
            this.yy(j);
            this.w9.z(this, k, l, m, e, g, h, i, false);
        }
        yv(a, b, c) {
            let d = this.bv != 1;
            let e = this.cn != 1;
            let f = this.cm != 1;
            this.w9.a0(this.w9.d, a, b, true);
            this.w9.aa(this.h9);
            let g = this.w9.aw;
            let h = null;
            let i = null;
            let j = null;
            let k = this.dl;
            let l = null;
            let m = null;
            let n = null;
            if (d && this.c9 != null) {
                h = this.c9.dj.getHighlightingInfo(this, k, g.z, g.y, true);
                if (this.c9.dj.isCrossContextHighlight(this)) {
                    l = this.c9.dj.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.c = h;
            }
            if (e && this.c9 != null) {
                i = this.c9.dk.getHighlightingInfo(this, k, g.z, g.y, true);
                if (i == null && this.bl != null) {
                    i = this.c9.dk.getHighlightingInfo(this.bl, this.bl.dl, g.z, g.y, true);
                }
                if (this.c9.dk.isCrossContextHighlight(this)) {
                    m = this.c9.dk.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.d = i;
            }
            if (f && this.c9 != null) {
                j = this.c9.di.getHighlightingInfo(this, k, g.z, g.y, true);
                if (this.c9.di.isCrossContextHighlight(this)) {
                    n = this.c9.di.getHighlightingInfo(this, k, g.z, g.y, true);
                }
                g.b = i;
            }
            g.h = c;
            this.yx(g);
            this.w9.y(this, h, i, j, c, d, e, f, g.v, this.c9.dj.totalHighWaterMark, g.x, this.c9.dk.totalHighWaterMark, g.t, this.c9.di.totalHighWaterMark);
        }
        yy(a) {
            if (this.assigningShapeStyle != null && this.xj) {
                this.assigningShapeStyle(this, a);
            }
        }
        yx(a) {
            if (this.assigningShapeMarkerStyle != null && this.xi) {
                this.assigningShapeMarkerStyle(this, a);
            }
        }
        ww(a, b) {
            return this.wx(a, b);
        }
        wx(a, b) {
            if (b < a || a < 0 || a > this.xh.count || b < 0 || b > this.xh.count) {
                return null;
            }
            let c = new Array((b - a) + 1);
            for (let d = a; d <= b; d++) {
                let e = d;
                c[d - a] = this.dl.item(d);
            }
            return c;
        }
        static yz(a, b, c) {
            let d = 0;
            let e = null;
            for (let f = 0; f < c.count; f++) {
                let g = c._inner[f];
                let h = g.b.width * g.b.height;
                if (h > d) {
                    d = h;
                    e = g;
                }
            }
            a.cc.addItem(b, e);
        }
        p6() {
            super.p6();
            if (this.w2 != null) {
                this.w2.h8();
            }
            if (this.w4 != null) {
                this.w4.h8();
            }
        }
        sl(a, b) {
            this.rn(false);
        }
        sk(a, b) {
            this.rn(false);
        }
        o9(a, b, c, d) {
            super.o9(a, b, c, d);
            switch (a) {
                case 3:
                    if (d == this.yl) {
                        this.xz._inner[b] = this.zf(this.xh.item(b));
                    }
                    break;
                case 1:
                    for (let e = b; e < b + c; e++) {
                        this.xz.insert(e, this.zf(this.xh.item(e)));
                    }
                    break;
                case 0:
                    this.xz.v(b, c);
                    break;
                case 2:
                    for (let f = b; f < b + c; f++) {
                        this.xz._inner[f] = this.zf(this.xh.item(f));
                    }
                    break;
                case 4:
                    this.y1();
                    break;
            }
            this.rn(false);
        }
        hc(a, b, c) {
            let d = true;
            if (!super.hc(a, b, c) || (this.xt && this.xh == null) || b.isEmpty || a.isEmpty || this.w2 == null || this.w4 == null || this.w2.bi == null || this.w4.bi == null || this.w2.ly == this.w2.lx || this.w4.ly == this.w4.lx || this.xh == null || this.xh.count == 0 || this.xz == null || this.xz.count == 0 || this.xz.count != this.xh.count) {
                d = false;
            }
            return d;
        }
        get_xt() {
            return true;
        }
        get xt() {
            return this.get_xt();
        }
        qx(a) {
            super.qx(a);
            this.xa = typeCast(ShapeSeriesViewBase.$, a);
        }
        x2(a, b, c, d, e, f, g) {
            let h = new List$1(FlattenedShape.$, 0);
            let i;
            let j = c.count;
            for (let k = 0; k < j; k++) {
                i = c._inner[k];
                let l = this.w0(a, b, i, d, e, f, g);
                if (l == null) {
                    continue;
                }
                h.add(l);
            }
            return h;
        }
        w0(a, b, c, d, e, f, g) {
            let h = this.ys(c, d, e);
            let i = h.c;
            let j = h.d;
            let k = i.length;
            let l = 1.7976931348623157E+308;
            let m = 1.7976931348623157E+308;
            let n = -1.7976931348623157E+308;
            let o = -1.7976931348623157E+308;
            let p;
            let q;
            if (f != 0) {
                for (let r = 0; r < k; r++) {
                    i[r] = i[r] + f;
                }
            }
            for (let s = 0; s < k; s++) {
                p = i[s];
                q = j[s];
                l = p < l ? p : l;
                m = q < m ? q : m;
                n = p > n ? p : n;
                o = q > o ? q : o;
            }
            let t = !(l > this.ze.right || n < this.ze.left || m > this.ze.bottom || o < this.ze.top);
            if (!t && f == 0 && g != 0) {
                if (g != 0) {
                    for (let u = 0; u < k; u++) {
                        i[u] = i[u] + g;
                    }
                }
                for (let v = 0; v < k; v++) {
                    p = i[v];
                    q = j[v];
                    l = p < l ? p : l;
                    m = q < m ? q : m;
                    n = p > n ? p : n;
                    o = q > o ? q : o;
                }
                t = !(l > this.ze.right || n < this.ze.left || m > this.ze.bottom || o < this.ze.top);
            }
            if (!t) {
                return null;
            }
            let w = b != null && (l < this.ze.left || m < this.ze.top || n > this.ze.right || o > this.ze.bottom);
            let x = new Rect(0, l, m, n - l, o - m);
            if (!a.cb(x)) {
                return null;
            }
            l = l < this.ze.left ? this.ze.left : l;
            n = n > this.ze.right ? this.ze.right : n;
            m = m < this.ze.top ? this.ze.top : m;
            o = o > this.ze.bottom ? this.ze.bottom : o;
            let y = PolySimplification.b(h, this.ib);
            let z = new DefaultFlattener().c(h.c, h.d, y, this.x3);
            let aa = z.count;
            if (w) {
                let ab = new List$1(Point_$type, 0);
                b.i = ab;
                for (let ac = 0; ac < aa; ac++) {
                    b.j(z._inner[ac]);
                }
                b.i = null;
                z = ab;
            }
            if (z == null || z.count == 0) {
                return null;
            }
            let ad = new FlattenedShape();
            ad.a = z;
            ad.b = new Rect(0, l, m, n - l, o - m);
            ad.c = x;
            return ad;
        }
        ys(a, b, c) {
            let d = this.w1;
            let e = this.w3;
            let f = a.count;
            let g = new Array(f);
            let h = new Array(f);
            for (let i = 0; i < f; i++) {
                g[i] = a._inner[i].x;
                h[i] = a._inner[i].y;
            }
            d.ho(boxArray$1(g), 0, g.length, b);
            e.ho(boxArray$1(h), 0, h.length, c);
            return new Tuple$2(Array_$type, Array_$type, g, h);
        }
        y3(a) {
            a.c0();
        }
        o3(a, b) {
            super.o3(a, b);
            let c = b;
            c.cn();
        }
        yu(a) {
            if (a != null) {
                a.ct(this);
            }
        }
        y2(a) {
            if (a != null) {
                a.b0(this);
            }
        }
        a1(a, b) {
            let c = this.xa.c2(a, b);
            let d = null;
            if (c != null) {
                d = c.dataContext;
            }
            if (d != null) {
                return d;
            }
            return super.a1(a, b);
        }
        ya(a) {
            return this.dl.item(a);
        }
        get_g5() {
            return true;
        }
        set_g5(a) {
            super.set_g5(a);
        }
        ax(a) {
            if (typeCast(NumericXAxis.$, a) !== null && this.xz != null) {
                let b = 1.7976931348623157E+308;
                let c = -1.7976931348623157E+308;
                for (let d of fromEnum(this.xz)) {
                    b = Math.min(b, d.left);
                    c = Math.max(c, d.right);
                }
                return new AxisRange(b, c);
            }
            if (typeCast(NumericYAxis.$, a) !== null && this.xz != null) {
                let e = 1.7976931348623157E+308;
                let f = -1.7976931348623157E+308;
                for (let g of fromEnum(this.xz)) {
                    e = Math.min(e, g.top);
                    f = Math.max(f, g.bottom);
                }
                return new AxisRange(e, f);
            }
            return null;
        }
        get_fv() {
            return true;
        }
        get_fj() {
            return true;
        }
        get xn() {
            return this.styleShape != null;
        }
        zg(a, b, c) {
            if (this.styleShape != null) {
                if (this.xa.c9 != null && c == this.xa.c9) {
                    c = new Style();
                    let d = this.xa.c9;
                    c.fill = d.fill;
                    c.opacity = d.opacity;
                    c.stroke = d.stroke;
                    c.strokeThickness = d.strokeThickness;
                }
                else {
                    if (c != null) {
                        let e = new Style();
                        e.fill = c.fill;
                        e.opacity = c.opacity;
                        e.stroke = c.stroke;
                        e.strokeThickness = c.strokeThickness;
                        c = e;
                    }
                    else {
                        c = new Style();
                    }
                }
                let f = new StyleShapeEventArgs(a, b, c);
                this.styleShape(this, f);
                return f.d();
            }
            return c;
        }
    }
    ShapeSeriesBase.$t = markType(ShapeSeriesBase, 'ShapeSeriesBase', Series.$);
    ShapeSeriesBase.y4 = DependencyProperty.i("HighlightedValueMemberPath", String_$type, ShapeSeriesBase.$, new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("HighlightedValueMemberPath", b.oldValue, b.newValue)));
    ShapeSeriesBase.$$p = markDep(DependencyProperty, PropertyMetadata, ShapeSeriesBase, 'raisePropertyChanged', ['IsCustomShapeMarkerStyleAllowed:xq:y5', [0, false], 'IsCustomShapeStyleAllowed:xr:y6', [0, false], 'ItemSearchMode:w8:y7', [ShapeItemSearchMode_$type, enumGetBox(ShapeItemSearchMode_$type, 0)], 'ItemSearchPointsThreshold:x8:y8', [1, 10000], 'ItemSearchThreshold:x9:y9', [1, 10000], 'ShapeFilterResolution:x5:za', [1, 2], 'ShapeMemberPath:yl:zb', [2, null], 'XAxis:w2:zc', [NumericXAxis.$, null], 'YAxis:w4:zd', [NumericYAxis.$, null]]);
    return ShapeSeriesBase;
})();
/**
 * @hidden
 */
export let ShapeSeriesRenderManager = /*@__PURE__*/ (() => {
    class ShapeSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.aw = null;
            this.ax = null;
        }
        c() {
            this.aw = new AssigningShapeMarkerStyleEventArgs();
            return this.aw;
        }
        a() {
            this.ax = new AssigningShapeStyleEventArgs();
            return this.ax;
        }
        a1(a, b, c) {
            this.ag = this.ak;
            this.ah = this.al;
            this.m = this.t;
            this.am = this.an;
            this.ao = this.ar;
            this.k = this.r;
            this.l = this.s;
            this.j = this.q;
            if (c) {
                if (a._fill != null) {
                    this.ag = a._fill;
                }
                if (a._stroke != null) {
                    this.ah = a._stroke;
                }
                if (!isNaN_(a.ad) && (a.y == null || !isNaN_(a.y.strokeThickness))) {
                    this.m = a.ad;
                }
            }
            let d = this.b;
            if (d != null) {
                d.aa = this.ag;
                d.ab = this.ah;
                d.ae = this.m;
                d.af = this.am;
                d.ag = this.ao;
                d.ac = this.k;
                d.ad = this.l;
                d.o = this.j;
                d.g = this.f;
                d.k = b;
                d.f = false;
            }
        }
        ay(a, b, c) {
            this.w(a, b, c);
        }
        az(a, b, c) {
            this.x(a, b, c);
        }
        a0(a, b, c, d) {
            if (b == -1) {
                a.e = false;
                a.z = 0;
                a.y = c - 1;
            }
            else {
                if (d) {
                    a.z = b;
                    a.y = b;
                }
                else {
                    a.e = false;
                    a.z = b;
                    a.y = b;
                }
            }
        }
    }
    ShapeSeriesRenderManager.$t = markType(ShapeSeriesRenderManager, 'ShapeSeriesRenderManager', SeriesRenderManager.$);
    return ShapeSeriesRenderManager;
})();
/**
 * @hidden
 */
export let ShapeSeriesViewBase = /*@__PURE__*/ (() => {
    class ShapeSeriesViewBase extends SeriesView {
        constructor(a) {
            super(a);
            this.cc = null;
            this.b6 = null;
            this.cd = new List$1(ShapeHitRegion.$, 0);
            this.ch = 0;
            this.cg = null;
            this.b9 = null;
            this.c7 = new Path();
            this.b7 = null;
            this.c8 = null;
            this.b1 = null;
            this.b3 = null;
            this.b2 = null;
            this.b0 = null;
            this.b6 = a;
            this.b9 = this.b8();
            this.cg = new List$1(Path.$, 0);
            this.cc = new Dictionary$2(Number_$type, FlattenedShape.$, 0);
        }
        b4(a) {
            return null;
        }
        get ce() {
            return this.cd;
        }
        b8() {
            return ((() => {
                let $ret = new Pool$1(FrameworkElement.$);
                $ret.create = runOn(this, this.c1);
                $ret.activate = runOn(this, this.cq);
                $ret.disactivate = runOn(this, this.cr);
                $ret.destroy = runOn(this, this.cs);
                return $ret;
            })());
        }
        cb(a) {
            return a.width >= this.b6.x6 && a.height >= this.b6.x6;
        }
        static cf(a) {
            let b = new List$1(PointCollection.$, 0);
            let c;
            let d = a.count;
            for (let e = 0; e < d; e++) {
                c = a._inner[e];
                let f = new PointCollection(1, c.a);
                b.add(f);
            }
            return b;
        }
        get ca() {
            return this.c8 != null || this.b7 != null || this.b6.xn;
        }
        ci(a, b, c, d) {
            if (d != null && d.count > 0) {
                let e = ShapeSeriesViewBase.cf(d);
                c.intersect(this.bx);
                if (!this.cb(c)) {
                }
                else {
                    let f = this.c5(a, e);
                    if (f != null) {
                        let g = this.c4(this.ch, b);
                        for (let h = 0; h < d.count; h++) {
                            let i = new ShapeHitRegion();
                            i.d = d._inner[h].b;
                            i.a = d._inner[h].a;
                            i.b = a;
                            i.c = g;
                            this.cd.add(i);
                        }
                        this.ck(g, f);
                        this.ch = this.ch + 1;
                    }
                }
            }
        }
        c4(a, b) {
            let c = this.b9.item(this.ch);
            if (c.dataContext != null) {
                c.dataContext.item = b;
                c.dataContext.c = a;
            }
            return c;
        }
        static cl(a, b, c) {
            if (b._fill == null) {
                b._fill = a.e.u3;
            }
            if (b._stroke == null) {
                b._stroke = a.e.u7;
            }
            if (b.y == null) {
                b.ad = a.e.ic;
            }
        }
        cp(a) {
            for (let b = 0; b < this.b9.a.count; b++) {
                let c = this.b9.a._inner[b];
                a(c);
            }
        }
        cm(a, b, c) {
            if (a == null) {
                return;
            }
            this.co(a, c);
            let d = false;
            if (this.b7 != null) {
                let e = this.b7.selectStyle(b, a);
                if (e != null) {
                    d = true;
                }
                if (a.y != e) {
                    a.y = e;
                    this.k.j(a, a.y);
                }
            }
            if (!d) {
                if (a.y != this.c8) {
                    a.y = this.c8;
                    this.k.j(a, a.y);
                }
            }
            let f = this.b6.zg(b, a, a.y);
            if (a.y != f) {
                a.y = f;
                this.k.j(a, a.y);
            }
        }
        co(a, b) {
        }
        cj(a, b) {
            let c = truncate(Math.floor(a.left));
            let d = truncate(Math.ceil(a.right));
            let e = truncate(Math.floor(a.top));
            let f = truncate(Math.ceil(a.bottom));
            for (let g = c; g < d; g++) {
                for (let h = e; h < f; h++) {
                    this.cx(g, h, b);
                }
            }
        }
        cx(a, b, c) {
        }
        cu() {
            this.ch = 0;
        }
        ct() {
            this.b9.count = this.ch;
            this.as();
        }
        cw(a, b) {
        }
        cn() {
            this.b9.count = 0;
            this.as();
        }
        c1() {
            let a = this.b6;
            let b = ((() => {
                let $ret = new Path();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = a;
                    return $ret;
                })());
                return $ret;
            })());
            this.cg.add(b);
            return b;
        }
        cq(a) {
            a._visibility = 0;
        }
        cr(a) {
            a.dataContext.item = null;
            a._visibility = 1;
        }
        cs(a) {
            this.cg.remove(a);
        }
        c6(a, b, c) {
            if (b == null) {
                return null;
            }
            let d = new PathGeometry();
            let e;
            let f = b.count;
            for (let g = 0; g < f; g++) {
                e = b._inner[g];
                if (e.count < 1) {
                    continue;
                }
                let h = new PolyLineSegment();
                h._points = e;
                let i = new PathFigure();
                i._isFilled = c;
                i._isClosed = c;
                i._startPoint = e._inner[0];
                i._segments.add(h);
                d.c.add(i);
            }
            return d;
        }
        ac(a) {
            return this.cg._inner[a];
        }
        ab(a) {
            let b = this.cg._inner[a];
            this.c7._visibility = b._visibility;
            this.c7.an = b.an;
            let c = this.bs(a);
            this.c7._fill = c;
            this.c7._stroke = c;
            this.c7.ad = this.e.ic + 3;
            return this.c7;
        }
        a8(a, b) {
            super.a8(a, b);
            for (let c = 0; c < this.cg.count; c++) {
                let d = this.aa(c, b);
                if (d._visibility != 1) {
                    a.t(d);
                }
            }
        }
        get c9() {
            return this.c8;
        }
        cz(a) {
            this.b7 = a;
        }
        cy(a) {
            this.c8 = a;
        }
        c2(a, b) {
            return this.c3(a, b, false);
        }
        c3(a, b, c) {
            let d = this.b5(a, b, c);
            if (d == null) {
                return null;
            }
            return d.c;
        }
        b5(a, b, c) {
            if (this.cd.count == 0) {
                return null;
            }
            let d = a.x;
            let e = a.y;
            let f = this.cd.count;
            let g = this.cd;
            let h = null;
            for (let i = 0; i < f; i++) {
                h = g._inner[i];
                if (h.a == null || h.a.count == 0) {
                    continue;
                }
                if (d >= h.d.left && d <= h.d.right && e >= h.d.top && e <= h.d.bottom) {
                    if (c) {
                        let j = this.b6.ic / 2 + this.b6.is(b);
                        if (GeometryUtil.d(a, h.a._inner[0], h.a, j)) {
                            return h;
                        }
                    }
                    else {
                        if (PolygonUtil.b(h.a, a)) {
                            return h;
                        }
                    }
                }
            }
            return null;
        }
        cv(a, b, c, d) {
            this.b1 = a;
            this.b3 = b;
            this.b2 = c;
            this.b0 = d;
            this.cd.clear();
        }
        c0() {
            let a = this.bx;
            let b = ((() => {
                let $ret = new Path();
                $ret.y = this.c8;
                return $ret;
            })());
            b.ad = 1;
            if (this.k != null) {
                this.k.j(b, b.y);
            }
            this.b6.ze = RectUtil.r(a, b.ad);
        }
        an(a) {
            super.an(a);
            if (this.b9.a == null) {
                return;
            }
            for (let b = 0; b < this.b9.a.count; b++) {
                let c = typeCast(Path.$, this.b9.a._inner[b]);
                if (c._visibility != 1) {
                    this.e.bb.exportPathData(a, c, "shape" + b, ["Main "]);
                }
            }
        }
    }
    ShapeSeriesViewBase.$t = markType(ShapeSeriesViewBase, 'ShapeSeriesViewBase', SeriesView.$);
    return ShapeSeriesViewBase;
})();
