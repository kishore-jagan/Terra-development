import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent radius axis for polar and radial series.
*
* ```html
* <igx-data-chart
*     [dataSource]="dataSource"   >
*     <igx-category-angle-axis name="angleAxis" label="Department" />
*     <igx-numeric-radius-axis name="radiusAxis" />
*  </igx-data-chart>
* ```
*
* ```ts
* this.series1.angleAxisName = "AngleAxis";
* this.series1.valueAxisName = "numericYAxis";
* ```
*/
export let IgxNumericRadiusAxisComponent = /*@__PURE__*/ (() => {
    class IgxNumericRadiusAxisComponent extends IgxNumericAxisBaseComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new NumericRadiusAxis();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Checks if the axis is of radial axis type
        *
        * ```ts
        * let isRadial: boolean = this.series.isRadial;
        * ```
        */
        get isRadial() {
            return this.i.cm;
        }
        /**
         * Defines the percentage of the maximum radius extent to use as the maximum radius. Should be
         * a value between 0.0 and 1.0.
        */
        get radiusExtentScale() {
            return this.i.nz;
        }
        set radiusExtentScale(v) {
            this.i.nz = +v;
        }
        /**
         * Defines the percentage of the maximum radius extent to leave blank at the center of the chart. Should be
         * a value between 0.0 and 1.0.
        */
        get innerRadiusExtentScale() {
            return this.i.ny;
        }
        set innerRadiusExtentScale(v) {
            this.i.ny = +v;
        }
        /**
         * Returns a world coordinates radius length (0 - 0.5) from a raw axis value.
        
        * @param unscaledValue  * The raw axis value.
        */
        getScaledValue(unscaledValue) {
            let iv = this.i.nv(unscaledValue);
            return (iv);
        }
        /**
         * Returns a raw axis value from the world coordinates radius length provided.
        
        * @param scaledValue  * The scaled world coordinates radius length.
        *
        * Class containing several properties which are used as parameters passed to scaling operations in a `SeriesViewer`.
        */
        getUnscaledValue(scaledValue) {
            let iv = this.i.nx(scaledValue);
            return (iv);
        }
    }
    IgxNumericRadiusAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxNumericRadiusAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxNumericRadiusAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxNumericRadiusAxisComponent, selector: "igx-numeric-radius-axis", inputs: { radiusExtentScale: "radiusExtentScale", innerRadiusExtentScale: "innerRadiusExtentScale" }, providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxNumericRadiusAxisComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxNumericRadiusAxisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-numeric-radius-axis',
                    template: ``,
                    providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }, { provide: IgxAxisComponent, useExisting: forwardRef(() => IgxNumericRadiusAxisComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { radiusExtentScale: [{
                type: Input
            }], innerRadiusExtentScale: [{
                type: Input
            }] } });
