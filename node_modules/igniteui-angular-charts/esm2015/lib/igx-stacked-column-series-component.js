import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxHorizontalStackedSeriesBaseComponent } from "./igx-horizontal-stacked-series-base-component";
import { IgxStackedSeriesBaseComponent } from "./igx-stacked-series-base-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { StackedColumnSeries } from "./StackedColumnSeries";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent stacked column series.
*/
export let IgxStackedColumnSeriesComponent = /*@__PURE__*/ (() => {
    class IgxStackedColumnSeriesComponent extends IgxHorizontalStackedSeriesBaseComponent {
        constructor() {
            super();
        }
        createImplementation() {
            return new StackedColumnSeries();
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets whether the current series shows a column shape.
        */
        get isColumn() {
            return this.i.ex;
        }
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get isMarkerlessDisplayPreferred() {
            return this.i.fj;
        }
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get radiusX() {
            return this.i.abl;
        }
        set radiusX(v) {
            this.i.abl = +v;
        }
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get radiusY() {
            return this.i.abm;
        }
        set radiusY(v) {
            this.i.abm = +v;
        }
        /**
         * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
        
        */
        getItemSpan() {
            let iv = this.i.iu();
            return (iv);
        }
    }
    IgxStackedColumnSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxStackedColumnSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxStackedColumnSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxStackedColumnSeriesComponent, selector: "igx-stacked-column-series", inputs: { radiusX: "radiusX", radiusY: "radiusY" }, providers: [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }], usesInheritance: true, ngImport: i0, template: ``, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxStackedColumnSeriesComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxStackedColumnSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-stacked-column-series',
                    template: ``,
                    providers: [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }, { provide: IgxSeriesComponent, useExisting: forwardRef(() => IgxStackedColumnSeriesComponent) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { radiusX: [{
                type: Input
            }], radiusY: [{
                type: Input
            }] } });
