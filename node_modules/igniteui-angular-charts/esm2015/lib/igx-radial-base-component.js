import { EventEmitter, Output, Component, Input } from '@angular/core';
import { delegateCombine } from "igniteui-angular-core";
import { RadialLabelMode_$type } from "igniteui-angular-core";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { IgxCategoryAngleAxisComponent } from "./igx-category-angle-axis-component";
import { IgxNumericRadiusAxisComponent } from "./igx-numeric-radius-axis-component";
import { IgxAssigningRadialStyleEventArgs } from "./igx-assigning-radial-style-event-args";
import { IgxAssigningRadialMarkerStyleEventArgs } from "./igx-assigning-radial-marker-style-event-args";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { ensureEnum, ensureBool, arrayFindByName, toPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent radial series
*/
export let IgxRadialBaseComponent = /*@__PURE__*/ (() => {
    class IgxRadialBaseComponent extends IgxMarkerSeriesComponent {
        constructor() {
            super();
            this._assigningRadialStyle = null;
            this._assigningRadialMarkerStyle = null;
        }
        /**
                                     * @hidden
                                     */
        get i() {
            return this._implementation;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get autoCalloutLabelPrecision() {
            return this.i.zv;
        }
        set autoCalloutLabelPrecision(v) {
            this.i.zv = +v;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get autoCalloutPercentagePrecision() {
            return this.i.zw;
        }
        set autoCalloutPercentagePrecision(v) {
            this.i.zw = +v;
        }
        /**
         * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
        */
        get autoCalloutLabelValueSeparator() {
            return this.i.z4;
        }
        set autoCalloutLabelValueSeparator(v) {
            this.i.z4 = v;
        }
        /**
         * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
        */
        get legendRadialLabelMode() {
            return this.i.y6;
        }
        set legendRadialLabelMode(v) {
            this.i.y6 = ensureEnum(RadialLabelMode_$type, v);
        }
        /**
         * Gets or sets the labelling mode to use for the auto callouts in preference to their mode.
        */
        get autoCalloutRadialLabelMode() {
            return this.i.y5;
        }
        set autoCalloutRadialLabelMode(v) {
            this.i.y5 = ensureEnum(RadialLabelMode_$type, v);
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get autoCalloutOthersLabelFormat() {
            return this.i.z6;
        }
        set autoCalloutOthersLabelFormat(v) {
            this.i.z6 = v;
        }
        /**
         * Gets or sets the format specifiers to use with the auto callouts for the others category.
        */
        get autoCalloutOthersLabelFormatSpecifiers() {
            return this.i.ye;
        }
        set autoCalloutOthersLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ye = v;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get proportionalRadialLabelFormat() {
            return this.i.aas;
        }
        set proportionalRadialLabelFormat(v) {
            this.i.aas = v;
        }
        /**
         * Gets or sets the format specifiers to use with the auto callouts for the others category.
        */
        get proportionalRadialLabelFormatSpecifiers() {
            return this.i.yj;
        }
        set proportionalRadialLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yj = v;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get legendProportionalRadialLabelFormat() {
            return this.i.aai;
        }
        set legendProportionalRadialLabelFormat(v) {
            this.i.aai = v;
        }
        /**
         * Gets or sets the format specifiers to use with the auto callouts for the others category.
        */
        get legendProportionalRadialLabelFormatSpecifiers() {
            return this.i.yg;
        }
        set legendProportionalRadialLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yg = v;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get othersProportionalRadialLabelFormat() {
            return this.i.aap;
        }
        set othersProportionalRadialLabelFormat(v) {
            this.i.aap = v;
        }
        /**
         * Gets or sets the format specifiers to use with the auto callouts for the others category.
        */
        get othersProportionalRadialLabelFormatSpecifiers() {
            return this.i.yi;
        }
        set othersProportionalRadialLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yi = v;
        }
        /**
         * Gets or sets the format string to use for the auto callout labels for the others category.
        */
        get othersLegendProportionalRadialLabelFormat() {
            return this.i.aam;
        }
        set othersLegendProportionalRadialLabelFormat(v) {
            this.i.aam = v;
        }
        /**
         * Gets or sets the format specifiers to use with the auto callouts for the others category.
        */
        get othersLegendProportionalRadialLabelFormatSpecifiers() {
            return this.i.yh;
        }
        set othersLegendProportionalRadialLabelFormatSpecifiers(v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                const re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.yh = v;
        }
        /**
         * Checks if this series is a radial series
        */
        get isRadial() {
            return this.i.fr;
        }
        /**
         * Gets or sets whether this Radial series should allow custom style overrides of its individual visuals.
        */
        get isCustomRadialStyleAllowed() {
            return this.i.zj;
        }
        set isCustomRadialStyleAllowed(v) {
            this.i.zj = ensureBool(v);
        }
        /**
         * Gets or sets whether this Radial series should allow custom style overrides of its individual marker visuals.
        */
        get isCustomRadialMarkerStyleAllowed() {
            return this.i.zi;
        }
        set isCustomRadialMarkerStyleAllowed(v) {
            this.i.zi = ensureBool(v);
        }
        /**
         * Gets or sets the method by which to animate the data into the chart when the chart data source is swapped.
         * Note: Transitions are not currently supported for stacked series.
        */
        get transitionInMode() {
            return this.i.yu;
        }
        set transitionInMode(v) {
            this.i.yu = ensureEnum(CategoryTransitionInMode_$type, v);
        }
        /**
         * Gets or sets whether the series should transition into the plot area when a new data source is assigned.
         * Note: Transitions are not currently supported for stacked series.
        */
        get isTransitionInEnabled() {
            return this.i.zk;
        }
        set isTransitionInEnabled(v) {
            this.i.zk = ensureBool(v);
        }
        /**
         * Gets the effective angle axis for the current series object.
        */
        get angleAxis() {
            const r = this.i.yr;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxCategoryAngleAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set angleAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yr = null : this.i.yr = v.i;
        }
        /**
         * Gets the effective value axis for the current series object.
        */
        get valueAxis() {
            const r = this.i.yw;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                let e = IgxNumericRadiusAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        }
        set valueAxis(v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yw = null : this.i.yw = v.i;
        }
        /**
         * Gets or sets whether to clip the series to the bounds.
         * Setting this property to true will decrease chart performance.
        */
        get clipSeriesToBounds() {
            return this.i.zh;
        }
        set clipSeriesToBounds(v) {
            this.i.zh = ensureBool(v);
        }
        findByName(name) {
            var baseResult = super.findByName(name);
            if (baseResult) {
                return baseResult;
            }
            if (this.autoCalloutOthersLabelFormatSpecifiers != null && arrayFindByName(this.autoCalloutOthersLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.autoCalloutOthersLabelFormatSpecifiers, name);
            }
            if (this.proportionalRadialLabelFormatSpecifiers != null && arrayFindByName(this.proportionalRadialLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.proportionalRadialLabelFormatSpecifiers, name);
            }
            if (this.legendProportionalRadialLabelFormatSpecifiers != null && arrayFindByName(this.legendProportionalRadialLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.legendProportionalRadialLabelFormatSpecifiers, name);
            }
            if (this.othersProportionalRadialLabelFormatSpecifiers != null && arrayFindByName(this.othersProportionalRadialLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.othersProportionalRadialLabelFormatSpecifiers, name);
            }
            if (this.othersLegendProportionalRadialLabelFormatSpecifiers != null && arrayFindByName(this.othersLegendProportionalRadialLabelFormatSpecifiers, name)) {
                return arrayFindByName(this.othersLegendProportionalRadialLabelFormatSpecifiers, name);
            }
            if (this.angleAxis && this.angleAxis.name && this.angleAxis.name == name) {
                return this.angleAxis;
            }
            if (this.valueAxis && this.valueAxis.name && this.valueAxis.name == name) {
                return this.valueAxis;
            }
            return null;
        }
        _styling(container, component, parent) {
            super._styling(container, component, parent);
            this._inStyling = true;
            if (this.angleAxis && this.angleAxis._styling) {
                this.angleAxis._styling(container, component, this);
            }
            if (this.valueAxis && this.valueAxis._styling) {
                this.valueAxis._styling(container, component, this);
            }
            this._inStyling = false;
        }
        /**
         * Determine if object can be used as ValueAxis
        
        * @param axis  * The object to check
        */
        canUseAsValueAxis(axis) {
            let iv = this.i.zg(axis);
            return (iv);
        }
        /**
         * Determine if object can be used as AngleAxis
        
        * @param axis  * The object to check
        */
        canUseAsAngleAxis(axis) {
            let iv = this.i.zf(axis);
            return (iv);
        }
        /**
         * Gets the item that is the best match for the specified world coordinates.
        
        * @param world  * The world coordinates to use.
        */
        getItem(world) {
            let iv = this.i.kl(toPoint(world));
            return (iv);
        }
        /**
         * Gets the angle to the provided world position from the center of the radial series.
        
        * @param world  * The world position to get the angle for
        */
        getAngleFromWorld(world) {
            let iv = this.i.zq(toPoint(world));
            return (iv);
        }
        /**
         * Gets the precise item index, if possible, based on the closeness to the previous or next whole integer. If the series cannot provide this information, GetExactItemIndex will return the same integer value as GetItemIndex.
        
        * @param world  * The world position for which to return the index.
        */
        getExactItemIndex(world) {
            let iv = this.i.ip(toPoint(world));
            return (iv);
        }
        /**
         * Get the index of the item near the provided world coordinates.
        
        * @param world  * The world coordinates for which to getch the item index.
        */
        getItemIndex(world) {
            let iv = this.i.j1(toPoint(world));
            return (iv);
        }
        /**
         * Scrolls the specified item into the view.
        
        * @param item  * The item to scroll into view.
        */
        scrollIntoView(item) {
            let iv = this.i.gb(item);
            return (iv);
        }
        /**
         * Returns the offset value for this series if grouped on a category axis.
        
        */
        getOffsetValue() {
            let iv = this.i.getOffsetValue();
            return (iv);
        }
        /**
         * Returns the width of the category grouping this series is in.
        
        */
        getCategoryWidth() {
            let iv = this.i.getCategoryWidth();
            return (iv);
        }
        /**
         * Event raised when Assigning Category Style
        */
        get assigningRadialStyle() {
            if (this._assigningRadialStyle == null) {
                this._assigningRadialStyle = new EventEmitter();
                this.i.assigningRadialStyle = delegateCombine(this.i.assigningRadialStyle, (o, e) => {
                    let outerArgs = new IgxAssigningRadialStyleEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeAssigningRadialStyle) {
                        this.beforeAssigningRadialStyle(this, outerArgs);
                    }
                    this._assigningRadialStyle.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._assigningRadialStyle;
        }
        /**
         * Event raised when Assigning Radial Marker Style
        */
        get assigningRadialMarkerStyle() {
            if (this._assigningRadialMarkerStyle == null) {
                this._assigningRadialMarkerStyle = new EventEmitter();
                this.i.assigningRadialMarkerStyle = delegateCombine(this.i.assigningRadialMarkerStyle, (o, e) => {
                    let outerArgs = new IgxAssigningRadialMarkerStyleEventArgs();
                    outerArgs._provideImplementation(e);
                    if (this.beforeAssigningRadialMarkerStyle) {
                        this.beforeAssigningRadialMarkerStyle(this, outerArgs);
                    }
                    this._assigningRadialMarkerStyle.emit({
                        sender: this,
                        args: outerArgs
                    });
                });
            }
            return this._assigningRadialMarkerStyle;
        }
    }
    IgxRadialBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxRadialBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxRadialBaseComponent, selector: "ng-component", inputs: { autoCalloutLabelPrecision: "autoCalloutLabelPrecision", autoCalloutPercentagePrecision: "autoCalloutPercentagePrecision", autoCalloutLabelValueSeparator: "autoCalloutLabelValueSeparator", legendRadialLabelMode: "legendRadialLabelMode", autoCalloutRadialLabelMode: "autoCalloutRadialLabelMode", autoCalloutOthersLabelFormat: "autoCalloutOthersLabelFormat", autoCalloutOthersLabelFormatSpecifiers: "autoCalloutOthersLabelFormatSpecifiers", proportionalRadialLabelFormat: "proportionalRadialLabelFormat", proportionalRadialLabelFormatSpecifiers: "proportionalRadialLabelFormatSpecifiers", legendProportionalRadialLabelFormat: "legendProportionalRadialLabelFormat", legendProportionalRadialLabelFormatSpecifiers: "legendProportionalRadialLabelFormatSpecifiers", othersProportionalRadialLabelFormat: "othersProportionalRadialLabelFormat", othersProportionalRadialLabelFormatSpecifiers: "othersProportionalRadialLabelFormatSpecifiers", othersLegendProportionalRadialLabelFormat: "othersLegendProportionalRadialLabelFormat", othersLegendProportionalRadialLabelFormatSpecifiers: "othersLegendProportionalRadialLabelFormatSpecifiers", isCustomRadialStyleAllowed: "isCustomRadialStyleAllowed", isCustomRadialMarkerStyleAllowed: "isCustomRadialMarkerStyleAllowed", transitionInMode: "transitionInMode", isTransitionInEnabled: "isTransitionInEnabled", angleAxis: "angleAxis", valueAxis: "valueAxis", clipSeriesToBounds: "clipSeriesToBounds" }, outputs: { assigningRadialStyle: "assigningRadialStyle", assigningRadialMarkerStyle: "assigningRadialMarkerStyle" }, usesInheritance: true, ngImport: i0, template: ``, isInline: true });
    return IgxRadialBaseComponent;
})();
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialBaseComponent, decorators: [{
            type: Component,
            args: [{
                    template: ``,
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { autoCalloutLabelPrecision: [{
                type: Input
            }], autoCalloutPercentagePrecision: [{
                type: Input
            }], autoCalloutLabelValueSeparator: [{
                type: Input
            }], legendRadialLabelMode: [{
                type: Input
            }], autoCalloutRadialLabelMode: [{
                type: Input
            }], autoCalloutOthersLabelFormat: [{
                type: Input
            }], autoCalloutOthersLabelFormatSpecifiers: [{
                type: Input
            }], proportionalRadialLabelFormat: [{
                type: Input
            }], proportionalRadialLabelFormatSpecifiers: [{
                type: Input
            }], legendProportionalRadialLabelFormat: [{
                type: Input
            }], legendProportionalRadialLabelFormatSpecifiers: [{
                type: Input
            }], othersProportionalRadialLabelFormat: [{
                type: Input
            }], othersProportionalRadialLabelFormatSpecifiers: [{
                type: Input
            }], othersLegendProportionalRadialLabelFormat: [{
                type: Input
            }], othersLegendProportionalRadialLabelFormatSpecifiers: [{
                type: Input
            }], isCustomRadialStyleAllowed: [{
                type: Input
            }], isCustomRadialMarkerStyleAllowed: [{
                type: Input
            }], transitionInMode: [{
                type: Input
            }], isTransitionInEnabled: [{
                type: Input
            }], angleAxis: [{
                type: Input
            }], valueAxis: [{
                type: Input
            }], clipSeriesToBounds: [{
                type: Input
            }], assigningRadialStyle: [{
                type: Output
            }], assigningRadialMarkerStyle: [{
                type: Output
            }] } });
