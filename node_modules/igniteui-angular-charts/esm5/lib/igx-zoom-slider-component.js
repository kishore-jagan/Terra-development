import { Output, EventEmitter, Component, ViewContainerRef, ViewChild, Input, ChangeDetectionStrategy } from '@angular/core';
import { ZoomSliderOrientation_$type } from './ZoomSliderOrientation';
import { IgxZoomSliderResolvingAxisValueEventArgs } from './igx-zoom-slider-resolving-axis-value-event-args';
import { IgxRectChangedEventArgs } from "igniteui-angular-core";
import { ZoomSlider } from "./ZoomSlider";
import { fromRect, toRect, ensureEnum, brushToString, stringToBrush, ensureBool, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-angular-core";
import { FontInfo } from "igniteui-angular-core";
import { AngularRenderer } from "igniteui-angular-core";
import { delegateCombine } from "igniteui-angular-core";
import * as i0 from "@angular/core";
var ZoomSliderStylingDefaults = {};
var IgxZoomSliderComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgxZoomSliderComponent(renderer, _elRef, ngZone, injector, componentFactoryResolver) {
        var _this = this;
        this.renderer = renderer;
        this._elRef = _elRef;
        this.ngZone = ngZone;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this._wrapper = null;
        this._root = null;
        this._implementation = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._resolvingAxisValue = null;
        this._windowRectChanged = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        if (renderer) {
            this.container = renderer.createElement("div");
            renderer.appendChild(_elRef.element.nativeElement, this.container);
            renderer.setStyle(this.container, "display", "block");
            renderer.setStyle(this.container, "width", "100%");
            renderer.setStyle(this.container, "height", "100%");
        }
        var root;
        root = this.container;
        if (this.container != null) {
            root = this.container;
        }
        if (root && root.nativeElement) {
            root = root.nativeElement;
        }
        this._root = root;
        var zoomSlider = this.i;
        this._zoomSlider = zoomSlider;
        if (renderer) {
            var ren = new AngularRenderer(root, this.renderer, window.document, this.ngZone, true, ZoomSliderStylingDefaults);
            this._wrapper = ren;
            zoomSlider.provideContainer(ren);
            zoomSlider.notifySizeChanged();
            ren.addSizeWatcher(function () {
                _this._zoomSlider.notifySizeChanged();
            });
        }
    }
    Object.defineProperty(IgxZoomSliderComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            this.renderer.setStyle(this._elRef.element.nativeElement, "height", value);
            this._zoomSlider.notifySizeChanged();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this.renderer.setStyle(this._elRef.element.nativeElement, "width", value);
            this._zoomSlider.notifySizeChanged();
        },
        enumerable: false,
        configurable: true
    });
    // supports angular themes or custom properties set in CSS
    IgxZoomSliderComponent.prototype.updateStyle = function () {
        this._styling(this._root, this);
    };
    IgxZoomSliderComponent.prototype.ngOnDestroy = function () {
        this._zoomSlider.destroy();
        this._wrapper.destroy();
    };
    IgxZoomSliderComponent.prototype.ngAfterContentInit = function () {
        this.updateStyle();
    };
    IgxZoomSliderComponent.prototype.createImplementation = function () {
        return new ZoomSlider();
    };
    Object.defineProperty(IgxZoomSliderComponent.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgxZoomSliderComponent._staticStyling = function (container, component, parent) {
        var genericPrefix = "";
        var typeName = (component.i ? component.i : component).$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ZoomSlider");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = (component.i ? component.i : component).$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, component, genericPrefix + "-", new Set(), false, additionalPrefixes);
    };
    Object.defineProperty(IgxZoomSliderComponent.prototype, "panTransitionDuration", {
        get: function () {
            return this.i.bl;
        },
        set: function (v) {
            this.i.bl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "maxZoomWidth", {
        get: function () {
            return this.i.bg;
        },
        set: function (v) {
            this.i.bg = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.bi;
        },
        set: function (v) {
            this.i.bi = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "actualPixelScalingRatio", {
        get: function () {
            return this.i.a4;
        },
        set: function (v) {
            this.i.a4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "windowRect", {
        get: function () {
            return fromRect(this.i.windowRect);
        },
        set: function (v) {
            this.i.windowRect = toRect(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "minZoomWidth", {
        get: function () {
            return this.i.bh;
        },
        set: function (v) {
            this.i.bh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "startInset", {
        get: function () {
            return this.i.startInset;
        },
        set: function (v) {
            this.i.startInset = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "endInset", {
        get: function () {
            return this.i.endInset;
        },
        set: function (v) {
            this.i.endInset = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "trackStartInset", {
        get: function () {
            return this.i.trackStartInset;
        },
        set: function (v) {
            this.i.trackStartInset = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "trackEndInset", {
        get: function () {
            return this.i.trackEndInset;
        },
        set: function (v) {
            this.i.trackEndInset = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "barExtent", {
        get: function () {
            return this.i.barExtent;
        },
        set: function (v) {
            this.i.barExtent = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "orientation", {
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = ensureEnum(ZoomSliderOrientation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbBrush", {
        get: function () {
            return brushToString(this.i.e8);
        },
        set: function (v) {
            this.i.e8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbStrokeThickness", {
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbStrokeThickness", {
        get: function () {
            return this.i.a9;
        },
        set: function (v) {
            this.i.a9 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbBrush", {
        get: function () {
            return brushToString(this.i.e0);
        },
        set: function (v) {
            this.i.e0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbOutline", {
        get: function () {
            return brushToString(this.i.e9);
        },
        set: function (v) {
            this.i.e9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbOutline", {
        get: function () {
            return brushToString(this.i.e1);
        },
        set: function (v) {
            this.i.e1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbRidgesBrush", {
        get: function () {
            return brushToString(this.i.fa);
        },
        set: function (v) {
            this.i.fa = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbRidgesBrush", {
        get: function () {
            return brushToString(this.i.e2);
        },
        set: function (v) {
            this.i.e2 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbWidth", {
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbWidth", {
        get: function () {
            return this.i.ba;
        },
        set: function (v) {
            this.i.ba = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerThumbHeight", {
        get: function () {
            return this.i.bd;
        },
        set: function (v) {
            this.i.bd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherThumbHeight", {
        get: function () {
            return this.i.a8;
        },
        set: function (v) {
            this.i.a8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerShadeBrush", {
        get: function () {
            return brushToString(this.i.e6);
        },
        set: function (v) {
            this.i.e6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerShadeOutline", {
        get: function () {
            return brushToString(this.i.e7);
        },
        set: function (v) {
            this.i.e7 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerShadeStrokeThickness", {
        get: function () {
            return this.i.bc;
        },
        set: function (v) {
            this.i.bc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherShadeBrush", {
        get: function () {
            return brushToString(this.i.ey);
        },
        set: function (v) {
            this.i.ey = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherShadeOutline", {
        get: function () {
            return brushToString(this.i.ez);
        },
        set: function (v) {
            this.i.ez = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherShadeStrokeThickness", {
        get: function () {
            return this.i.a7;
        },
        set: function (v) {
            this.i.a7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "barBrush", {
        get: function () {
            return brushToString(this.i.et);
        },
        set: function (v) {
            this.i.et = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "barOutline", {
        get: function () {
            return brushToString(this.i.eu);
        },
        set: function (v) {
            this.i.eu = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "barStrokeThickness", {
        get: function () {
            return this.i.a5;
        },
        set: function (v) {
            this.i.a5 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "rangeThumbBrush", {
        get: function () {
            return brushToString(this.i.fb);
        },
        set: function (v) {
            this.i.fb = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "rangeThumbOutline", {
        get: function () {
            return brushToString(this.i.fc);
        },
        set: function (v) {
            this.i.fc = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "rangeThumbStrokeThickness", {
        get: function () {
            return this.i.bj;
        },
        set: function (v) {
            this.i.bj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "rangeThumbRidgesBrush", {
        get: function () {
            return brushToString(this.i.fd);
        },
        set: function (v) {
            this.i.fd = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerCalloutBrush", {
        get: function () {
            return brushToString(this.i.e3);
        },
        set: function (v) {
            this.i.e3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerCalloutTextColor", {
        get: function () {
            return brushToString(this.i.e5);
        },
        set: function (v) {
            this.i.e5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerCalloutOutline", {
        get: function () {
            return brushToString(this.i.e4);
        },
        set: function (v) {
            this.i.e4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "lowerCalloutStrokeThickness", {
        get: function () {
            return this.i.bb;
        },
        set: function (v) {
            this.i.bb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherCalloutBrush", {
        get: function () {
            return brushToString(this.i.ev);
        },
        set: function (v) {
            this.i.ev = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherCalloutTextColor", {
        get: function () {
            return brushToString(this.i.ex);
        },
        set: function (v) {
            this.i.ex = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherCalloutOutline", {
        get: function () {
            return brushToString(this.i.ew);
        },
        set: function (v) {
            this.i.ew = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "higherCalloutStrokeThickness", {
        get: function () {
            return this.i.a6;
        },
        set: function (v) {
            this.i.a6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "isCustomThumbProvided", {
        get: function () {
            return this.i.ab;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "isCustomRangeThumbProvided", {
        get: function () {
            return this.i.z;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "isCustomBarProvided", {
        get: function () {
            return this.i.y;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "isCustomShadeProvided", {
        get: function () {
            return this.i.aa;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "areThumbCalloutsEnabled", {
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            this.i.q = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "thumbCalloutTextStyle", {
        get: function () {
            if (this.i.o == null) {
                return null;
            }
            return this.i.o.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.o = fi;
        },
        enumerable: false,
        configurable: true
    });
    IgxZoomSliderComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgxZoomSliderComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgxZoomSliderComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxZoomSliderComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("ZoomSliderComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgxZoomSliderComponent.prototype.onDetachedFromUI = function () {
        this.i.onDetachedFromUI();
    };
    IgxZoomSliderComponent.prototype.onAttachedToUI = function () {
        this.i.onAttachedToUI();
    };
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    IgxZoomSliderComponent.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    IgxZoomSliderComponent.prototype.flush = function () {
        this.i.c3();
    };
    IgxZoomSliderComponent.prototype.trackDirty = function () {
        this.i.trackDirty();
    };
    /**
     * Shows the ZoomSlider.
    
    */
    IgxZoomSliderComponent.prototype.show = function () {
        this.i.show();
    };
    /**
     * Hides the ZoomSlider.
    
    */
    IgxZoomSliderComponent.prototype.hide = function () {
        this.i.hide();
    };
    Object.defineProperty(IgxZoomSliderComponent.prototype, "resolvingAxisValue", {
        get: function () {
            var _this = this;
            if (this._resolvingAxisValue == null) {
                this._resolvingAxisValue = new EventEmitter();
                this.i.resolvingAxisValue = delegateCombine(this.i.resolvingAxisValue, function (o, e) {
                    var outerArgs = new IgxZoomSliderResolvingAxisValueEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeResolvingAxisValue) {
                        _this.beforeResolvingAxisValue(_this, outerArgs);
                    }
                    _this._resolvingAxisValue.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._resolvingAxisValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxZoomSliderComponent.prototype, "windowRectChanged", {
        /**
         * Occurs just after the current ZoomSlider's window rectangle is changed.
        */
        get: function () {
            var _this = this;
            if (this._windowRectChanged == null) {
                this._windowRectChanged = new EventEmitter();
                this.i.windowRectChanged = delegateCombine(this.i.windowRectChanged, function (o, e) {
                    var outerArgs = new IgxRectChangedEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeWindowRectChanged) {
                        _this.beforeWindowRectChanged(_this, outerArgs);
                    }
                    _this._windowRectChanged.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._windowRectChanged;
        },
        enumerable: false,
        configurable: true
    });
    IgxZoomSliderComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    IgxZoomSliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxZoomSliderComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.Injector }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
    IgxZoomSliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxZoomSliderComponent, selector: "igx-zoom-slider", inputs: { height: "height", width: "width", panTransitionDuration: "panTransitionDuration", maxZoomWidth: "maxZoomWidth", pixelScalingRatio: "pixelScalingRatio", actualPixelScalingRatio: "actualPixelScalingRatio", windowRect: "windowRect", minZoomWidth: "minZoomWidth", startInset: "startInset", endInset: "endInset", trackStartInset: "trackStartInset", trackEndInset: "trackEndInset", barExtent: "barExtent", orientation: "orientation", lowerThumbBrush: "lowerThumbBrush", lowerThumbStrokeThickness: "lowerThumbStrokeThickness", higherThumbStrokeThickness: "higherThumbStrokeThickness", higherThumbBrush: "higherThumbBrush", lowerThumbOutline: "lowerThumbOutline", higherThumbOutline: "higherThumbOutline", lowerThumbRidgesBrush: "lowerThumbRidgesBrush", higherThumbRidgesBrush: "higherThumbRidgesBrush", lowerThumbWidth: "lowerThumbWidth", higherThumbWidth: "higherThumbWidth", lowerThumbHeight: "lowerThumbHeight", higherThumbHeight: "higherThumbHeight", lowerShadeBrush: "lowerShadeBrush", lowerShadeOutline: "lowerShadeOutline", lowerShadeStrokeThickness: "lowerShadeStrokeThickness", higherShadeBrush: "higherShadeBrush", higherShadeOutline: "higherShadeOutline", higherShadeStrokeThickness: "higherShadeStrokeThickness", barBrush: "barBrush", barOutline: "barOutline", barStrokeThickness: "barStrokeThickness", rangeThumbBrush: "rangeThumbBrush", rangeThumbOutline: "rangeThumbOutline", rangeThumbStrokeThickness: "rangeThumbStrokeThickness", rangeThumbRidgesBrush: "rangeThumbRidgesBrush", lowerCalloutBrush: "lowerCalloutBrush", lowerCalloutTextColor: "lowerCalloutTextColor", lowerCalloutOutline: "lowerCalloutOutline", lowerCalloutStrokeThickness: "lowerCalloutStrokeThickness", higherCalloutBrush: "higherCalloutBrush", higherCalloutTextColor: "higherCalloutTextColor", higherCalloutOutline: "higherCalloutOutline", higherCalloutStrokeThickness: "higherCalloutStrokeThickness", areThumbCalloutsEnabled: "areThumbCalloutsEnabled", thumbCalloutTextStyle: "thumbCalloutTextStyle" }, outputs: { resolvingAxisValue: "resolvingAxisValue", windowRectChanged: "windowRectChanged" }, host: { classAttribute: "ig-zoom-slider igx-zoom-slider" }, providers: [], viewQueries: [{ propertyName: "_dynamicContent", first: true, predicate: ["dynamicContent"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: "", isInline: true, styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxZoomSliderComponent;
}());
export { IgxZoomSliderComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxZoomSliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-zoom-slider',
                    template: "",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                    host: { 'class': 'ig-zoom-slider igx-zoom-slider' },
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.Injector }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { height: [{
                type: Input
            }], width: [{
                type: Input
            }], _dynamicContent: [{
                type: ViewChild,
                args: ["dynamicContent", { read: ViewContainerRef, static: true }]
            }], panTransitionDuration: [{
                type: Input
            }], maxZoomWidth: [{
                type: Input
            }], pixelScalingRatio: [{
                type: Input
            }], actualPixelScalingRatio: [{
                type: Input
            }], windowRect: [{
                type: Input
            }], minZoomWidth: [{
                type: Input
            }], startInset: [{
                type: Input
            }], endInset: [{
                type: Input
            }], trackStartInset: [{
                type: Input
            }], trackEndInset: [{
                type: Input
            }], barExtent: [{
                type: Input
            }], orientation: [{
                type: Input
            }], lowerThumbBrush: [{
                type: Input
            }], lowerThumbStrokeThickness: [{
                type: Input
            }], higherThumbStrokeThickness: [{
                type: Input
            }], higherThumbBrush: [{
                type: Input
            }], lowerThumbOutline: [{
                type: Input
            }], higherThumbOutline: [{
                type: Input
            }], lowerThumbRidgesBrush: [{
                type: Input
            }], higherThumbRidgesBrush: [{
                type: Input
            }], lowerThumbWidth: [{
                type: Input
            }], higherThumbWidth: [{
                type: Input
            }], lowerThumbHeight: [{
                type: Input
            }], higherThumbHeight: [{
                type: Input
            }], lowerShadeBrush: [{
                type: Input
            }], lowerShadeOutline: [{
                type: Input
            }], lowerShadeStrokeThickness: [{
                type: Input
            }], higherShadeBrush: [{
                type: Input
            }], higherShadeOutline: [{
                type: Input
            }], higherShadeStrokeThickness: [{
                type: Input
            }], barBrush: [{
                type: Input
            }], barOutline: [{
                type: Input
            }], barStrokeThickness: [{
                type: Input
            }], rangeThumbBrush: [{
                type: Input
            }], rangeThumbOutline: [{
                type: Input
            }], rangeThumbStrokeThickness: [{
                type: Input
            }], rangeThumbRidgesBrush: [{
                type: Input
            }], lowerCalloutBrush: [{
                type: Input
            }], lowerCalloutTextColor: [{
                type: Input
            }], lowerCalloutOutline: [{
                type: Input
            }], lowerCalloutStrokeThickness: [{
                type: Input
            }], higherCalloutBrush: [{
                type: Input
            }], higherCalloutTextColor: [{
                type: Input
            }], higherCalloutOutline: [{
                type: Input
            }], higherCalloutStrokeThickness: [{
                type: Input
            }], areThumbCalloutsEnabled: [{
                type: Input
            }], thumbCalloutTextStyle: [{
                type: Input
            }], resolvingAxisValue: [{
                type: Output
            }], windowRectChanged: [{
                type: Output
            }] } });
