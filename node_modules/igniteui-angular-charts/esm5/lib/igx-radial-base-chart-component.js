import { __extends } from "tslib";
import { Component, Input } from '@angular/core';
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { VerticalAlignment_$type } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { ValueAxisLabelLocation_$type } from "./ValueAxisLabelLocation";
import { AngleAxisLabelLocation_$type } from "./AngleAxisLabelLocation";
import { IgxDomainChartComponent } from "./igx-domain-chart-component";
import { brushToString, stringToBrush, ensureBool, ensureEnum, arrayFindByName } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a base class for domain charts with X/Y axes
*/
var IgxRadialBaseChartComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxRadialBaseChartComponent, _super);
    function IgxRadialBaseChartComponent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisFormatLabel", {
        /**
         * Gets or sets function which takes an context object and returns a formatted label for the X-axis.
        */
        get: function () {
            return this.i.zq;
        },
        set: function (v) {
            this.i.zq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisFormatLabel", {
        /**
         * Gets or sets function which takes a context object and returns a formatted label for the Y-axis.
        */
        get: function () {
            return this.i.zr;
        },
        set: function (v) {
            this.i.zr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelLeftMargin", {
        /**
         * Gets or sets the left margin of labels on the X-axis
        */
        get: function () {
            return this.i.aa1;
        },
        set: function (v) {
            this.i.aa1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelTopMargin", {
        /**
         * Gets or sets the top margin of labels on the X-axis
        */
        get: function () {
            return this.i.aa3;
        },
        set: function (v) {
            this.i.aa3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelRightMargin", {
        /**
         * Gets or sets the right margin of labels on the X-axis
        */
        get: function () {
            return this.i.aa2;
        },
        set: function (v) {
            this.i.aa2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelBottomMargin", {
        /**
         * Gets or sets the bottom margin of labels on the X-axis
        */
        get: function () {
            return this.i.aa0;
        },
        set: function (v) {
            this.i.aa0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelLeftMargin", {
        /**
         * Gets or sets the left margin of labels on the Y-axis
        */
        get: function () {
            return this.i.abm;
        },
        set: function (v) {
            this.i.abm = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelTopMargin", {
        /**
         * Gets or sets the top margin of labels on the Y-axis
        */
        get: function () {
            return this.i.abo;
        },
        set: function (v) {
            this.i.abo = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelRightMargin", {
        /**
         * Gets or sets the right margin of labels on the Y-axis
        */
        get: function () {
            return this.i.abn;
        },
        set: function (v) {
            this.i.abn = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelBottomMargin", {
        /**
         * Gets or sets the bottom margin of labels on the Y-axis
        */
        get: function () {
            return this.i.abl;
        },
        set: function (v) {
            this.i.abl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelTextColor", {
        /**
         * Gets or sets color of labels on the X-axis
        */
        get: function () {
            return brushToString(this.i.aft);
        },
        set: function (v) {
            this.i.aft = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelTextColor", {
        /**
         * Gets or sets color of labels on the Y-axis
        */
        get: function () {
            return brushToString(this.i.af0);
        },
        set: function (v) {
            this.i.af0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "actualAngleAxisLabelTextColor", {
        /**
         * Gets the actual color of labels on the X-axis
        */
        get: function () {
            return brushToString(this.i.afr);
        },
        set: function (v) {
            this.i.afr = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "actualValueAxisLabelTextColor", {
        /**
         * Gets the actual color of labels on the Y-axis
        */
        get: function () {
            return brushToString(this.i.afs);
        },
        set: function (v) {
            this.i.afs = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleMargin", {
        /**
         * Gets or sets the margin around a title on the X-axis
        */
        get: function () {
            return this.i.abc;
        },
        set: function (v) {
            this.i.abc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleMargin", {
        /**
         * Gets or sets the margin around a title on the Y-axis
        */
        get: function () {
            return this.i.abx;
        },
        set: function (v) {
            this.i.abx = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleLeftMargin", {
        /**
         * Gets or sets the left margin of a title on the X-axis
        */
        get: function () {
            return this.i.abb;
        },
        set: function (v) {
            this.i.abb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleLeftMargin", {
        /**
         * Gets or sets the left margin of a title on the Y-axis
        */
        get: function () {
            return this.i.abw;
        },
        set: function (v) {
            this.i.abw = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleTopMargin", {
        /**
         * Gets or sets the top margin of a title on the X-axis
        */
        get: function () {
            return this.i.abe;
        },
        set: function (v) {
            this.i.abe = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleTopMargin", {
        /**
         * Gets or sets the top margin of a title on the Y-axis
        */
        get: function () {
            return this.i.abz;
        },
        set: function (v) {
            this.i.abz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleRightMargin", {
        /**
         * Gets or sets the right margin of a title on the X-axis
        */
        get: function () {
            return this.i.abd;
        },
        set: function (v) {
            this.i.abd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleRightMargin", {
        /**
         * Gets or sets the right margin of a title on the Y-axis
        */
        get: function () {
            return this.i.aby;
        },
        set: function (v) {
            this.i.aby = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleBottomMargin", {
        /**
         * Gets or sets the bottom margin of a title on the X-axis
        */
        get: function () {
            return this.i.aba;
        },
        set: function (v) {
            this.i.aba = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleBottomMargin", {
        /**
         * Gets or sets the bottom margin of a title on the Y-axis
        */
        get: function () {
            return this.i.abv;
        },
        set: function (v) {
            this.i.abv = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleTextColor", {
        /**
         * Gets or sets color of title on the X-axis
        */
        get: function () {
            return brushToString(this.i.afz);
        },
        set: function (v) {
            this.i.afz = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleTextColor", {
        /**
         * Gets or sets color of title on the Y-axis
        */
        get: function () {
            return brushToString(this.i.af6);
        },
        set: function (v) {
            this.i.af6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelTextStyle", {
        /**
         * Gets or sets CSS font property for labels on X-axis
        */
        get: function () {
            return this.i.acs;
        },
        set: function (v) {
            this.i.acs = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelTextStyle", {
        /**
         * Gets or sets CSS font property for labels on Y-axis
        */
        get: function () {
            return this.i.ady;
        },
        set: function (v) {
            this.i.ady = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleTextStyle", {
        /**
         * Gets or sets CSS font property for title on X-axis
        */
        get: function () {
            return this.i.adg;
        },
        set: function (v) {
            this.i.adg = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleTextStyle", {
        /**
         * Gets or sets CSS font property for title on Y-axis
        */
        get: function () {
            return this.i.aem;
        },
        set: function (v) {
            this.i.aem = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabel", {
        /**
         * Gets or sets the format for labels along the X-axis.
        */
        get: function () {
            return this.i.ab2;
        },
        set: function (v) {
            this.i.ab2 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabel", {
        /**
         * Gets or sets the property or string from which the labels are derived.
        */
        get: function () {
            return this.i.ab3;
        },
        set: function (v) {
            this.i.ab3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisMajorStroke", {
        /**
         * Gets or sets the color to apply to major gridlines along the X-axis.
        */
        get: function () {
            return brushToString(this.i.afu);
        },
        set: function (v) {
            this.i.afu = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisMajorStroke", {
        /**
         * Gets or sets the color to apply to major gridlines along the Y-axis.
        */
        get: function () {
            return brushToString(this.i.af1);
        },
        set: function (v) {
            this.i.af1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisMajorStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to major gridlines along the X-axis.
        */
        get: function () {
            return this.i.aa4;
        },
        set: function (v) {
            this.i.aa4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisMajorStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to major gridlines along the Y-axis.
        */
        get: function () {
            return this.i.abp;
        },
        set: function (v) {
            this.i.abp = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisMinorStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to minor gridlines along the X-axis.
        */
        get: function () {
            return this.i.aa5;
        },
        set: function (v) {
            this.i.aa5 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisMinorStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to minor gridlines along the Y-axis.
        */
        get: function () {
            return this.i.abq;
        },
        set: function (v) {
            this.i.abq = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisStrip", {
        /**
         * Gets or sets the color to apply to stripes along the X-axis.
        */
        get: function () {
            return brushToString(this.i.afw);
        },
        set: function (v) {
            this.i.afw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisStrip", {
        /**
         * Gets or sets the color to apply to stripes along the Y-axis.
        */
        get: function () {
            return brushToString(this.i.af3);
        },
        set: function (v) {
            this.i.af3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisStroke", {
        /**
         * Gets or sets the color to apply to the X-axis line.
        */
        get: function () {
            return brushToString(this.i.afx);
        },
        set: function (v) {
            this.i.afx = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisStroke", {
        /**
         * Gets or sets the color to apply to the Y-axis line.
        */
        get: function () {
            return brushToString(this.i.af4);
        },
        set: function (v) {
            this.i.af4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to the X-axis line.
        */
        get: function () {
            return this.i.aa6;
        },
        set: function (v) {
            this.i.aa6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to the Y-axis line.
        */
        get: function () {
            return this.i.abr;
        },
        set: function (v) {
            this.i.abr = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTickLength", {
        /**
         * Gets or sets the length of tickmarks along the X-axis.
        */
        get: function () {
            return this.i.aa7;
        },
        set: function (v) {
            this.i.aa7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTickLength", {
        /**
         * Gets or sets the length of tickmarks along the Y-axis.
        */
        get: function () {
            return this.i.abs;
        },
        set: function (v) {
            this.i.abs = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTickStroke", {
        /**
         * Gets or sets the color to apply to tickmarks along the X-axis.
        */
        get: function () {
            return brushToString(this.i.afy);
        },
        set: function (v) {
            this.i.afy = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTickStroke", {
        /**
         * Gets or sets the color to apply to tickmarks along the Y-axis.
        */
        get: function () {
            return brushToString(this.i.af5);
        },
        set: function (v) {
            this.i.af5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTickStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to tickmarks along the X-axis.
        */
        get: function () {
            return this.i.aa8;
        },
        set: function (v) {
            this.i.aa8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTickStrokeThickness", {
        /**
         * Gets or sets the thickness to apply to tickmarks along the Y-axis.
        */
        get: function () {
            return this.i.abt;
        },
        set: function (v) {
            this.i.abt = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitle", {
        /**
         * Gets or sets the Text to display below the X-axis.
        */
        get: function () {
            return this.i.ac7;
        },
        set: function (v) {
            this.i.ac7 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitle", {
        /**
         * Gets or sets the Text to display to the left of the Y-axis.
        */
        get: function () {
            return this.i.aed;
        },
        set: function (v) {
            this.i.aed = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisMinorStroke", {
        /**
         * Gets or sets the color to apply to minor gridlines along the X-axis.
        */
        get: function () {
            return brushToString(this.i.afv);
        },
        set: function (v) {
            this.i.afv = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisMinorStroke", {
        /**
         * Gets or sets the color to apply to minor gridlines along the Y-axis.
        */
        get: function () {
            return brushToString(this.i.af2);
        },
        set: function (v) {
            this.i.af2 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelAngle", {
        /**
         * Gets or sets the angle of rotation for labels along the X-axis.
        */
        get: function () {
            return this.i.aaz;
        },
        set: function (v) {
            this.i.aaz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelAngle", {
        /**
         * Gets or sets the angle of rotation for labels along the Y-axis.
        */
        get: function () {
            return this.i.abk;
        },
        set: function (v) {
            this.i.abk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisExtent", {
        /**
         * Gets or sets the distance between the X-axis and the bottom of the chart.
        */
        get: function () {
            return this.i.aay;
        },
        set: function (v) {
            this.i.aay = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisExtent", {
        /**
         * Gets or sets the distance between the Y-axis and the left edge of the chart.
        */
        get: function () {
            return this.i.abj;
        },
        set: function (v) {
            this.i.abj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleAngle", {
        /**
         * Gets or sets the angle of rotation for the X-axis title.
        */
        get: function () {
            return this.i.aa9;
        },
        set: function (v) {
            this.i.aa9 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleAngle", {
        /**
         * Gets or sets the angle of rotation for the Y-axis title.
        */
        get: function () {
            return this.i.abu;
        },
        set: function (v) {
            this.i.abu = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisInverted", {
        /**
         * Gets or sets whether to invert the direction of the X-axis by placing the first data items on the right side of the chart.
        */
        get: function () {
            return this.i.zy;
        },
        set: function (v) {
            this.i.zy = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisInverted", {
        /**
         * Gets or sets whether to invert the direction of the Y-axis by placing the minimum numeric value at the top of the chart.
        */
        get: function () {
            return this.i.zz;
        },
        set: function (v) {
            this.i.zz = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisTitleAlignment", {
        /**
         * Gets or sets Horizontal alignment of the X-axis title.
        */
        get: function () {
            return this.i.ae9;
        },
        set: function (v) {
            this.i.ae9 = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisTitleAlignment", {
        /**
         * Gets or sets Vertical alignment of the Y-axis title.
        */
        get: function () {
            return this.i.agc;
        },
        set: function (v) {
            this.i.agc = ensureEnum(VerticalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelHorizontalAlignment", {
        /**
         * Gets or sets Horizontal alignment of X-axis labels.
        */
        get: function () {
            return this.i.ae8;
        },
        set: function (v) {
            this.i.ae8 = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelHorizontalAlignment", {
        /**
         * Gets or sets Horizontal alignment of Y-axis labels.
        */
        get: function () {
            return this.i.afa;
        },
        set: function (v) {
            this.i.afa = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelVerticalAlignment", {
        /**
         * Gets or sets Vertical alignment of X-axis labels.
        */
        get: function () {
            return this.i.aga;
        },
        set: function (v) {
            this.i.aga = ensureEnum(VerticalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelVerticalAlignment", {
        /**
         * Gets or sets Vertical alignment of Y-axis labels.
        */
        get: function () {
            return this.i.agb;
        },
        set: function (v) {
            this.i.agb = ensureEnum(VerticalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelVisibility", {
        /**
         * Gets or sets Visibility of X-axis labels.
        */
        get: function () {
            return this.i.agf;
        },
        set: function (v) {
            this.i.agf = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelVisibility", {
        /**
         * Gets or sets Visibility of Y-axis labels.
        */
        get: function () {
            return this.i.agg;
        },
        set: function (v) {
            this.i.agg = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelLocation", {
        /**
         * Gets or sets location of Y-axis labels, relative to the plot area.
        */
        get: function () {
            return this.i.zv;
        },
        set: function (v) {
            this.i.zv = ensureEnum(ValueAxisLabelLocation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelLocation", {
        /**
         * Gets or sets location of X-axis labels, relative to the plot area.
        */
        get: function () {
            return this.i.zl;
        },
        set: function (v) {
            this.i.zl = ensureEnum(AngleAxisLabelLocation_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelFormat", {
        /**
         * Gets or sets the format string for the X axis label.
        */
        get: function () {
            return this.i.acj;
        },
        set: function (v) {
            this.i.acj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "angleAxisLabelFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the AngleAxisLabelFormat string.
        */
        get: function () {
            return this.i.zi;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.zi = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelFormat", {
        /**
         * Gets or sets the format string for the Y axis label.
        */
        get: function () {
            return this.i.adp;
        },
        set: function (v) {
            this.i.adp = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialBaseChartComponent.prototype, "valueAxisLabelFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueAxisLabelFormat string.
        */
        get: function () {
            return this.i.zj;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.zj = v;
        },
        enumerable: false,
        configurable: true
    });
    IgxRadialBaseChartComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.angleAxisLabelFormatSpecifiers != null && arrayFindByName(this.angleAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.angleAxisLabelFormatSpecifiers, name);
        }
        if (this.valueAxisLabelFormatSpecifiers != null && arrayFindByName(this.valueAxisLabelFormatSpecifiers, name)) {
            return arrayFindByName(this.valueAxisLabelFormatSpecifiers, name);
        }
        return null;
    };
    /**
     * Called by the UI framework to provide a UI container for rendering this control.
    
    * @param container  * The UI container element.
    */
    IgxRadialBaseChartComponent.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The x-coordinate of the location to scale.
    */
    IgxRadialBaseChartComponent.prototype.getScaledAngle = function (unscaledValue) {
        var iv = this.i.abf(unscaledValue);
        return (iv);
    };
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    IgxRadialBaseChartComponent.prototype.getUnscaledAngle = function (scaledValue) {
        var iv = this.i.abh(scaledValue);
        return (iv);
    };
    /**
     * Converts the given visual location to a data value.
    
    * @param unscaledValue  * The y-coordinate of the location to scale.
    */
    IgxRadialBaseChartComponent.prototype.getScaledValue = function (unscaledValue) {
        var iv = this.i.abg(unscaledValue);
        return (iv);
    };
    /**
     * Converts the given data value to a visual location.
    
    * @param scaledValue  * The data value to un-scale.
    */
    IgxRadialBaseChartComponent.prototype.getUnscaledValue = function (scaledValue) {
        var iv = this.i.abi(scaledValue);
        return (iv);
    };
    IgxRadialBaseChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialBaseChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxRadialBaseChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxRadialBaseChartComponent, selector: "ng-component", inputs: { angleAxisFormatLabel: "angleAxisFormatLabel", valueAxisFormatLabel: "valueAxisFormatLabel", angleAxisLabelLeftMargin: "angleAxisLabelLeftMargin", angleAxisLabelTopMargin: "angleAxisLabelTopMargin", angleAxisLabelRightMargin: "angleAxisLabelRightMargin", angleAxisLabelBottomMargin: "angleAxisLabelBottomMargin", valueAxisLabelLeftMargin: "valueAxisLabelLeftMargin", valueAxisLabelTopMargin: "valueAxisLabelTopMargin", valueAxisLabelRightMargin: "valueAxisLabelRightMargin", valueAxisLabelBottomMargin: "valueAxisLabelBottomMargin", angleAxisLabelTextColor: "angleAxisLabelTextColor", valueAxisLabelTextColor: "valueAxisLabelTextColor", actualAngleAxisLabelTextColor: "actualAngleAxisLabelTextColor", actualValueAxisLabelTextColor: "actualValueAxisLabelTextColor", angleAxisTitleMargin: "angleAxisTitleMargin", valueAxisTitleMargin: "valueAxisTitleMargin", angleAxisTitleLeftMargin: "angleAxisTitleLeftMargin", valueAxisTitleLeftMargin: "valueAxisTitleLeftMargin", angleAxisTitleTopMargin: "angleAxisTitleTopMargin", valueAxisTitleTopMargin: "valueAxisTitleTopMargin", angleAxisTitleRightMargin: "angleAxisTitleRightMargin", valueAxisTitleRightMargin: "valueAxisTitleRightMargin", angleAxisTitleBottomMargin: "angleAxisTitleBottomMargin", valueAxisTitleBottomMargin: "valueAxisTitleBottomMargin", angleAxisTitleTextColor: "angleAxisTitleTextColor", valueAxisTitleTextColor: "valueAxisTitleTextColor", angleAxisLabelTextStyle: "angleAxisLabelTextStyle", valueAxisLabelTextStyle: "valueAxisLabelTextStyle", angleAxisTitleTextStyle: "angleAxisTitleTextStyle", valueAxisTitleTextStyle: "valueAxisTitleTextStyle", angleAxisLabel: "angleAxisLabel", valueAxisLabel: "valueAxisLabel", angleAxisMajorStroke: "angleAxisMajorStroke", valueAxisMajorStroke: "valueAxisMajorStroke", angleAxisMajorStrokeThickness: "angleAxisMajorStrokeThickness", valueAxisMajorStrokeThickness: "valueAxisMajorStrokeThickness", angleAxisMinorStrokeThickness: "angleAxisMinorStrokeThickness", valueAxisMinorStrokeThickness: "valueAxisMinorStrokeThickness", angleAxisStrip: "angleAxisStrip", valueAxisStrip: "valueAxisStrip", angleAxisStroke: "angleAxisStroke", valueAxisStroke: "valueAxisStroke", angleAxisStrokeThickness: "angleAxisStrokeThickness", valueAxisStrokeThickness: "valueAxisStrokeThickness", angleAxisTickLength: "angleAxisTickLength", valueAxisTickLength: "valueAxisTickLength", angleAxisTickStroke: "angleAxisTickStroke", valueAxisTickStroke: "valueAxisTickStroke", angleAxisTickStrokeThickness: "angleAxisTickStrokeThickness", valueAxisTickStrokeThickness: "valueAxisTickStrokeThickness", angleAxisTitle: "angleAxisTitle", valueAxisTitle: "valueAxisTitle", angleAxisMinorStroke: "angleAxisMinorStroke", valueAxisMinorStroke: "valueAxisMinorStroke", angleAxisLabelAngle: "angleAxisLabelAngle", valueAxisLabelAngle: "valueAxisLabelAngle", angleAxisExtent: "angleAxisExtent", valueAxisExtent: "valueAxisExtent", angleAxisTitleAngle: "angleAxisTitleAngle", valueAxisTitleAngle: "valueAxisTitleAngle", angleAxisInverted: "angleAxisInverted", valueAxisInverted: "valueAxisInverted", angleAxisTitleAlignment: "angleAxisTitleAlignment", valueAxisTitleAlignment: "valueAxisTitleAlignment", angleAxisLabelHorizontalAlignment: "angleAxisLabelHorizontalAlignment", valueAxisLabelHorizontalAlignment: "valueAxisLabelHorizontalAlignment", angleAxisLabelVerticalAlignment: "angleAxisLabelVerticalAlignment", valueAxisLabelVerticalAlignment: "valueAxisLabelVerticalAlignment", angleAxisLabelVisibility: "angleAxisLabelVisibility", valueAxisLabelVisibility: "valueAxisLabelVisibility", valueAxisLabelLocation: "valueAxisLabelLocation", angleAxisLabelLocation: "angleAxisLabelLocation", angleAxisLabelFormat: "angleAxisLabelFormat", angleAxisLabelFormatSpecifiers: "angleAxisLabelFormatSpecifiers", valueAxisLabelFormat: "valueAxisLabelFormat", valueAxisLabelFormatSpecifiers: "valueAxisLabelFormatSpecifiers" }, usesInheritance: true, ngImport: i0, template: "", isInline: true });
    return IgxRadialBaseChartComponent;
}(IgxDomainChartComponent));
export { IgxRadialBaseChartComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialBaseChartComponent, decorators: [{
            type: Component,
            args: [{
                    template: "",
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { angleAxisFormatLabel: [{
                type: Input
            }], valueAxisFormatLabel: [{
                type: Input
            }], angleAxisLabelLeftMargin: [{
                type: Input
            }], angleAxisLabelTopMargin: [{
                type: Input
            }], angleAxisLabelRightMargin: [{
                type: Input
            }], angleAxisLabelBottomMargin: [{
                type: Input
            }], valueAxisLabelLeftMargin: [{
                type: Input
            }], valueAxisLabelTopMargin: [{
                type: Input
            }], valueAxisLabelRightMargin: [{
                type: Input
            }], valueAxisLabelBottomMargin: [{
                type: Input
            }], angleAxisLabelTextColor: [{
                type: Input
            }], valueAxisLabelTextColor: [{
                type: Input
            }], actualAngleAxisLabelTextColor: [{
                type: Input
            }], actualValueAxisLabelTextColor: [{
                type: Input
            }], angleAxisTitleMargin: [{
                type: Input
            }], valueAxisTitleMargin: [{
                type: Input
            }], angleAxisTitleLeftMargin: [{
                type: Input
            }], valueAxisTitleLeftMargin: [{
                type: Input
            }], angleAxisTitleTopMargin: [{
                type: Input
            }], valueAxisTitleTopMargin: [{
                type: Input
            }], angleAxisTitleRightMargin: [{
                type: Input
            }], valueAxisTitleRightMargin: [{
                type: Input
            }], angleAxisTitleBottomMargin: [{
                type: Input
            }], valueAxisTitleBottomMargin: [{
                type: Input
            }], angleAxisTitleTextColor: [{
                type: Input
            }], valueAxisTitleTextColor: [{
                type: Input
            }], angleAxisLabelTextStyle: [{
                type: Input
            }], valueAxisLabelTextStyle: [{
                type: Input
            }], angleAxisTitleTextStyle: [{
                type: Input
            }], valueAxisTitleTextStyle: [{
                type: Input
            }], angleAxisLabel: [{
                type: Input
            }], valueAxisLabel: [{
                type: Input
            }], angleAxisMajorStroke: [{
                type: Input
            }], valueAxisMajorStroke: [{
                type: Input
            }], angleAxisMajorStrokeThickness: [{
                type: Input
            }], valueAxisMajorStrokeThickness: [{
                type: Input
            }], angleAxisMinorStrokeThickness: [{
                type: Input
            }], valueAxisMinorStrokeThickness: [{
                type: Input
            }], angleAxisStrip: [{
                type: Input
            }], valueAxisStrip: [{
                type: Input
            }], angleAxisStroke: [{
                type: Input
            }], valueAxisStroke: [{
                type: Input
            }], angleAxisStrokeThickness: [{
                type: Input
            }], valueAxisStrokeThickness: [{
                type: Input
            }], angleAxisTickLength: [{
                type: Input
            }], valueAxisTickLength: [{
                type: Input
            }], angleAxisTickStroke: [{
                type: Input
            }], valueAxisTickStroke: [{
                type: Input
            }], angleAxisTickStrokeThickness: [{
                type: Input
            }], valueAxisTickStrokeThickness: [{
                type: Input
            }], angleAxisTitle: [{
                type: Input
            }], valueAxisTitle: [{
                type: Input
            }], angleAxisMinorStroke: [{
                type: Input
            }], valueAxisMinorStroke: [{
                type: Input
            }], angleAxisLabelAngle: [{
                type: Input
            }], valueAxisLabelAngle: [{
                type: Input
            }], angleAxisExtent: [{
                type: Input
            }], valueAxisExtent: [{
                type: Input
            }], angleAxisTitleAngle: [{
                type: Input
            }], valueAxisTitleAngle: [{
                type: Input
            }], angleAxisInverted: [{
                type: Input
            }], valueAxisInverted: [{
                type: Input
            }], angleAxisTitleAlignment: [{
                type: Input
            }], valueAxisTitleAlignment: [{
                type: Input
            }], angleAxisLabelHorizontalAlignment: [{
                type: Input
            }], valueAxisLabelHorizontalAlignment: [{
                type: Input
            }], angleAxisLabelVerticalAlignment: [{
                type: Input
            }], valueAxisLabelVerticalAlignment: [{
                type: Input
            }], angleAxisLabelVisibility: [{
                type: Input
            }], valueAxisLabelVisibility: [{
                type: Input
            }], valueAxisLabelLocation: [{
                type: Input
            }], angleAxisLabelLocation: [{
                type: Input
            }], angleAxisLabelFormat: [{
                type: Input
            }], angleAxisLabelFormatSpecifiers: [{
                type: Input
            }], valueAxisLabelFormat: [{
                type: Input
            }], valueAxisLabelFormatSpecifiers: [{
                type: Input
            }] } });
