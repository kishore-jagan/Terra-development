import { IgxTreemapNodeStyleComponent } from "./igx-treemap-node-style-component";
import { IgxHighlightingInfo } from "igniteui-angular-core";
import { TreemapNodeStylingEventArgs as TreemapNodeStylingEventArgs_internal } from "./TreemapNodeStylingEventArgs";
import { ensureBool } from "igniteui-angular-core";
var IgxTreemapNodeStylingEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgxTreemapNodeStylingEventArgs() {
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
        if (this._initializeAdapters) {
            this._initializeAdapters();
        }
    }
    IgxTreemapNodeStylingEventArgs.prototype.createImplementation = function () {
        return new TreemapNodeStylingEventArgs_internal();
    };
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgxTreemapNodeStylingEventArgs.prototype.onImplementationCreated = function () {
    };
    IgxTreemapNodeStylingEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "value", {
        get: function () {
            return this.i.value;
        },
        set: function (v) {
            this.i.value = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "sum", {
        get: function () {
            return this.i.sum;
        },
        set: function (v) {
            this.i.sum = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "customValue", {
        get: function () {
            return this.i.customValue;
        },
        set: function (v) {
            this.i.customValue = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "item", {
        get: function () {
            return this.i.item;
        },
        set: function (v) {
            this.i.item = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "parentItem", {
        get: function () {
            return this.i.parentItem;
        },
        set: function (v) {
            this.i.parentItem = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "label", {
        get: function () {
            return this.i.label;
        },
        set: function (v) {
            this.i.label = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "parentValue", {
        get: function () {
            return this.i.parentValue;
        },
        set: function (v) {
            this.i.parentValue = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "parentLabel", {
        get: function () {
            return this.i.parentLabel;
        },
        set: function (v) {
            this.i.parentLabel = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "parentSum", {
        get: function () {
            return this.i.parentSum;
        },
        set: function (v) {
            this.i.parentSum = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "isParent", {
        get: function () {
            return this.i.isParent;
        },
        set: function (v) {
            this.i.isParent = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "style", {
        get: function () {
            var r = this.i.style;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxTreemapNodeStyleComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.style = null : this.i.style = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "highlightingInfo", {
        /**
         * Gets highlighting information for the current node. Null if no highlight is in progress.
        */
        get: function () {
            var r = this.i.highlightingInfo;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxHighlightingInfo();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.highlightingInfo = null : this.i.highlightingInfo = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "highlightingHandled", {
        /**
         * Sets whether the user handled the highlighting themselves. If so we won't run any of our
         * default highlight styling.
        */
        get: function () {
            return this.i.highlightingHandled;
        },
        set: function (v) {
            this.i.highlightingHandled = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "isHighlightInProgress", {
        /**
         * Gets whether a highlight is currently in progress.
        */
        get: function () {
            return this.i.isHighlightInProgress;
        },
        set: function (v) {
            this.i.isHighlightInProgress = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTreemapNodeStylingEventArgs.prototype, "totalHighlightProgress", {
        /**
         * Gets the overall highlight progress.
        */
        get: function () {
            return this.i.totalHighlightProgress;
        },
        set: function (v) {
            this.i.totalHighlightProgress = +v;
        },
        enumerable: false,
        configurable: true
    });
    return IgxTreemapNodeStylingEventArgs;
}());
export { IgxTreemapNodeStylingEventArgs };
