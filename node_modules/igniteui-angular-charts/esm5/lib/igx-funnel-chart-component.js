import { Component, ChangeDetectionStrategy, EventEmitter, Output, ViewChild, ViewContainerRef, Input } from '@angular/core';
import { AngularRenderer } from "igniteui-angular-core";
import { TypeRegistrar, delegateCombine } from "igniteui-angular-core";
import { DataChartStylingDefaults } from './DataChartStylingDefaults';
import { XamFunnelChart } from './XamFunnelChart';
import { toSpinal, initializePropertiesFromCss, NamePatcher, fromBrushCollection, toBrushCollection, ensureBool, stringToBrush, brushToString, ensureEnum } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { OuterLabelAlignment_$type } from './OuterLabelAlignment';
import { FunnelSliceDisplay_$type } from './FunnelSliceDisplay';
import { IgxFunnelSliceClickedEventArgs } from './igx-funnel-slice-clicked-event-args';
import { IgxFunnelSliceEventArgs } from './igx-funnel-slice-event-args';
import { Style } from "igniteui-angular-core";
import { HighlightedValueDisplayMode_$type } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a funnel chart.
*/
var IgxFunnelChartComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgxFunnelChartComponent(renderer, _elRef, ngZone, injector, componentFactoryResolver) {
        var _this = this;
        this.renderer = renderer;
        this._elRef = _elRef;
        this.ngZone = ngZone;
        this.injector = injector;
        this.componentFactoryResolver = componentFactoryResolver;
        this._root = null;
        this._dataSource = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._sliceClicked = null;
        this._sliceEnter = null;
        this._sliceLeave = null;
        this._sliceHover = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._zoneRunner = function (act) { return ngZone.run(act); };
        this.container = renderer.createElement("div");
        this._implementation = this.createImplementation();
        renderer.appendChild(_elRef.element.nativeElement, this.container);
        renderer.setStyle(this.container, "display", "block");
        renderer.setStyle(this.container, "width", "100%");
        renderer.setStyle(this.container, "height", "100%");
        var root;
        root = this.container;
        if (this.container != null) {
            root = this.container;
        }
        this._root = root;
        var ren = new AngularRenderer(root, this.renderer, window.document, this.ngZone, true, DataChartStylingDefaults);
        this._wrapper = ren;
        var chart = this.i;
        this._chart = chart;
        chart.provideContainer(ren);
        this.bindData();
        chart.notifyResized();
        ren.addSizeWatcher(function () {
            _this._chart.notifyResized();
        });
    }
    Object.defineProperty(IgxFunnelChartComponent.prototype, "height", {
        get: function () {
            return this._height;
        },
        set: function (value) {
            this._height = value;
            this.renderer.setStyle(this._elRef.element.nativeElement, "height", value);
            this._chart.notifyResized();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "width", {
        get: function () {
            return this._width;
        },
        set: function (value) {
            this._width = value;
            this.renderer.setStyle(this._elRef.element.nativeElement, "width", value);
            this._chart.notifyResized();
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.ngAfterContentInit = function () {
        this._styling(this._root, this);
        this.i.notifyResized();
    };
    IgxFunnelChartComponent.prototype.ngOnDestroy = function () {
        this._chart.destroy();
        this._wrapper.destroy();
    };
    IgxFunnelChartComponent.prototype.createImplementation = function () {
        return new XamFunnelChart();
    };
    IgxFunnelChartComponent.prototype.createSeriesComponent = function (type) {
        if (TypeRegistrar.isRegistered(type)) {
            var s = TypeRegistrar.create(type);
            s.owner = this;
            s._provideRenderer(this.renderer);
            return s;
        }
        else {
            //we shouldn't get here, hopefully.
            throw Error("series type not loaded: " + type);
        }
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "dataSource", {
        get: function () {
            return this._dataSource;
        },
        set: function (value) {
            this._dataSource = value;
            this.bindData();
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.bindData = function () {
        if (this._chart != null && this._chart !== undefined) {
            this._chart.itemsSource = this._dataSource;
        }
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "legend", {
        /**
         * Gets or sets the legend used for the current chart.
        */
        get: function () {
            if (this.i.legend != null)
                return this.i.legend.externalObject;
        },
        set: function (v) {
            if (v != undefined && v != null)
                this.i.legend = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        } /**
                                     * @hidden
                                     */,
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "valueMemberPath", {
        /**
     * Gets or sets the value member path for the funnel chart.
    */
        get: function () {
            return this.i.dv;
        },
        set: function (v) {
            this.i.dv = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "highlightedValueMemberPath", {
        /**
         * Gets or sets the highlighted value member path for the funnel chart.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "actualHighlightValueOpacity", {
        /**
         * Gets the actual opacity of the primary needle while highlighting
        */
        get: function () {
            return this.i.bw;
        },
        set: function (v) {
            this.i.bw = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "highlightValueOpacity", {
        /**
         * Gets or sets the opacity while highlighting
        */
        get: function () {
            return this.i.b0;
        },
        set: function (v) {
            this.i.b0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "actualHighlightValueDisplayMode", {
        /**
         * Gets whether and how to display the highlighted value.
        */
        get: function () {
            return this.i.a2;
        },
        set: function (v) {
            this.i.a2 = ensureEnum(HighlightedValueDisplayMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "highlightValueDisplayMode", {
        /**
         * Gets or sets whether and how to display the highlighted value.
        */
        get: function () {
            return this.i.a3;
        },
        set: function (v) {
            this.i.a3 = ensureEnum(HighlightedValueDisplayMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "brushes", {
        /**
         * Gets or sets the palette of brushes to use for coloring the slices.
        */
        get: function () {
            return fromBrushCollection(this.i.ah);
        },
        set: function (v) {
            this.i.ah = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outlines", {
        /**
         * Gets or sets the palette of brushes to use for outlines on the slices.
        */
        get: function () {
            return fromBrushCollection(this.i.ai);
        },
        set: function (v) {
            this.i.ai = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "bottomEdgeWidth", {
        /**
         * Gets or sets the percentage (from near 0 to 1) of space the bottom edge of the funnel should take.
        */
        get: function () {
            return this.i.by;
        },
        set: function (v) {
            this.i.by = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "innerLabelMemberPath", {
        /**
         * Gets or sets the InnerLabel mapping property for the current series object.
        */
        get: function () {
            return this.i.cy;
        },
        set: function (v) {
            this.i.cy = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outerLabelMemberPath", {
        /**
         * Gets or sets the OuterLabel mapping property for the current series object.
        */
        get: function () {
            return this.i.c9;
        },
        set: function (v) {
            this.i.c9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "innerLabelVisibility", {
        /**
         * Gets or sets whether the inner labels are visible.
        */
        get: function () {
            return this.i.ft;
        },
        set: function (v) {
            this.i.ft = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outerLabelVisibility", {
        /**
         * Gets or sets whether the outer labels are visible.
        */
        get: function () {
            return this.i.fu;
        },
        set: function (v) {
            this.i.fu = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outerLabelAlignment", {
        /**
         * Gets or sets which side of the chart the outer labels should appear.
        */
        get: function () {
            return this.i.au;
        },
        set: function (v) {
            this.i.au = ensureEnum(OuterLabelAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "funnelSliceDisplay", {
        /**
         * Gets or sets how the heights of the funnel slices should be configured.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = ensureEnum(FunnelSliceDisplay_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "formatInnerLabel", {
        /**
         * Gets or sets the formatter function for inner labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
        */
        get: function () {
            return this.i.b8;
        },
        set: function (v) {
            this.i.b8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "formatOuterLabel", {
        /**
         * Gets or sets the formatter function for outer labels. Function should return string and it takes 3 parameters: 1st-value of item to format, 2nd-index of item within data, 3rd-reference to the funnel chart.
        */
        get: function () {
            return this.i.b9;
        },
        set: function (v) {
            this.i.b9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "transitionDuration", {
        /**
         * Gets or sets how long the animations should take to run.
        */
        get: function () {
            return this.i.ca;
        },
        set: function (v) {
            this.i.ca = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "isInverted", {
        /**
         * Gets or sets if the funnel should be rendered inverted.
        */
        get: function () {
            return this.i.bk;
        },
        set: function (v) {
            this.i.bk = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "useBezierCurve", {
        /**
         * Gets or sets whether to use a Bezier curve to define the funnel.
        */
        get: function () {
            return this.i.bl;
        },
        set: function (v) {
            this.i.bl = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "allowSliceSelection", {
        /**
         * Gets or sets whether to allow slices to be selected.
        */
        get: function () {
            return this.i.be;
        },
        set: function (v) {
            this.i.be = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "useUnselectedStyle", {
        /**
         * Gets or sets whether to use the unselected style on unselected slices.
        */
        get: function () {
            return this.i.bn;
        },
        set: function (v) {
            this.i.bn = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "selectedSliceFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.fr ? this.i.fr.fill : null;
        },
        set: function (v) {
            this.ensureSelectedSliceStyle();
            this.i.fr.fill = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "selectedSliceStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.fr ? this.i.fr.stroke : null;
        },
        set: function (v) {
            this.ensureSelectedSliceStyle();
            this.i.fr.stroke = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "selectedSliceStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.fr ? this.i.fr.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureSelectedSliceStyle();
            this.i.fr.strokeThickness = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "selectedSliceOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.fr ? this.i.fr.opacity : NaN;
        },
        set: function (v) {
            this.ensureSelectedSliceStyle();
            this.i.fr.opacity = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.ensureSelectedSliceStyle = function () {
        if (this.i.fr) {
            return;
        }
        this.i.fr = new Style();
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "unselectedSliceFill", {
        /**
         * Gets or sets the fill brush.
        */
        get: function () {
            return this.i.fs ? this.i.fs.fill : null;
        },
        set: function (v) {
            this.ensureUnselectedSliceStyle();
            this.i.fs.fill = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "unselectedSliceStroke", {
        /**
         * Gets or sets the stroke brush.
        */
        get: function () {
            return this.i.fs ? this.i.fs.stroke : null;
        },
        set: function (v) {
            this.ensureUnselectedSliceStyle();
            this.i.fs.stroke = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "unselectedSliceStrokeThickness", {
        /**
         * Gets or sets the stroke thickness.
        */
        get: function () {
            return this.i.fs ? this.i.fs.strokeThickness : NaN;
        },
        set: function (v) {
            this.ensureUnselectedSliceStyle();
            this.i.fs.strokeThickness = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "unselectedSliceOpacity", {
        /**
         * Gets or sets the opacity.
        */
        get: function () {
            return this.i.fs ? this.i.fs.opacity : NaN;
        },
        set: function (v) {
            this.ensureUnselectedSliceStyle();
            this.i.fs.opacity = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.ensureUnselectedSliceStyle = function () {
        if (this.i.fs) {
            return;
        }
        this.i.fs = new Style();
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "legendItemBadgeTemplate", {
        /**
         * Gets or sets the LegendItemBadgeTemplate to use for the legend items.
        */
        get: function () {
            return this.i.legendItemBadgeTemplate;
        },
        set: function (v) {
            this.i.legendItemBadgeTemplate = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "useOuterLabelsForLegend", {
        /**
         * Gets or sets whether to use the outer labels to identify the legend items.
        */
        get: function () {
            return this.i.bm;
        },
        set: function (v) {
            this.i.bm = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "textStyle", {
        /**
         * Gets or sets the text style for inner labels
        */
        get: function () {
            return this.i.dk;
        },
        set: function (v) {
            this.i.dk = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outerLabelTextStyle", {
        /**
         * Gets or sets the text style for outer labels
        */
        get: function () {
            return this.i.dc;
        },
        set: function (v) {
            this.i.dc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outlineThickness", {
        /**
         * Gets or sets the thickness of outline around slices.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "pixelScalingRatio", {
        /**
         * Gets or sets the scaling value used to affect the pixel density of the control.
         * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
         * to appear blurry.
        */
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "outerLabelTextColor", {
        /**
         * Gets or sets the brush used for the outer labels.
        */
        get: function () {
            return brushToString(this.i.fn);
        },
        set: function (v) {
            this.i.fn = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "textColor", {
        /**
         * Gets or sets the brush used for the inner labels.
        */
        get: function () {
            return brushToString(this.i.fo);
        },
        set: function (v) {
            this.i.fo = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxFunnelChartComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("FunnelChartComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Use to force the funnel chart to finish any deferred work before printing or evaluating its visual.
 * This should only be called if the visual of the funnel chart needs to be synchronously saved or evaluated.
 * Calling this method too often will hinder the performance of the funnel chart.

*/
    IgxFunnelChartComponent.prototype.flush = function () {
        this.i.dz();
    };
    /**
     * Provides container for funnel chart
    
    */
    IgxFunnelChartComponent.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    /**
     * Notifies the controller and view about a size change.
    
    */
    IgxFunnelChartComponent.prototype.notifyResized = function () {
        this.i.notifyResized();
    };
    IgxFunnelChartComponent.prototype.notifySetItem = function (source_, index, oldItem, newItem) {
        this.i.ea(source_, index, oldItem, newItem);
    };
    /**
     * Manually notifies the chart's data source that the data it has bound to has been cleared and needs to be re-examined.
     * This should not be called if the data that the chart is bound to is already observable.
    
    */
    IgxFunnelChartComponent.prototype.notifyClearItems = function (source_) {
        this.i.d5(source_);
    };
    IgxFunnelChartComponent.prototype.notifyInsertItem = function (source_, index, newItem) {
        this.i.d7(source_, index, newItem);
    };
    IgxFunnelChartComponent.prototype.notifyRemoveItem = function (source_, index, oldItem) {
        this.i.d8(source_, index, oldItem);
    };
    /**
     * Toggle selection of item at index.
    
    */
    IgxFunnelChartComponent.prototype.toggleSelection = function (index) {
        this.i.em(index);
    };
    /**
     * Exports and serializes the chart visuals.
    
    */
    IgxFunnelChartComponent.prototype.exportSerializedVisualData = function () {
        var iv = this.i.cl();
        return (iv);
    };
    Object.defineProperty(IgxFunnelChartComponent.prototype, "sliceClicked", {
        /**
         * Event which is raised when a slice is clicked.
         * Function takes first argument null and second argument ui.
         * Use ui.owner to obtain reference to igFunnelChart.
         * Use ui.index to obtain index of clicked slice.
         * Use ui.item to obtain reference to clicked slice item.
         * Use ui.selected to check if slice became selected.
        */
        get: function () {
            var _this = this;
            if (this._sliceClicked == null) {
                this._sliceClicked = new EventEmitter();
                this.i.sliceClicked = delegateCombine(this.i.sliceClicked, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxFunnelSliceClickedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSliceClicked) {
                            _this.beforeSliceClicked(_this, outerArgs);
                        }
                        _this._sliceClicked.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._sliceClicked;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "sliceEnter", {
        /**
         * Raised when a funnel slice is entered.
        */
        get: function () {
            var _this = this;
            if (this._sliceEnter == null) {
                this._sliceEnter = new EventEmitter();
                this.i.sliceEnter = delegateCombine(this.i.sliceEnter, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxFunnelSliceEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSliceEnter) {
                            _this.beforeSliceEnter(_this, outerArgs);
                        }
                        _this._sliceEnter.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._sliceEnter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "sliceLeave", {
        /**
         * Raised when a funnel slice is left.
        */
        get: function () {
            var _this = this;
            if (this._sliceLeave == null) {
                this._sliceLeave = new EventEmitter();
                this.i.sliceLeave = delegateCombine(this.i.sliceLeave, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxFunnelSliceEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSliceLeave) {
                            _this.beforeSliceLeave(_this, outerArgs);
                        }
                        _this._sliceLeave.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._sliceLeave;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFunnelChartComponent.prototype, "sliceHover", {
        /**
         * Raised when a funnel slice is hovered.
        */
        get: function () {
            var _this = this;
            if (this._sliceHover == null) {
                this._sliceHover = new EventEmitter();
                this.i.sliceHover = delegateCombine(this.i.sliceHover, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxFunnelSliceEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSliceHover) {
                            _this.beforeSliceHover(_this, outerArgs);
                        }
                        _this._sliceHover.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._sliceHover;
        },
        enumerable: false,
        configurable: true
    });
    IgxFunnelChartComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    IgxFunnelChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxFunnelChartComponent, deps: [{ token: i0.Renderer2 }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.Injector }, { token: i0.ComponentFactoryResolver }], target: i0.ɵɵFactoryTarget.Component });
    IgxFunnelChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxFunnelChartComponent, selector: "igx-funnel-chart", inputs: { height: "height", width: "width", dataSource: "dataSource", legend: "legend", valueMemberPath: "valueMemberPath", highlightedValueMemberPath: "highlightedValueMemberPath", actualHighlightValueOpacity: "actualHighlightValueOpacity", highlightValueOpacity: "highlightValueOpacity", actualHighlightValueDisplayMode: "actualHighlightValueDisplayMode", highlightValueDisplayMode: "highlightValueDisplayMode", brushes: "brushes", outlines: "outlines", bottomEdgeWidth: "bottomEdgeWidth", innerLabelMemberPath: "innerLabelMemberPath", outerLabelMemberPath: "outerLabelMemberPath", innerLabelVisibility: "innerLabelVisibility", outerLabelVisibility: "outerLabelVisibility", outerLabelAlignment: "outerLabelAlignment", funnelSliceDisplay: "funnelSliceDisplay", formatInnerLabel: "formatInnerLabel", formatOuterLabel: "formatOuterLabel", transitionDuration: "transitionDuration", isInverted: "isInverted", useBezierCurve: "useBezierCurve", allowSliceSelection: "allowSliceSelection", useUnselectedStyle: "useUnselectedStyle", selectedSliceFill: "selectedSliceFill", selectedSliceStroke: "selectedSliceStroke", selectedSliceStrokeThickness: "selectedSliceStrokeThickness", selectedSliceOpacity: "selectedSliceOpacity", unselectedSliceFill: "unselectedSliceFill", unselectedSliceStroke: "unselectedSliceStroke", unselectedSliceStrokeThickness: "unselectedSliceStrokeThickness", unselectedSliceOpacity: "unselectedSliceOpacity", legendItemBadgeTemplate: "legendItemBadgeTemplate", useOuterLabelsForLegend: "useOuterLabelsForLegend", textStyle: "textStyle", outerLabelTextStyle: "outerLabelTextStyle", outlineThickness: "outlineThickness", pixelScalingRatio: "pixelScalingRatio", outerLabelTextColor: "outerLabelTextColor", textColor: "textColor" }, outputs: { sliceClicked: "sliceClicked", sliceEnter: "sliceEnter", sliceLeave: "sliceLeave", sliceHover: "sliceHover" }, host: { classAttribute: "ig-funnel-chart igx-funnel-chart" }, providers: [], viewQueries: [{ propertyName: "_dynamicContent", first: true, predicate: ["dynamicContent"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: "<ng-container #dynamicContent></ng-container>", isInline: true, styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxFunnelChartComponent;
}());
export { IgxFunnelChartComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxFunnelChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-funnel-chart',
                    template: "<ng-container #dynamicContent></ng-container>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [],
                    host: { 'class': 'ig-funnel-chart igx-funnel-chart' },
                    styles: ["\n\t\t:host {\n\t\t\tdisplay: block;\n\t\t}\n\t"]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.Injector }, { type: i0.ComponentFactoryResolver }]; }, propDecorators: { _dynamicContent: [{
                type: ViewChild,
                args: ["dynamicContent", { read: ViewContainerRef, static: true }]
            }], height: [{
                type: Input
            }], width: [{
                type: Input
            }], dataSource: [{
                type: Input
            }], legend: [{
                type: Input
            }], valueMemberPath: [{
                type: Input
            }], highlightedValueMemberPath: [{
                type: Input
            }], actualHighlightValueOpacity: [{
                type: Input
            }], highlightValueOpacity: [{
                type: Input
            }], actualHighlightValueDisplayMode: [{
                type: Input
            }], highlightValueDisplayMode: [{
                type: Input
            }], brushes: [{
                type: Input
            }], outlines: [{
                type: Input
            }], bottomEdgeWidth: [{
                type: Input
            }], innerLabelMemberPath: [{
                type: Input
            }], outerLabelMemberPath: [{
                type: Input
            }], innerLabelVisibility: [{
                type: Input
            }], outerLabelVisibility: [{
                type: Input
            }], outerLabelAlignment: [{
                type: Input
            }], funnelSliceDisplay: [{
                type: Input
            }], formatInnerLabel: [{
                type: Input
            }], formatOuterLabel: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], isInverted: [{
                type: Input
            }], useBezierCurve: [{
                type: Input
            }], allowSliceSelection: [{
                type: Input
            }], useUnselectedStyle: [{
                type: Input
            }], selectedSliceFill: [{
                type: Input
            }], selectedSliceStroke: [{
                type: Input
            }], selectedSliceStrokeThickness: [{
                type: Input
            }], selectedSliceOpacity: [{
                type: Input
            }], unselectedSliceFill: [{
                type: Input
            }], unselectedSliceStroke: [{
                type: Input
            }], unselectedSliceStrokeThickness: [{
                type: Input
            }], unselectedSliceOpacity: [{
                type: Input
            }], legendItemBadgeTemplate: [{
                type: Input
            }], useOuterLabelsForLegend: [{
                type: Input
            }], textStyle: [{
                type: Input
            }], outerLabelTextStyle: [{
                type: Input
            }], outlineThickness: [{
                type: Input
            }], pixelScalingRatio: [{
                type: Input
            }], outerLabelTextColor: [{
                type: Input
            }], textColor: [{
                type: Input
            }], sliceClicked: [{
                type: Output
            }], sliceEnter: [{
                type: Output
            }], sliceLeave: [{
                type: Output
            }], sliceHover: [{
                type: Output
            }] } });
