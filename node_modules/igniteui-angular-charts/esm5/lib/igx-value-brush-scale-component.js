import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { ValueBrushScale } from "./ValueBrushScale";
import { ensureBool } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a brush scale that uses value-based brush selection.
*/
var IgxValueBrushScaleComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxValueBrushScaleComponent, _super);
    function IgxValueBrushScaleComponent() {
        return _super.call(this) || this;
    }
    IgxValueBrushScaleComponent.prototype.createImplementation = function () {
        return new ValueBrushScale();
    };
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "minimumValue", {
        /**
         * Gets or sets the minimum value for this scale.
        */
        get: function () {
            return this.i.minimumValue;
        },
        set: function (v) {
            this.i.minimumValue = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "maximumValue", {
        /**
         * Gets or sets the maximum value for this scale.
        */
        get: function () {
            return this.i.maximumValue;
        },
        set: function (v) {
            this.i.maximumValue = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "isLogarithmic", {
        /**
         * Gets or sets whether the scale is logarithmic.
        */
        get: function () {
            return this.i.isLogarithmic;
        },
        set: function (v) {
            this.i.isLogarithmic = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "logarithmBase", {
        /**
         * Gets or sets the logarithm base for this scale.
        */
        get: function () {
            return this.i.logarithmBase;
        },
        set: function (v) {
            this.i.logarithmBase = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxValueBrushScaleComponent.prototype, "isReady", {
        /**
         * Checks if the value brush scale is ready for usage in the chart
        */
        get: function () {
            return this.i.isReady;
        },
        enumerable: false,
        configurable: true
    });
    IgxValueBrushScaleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxValueBrushScaleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxValueBrushScaleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxValueBrushScaleComponent, selector: "igx-value-brush-scale", inputs: { minimumValue: "minimumValue", maximumValue: "maximumValue", isLogarithmic: "isLogarithmic", logarithmBase: "logarithmBase" }, providers: [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(function () { return IgxValueBrushScaleComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxValueBrushScaleComponent;
}(IgxBrushScaleComponent));
export { IgxValueBrushScaleComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxValueBrushScaleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-value-brush-scale',
                    template: "",
                    providers: [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(function () { return IgxValueBrushScaleComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { minimumValue: [{
                type: Input
            }], maximumValue: [{
                type: Input
            }], isLogarithmic: [{
                type: Input
            }], logarithmBase: [{
                type: Input
            }] } });
