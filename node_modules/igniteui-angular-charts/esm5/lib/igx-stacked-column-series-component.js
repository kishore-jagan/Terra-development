import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxHorizontalStackedSeriesBaseComponent } from "./igx-horizontal-stacked-series-base-component";
import { IgxStackedSeriesBaseComponent } from "./igx-stacked-series-base-component";
import { IgxCategorySeriesComponent } from "./igx-category-series-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { StackedColumnSeries } from "./StackedColumnSeries";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent stacked column series.
*/
var IgxStackedColumnSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxStackedColumnSeriesComponent, _super);
    function IgxStackedColumnSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxStackedColumnSeriesComponent.prototype.createImplementation = function () {
        return new StackedColumnSeries();
    };
    Object.defineProperty(IgxStackedColumnSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxStackedColumnSeriesComponent.prototype, "isColumn", {
        /**
         * Gets whether the current series shows a column shape.
        */
        get: function () {
            return this.i.ex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxStackedColumnSeriesComponent.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.fj;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxStackedColumnSeriesComponent.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.abl;
        },
        set: function (v) {
            this.i.abl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxStackedColumnSeriesComponent.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.abm;
        },
        set: function (v) {
            this.i.abm = +v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgxStackedColumnSeriesComponent.prototype.getItemSpan = function () {
        var iv = this.i.iu();
        return (iv);
    };
    IgxStackedColumnSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxStackedColumnSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxStackedColumnSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxStackedColumnSeriesComponent, selector: "igx-stacked-column-series", inputs: { radiusX: "radiusX", radiusY: "radiusY" }, providers: [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxStackedColumnSeriesComponent;
}(IgxHorizontalStackedSeriesBaseComponent));
export { IgxStackedColumnSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxStackedColumnSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-stacked-column-series',
                    template: "",
                    providers: [{ provide: IgxHorizontalStackedSeriesBaseComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxStackedSeriesBaseComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxCategorySeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxStackedColumnSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { radiusX: [{
                type: Input
            }], radiusY: [{
                type: Input
            }] } });
