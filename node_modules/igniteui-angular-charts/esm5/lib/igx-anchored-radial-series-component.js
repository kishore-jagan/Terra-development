import { __extends } from "tslib";
import { Component, Input } from '@angular/core';
import { TrendLineType_$type } from "igniteui-angular-core";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { ensureBool, ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
var IgxAnchoredRadialSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxAnchoredRadialSeriesComponent, _super);
    function IgxAnchoredRadialSeriesComponent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "useCategoryNormalizedValues", {
        /**
         * Gets or sets whether to normalize the values against the category values if using a proportional category axis.
        */
        get: function () {
            return this.i.ab6;
        },
        set: function (v) {
            this.i.ab6 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "valueMemberPath", {
        /**
         * Gets or sets the item path that provides the values for the current series.
        */
        get: function () {
            return this.i.acm;
        },
        set: function (v) {
            this.i.acm = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "highlightedValueMemberPath", {
        /**
         * Gets or sets the value mapping property for the current series object.
        */
        get: function () {
            return this.i.ace;
        },
        set: function (v) {
            this.i.ace = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.aci;
        },
        set: function (v) {
            this.i.aci = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.ack;
        },
        set: function (v) {
            this.i.ack = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLineType", {
        /**
         * Gets or sets the trend type for the current series object.
        */
        get: function () {
            return this.i.abv;
        },
        set: function (v) {
            this.i.abv = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLineBrush", {
        /**
         * Gets or sets the brush that specifies how to the current series
         * object's Trend line is drawn.
        */
        get: function () {
            return brushToString(this.i.ac9);
        },
        set: function (v) {
            this.i.ac9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "actualTrendLineBrush", {
        /**
         * Gets the effective TrendLineBrush for this series.
        */
        get: function () {
            return brushToString(this.i.ac8);
        },
        set: function (v) {
            this.i.ac8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the current series object's trend line.
        */
        get: function () {
            return this.i.acb;
        },
        set: function (v) {
            this.i.acb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLineDashArray", {
        /**
         * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
         * is used to draw the trend line for the current series object.
        */
        get: function () {
            return fromDoubleCollection(this.i.ada);
        },
        set: function (v) {
            this.i.ada = toDoubleCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLinePeriod", {
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for bollinger band periods is 20.
        */
        get: function () {
            return this.i.acc;
        },
        set: function (v) {
            this.i.acc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "trendLineZIndex", {
        /**
         * Sets or Gets the Z index of the trendline.
        */
        get: function () {
            return this.i.acd;
        },
        set: function (v) {
            this.i.acd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "hasValueAxis", {
        get: function () {
            return this.i.ei;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxAnchoredRadialSeriesComponent.prototype, "isValueAxisInverted", {
        get: function () {
            return this.i.f3;
        },
        enumerable: false,
        configurable: true
    });
    IgxAnchoredRadialSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.ko(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    IgxAnchoredRadialSeriesComponent.prototype.getMemberPathValue = function (memberPathName) {
        var iv = this.i.mb(memberPathName);
        return (iv);
    };
    IgxAnchoredRadialSeriesComponent.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.j8(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgxAnchoredRadialSeriesComponent.prototype.getNextOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.j6(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgxAnchoredRadialSeriesComponent.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.i3(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgxAnchoredRadialSeriesComponent.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.v6(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    IgxAnchoredRadialSeriesComponent.prototype.getOffsetValue = function () {
        var iv = this.i.getOffsetValue();
        return (iv);
    };
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    IgxAnchoredRadialSeriesComponent.prototype.getCategoryWidth = function () {
        var iv = this.i.getCategoryWidth();
        return (iv);
    };
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    IgxAnchoredRadialSeriesComponent.prototype.scrollIntoView = function (item) {
        var iv = this.i.gb(item);
        return (iv);
    };
    IgxAnchoredRadialSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredRadialSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxAnchoredRadialSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxAnchoredRadialSeriesComponent, selector: "ng-component", inputs: { useCategoryNormalizedValues: "useCategoryNormalizedValues", valueMemberPath: "valueMemberPath", highlightedValueMemberPath: "highlightedValueMemberPath", valueMemberAsLegendLabel: "valueMemberAsLegendLabel", valueMemberAsLegendUnit: "valueMemberAsLegendUnit", trendLineType: "trendLineType", trendLineBrush: "trendLineBrush", actualTrendLineBrush: "actualTrendLineBrush", trendLineThickness: "trendLineThickness", trendLineDashArray: "trendLineDashArray", trendLinePeriod: "trendLinePeriod", trendLineZIndex: "trendLineZIndex" }, usesInheritance: true, ngImport: i0, template: "", isInline: true });
    return IgxAnchoredRadialSeriesComponent;
}(IgxRadialBaseComponent));
export { IgxAnchoredRadialSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxAnchoredRadialSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    template: "",
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { useCategoryNormalizedValues: [{
                type: Input
            }], valueMemberPath: [{
                type: Input
            }], highlightedValueMemberPath: [{
                type: Input
            }], valueMemberAsLegendLabel: [{
                type: Input
            }], valueMemberAsLegendUnit: [{
                type: Input
            }], trendLineType: [{
                type: Input
            }], trendLineBrush: [{
                type: Input
            }], actualTrendLineBrush: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], trendLineDashArray: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], trendLineZIndex: [{
                type: Input
            }] } });
