import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxAnchoredRadialSeriesComponent } from "./igx-anchored-radial-series-component";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { RadialPieSeries } from "./RadialPieSeries";
import { toPoint, fromRect } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent radial pie series.
 * Compare values across categories by using radial pie slices.
*/
var IgxRadialPieSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxRadialPieSeriesComponent, _super);
    function IgxRadialPieSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxRadialPieSeriesComponent.prototype.createImplementation = function () {
        return new RadialPieSeries();
    };
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "isPie", {
        /**
         * Gets whether the current series shows a pie shape.
        */
        get: function () {
            return this.i.fl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "isMarkerlessDisplayPreferred", {
        /**
         * Overridden by derived series classes to indicate when marker-less display is preferred or not.
        */
        get: function () {
            return this.i.fj;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "radiusX", {
        /**
         * Gets or sets the x-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.adh;
        },
        set: function (v) {
            this.i.adh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "radiusY", {
        /**
         * Gets or sets the y-radius of the ellipse that is used to round the corners of the column.
        */
        get: function () {
            return this.i.adi;
        },
        set: function (v) {
            this.i.adi = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialPieSeriesComponent.prototype, "legendLabelMemberPath", {
        /**
         * Gets or sets the property name that contains the legend labels.
        */
        get: function () {
            return this.i.adl;
        },
        set: function (v) {
            this.i.adl = v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    */
    IgxRadialPieSeriesComponent.prototype.getItemSpan = function () {
        var iv = this.i.iu();
        return (iv);
    };
    IgxRadialPieSeriesComponent.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.wh(toPoint(world));
        return fromRect(iv);
    };
    IgxRadialPieSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialPieSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxRadialPieSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxRadialPieSeriesComponent, selector: "igx-radial-pie-series", inputs: { radiusX: "radiusX", radiusY: "radiusY", legendLabelMemberPath: "legendLabelMemberPath" }, providers: [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxRadialPieSeriesComponent;
}(IgxAnchoredRadialSeriesComponent));
export { IgxRadialPieSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialPieSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-radial-pie-series',
                    template: "",
                    providers: [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRadialPieSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { radiusX: [{
                type: Input
            }], radiusY: [{
                type: Input
            }], legendLabelMemberPath: [{
                type: Input
            }] } });
