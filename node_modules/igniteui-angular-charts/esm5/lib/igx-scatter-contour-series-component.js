import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxValueBrushScaleComponent } from "./igx-value-brush-scale-component";
import { IgxContourValueResolverComponent } from "./igx-contour-value-resolver-component";
import { IgxScatterTriangulationSeriesComponent } from "./igx-scatter-triangulation-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterContourSeries } from "./ScatterContourSeries";
import * as i0 from "@angular/core";
/**
 * Series class for rendering isarithmic contours based on a triangulation of X+Y+Value points in the ItemsSource.
*/
var IgxScatterContourSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxScatterContourSeriesComponent, _super);
    function IgxScatterContourSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxScatterContourSeriesComponent.prototype.createImplementation = function () {
        return new ScatterContourSeries();
    };
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "isLineContour", {
        /**
         * Gets whether the current series shows a line contour shape.
        */
        get: function () {
            return this.i.fh;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueMemberPath", {
        /**
         * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
        */
        get: function () {
            return this.i.yx;
        },
        set: function (v) {
            this.i.yx = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.yt;
        },
        set: function (v) {
            this.i.yt = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.yv;
        },
        set: function (v) {
            this.i.yv = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "fillScale", {
        /**
         * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
        */
        get: function () {
            var r = this.i.yn;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxValueBrushScaleComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yn = null : this.i.yn = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "actualFillScale", {
        /**
         * Gets actual fill scale that is set on the FillScale property or default FillScale
        */
        get: function () {
            var r = this.i.ym;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxValueBrushScaleComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.ym = null : this.i.ym = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterContourSeriesComponent.prototype, "valueResolver", {
        /**
         * Gets or set the ContourValueResolver used to determine the numeric values of contours.
        */
        get: function () {
            var r = this.i.yk;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxContourValueResolverComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yk = null : this.i.yk = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgxScatterContourSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.actualFillScale && this.actualFillScale.name && this.actualFillScale.name == name) {
            return this.actualFillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    };
    IgxScatterContourSeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.actualFillScale && this.actualFillScale._styling) {
            this.actualFillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgxScatterContourSeriesComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.ko(item, memberPathName);
        return (iv);
    };
    /**
     * Gets the value of a requested member path from the series.
    
    * @param memberPathName  * The property name of a valid member path for the series
    */
    IgxScatterContourSeriesComponent.prototype.getMemberPathValue = function (memberPathName) {
        var iv = this.i.mb(memberPathName);
        return (iv);
    };
    IgxScatterContourSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterContourSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxScatterContourSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxScatterContourSeriesComponent, selector: "igx-scatter-contour-series", inputs: { valueMemberPath: "valueMemberPath", valueMemberAsLegendLabel: "valueMemberAsLegendLabel", valueMemberAsLegendUnit: "valueMemberAsLegendUnit", fillScale: "fillScale", actualFillScale: "actualFillScale", valueResolver: "valueResolver" }, providers: [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxScatterContourSeriesComponent;
}(IgxScatterTriangulationSeriesComponent));
export { IgxScatterContourSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterContourSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-scatter-contour-series',
                    template: "",
                    providers: [{ provide: IgxScatterTriangulationSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterContourSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { valueMemberPath: [{
                type: Input
            }], valueMemberAsLegendLabel: [{
                type: Input
            }], valueMemberAsLegendUnit: [{
                type: Input
            }], fillScale: [{
                type: Input
            }], actualFillScale: [{
                type: Input
            }], valueResolver: [{
                type: Input
            }] } });
