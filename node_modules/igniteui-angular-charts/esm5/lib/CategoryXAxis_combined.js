/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { Base, Number_$type, typeCast, Array_$type, markType, markDep, TypeRegistrar } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { HorizontalAxisLabelPanel } from "./HorizontalAxisLabelPanel";
import { Rect } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { NumericScaler } from "./NumericScaler";
import { LinearCategorySnapper } from "./LinearCategorySnapper";
import { NumericYAxis } from "./NumericYAxis";
import { LabelPosition } from "./LabelPosition";
import { AxisRangeChangedEventArgs } from "./AxisRangeChangedEventArgs";
import { MathUtil } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { truncate, isNaN_, isInfinity } from "igniteui-angular-core";
import { CategoryAxisBaseView } from "./CategoryAxisBaseView";
import { AxisDefaults } from "./AxisDefaults";
/**
 * @hidden
 */
var CategoryXAxis = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryXAxis, _super);
    function CategoryXAxis() {
        var _this = _super.call(this) || this;
        _this.mw = 1;
        _this.mv = 1;
        _this.mz = null;
        _this.mm = 0;
        _this.mn = 0;
        _this.kz = new List$1(Number_$type, 0);
        _this.ab = CategoryXAxis.$;
        return _this;
    }
    CategoryXAxis.prototype.a4 = function () {
        return new CategoryXAxisView(this);
    };
    CategoryXAxis.prototype.ht = function (a) {
        _super.prototype.ht.call(this, a);
        this.mj = a;
    };
    Object.defineProperty(CategoryXAxis.prototype, "my", {
        get: function () {
            return this.mw;
        },
        set: function (a) {
            this.mw = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryXAxis.prototype, "mx", {
        get: function () {
            return this.mv;
        },
        set: function (a) {
            this.mv = a;
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.av = function () {
        if (this.c6) {
            return (TypeRegistrar.create('HorizontalSmartAxisLabelPanel'));
        }
        else {
            return new HorizontalAxisLabelPanel();
        }
    };
    CategoryXAxis.prototype.getCategorySize = function (a, b, c) {
        var d = this.kc(b, c);
        return d.width / (this.lg * a.width);
    };
    CategoryXAxis.prototype.k5 = function (a, b, c) {
        var d = this.lc(a, b, c);
        var e = 0;
        if (!isNaN_(this.lb)) {
            e = Math.min(this.lb, 1);
        }
        else {
            e = 0;
        }
        ;
        var f = 1 - 0.5 * d;
        var g = this.li == 0 ? 1 : this.li;
        var h = this.getCategorySize(a, b, c) * f / (g - (g - 1) * e);
        return h;
    };
    CategoryXAxis.prototype.getGroupCenter = function (a, b, c, d) {
        var e = 0.5;
        if (this.li > 1) {
            var f = this.lc(b, c, d);
            var g = 0;
            if (!isNaN_(this.lb)) {
                g = Math.min(this.lb, 1);
            }
            var h = 1 - 0.5 * f;
            var i = h / (this.li - (this.li - 1) * g);
            var j = (h - i) / (this.li - 1);
            e = 0.25 * f + 0.5 * i + a * j;
        }
        return this.getCategorySize(b, c, d) * e;
    };
    CategoryXAxis.prototype.d5 = function () {
        return this.mt;
    };
    CategoryXAxis.prototype.m9 = function (a) {
        var b = this.bi != null ? this.bi.vl : Rect.empty;
        b = b.copy();
        var c = this.ke;
        var d = this.kb();
        var e = new Rect(0, 0, 0, 1, 1);
        var f = new ScalerParams(0, e, e, this.ch, d);
        var g = !b.isEmpty && !c.isEmpty && this.ks != null ? this.ks.indexOf(a) : -1;
        var h = g > -1 ? this.ek(g, f) : NaN;
        if (!isNaN_(h) && this.bi.fc) {
            if (!isNaN_(h)) {
                if (h < b.left + 0.1 * b.width) {
                    h = h + 0.4 * b.width;
                    b.x = h - 0.5 * b.width;
                }
                if (h > b.right - 0.1 * b.width) {
                    h = h - 0.4 * b.width;
                    b.x = h - 0.5 * b.width;
                }
            }
            this.bi.rk(b, false, true);
        }
    };
    CategoryXAxis.prototype.ek = function (a, b) {
        if (!b.c.isEmpty) {
            var c = this.ms(a, NumericScaler.ac, b.c, this.categoryMode);
            c = (c - b.d.left) / b.d.width;
            c = b.d.left + b.d.width * (c - b.e.left) / b.e.width;
            return c;
        }
        return this.ms(a, b.e, b.d, this.categoryMode);
    };
    CategoryXAxis.prototype.mi = function (a) {
        if (typeCast(List$1.$.specialize(Array_$type), a) !== null) {
            return a.asArray();
        }
        return null;
    };
    CategoryXAxis.prototype.hn = function (a, b, c, d, e) {
        var f;
        var g = e.e;
        var h = e.d;
        var i = e.c;
        var j = e.a;
        var k = !i.isEmpty;
        var l = this.categoryMode == 0 ? this.lg - 1 : this.lg;
        if (l < 0) {
            l = 0;
        }
        var m = i.left;
        var n = i.width;
        var o = g.left;
        var p = g.width;
        var q = h.left;
        var r = h.width;
        var s = 0;
        var t = 1;
        var u = this.mi(a);
        var v = false;
        if (u != null) {
            v = true;
        }
        var w;
        for (var x = 0; x < b.count; x++) {
            w = b.item(x);
            for (var y = c; y < d; y++) {
                if (v) {
                    f = u[y];
                }
                else {
                    f = a.item(y);
                }
                if (k) {
                    var z = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (j) {
                        z = 1 - z;
                    }
                    z = m + n * (z - s) / t;
                    z = (z - q) / r;
                    var aa = q + r * (z - o) / p;
                    f[w] = aa;
                }
                else {
                    var ab = l >= 1 ? (f[w]) / (l) : l == 0 ? 0.5 : NaN;
                    if (j) {
                        ab = 1 - ab;
                    }
                    ab = q + r * (ab - o) / p;
                    f[w] = ab;
                }
            }
        }
    };
    CategoryXAxis.prototype.el = function (a, b, c) {
        if (!b.c.isEmpty) {
            var d = this.ms(a, NumericScaler.ac, b.c, c);
            d = (d - b.d.left) / b.d.width;
            d = b.d.left + b.d.width * (d - b.e.left) / b.e.width;
            return d;
        }
        return this.ms(a, b.e, b.d, c);
    };
    CategoryXAxis.prototype.ms = function (a, b, c, d) {
        var e = d == 0 ? this.lg - 1 : this.lg;
        if (e < 0) {
            e = 0;
        }
        var f = e >= 1 ? (a) / (e) : e == 0 ? 0.5 : NaN;
        if (this.ci) {
            f = 1 - f;
        }
        return c.left + c.width * (f - b.left) / b.width;
    };
    CategoryXAxis.prototype.en = function (a, b) {
        if (!b.c.isEmpty) {
            var c = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
            c = (c * b.d.width) + b.d.left;
            c = this.getUnscaledValue3(c, NumericScaler.ac, b.c, this.categoryMode);
            return c;
        }
        return this.getUnscaledValue3(a, b.e, b.d, this.categoryMode);
    };
    CategoryXAxis.prototype.eo = function (a, b, c) {
        if (!b.c.isEmpty) {
            var d = b.e.left + b.e.width * (a - b.d.left) / b.d.width;
            d = (d * b.d.width) + b.d.left;
            d = this.getUnscaledValue3(d, NumericScaler.ac, b.c, c);
            return d;
        }
        return this.getUnscaledValue3(a, b.e, b.d, c);
    };
    CategoryXAxis.prototype.getUnscaledValue3 = function (a, b, c, d) {
        var e = b.left + (a - c.left) * b.width / c.width;
        if (this.ci) {
            e = 1 - e;
        }
        var f = d == 0 ? this.lg - 1 : this.lg;
        if (f < 0) {
            f = 0;
        }
        return e * f;
    };
    CategoryXAxis.prototype.na = function (a, b) {
        if (isNaN_(a) || isNaN_(b) || this.ks == null || this.ks.count == 0) {
            return;
        }
        var c = a / this.ks.count;
        var d = (b + 1) / this.ks.count;
        this.bi.v1 = new Rect(0, c, this.bi.v1.y, d - c, this.bi.v1.height);
    };
    CategoryXAxis.prototype.ia = function (a) {
        _super.prototype.ia.call(this, a);
        var b = this.bi != null ? this.bi.vl : Rect.empty;
        var c = this.ke;
        var d = this.j9();
        var e = this.j8();
        var f = new ScalerParams(0, b, c, this.ch, d);
        var g = this.a5.a4();
        var h = this.a5.a7();
        var i = this.a5.a5();
        var j = this.a5.a6();
        var k = this.a5.e();
        var l = this.a5.f();
        var m = this.a5.g();
        var n = this.ks;
        var o = this.mk();
        this.im();
        this.hj(g);
        this.hj(h);
        this.hj(i);
        this.hj(j);
        this.dc.clear();
        this.dd.clear();
        this.kz.clear();
        this.a5.az(this, b, c);
        if (b.isEmpty || c.isEmpty) {
            this.br.count = 0;
            this.bq.count = 0;
            this.bp.count = 0;
        }
        if (this.br.count == 0 && this.bq.count == 0 && this.a5.l()) {
            this.a5.ad();
        }
        if (this.az != null) {
            this.az.registerAxis(this);
        }
        if (this.itemsSource == null || o == null || n.count == 0) {
            this.br.count = 0;
            this.bq.count = 0;
            this.bp.count = 0;
            this.a5.ad();
            return;
        }
        if (!b.isEmpty && !c.isEmpty) {
            var p = this.en(e.left, f);
            var q = this.en(e.right, f);
            var r = 0;
            var s = false;
            if (this.c4) {
                var t = Math.abs(q - p);
                r = Math.ceil(t) + 1;
                if (this.ch) {
                    if (Math.abs(q - Math.floor(q)) < Math.abs(p - Math.ceil(p))) {
                        s = true;
                    }
                }
                else {
                    if (Math.abs(q - Math.ceil(q)) < Math.abs(p - Math.floor(p))) {
                        s = true;
                    }
                }
            }
            if (this.ch) {
                p = Math.ceil(p);
                q = Math.floor(q);
            }
            else {
                p = Math.floor(p);
                q = Math.ceil(q);
            }
            if (this.c4) {
                if (Math.abs(q - p) < r) {
                    if (this.ch) {
                        if (s) {
                            q--;
                        }
                        else {
                            p++;
                        }
                    }
                    else {
                        if (s) {
                            q++;
                        }
                        else {
                            p--;
                        }
                    }
                }
            }
            var u = c.bottom;
            var v = u - c.top;
            if (this.aj != null) {
                var w = typeCast(NumericYAxis.$, this.aj);
                if (w != null) {
                    var x = this.ig(u, v, b, c, d, c.top, c.bottom);
                    u = x.p0;
                    v = x.p1;
                }
            }
            this.hr(g, u, c, k, true);
            this.a5.au(v);
            var y = Math.min(p, q);
            var z = Math.max(p, q);
            var aa = e.width;
            if (this.c4) {
                var ab = this.ek(y, f);
                var ac = this.ek(z, f);
                if (ab != ac) {
                    aa = Math.abs(ac - ab);
                }
            }
            var ad = new LinearCategorySnapper(1, y, z, aa, this.mt, this.categoryMode, this.ez());
            var ae = ad.g;
            ae = this.d2(ae, this.ml(), b, c, d);
            if (ad.g != ae) {
                ad = new LinearCategorySnapper(1, y, z, aa, ae, this.categoryMode, this.ez());
            }
            var af = Math.floor((y - 0) / ad.g);
            var ag = Math.ceil((z - 0) / ad.g);
            this.mo = ad.g;
            if (!isNaN_(af) && !isNaN_(ag)) {
                var ah = truncate(af);
                var ai = truncate(ag);
                var aj = this.mr(0 + ah * ad.g, f);
                var ak = this.ek(ad.g, f);
                var al = Math.abs(ak - this.ek(0, f));
                this.a5.av(ak);
                var am = truncate(Math.ceil(e.right));
                var an = truncate(Math.floor(e.left));
                var ao = this.mu;
                var ap = ao > 0 && ao < ad.g;
                var aq = c.right;
                var ar = this.kz;
                var as = ad.g;
                var at = truncate(as);
                var au = this.li;
                var av = this.ch;
                var aw = this.categoryMode;
                this.mz = null;
                for (var ax = ah; ax <= ai; ++ax) {
                    var ay = this.mr(0 + (ax + 1) * ad.g, f);
                    if (aj <= aq) {
                        if (ax % 2 == 0) {
                            this.ip(h, aj, ay, c);
                        }
                        this.io(i, aj, c, l, false);
                        ar.add(aj);
                    }
                    if (this.categoryMode != 0 && this.li != 0 && this.cy) {
                        if (ap) {
                            var az = al * this.mu;
                            if (this.ch) {
                                var a0 = aj;
                                while (a0 - az > ay) {
                                    a0 -= az;
                                    if (Math.abs(a0 - ay) < 0.0001) {
                                        break;
                                    }
                                    this.io(j, a0, c, m, false);
                                }
                            }
                            else {
                                var a1 = aj;
                                while (a1 + az < ay) {
                                    a1 += az;
                                    if (Math.abs(a1 - ay) < 0.0001) {
                                        break;
                                    }
                                    this.io(j, a1, c, m, false);
                                }
                            }
                            this.mp = this.mu;
                        }
                        else {
                            for (var a2 = 0; a2 < truncate(ad.g); a2++) {
                                for (var a3 = 0; a3 < this.li; a3++) {
                                    var a4 = this.getGroupCenter(a3, b, c, d);
                                    if (this.ch) {
                                        a4 = -a4;
                                    }
                                    var a5 = this.ek(a2 + ax * ad.g, f) + a4;
                                    this.io(j, a5, c, m, false);
                                }
                            }
                            this.mp = 0.5;
                        }
                    }
                    var a6 = this.mq(ax * as, aj, aw == 0, f);
                    var a7 = truncate(Math.round(a6));
                    if (a7 >= an && a7 <= am) {
                        var a8 = 0;
                        if (as >= 1) {
                            a8 = ax * truncate(Math.floor(as));
                        }
                        else {
                            if ((ax * as) * 2 % 2 == 0) {
                                a8 = truncate(Math.floor(ax * as));
                            }
                            else {
                                a8 = -1;
                            }
                        }
                        if (o != null && a8 < n.count && a8 >= 0) {
                            var a9 = o.getItem(a8);
                            var ba = this.f0(a9);
                            this.mz = a9;
                            if (!isNaN_(a6) && !isInfinity(a6) && ba != null) {
                                if ((typeof ba === 'string') && Base.equalsStatic(ba, "")) {
                                }
                                else {
                                    this.dc.add1(ba);
                                    this.dd.add(new LabelPosition(a6));
                                }
                            }
                        }
                    }
                    aj = ay;
                }
            }
            this.mz = null;
            if ((this.az == null || this.az.visibility == 0) && this.aj != null) {
                if (this.az != null && (this.az.location == 4 || this.az.location == 5)) {
                    this.bi.nr();
                }
            }
            this.a5.a0(this.dc, this.dd);
            this.l6();
        }
    };
    CategoryXAxis.prototype.c3 = function () {
        if (this.cq && this.c4) {
            this.bc = this.bb();
        }
        if (this.ks == null) {
            return false;
        }
        var a = false;
        var b = this.ks.count;
        if (b != this.mx) {
            var c = new AxisRangeChangedEventArgs(0, 1, 1, this.mx, b);
            this.mx = b;
            this.h4(c);
            a = true;
        }
        this.nc();
        this.nb();
        return a;
    };
    CategoryXAxis.prototype.getWindowZoomFromCategories = function (a) {
        var b = MathUtil.a(a) && a > 0;
        var c = this.ks.count;
        if (c > 0 && b) {
            var d = this.bi.v0.width;
            var e = isNaN_(d) || isInfinity(d);
            if (e) {
                return NaN;
            }
            var f = new Rect(0, 0, 0, 1, 1);
            var g = this.bi.v0;
            var h = this.getCategorySize(f, g, g);
            var i = isNaN_(h) || isInfinity(h);
            if (i) {
                return NaN;
            }
            var j = h * a / d;
            if (j >= 0 && j <= 1) {
                return j;
            }
        }
        return NaN;
    };
    CategoryXAxis.prototype.getWindowZoomFromItemSpan = function (a) {
        var b = MathUtil.a(a) && a > 0;
        var c = this.ks.count;
        if (c > 0 && b) {
            var d = this.bi.v0.width;
            var e = isNaN_(d) || isInfinity(d);
            if (e) {
                return NaN;
            }
            var f = new Rect(0, 0, 0, 1, 1);
            var g = this.bi.v0;
            var h = this.k5(f, g, g);
            var i = a / h;
            var j = Math.min(1, 1 / i);
            if (j > 0 && j <= 1) {
                return j;
            }
        }
        return NaN;
    };
    CategoryXAxis.prototype.nc = function () {
        if (this.ks == null || this.bi == null) {
            return;
        }
        var a = !isNaN_(this.bi.il) && !isNaN_(this.bi.io);
        if (a) {
            return;
        }
        if (!isNaN_(this.zoomMaximumItemSpan) && !isInfinity(this.zoomMaximumItemSpan)) {
            var b = this.getWindowZoomFromItemSpan(this.zoomMaximumItemSpan);
            if (!isNaN_(b) && !isInfinity(b)) {
                this.bi.hf = b;
            }
        }
        else if (!isNaN_(this.zoomMaximumCategoryRange) && !isInfinity(this.zoomMaximumCategoryRange)) {
            var c = this.getWindowZoomFromCategories(this.zoomMaximumCategoryRange);
            if (!isNaN_(c) && !isInfinity(c)) {
                this.bi.hf = c;
            }
        }
    };
    CategoryXAxis.prototype.nb = function () {
        if (this.ks == null || this.bi == null) {
            return;
        }
        var a = NaN;
        var b = NaN;
        var c = this.bi.hl();
        var d = this.bi.hm();
        var e = false;
        if (MathUtil.a(this.zoomToItemSpan) && this.zoomToItemSpan > 0) {
            e = true;
            c = this.getWindowZoomFromItemSpan(this.zoomToItemSpan);
            c = Math.max(c, this.bi.hf);
        }
        else if (MathUtil.a(this.zoomToCategoryRange) && this.zoomToCategoryRange > 0 && this.zoomToCategoryRange <= this.lh) {
            e = true;
            c = this.getWindowZoomFromCategories(this.zoomToCategoryRange);
            c = Math.max(c, this.bi.hf);
        }
        if (MathUtil.a(this.zoomToCategoryStart) && this.zoomToCategoryStart >= 0 && this.zoomToCategoryStart < this.lh) {
            e = true;
            a = this.getWindowZoomFromCategories(this.zoomToCategoryStart);
            var f = c + a - 1;
            var g = c - f;
            if (f > 0 && g > this.bi.hf) {
                c = g;
                c = Math.max(c, this.bi.hf);
            }
        }
        if (e) {
            this.bi.ri(a, b, c, d);
        }
    };
    CategoryXAxis.prototype.hx = function (a, b, c, d) {
        _super.prototype.hx.call(this, a, b, c, d);
        switch (b) {
            case CategoryXAxis.$$p[0]:
            case CategoryXAxis.$$p[1]:
                this.nc();
                break;
            case CategoryXAxis.$$p[2]:
            case CategoryXAxis.$$p[3]:
            case CategoryXAxis.$$p[4]:
                this.nb();
                break;
        }
    };
    Object.defineProperty(CategoryXAxis.prototype, "mt", {
        get: function () {
            return this.c(CategoryXAxis.nd);
        },
        set: function (a) {
            this.h(CategoryXAxis.nd, a);
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.ml = function () {
        return !isNaN_(this.mt);
    };
    Object.defineProperty(CategoryXAxis.prototype, "mo", {
        get: function () {
            return this.mm;
        },
        set: function (a) {
            if (this.mo != a) {
                var b = this.mm;
                this.mm = a;
                this.h3("ActualInterval", b, this.mo);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.ew = function () {
        return this.mo;
    };
    Object.defineProperty(CategoryXAxis.prototype, "mu", {
        get: function () {
            return this.c(CategoryXAxis.ne);
        },
        set: function (a) {
            this.h(CategoryXAxis.ne, a);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(CategoryXAxis.prototype, "mp", {
        get: function () {
            return this.mn;
        },
        set: function (a) {
            if (this.mp != a) {
                var b = this.mn;
                this.mn = a;
                this.h3("ActualMinorInterval", b, this.mp);
            }
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.kv = function (a) {
        if (a == null) {
            return false;
        }
        var b = this.be();
        if (b == null) {
            return false;
        }
        return b.synchronizeHorizontally;
    };
    CategoryXAxis.prototype.get_a2 = function () {
        return 0;
    };
    Object.defineProperty(CategoryXAxis.prototype, "a2", {
        get: function () {
            return this.get_a2();
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.mk = function () {
        return this.ks;
    };
    CategoryXAxis.prototype.mr = function (a, b) {
        return this.ek(a, b);
    };
    CategoryXAxis.prototype.mq = function (a, b, c, d) {
        if (!c) {
            var e = this.mr(a + 1, d);
            return (b + e) / 2;
        }
        return b;
    };
    Object.defineProperty(CategoryXAxis.prototype, "isVertical", {
        get: function () {
            return this.cp;
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.j$d = function (a, b) {
        return this.en.apply(this, arguments);
    };
    CategoryXAxis.prototype.j$c = function (a, b) {
        return this.ek.apply(this, arguments);
    };
    CategoryXAxis.prototype.j$e = function (a, b, c, d, e) {
        this.hn.apply(this, arguments);
    };
    CategoryXAxis.prototype.j$f = function (a, b, c, d) {
        this.ho.apply(this, arguments);
    };
    CategoryXAxis.prototype.j$g = function (a, b, c, d) {
        this.hp.apply(this, arguments);
    };
    Object.defineProperty(CategoryXAxis.prototype, "j$b", {
        get: function () {
            return this.ch;
        },
        enumerable: false,
        configurable: true
    });
    CategoryXAxis.prototype.j$a = function () {
        return this.ag.apply(this, arguments);
    };
    CategoryXAxis.$t = markType(CategoryXAxis, 'CategoryXAxis', CategoryAxisBase.$, [IZoomableCategoryAxis_$type]);
    CategoryXAxis.nd = DependencyProperty.i("Interval", Number_$type, CategoryXAxis.$, new PropertyMetadata(2, NaN, function (a, b) {
        a.h3("Interval", b.oldValue, b.newValue);
        a.h9(false);
    }));
    CategoryXAxis.ne = DependencyProperty.i("MinorInterval", Number_$type, CategoryXAxis.$, new PropertyMetadata(2, NaN, function (a, b) {
        (typeCast(CategoryXAxis.$, a)).h3("MinorInterval", b.oldValue, b.newValue);
        (typeCast(CategoryXAxis.$, a)).h9(false);
    }));
    CategoryXAxis.$$p = markDep(DependencyProperty, PropertyMetadata, CategoryXAxis, 'h3', ['ZoomMaximumCategoryRange::nf', [1, NaN], 'ZoomMaximumItemSpan::ng', [1, NaN], 'ZoomToCategoryRange::nh', [1, NaN], 'ZoomToCategoryStart::ni', [1, NaN], 'ZoomToItemSpan::nj', [1, NaN]]);
    return CategoryXAxis;
}(CategoryAxisBase));
export { CategoryXAxis };
/**
 * @hidden
 */
var CategoryXAxisView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CategoryXAxisView, _super);
    function CategoryXAxisView(a) {
        var _this = _super.call(this, a) || this;
        _this.bm = null;
        _this.bm = a;
        return _this;
    }
    CategoryXAxisView.prototype.al = function () {
        _super.prototype.al.call(this);
        this.a.fi = AxisDefaults.f;
    };
    CategoryXAxisView.$t = markType(CategoryXAxisView, 'CategoryXAxisView', CategoryAxisBaseView.$);
    return CategoryXAxisView;
}(CategoryAxisBaseView));
export { CategoryXAxisView };
