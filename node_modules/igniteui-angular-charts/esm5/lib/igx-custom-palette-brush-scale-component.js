import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { IgxBrushScaleComponent } from "./igx-brush-scale-component";
import { CustomPaletteBrushScale } from "./CustomPaletteBrushScale";
import { ensureEnum, brushToString } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a brush scale that uses index-based brush selection mode.
*/
var IgxCustomPaletteBrushScaleComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxCustomPaletteBrushScaleComponent, _super);
    function IgxCustomPaletteBrushScaleComponent() {
        return _super.call(this) || this;
    }
    IgxCustomPaletteBrushScaleComponent.prototype.createImplementation = function () {
        return new CustomPaletteBrushScale();
    };
    Object.defineProperty(IgxCustomPaletteBrushScaleComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxCustomPaletteBrushScaleComponent.prototype, "brushSelectionMode", {
        /**
         * Gets or sets the brush selection mode.
        */
        get: function () {
            return this.i.brushSelectionMode;
        },
        set: function (v) {
            this.i.brushSelectionMode = ensureEnum(BrushSelectionMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxCustomPaletteBrushScaleComponent.prototype, "isReady", {
        /**
         * Checks if this scale is ready for useage with a series
        */
        get: function () {
            return this.i.isReady;
        },
        enumerable: false,
        configurable: true
    });
    IgxCustomPaletteBrushScaleComponent.prototype.getBrush1 = function (index, total) {
        var iv = this.i.getBrush1(index, total);
        return brushToString(iv);
    };
    IgxCustomPaletteBrushScaleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxCustomPaletteBrushScaleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxCustomPaletteBrushScaleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxCustomPaletteBrushScaleComponent, selector: "igx-custom-palette-brush-scale", inputs: { brushSelectionMode: "brushSelectionMode" }, providers: [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(function () { return IgxCustomPaletteBrushScaleComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxCustomPaletteBrushScaleComponent;
}(IgxBrushScaleComponent));
export { IgxCustomPaletteBrushScaleComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxCustomPaletteBrushScaleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-custom-palette-brush-scale',
                    template: "",
                    providers: [{ provide: IgxBrushScaleComponent, useExisting: forwardRef(function () { return IgxCustomPaletteBrushScaleComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { brushSelectionMode: [{
                type: Input
            }] } });
