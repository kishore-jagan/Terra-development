import { IgxSeriesComponent } from "./igx-series-component";
import { fromPoint, toPoint } from "igniteui-angular-core";
/**
 * Provides data for IgxDataChartComponent mouse button related events.
*/
var IgxChartMouseEventArgs = /** @class */ /*@__PURE__*/ (function () {
    function IgxChartMouseEventArgs() {
    }
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "i", {
        /**
         * @hidden
         */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgxChartMouseEventArgs.prototype.onImplementationCreated = function () {
    };
    IgxChartMouseEventArgs.prototype._provideImplementation = function (i) {
        this._implementation = i;
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    };
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "originalSource", {
        /**
         * Gets a reference to the object that raised the event.
        */
        get: function () {
            return this.i.originalSource;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "item", {
        /**
         * Gets the ItemsSource item associated with the current event.
        */
        get: function () {
            return this.i.item;
        },
        set: function (v) {
            this.i.item = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "series", {
        /**
         * Gets the series associated with the current event.
        */
        get: function () {
            var r = this.i.series;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxSeriesComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.series = null : this.i.series = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "plotAreaPosition", {
        /**
         * Gets the mouse position relative to the plot area.
        */
        get: function () {
            return fromPoint(this.i.plotAreaPosition);
        },
        set: function (v) {
            this.i.plotAreaPosition = toPoint(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "chartPosition", {
        /**
         * Gets the mouse position relative to the chart.
        */
        get: function () {
            return fromPoint(this.i.chartPosition);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxChartMouseEventArgs.prototype, "chart", {
        /**
         * Gets the Chart associated with the current event.
        */
        get: function () {
            var r = this.i.chart;
            if (r == null) {
                return null;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.chart = null : this.i.chart = v.i;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Provides a human readable description of the mouse button event.
    
    */
    IgxChartMouseEventArgs.prototype.toString = function () {
        var iv = this.i.toString();
        return (iv);
    };
    /**
     * Returns the x- and y- coordinates of the mouse pointer position, optionally evaluated
     * against the origin of a supplied UIElement.
    
    * @param relativeTo  * Any UIElement derived object that is contained by the the engine plug-in
     * and connected to the object tree. To specify the object relative to the overall the engine
     * coordinate system, use a relativeTo value of null.
    */
    IgxChartMouseEventArgs.prototype.getPosition = function (relativeTo) {
        var iv = this.i.getPosition(relativeTo);
        return fromPoint(iv);
    };
    return IgxChartMouseEventArgs;
}());
export { IgxChartMouseEventArgs };
