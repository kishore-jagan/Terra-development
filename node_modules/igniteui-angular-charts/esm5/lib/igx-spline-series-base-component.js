import { __extends } from "tslib";
import { Component, Input } from '@angular/core';
import { SplineType_$type } from "./SplineType";
import { IgxHorizontalAnchoredCategorySeriesComponent } from "./igx-horizontal-anchored-category-series-component";
import { ensureBool, ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents the base class for all IgxDataChartComponent spline series.
*/
var IgxSplineSeriesBaseComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxSplineSeriesBaseComponent, _super);
    function IgxSplineSeriesBaseComponent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(IgxSplineSeriesBaseComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxSplineSeriesBaseComponent.prototype, "isSplineShapePartOfRange", {
        /**
         * Gets or sets whether to include the spline shape in the axis range requested of the axis.
        */
        get: function () {
            return this.i.aci;
        },
        set: function (v) {
            this.i.aci = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxSplineSeriesBaseComponent.prototype, "isAreaOrLine", {
        /**
         * Gets whether the current series shows an area or line shape.
        */
        get: function () {
            return this.i.et;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxSplineSeriesBaseComponent.prototype, "splineType", {
        /**
         * Gets or sets the type of spline to be rendered.
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        *     <igx-category-x-axis
        *         label="label"
        *         #xAxis>
        *     </igx-category-x-axis>
        *     <igx-numeric-y-axis
        *         #yAxis>
        *     </igx-numeric-y-axis>
        *     <igx-spline-area-series
        *         [xAxis]="xAxis"
        *         [yAxis]="yAxis"
        *         splineType="clamped"
        *         valueMemberPath="value">
        *     </igx-spline-area-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * this.series.splineType = SplineType.Clamped;
        * ```
        */
        get: function () {
            return this.i.ach;
        },
        set: function (v) {
            this.i.ach = ensureEnum(SplineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgxSplineSeriesBaseComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxSplineSeriesBaseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxSplineSeriesBaseComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxSplineSeriesBaseComponent, selector: "ng-component", inputs: { isSplineShapePartOfRange: "isSplineShapePartOfRange", splineType: "splineType" }, usesInheritance: true, ngImport: i0, template: "", isInline: true });
    return IgxSplineSeriesBaseComponent;
}(IgxHorizontalAnchoredCategorySeriesComponent));
export { IgxSplineSeriesBaseComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxSplineSeriesBaseComponent, decorators: [{
            type: Component,
            args: [{
                    template: "",
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { isSplineShapePartOfRange: [{
                type: Input
            }], splineType: [{
                type: Input
            }] } });
