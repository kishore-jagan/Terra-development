import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { AxisAngleLabelMode_$type } from "./AxisAngleLabelMode";
import { IgxNumericAxisBaseComponent } from "./igx-numeric-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent angle based axis for polar series.
*/
var IgxNumericAngleAxisComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxNumericAngleAxisComponent, _super);
    function IgxNumericAngleAxisComponent() {
        return _super.call(this) || this;
    }
    IgxNumericAngleAxisComponent.prototype.createImplementation = function () {
        return new NumericAngleAxis();
    };
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "isAngular", {
        /**
         * Gets if the current axis is of angular axis type
        */
        get: function () {
            return this.i.b9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "startAngleOffset", {
        /**
         * Indicates the angle in degress that the chart's 0th angle should be offset.
        */
        get: function () {
            return this.i.nu;
        },
        set: function (v) {
            this.i.nu = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxNumericAngleAxisComponent.prototype, "labelMode", {
        /**
         * Indicates the mode axis labels will operate in.
        */
        get: function () {
            return this.i.ni;
        },
        set: function (v) {
            this.i.ni = ensureEnum(AxisAngleLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Gets the scaled angle value in radians based on the raw input.
    
    * @param unscaledAngle  * The unscaled angle.
    */
    IgxNumericAngleAxisComponent.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Gets the raw axis value back from the angle that would be used on the chart.
    
    * @param scaledAngle  * The chart angle value.
    */
    IgxNumericAngleAxisComponent.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    IgxNumericAngleAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxNumericAngleAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxNumericAngleAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxNumericAngleAxisComponent, selector: "igx-numeric-angle-axis", inputs: { startAngleOffset: "startAngleOffset", labelMode: "labelMode" }, providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxNumericAngleAxisComponent;
}(IgxNumericAxisBaseComponent));
export { IgxNumericAngleAxisComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxNumericAngleAxisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-numeric-angle-axis',
                    template: "",
                    providers: [{ provide: IgxNumericAxisBaseComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxNumericAngleAxisComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { startAngleOffset: [{
                type: Input
            }], labelMode: [{
                type: Input
            }] } });
