import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { IgxAnchoredRadialSeriesComponent } from "./igx-anchored-radial-series-component";
import { IgxRadialBaseComponent } from "./igx-radial-base-component";
import { IgxMarkerSeriesComponent } from "./igx-marker-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { RadialAreaSeries } from "./RadialAreaSeries";
import { ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent radial area series.
*/
var IgxRadialAreaSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxRadialAreaSeriesComponent, _super);
    function IgxRadialAreaSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxRadialAreaSeriesComponent.prototype.createImplementation = function () {
        return new RadialAreaSeries();
    };
    Object.defineProperty(IgxRadialAreaSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialAreaSeriesComponent.prototype, "isArea", {
        /**
         * Gets whether the current series shows an area shape.
        */
        get: function () {
            return this.i.es;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxRadialAreaSeriesComponent.prototype, "unknownValuePlotting", {
        /**
         * Determines how unknown values will be plotted on the chart.
         * Null and Double.NaN are two examples of unknown values.
        */
        get: function () {
            return this.i.ade;
        },
        set: function (v) {
            this.i.ade = ensureEnum(UnknownValuePlotting_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    IgxRadialAreaSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialAreaSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxRadialAreaSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxRadialAreaSeriesComponent, selector: "igx-radial-area-series", inputs: { unknownValuePlotting: "unknownValuePlotting" }, providers: [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxRadialAreaSeriesComponent;
}(IgxAnchoredRadialSeriesComponent));
export { IgxRadialAreaSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxRadialAreaSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-radial-area-series',
                    template: "",
                    providers: [{ provide: IgxAnchoredRadialSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxRadialBaseComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxMarkerSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxRadialAreaSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { unknownValuePlotting: [{
                type: Input
            }] } });
