import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { OthersCategoryType_$type } from "igniteui-angular-core";
import { IgxCategoryAngleAxisComponent } from "./igx-category-angle-axis-component";
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxAxisComponent } from "./igx-axis-component";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { ensureEnum } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent category angle axis. Useful for displaying radial categories.
*/
var IgxProportionalCategoryAngleAxisComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxProportionalCategoryAngleAxisComponent, _super);
    function IgxProportionalCategoryAngleAxisComponent() {
        return _super.call(this) || this;
    }
    IgxProportionalCategoryAngleAxisComponent.prototype.createImplementation = function () {
        return new ProportionalCategoryAngleAxis();
    };
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "valueMemberPath", {
        /**
         * Gets or sets the Value mapping property for the axis.
        */
        get: function () {
            return this.i.og;
        },
        set: function (v) {
            this.i.og = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "normalizationMayContainUnknowns", {
        get: function () {
            return this.i.normalizationMayContainUnknowns;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "othersCategoryThreshold", {
        /**
         * Gets or sets the threshold value that determines if categories are grouped into the Others category.
        */
        get: function () {
            return this.i.n7;
        },
        set: function (v) {
            this.i.n7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "othersCategoryType", {
        /**
         * Gets or sets whether to use numeric or percent-based threshold value.
        */
        get: function () {
            return this.i.nu;
        },
        set: function (v) {
            this.i.nu = ensureEnum(OthersCategoryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "othersCategoryText", {
        /**
         * Gets or sets the label of the Others slice.
        */
        get: function () {
            return this.i.oa;
        },
        set: function (v) {
            this.i.oa = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "isPiecewise", {
        get: function () {
            return this.i.cl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "othersValue", {
        get: function () {
            return this.i.othersValue;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "othersIndex", {
        get: function () {
            return this.i.othersIndex;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxProportionalCategoryAngleAxisComponent.prototype, "hasOthersCategory", {
        get: function () {
            return this.i.hasOthersCategory;
        },
        enumerable: false,
        configurable: true
    });
    IgxProportionalCategoryAngleAxisComponent.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.fy(item, memberPathName);
        return (iv);
    };
    /**
     * Gets a scaled value inside the viewport.
    
    * @param unscaledValue  * Value to scale.
    * @param p  * Scaler parameters
    */
    IgxProportionalCategoryAngleAxisComponent.prototype.getScaledAngle = function (unscaledAngle) {
        var iv = this.i.getScaledAngle(unscaledAngle);
        return (iv);
    };
    /**
     * Returns an unscaled value from a scaled value based on the amount of data.
    
    * @param scaledValue  * Scaled value.
    * @param p  * Scaler parameters
    */
    IgxProportionalCategoryAngleAxisComponent.prototype.getUnscaledAngle = function (scaledAngle) {
        var iv = this.i.getUnscaledAngle(scaledAngle);
        return (iv);
    };
    IgxProportionalCategoryAngleAxisComponent.prototype.isOthersValue = function (index) {
        var iv = this.i.isOthersValue(index);
        return (iv);
    };
    IgxProportionalCategoryAngleAxisComponent.prototype.getValueLabel = function (value) {
        var iv = this.i.ge(value);
        return (iv);
    };
    IgxProportionalCategoryAngleAxisComponent.prototype.getNormalizingValueAtIndex = function (index, fallbackValue) {
        var iv = this.i.getNormalizingValueAtIndex(index, fallbackValue);
        return (iv);
    };
    IgxProportionalCategoryAngleAxisComponent.prototype.getPercentageValue = function (labelIndex) {
        var iv = this.i.n6(labelIndex);
        return (iv);
    };
    IgxProportionalCategoryAngleAxisComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxProportionalCategoryAngleAxisComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxProportionalCategoryAngleAxisComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxProportionalCategoryAngleAxisComponent, selector: "igx-proportional-category-angle-axis", inputs: { valueMemberPath: "valueMemberPath", othersCategoryThreshold: "othersCategoryThreshold", othersCategoryType: "othersCategoryType", othersCategoryText: "othersCategoryText" }, providers: [{ provide: IgxCategoryAngleAxisComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxProportionalCategoryAngleAxisComponent;
}(IgxCategoryAngleAxisComponent));
export { IgxProportionalCategoryAngleAxisComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxProportionalCategoryAngleAxisComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-proportional-category-angle-axis',
                    template: "",
                    providers: [{ provide: IgxCategoryAngleAxisComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }, { provide: IgxCategoryAxisBaseComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }, { provide: IgxAxisComponent, useExisting: forwardRef(function () { return IgxProportionalCategoryAngleAxisComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { valueMemberPath: [{
                type: Input
            }], othersCategoryThreshold: [{
                type: Input
            }], othersCategoryType: [{
                type: Input
            }], othersCategoryText: [{
                type: Input
            }] } });
