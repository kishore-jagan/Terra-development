/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Component, Input } from "@angular/core";
import { TypeRegistrar } from "igniteui-angular-core";
import { TimeAxisLabelFormat } from "./TimeAxisLabelFormat";
import { toSpinal, initializePropertiesFromCss } from "igniteui-angular-core";
import * as i0 from "@angular/core";
var IgxTimeAxisLabelFormatComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgxTimeAxisLabelFormatComponent() {
        this._renderer = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._zoneRunner = null;
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgxTimeAxisLabelFormatComponent.prototype.onImplementationCreated = function () {
    };
    IgxTimeAxisLabelFormatComponent.prototype.createImplementation = function () {
        return new TimeAxisLabelFormat();
    };
    IgxTimeAxisLabelFormatComponent.prototype.ngOnInit = function () {
    };
    IgxTimeAxisLabelFormatComponent.prototype._provideRenderer = function (renderer) {
        this._renderer = renderer;
        this._zoneRunner = function (act) { return renderer._ngZone.run(act); };
    };
    IgxTimeAxisLabelFormatComponent._createFromInternal = function (internal) {
        if (!internal) {
            return null;
        }
        if (!internal.$type) {
            return null;
        }
        var name = internal.$type.name;
        var externalName = "Igx" + name + "Component";
        if (!TypeRegistrar.isRegistered(externalName)) {
            return null;
        }
        return TypeRegistrar.create(externalName);
    };
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "range", {
        /**
     * The visible axis range at which to apply this label format.
    *
    * The `Range` property provide the visible axis range at which to apply this label format.
    *
    * ```ts
    * let labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "hh:mm:ss";
    * labelFormat.range = 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "hh:mm";
    * labelFormat.range = 60 * 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * labelFormat = new TimeAxisLabelFormat();
    * labelFormat.format = "MMM-dd-yy";
    * labelFormat.range = 24 * 60 * 60 * 1000;
    * this.xAxis.labelFormats.add(labelFormat);
    * ```
    *
    * ```html
    * <igx-data-chart
    *     [dataSource]="data">
    * 	<igx-time-x-axis
    * 		[labelFormats]="labelFormats"
    * 		dateTimeMemberPath="time"
    * 		#xAxis>
    *     </igx-time-x-axis>
    * </igx-data-chart>
    * ```
    */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            this.i.o = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "format", {
        /**
         * The DateTime format string to apply.
         * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
        *
        * The `Format` property provide the DateTime format string to apply.
        *
        * ```ts
        * let labelFormat = new TimeAxisLabelFormat();
        * labelFormat.format = "hh:mm:ss";
        * labelFormat.range = 1000;
        * this.xAxis.labelFormats.add(labelFormat);
        * labelFormat = new TimeAxisLabelFormat();
        * labelFormat.format = "hh:mm";
        * labelFormat.range = 60 * 1000;
        * this.xAxis.labelFormats.add(labelFormat);
        * labelFormat = new TimeAxisLabelFormat();
        * labelFormat.format = "MMM-dd-yy";
        * labelFormat.range = 24 * 60 * 60 * 1000;
        * this.xAxis.labelFormats.add(labelFormat);
        * ```
        *
        * ```html
        * <igx-data-chart
        *     [dataSource]="data">
        * 	<igx-time-x-axis
        * 		[labelFormats]="labelFormats"
        * 		dateTimeMemberPath="time"
        * 		#xAxis>
        *     </igx-time-x-axis>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.e;
        },
        set: function (v) {
            this.i.e = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "repeatedYearFormat", {
        /**
         * The DateTime format string to apply, if the year is repeated from the prior date.
         * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            this.i.l = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "repeatedMonthFormat", {
        /**
         * The DateTime format string to apply, if the month is repeated from the prior date.
         * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            this.i.j = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "repeatedDayFormat", {
        /**
         * The DateTime format string to apply, if the day is repeated from the prior date.
         * Some common DateTime format strings are: yyyy, MM/dd/yy, and hh:mm:ss.
        */
        get: function () {
            return this.i.h;
        },
        set: function (v) {
            this.i.h = v;
        },
        enumerable: false,
        configurable: true
    });
    IgxTimeAxisLabelFormatComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        return null;
    };
    Object.defineProperty(IgxTimeAxisLabelFormatComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgxTimeAxisLabelFormatComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxTimeAxisLabelFormatComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("TimeAxisLabelFormatComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    IgxTimeAxisLabelFormatComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    IgxTimeAxisLabelFormatComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxTimeAxisLabelFormatComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxTimeAxisLabelFormatComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxTimeAxisLabelFormatComponent, selector: "igx-time-axis-label-format", inputs: { range: "range", format: "format", repeatedYearFormat: "repeatedYearFormat", repeatedMonthFormat: "repeatedMonthFormat", repeatedDayFormat: "repeatedDayFormat" }, providers: [], ngImport: i0, template: "", isInline: true });
    return IgxTimeAxisLabelFormatComponent;
}());
export { IgxTimeAxisLabelFormatComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxTimeAxisLabelFormatComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-time-axis-label-format',
                    template: "",
                    providers: []
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { range: [{
                type: Input
            }], format: [{
                type: Input
            }], repeatedYearFormat: [{
                type: Input
            }], repeatedMonthFormat: [{
                type: Input
            }], repeatedDayFormat: [{
                type: Input
            }] } });
