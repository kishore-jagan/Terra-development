/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { markType, typeCast, Point_$type, runOn, delegateCombine, enumGetBox, markDep } from "igniteui-angular-core";
import { isNaN_, intDivide, isInfinity } from "igniteui-angular-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-angular-core";
import { TrendLineType_$type } from "igniteui-angular-core";
import { Brush } from "igniteui-angular-core";
import { PenLineCap_$type } from "igniteui-angular-core";
import { DoubleCollection } from "igniteui-angular-core";
import { RadialFrame } from "./RadialFrame";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-angular-core";
import { FastItemCoalescingColumn } from "./FastItemCoalescingColumn";
import { ProportionalCategoryAngleAxis } from "./ProportionalCategoryAngleAxis";
import { List$1 } from "igniteui-angular-core";
import { SeriesLayerPropertyOverlay } from "./SeriesLayerPropertyOverlay";
import { DataLegendSeriesValueInfo } from "igniteui-angular-core";
import { DataLegendSeriesContext } from "igniteui-angular-core";
import { AxisRange } from "./AxisRange";
import { IFastItemsSource_$type } from "igniteui-angular-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { RadialBaseView } from "./RadialBaseView";
import { CollisionAvoider } from "./CollisionAvoider";
import { Clipper } from "igniteui-angular-core";
import { TrendResolutionParams } from "./TrendResolutionParams";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-angular-core";
import { stringIsNullOrEmpty } from "igniteui-angular-core";
/**
 * @hidden
 */
var AnchoredRadialBucketCalculator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredRadialBucketCalculator, _super);
    function AnchoredRadialBucketCalculator(a) {
        var _this = _super.call(this, a) || this;
        _this.f = null;
        _this.f = a;
        return _this;
    }
    AnchoredRadialBucketCalculator.prototype.getBucket = function (a) {
        var b = this.f.c1.abx;
        var c = Math.min(a * this.b, b.count - 1);
        var d = Math.min(c + this.b - 1, b.count - 1);
        var e = NaN;
        var f = NaN;
        for (var g = c; g <= d; ++g) {
            var h = b.item(g);
            if (!isNaN_(e)) {
                if (!isNaN_(h)) {
                    e = Math.min(e, h);
                    f = Math.max(f, h);
                }
            }
            else {
                e = h;
                f = h;
            }
        }
        if (!isNaN_(e)) {
            return [0.5 * (c + d), e, f, 0];
        }
        return [0.5 * (c + d), NaN, NaN, 0];
    };
    AnchoredRadialBucketCalculator.$t = markType(AnchoredRadialBucketCalculator, 'AnchoredRadialBucketCalculator', RadialBucketCalculator.$);
    return AnchoredRadialBucketCalculator;
}(RadialBucketCalculator));
export { AnchoredRadialBucketCalculator };
/**
 * @hidden
 */
var AnchoredRadialSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredRadialSeries, _super);
    function AnchoredRadialSeries() {
        var _this = _super.call(this) || this;
        _this.abs = null;
        _this.ab2 = false;
        _this.abw = null;
        _this.adc = { $type: Point_$type, x: 0, y: 0 };
        _this.abu = null;
        _this.abt = null;
        _this.aby = false;
        _this.abu = new RadialFrame(3);
        _this.abs = new CategoryLineRasterizer();
        return _this;
    }
    AnchoredRadialSeries.prototype.cq = function () {
        return new AnchoredRadialSeriesView(this);
    };
    AnchoredRadialSeries.prototype.o0 = function () {
        _super.prototype.o0.call(this);
        this.yr = null;
        this.yw = null;
    };
    AnchoredRadialSeries.prototype.mc = function () {
        return AnchoredRadialSeries.$$p[4];
    };
    AnchoredRadialSeries.prototype.ko = function (a, b) {
        var c = this.nb(b);
        if (c == AnchoredRadialSeries.$$p[4]) {
            return this.kp(a, b, this.acm);
        }
        if (c == AnchoredRadialSeries.$$p[0]) {
            return this.kp(a, b, this.ace);
        }
        return _super.prototype.ko.call(this, a, b);
    };
    AnchoredRadialSeries.prototype.mb = function (a) {
        var b = this.nb(a);
        if (b == AnchoredRadialSeries.$$p[4]) {
            return this.acm;
        }
        if (b == AnchoredRadialSeries.$$p[0]) {
            return this.ace;
        }
        return _super.prototype.mb.call(this, a);
    };
    AnchoredRadialSeries.prototype.ja = function (a) {
        if (a == this.yy) {
            return this.z0(this.abx.count - 1, this.abx.item(this.abx.count - 1));
        }
        return _super.prototype.ja.call(this, a);
    };
    AnchoredRadialSeries.prototype.kr = function (a) {
        if (this.yr != null && this.yr.cl) {
            if (a == this.yr.lh - 1) {
                return this.yy;
            }
        }
        return _super.prototype.kr.call(this, a);
    };
    AnchoredRadialSeries.prototype.qx = function (a) {
        _super.prototype.qx.call(this, a);
        this.abr = a;
    };
    AnchoredRadialSeries.prototype.j8 = function (a, b) {
        return this.j9(a, b, this.yr, null, this.abx);
    };
    AnchoredRadialSeries.prototype.j6 = function (a, b) {
        return this.j7(a, b, this.yr, null, this.abx);
    };
    AnchoredRadialSeries.prototype.im = function (a, b, c, d, e) {
        if (this.abx == null) {
            return Number.POSITIVE_INFINITY;
        }
        return this.io(a, b, this.yr, d, e, this.abx.count, null);
    };
    AnchoredRadialSeries.prototype.i3 = function (a, b, c) {
        var d = this.getEffectiveViewport1(this.ct);
        var e = this.ab8(this.yr, this.ct.by, this.ct.bx, d);
        var f = new ScalerParams(0, this.ct.by, this.ct.bx, this.yr.ch, d);
        f.c = this.c9.v0;
        var g = this.abx;
        if (this.ab2 && typeCast(FastItemCoalescingColumn.$, g) !== null) {
            g = new FastItemCoalescingColumn(this.yr, g.c, false);
        }
        return this.i5(g, a, this.yr, f, e, null, b, c);
    };
    AnchoredRadialSeries.prototype.v6 = function (a, b, c) {
        if (this.yw == null || this.yr == null || this.ct == null || this.ct.by.isEmpty || this.ct.bx.isEmpty) {
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        var d = this.getEffectiveViewport1(this.ct);
        var e = new ScalerParams(0, this.ct.by, this.ct.bx, this.yw.ch, d);
        e.c = this.getEffectiveViewport1(this.ct);
        var f = this.i3(a, b, c);
        f = this.yw.ek(f, e);
        var g = this.yz.c(a, this.ct.by, this.ct.bx, d);
        if (!b && this.yr != null) {
            var h = this.j8(a, c);
            var i = this.j6(a, c);
            var j = this.ab8(this.yr, this.ct.by, this.ct.bx, d);
            var k = new ScalerParams(0, this.ct.by, this.ct.bx, this.yr.ch, d);
            k.c = this.c9.v0;
            var l = this.im(a, h, this.yr, k, j);
            var m = this.im(a, i, this.yr, k, j);
            if (this.yr.cl) {
                if (m <= l) {
                    j = this.ab7(i, this.yr, this.ct.by, this.ct.bx, d);
                    if (isNaN_(j)) {
                        j = 0;
                    }
                    g = this.yr.ek(i, k) + j;
                }
                else {
                    j = this.ab7(h, this.yr, this.ct.by, this.ct.bx, d);
                    if (isNaN_(j)) {
                        j = 0;
                    }
                    g = this.yr.ek(h, k) + j;
                }
            }
            else {
                if (m <= l) {
                    g = this.yr.ek(i, k) + j;
                }
                else {
                    g = this.yr.ek(h, k) + j;
                }
            }
        }
        var n = this.yz.d(g, f, this.ct.by, this.ct.bx, this.ct.getEffectiveViewport());
        var o = this.yz.e(g, f, this.ct.by, this.ct.bx, this.ct.getEffectiveViewport());
        return { $type: Point_$type, x: n, y: o };
    };
    AnchoredRadialSeries.prototype.f9 = function () {
        return this.highlightedItemsSource != null || this.ace != null;
    };
    AnchoredRadialSeries.prototype.hr = function () {
        var a = _super.prototype.hr.call(this);
        {
            var b = ((function () {
                var $ret = new SeriesLayerPropertyOverlay();
                $ret.ad = "ValueMemberPath";
                $ret.p = true;
                $ret.y = "HighlightedValueMemberPath";
                $ret.q = true;
                return $ret;
            })());
            b.valueResolving = delegateCombine(b.valueResolving, runOn(this, this.acr));
            a.add(b);
        }
        return a;
    };
    AnchoredRadialSeries.prototype.acr = function (a, b) {
        if (this.ace != null) {
            b.value = this.ace;
            return;
        }
        b.value = this.acm;
    };
    Object.defineProperty(AnchoredRadialSeries.prototype, "abx", {
        get: function () {
            return this.abw;
        },
        set: function (a) {
            if (this.abw != a) {
                var b = this.abw;
                this.abw = a;
                this.raisePropertyChanged("ValueColumn", b, this.abw);
            }
        },
        enumerable: false,
        configurable: true
    });
    AnchoredRadialSeries.prototype.getDataLegendSeriesContextAt = function (a, b) {
        var c = new DataLegendSeriesValueInfo();
        c.a = 0;
        this.ab2 = true;
        c.l = this.i3({ $type: Point_$type, x: a, y: b }, false, false);
        this.ab2 = false;
        c.q = "Value";
        c.r = this.acm != null ? this.acm : "Value";
        c.s = this.aci != null ? this.aci : "V:";
        c.t = this.ack != null ? this.ack : "";
        var d = new DataLegendSeriesContext();
        d.e = ((function () {
            var $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
            $ret.add(c);
            return $ret;
        })());
        d.h = this.ma();
        return d;
    };
    Object.defineProperty(AnchoredRadialSeries.prototype, "ac8", {
        get: function () {
            return this.c(AnchoredRadialSeries.acv);
        },
        set: function (a) {
            this.h(AnchoredRadialSeries.acv, a);
        },
        enumerable: false,
        configurable: true
    });
    AnchoredRadialSeries.prototype.ax = function (a) {
        if (a != null && a == this.yr && this.abx != null && this.abx.count > 0) {
            return new AxisRange(0, this.abx.count - 1);
        }
        if (a != null && a == this.yw && this.abx != null && this.abx.count > 0) {
            return new AxisRange(this.abx.minimum, this.abx.maximum);
        }
        return null;
    };
    AnchoredRadialSeries.prototype.z0 = function (a, b) {
        if (this.ab6) {
            var c = this.abx.c;
            if (a < 0) {
                return _super.prototype.z0.call(this, a, b);
            }
            if (a > c.count - 1) {
                if (typeCast(ProportionalCategoryAngleAxis.$, this.yr) !== null) {
                    var d = this.abx;
                    return d.f;
                }
                return _super.prototype.z0.call(this, a, b);
            }
            return c.item(a);
        }
        else {
            return _super.prototype.z0.call(this, a, b);
        }
    };
    AnchoredRadialSeries.prototype.di = function (a) {
        var b = _super.prototype.di.call(this, a);
        this.aby = false;
        if (this.yr != null && this.yr.cl) {
            this.aby = true;
            b = new FastItemCoalescingColumn(this.yr, b, this.ab6);
        }
        return b;
    };
    AnchoredRadialSeries.prototype.acq = function (a, b) {
        if (this.aby) {
            var c = b;
            var d = c.c;
            a.deregisterColumn(d);
        }
        else {
            a.deregisterColumn(b);
        }
    };
    AnchoredRadialSeries.prototype.q5 = function (a, b, c, d) {
        _super.prototype.q5.call(this, a, b, c, d);
        if (this.abr.c2.g$b(a, b, c, d)) {
            this.rn(false);
            this.qh();
        }
        var e = typeCast(NumericAxisBase.$, this.yw);
        switch (b) {
            case AnchoredRadialSeries.$$p[2]:
            case AnchoredRadialSeries.$$p[3]:
                this.qb();
                break;
            case AnchoredRadialSeries.$$p[1]:
            case RadialBase.$$p[0]:
                if (this.abx != null) {
                    this.acq(this.dl, this.abx);
                    this.abx = this.di(this.acm);
                }
                break;
            case "FastItemsSource":
                if (typeCast(IFastItemsSource_$type, c) !== null) {
                    this.acq(c, this.abx);
                    this.abx = null;
                }
                if (typeCast(IFastItemsSource_$type, d) !== null) {
                    this.abx = this.di(this.acm);
                    this.abr.cx.e(this.ib);
                }
                if (e != null && !e.c1()) {
                    this.abr.cx.e(this.ib);
                    this.rn(this.ge && c != null);
                }
                break;
            case AnchoredRadialSeries.$$p[4]:
                if (this.dl != null) {
                    this.acq(this.dl, this.abx);
                    this.abx = this.di(this.acm);
                }
                break;
            case "ValueColumn":
                if (e != null && !e.c1()) {
                    this.abr.cx.e(this.ib);
                    this.rn(this.ge && this.d5);
                }
                break;
            case "TrendLineBrush":
                this.rb(b);
                break;
            case "TrendLineType":
                this.qh();
                break;
        }
    };
    AnchoredRadialSeries.prototype.o9 = function (a, b, c, d) {
        _super.prototype.o9.call(this, a, b, c, d);
        switch (a) {
            case 4:
            case 1:
            case 0:
                this.abr.cx.e(this.ib);
                break;
        }
        this.abr.c2.g$e(a, b, c, d);
        switch (a) {
            case 4:
                if (this.yw != null && !this.yw.c1()) {
                    this.rn(true);
                }
                break;
            case 1:
                if (this.yw != null && !this.yw.c1()) {
                    this.rn(true);
                }
                break;
            case 0:
                if (this.yw != null && !this.yw.c1()) {
                    this.rn(true);
                }
                break;
            case 2:
                if (this.acm != null && this.abr.cx.b > 0 && this.yw != null && !this.yw.c1()) {
                    this.rn(true);
                }
                break;
            case 3:
                if (d == this.acm) {
                    if (this.yw != null && !this.yw.c1()) {
                        this.rn(true);
                    }
                }
                break;
        }
    };
    AnchoredRadialSeries.prototype.hc = function (a, b, c) {
        var d = _super.prototype.hc.call(this, a, b, c);
        var e = c;
        if (this.dl == null || this.dl.count == 0 || this.yr == null || this.abx == null || this.yr.lg == 0 || this.yw == null || isInfinity(this.yw.ly) || isInfinity(this.yw.lx) || e.cx.b < 1) {
            d = false;
        }
        return d;
    };
    AnchoredRadialSeries.prototype.getOffsetValue = function () {
        return this.ab8(this.yr, this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
    };
    AnchoredRadialSeries.prototype.getCategoryWidth = function () {
        return this.yr.getCategorySize(this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
    };
    AnchoredRadialSeries.prototype.get_ab3 = function () {
        return false;
    };
    Object.defineProperty(AnchoredRadialSeries.prototype, "ab3", {
        get: function () {
            return this.get_ab3();
        },
        enumerable: false,
        configurable: true
    });
    AnchoredRadialSeries.prototype.get_ei = function () {
        return true;
    };
    AnchoredRadialSeries.prototype.get_f3 = function () {
        return this.yw != null && this.yw.ch;
    };
    AnchoredRadialSeries.prototype.ab8 = function (a, b, c, d) {
        var e = 0;
        var f = this.preferredCategoryMode(a);
        if (f == 0 && a.categoryMode != 0) {
            f = 1;
        }
        switch (f) {
            case 0:
                e = 0;
                break;
            case 1:
                e = 0.5 * a.getCategorySize(b, c, d);
                break;
            case 2:
                e = a.getGroupCenter(this.zz(), b, c, d);
                break;
        }
        if (a.ch) {
            e = -e;
        }
        return e;
    };
    AnchoredRadialSeries.prototype.ab7 = function (a, b, c, d, e) {
        var f = 0;
        var g = this.preferredCategoryMode(b);
        if (g == 0 && b.categoryMode != 0) {
            g = 1;
        }
        switch (g) {
            case 0:
                f = 0;
                break;
            case 1:
                f = 0.5 * b.m4(a, c, d, e);
                break;
            case 2:
                f = b.m3(a, this.zz(), c, d, e);
                break;
        }
        if (b.ch) {
            f = -f;
        }
        return f;
    };
    AnchoredRadialSeries.prototype.get_ab5 = function () {
        return false;
    };
    Object.defineProperty(AnchoredRadialSeries.prototype, "ab5", {
        get: function () {
            return this.get_ab5();
        },
        enumerable: false,
        configurable: true
    });
    AnchoredRadialSeries.prototype.get_abz = function () {
        return false;
    };
    Object.defineProperty(AnchoredRadialSeries.prototype, "abz", {
        get: function () {
            return this.get_abz();
        },
        enumerable: false,
        configurable: true
    });
    AnchoredRadialSeries.prototype.aaz = function (a, b) {
        var _this = this;
        var c = b.by;
        var d = b.bx;
        var e = this.getEffectiveViewport1(b);
        var f = this.yr;
        var g = this.yw;
        var h = g.ly;
        var i = g.lx;
        a.f.clear();
        a.n.clear();
        a.q.clear();
        var j = this.w8();
        var k = 0;
        var l = b;
        var m = f.cl;
        var n = new CollisionAvoider();
        var o = 0;
        var p = 0;
        var q = b.cx.d;
        o = this.ab8(f, c, d, e);
        l.c2.i = this.yw.np;
        l.c2.h = this.yw.no;
        l.c2.j = function (r, s) { return _this.ab9(r, s, c, d, e); };
        l.c2.k = function (r, s) { return _this.aca(r, s, c, d, e); };
        var r = ((function () {
            var $ret = new Clipper(0, d, false);
            $ret.i = a.q;
            return $ret;
        })());
        var s = ((function () {
            var $ret = new TrendResolutionParams();
            $ret.e = b.cx.b;
            $ret.f = b.cx.c;
            $ret.g = q;
            $ret.a = o;
            $ret.d = _this.ib;
            $ret.i = d;
            $ret.h = e;
            $ret.j = c;
            return $ret;
        })());
        l.c2.l(a.q, this.abv, this.abx, this.acc, function (t) { return _this.yr.getScaledAngle(t); }, function (t) { return _this.yw.nv(t); }, s, r);
        var t = true;
        if (this.ab4(b)) {
            q--;
        }
        for (var u = b.cx.c; u <= q; ++u) {
            var v = u;
            if (v * b.cx.b >= this.yr.lg) {
                v -= intDivide((this.yr.lg), b.cx.b);
            }
            var w = b.cx.getBucket(v);
            p = 0;
            if (m) {
                p = this.zr(v, c, d, e);
            }
            w[3] = p;
            if (!isNaN_(w[0])) {
                var x = false;
                if (m) {
                    o = this.ab7(v, f, c, d, e);
                    if (isNaN_(o)) {
                        o = 0;
                        x = true;
                    }
                }
                w[0] = f.getScaledAngle(w[0]) + o;
                if (w[1] < h || w[1] > i) {
                    if (this.ab5) {
                        if (w[1] > i && this.abz) {
                        }
                        else {
                            x = true;
                        }
                    }
                    else {
                        if (w[1] > i && this.abz) {
                        }
                        else {
                            continue;
                        }
                    }
                }
                if (x) {
                    w[1] = NaN;
                    w[2] = NaN;
                }
                w[1] = g.nv(w[1]);
                if (b.cx.b > 1) {
                    if (w[2] < h || w[2] > i) {
                        continue;
                    }
                    w[2] = g.nv(w[2]);
                }
                else {
                    w[2] = w[1];
                }
                if ((isNaN_(w[1]) || isNaN_(w[2])) && t && this.ab3 && this.ab1()) {
                    q++;
                }
                else {
                    t = false;
                }
                a.f.add(w);
                if (j) {
                    var y = Math.min(v * b.cx.b, this.dl.count - 1);
                    var z = false;
                    if (this.yr.cl) {
                        var aa = this.yr;
                        var ab = aa.hasOthersCategory && (v * b.cx.b) == this.yr.lg - 1;
                        z = ab;
                    }
                    var ac = this.yz.d(w[0], w[1], c, d, e);
                    var ad = this.yz.e(w[0], w[1], c, d, e);
                    var ae = new Rect(0, ac - 5, ad - 5, 11, 11);
                    if (!isNaN_(ac) && !isNaN_(ad) && !isInfinity(ac) && !isInfinity(ad) && n.tryAdd(ae)) {
                        a.n.add({ $type: Point_$type, x: w[0], y: w[1] });
                        var af = b.cy.item(k);
                        af.al = v;
                        af.ak = y;
                        af.content.item = this.dl.item(y);
                        if (z) {
                            af.ak = this.dl.count;
                            var ag = this.yr;
                            af.content.item = this.yy;
                        }
                        ++k;
                    }
                }
            }
            else {
                if (t && this.ab3 && this.ab1()) {
                    q++;
                }
            }
        }
        b.cy.count = k;
        return;
    };
    AnchoredRadialSeries.prototype.ab9 = function (a, b, c, d, e) {
        return this.yz.d(a, b, c, d, e);
    };
    AnchoredRadialSeries.prototype.aca = function (a, b, c, d, e) {
        return this.yz.e(a, b, c, d, e);
    };
    AnchoredRadialSeries.prototype.ab4 = function (a) {
        var b = a;
        return !this.ab3 && b.cx.c == 0 && b.cx.d == this.yr.lg;
    };
    AnchoredRadialSeries.prototype.abq = function (a, b, c) {
        var d = null;
        var e = c.by;
        var f = c.bx;
        if (b > -1 && !e.isEmpty && !f.isEmpty) {
            var g = a._inner[0][0] < f.left - 2000 ? f.left - 10 : NaN;
            var h = f.bottom + 10;
            var i = a._inner[b][0] > f.right + 2000 ? f.right + 10 : NaN;
            var j = f.top - 10;
            d = new Clipper(1, g, h, i, j, false);
        }
        return d;
    };
    AnchoredRadialSeries.prototype.acu = function (a, b, c, d, e) {
        if (a.count > 0 && d.count > 0) {
            if (!e || this.ab0()) {
                a.add(this.adc);
                a.add(a._inner[0]);
                d.add(this.adc);
                d.add(d._inner[0]);
            }
        }
    };
    AnchoredRadialSeries.prototype.ab1 = function () {
        return !this.ab0();
    };
    AnchoredRadialSeries.prototype.ab0 = function () {
        var a = this.ct.by;
        return !a.containsPoint({ $type: Point_$type, x: 0.5, y: 0.5 });
    };
    AnchoredRadialSeries.prototype.o3 = function (a, b) {
        _super.prototype.o3.call(this, a, b);
        var c = b;
        if (a) {
            c.cy.clear();
        }
        c.c2.g$d();
    };
    AnchoredRadialSeries.prototype.aa2 = function (a, b) {
        this.qt();
        var c = b.by;
        var d = b.bx;
        var e = this.getEffectiveViewport1(b);
        var f = this.wd(b);
        var g = b;
        g.c2.g$g(a.q);
        var h = new List$1(Point_$type, 0);
        for (var i = 0; i < a.n.count; i++) {
            var j = a.n._inner[i];
            var k = this.yz.d(j.x, j.y, c, d, e);
            var l = this.yz.e(j.x, j.y, c, d, e);
            var m = { $type: Point_$type, x: k, y: l };
            h.add(m);
        }
        CategoryMarkerManager.e(this, h, g.cy, this.xa);
        this.acp(b, a);
        g.cr();
        this.aco(d, c, e, f, g);
    };
    AnchoredRadialSeries.prototype.abp = function (a, b, c) {
        if (b < a || a < 0 || a > this.abx.count || b < 0 || b > this.abx.count || c == null) {
            return null;
        }
        var d = new Array((b - a) + 1);
        var e = c.cn;
        var f = null;
        if (e) {
            f = c.i$b;
        }
        for (var g = a; g <= b; g++) {
            var h = g;
            if (e) {
                h = f._inner[h];
            }
            d[g - a] = this.dl.item(g);
        }
        return d;
    };
    AnchoredRadialSeries.prototype.acs = function (a, b, c, d, e, f) {
        var g = this.bv != 1;
        var h = this.cn != 1;
        var i = this.cm != 1;
        var j = this.d0;
        this.y7.a3(this.y7.d, d.cn, a, b, c, d, e, f, true);
        this.y7.aa(this.h9);
        var k = this.y7.ax;
        var l = null;
        var m = null;
        var n = null;
        var o = this.dl;
        var p = null;
        var q = null;
        var r = null;
        if (j && this.c9 != null && !k.e) {
            var s = this.vi(k.z);
            var t = this.vj(k.z);
            this.y7.ag = s;
            this.y7.ah = t;
            k.aa = s;
            k.ab = t;
        }
        if (g && this.c9 != null) {
            l = this.c9.dj.getHighlightingInfo(this, o, k.z, k.y, true);
            if (this.c9.dj.isCrossContextHighlight(this)) {
                p = this.c9.dj.getHighlightingInfo(this, o, k.z, k.y, true);
            }
            k.c = l;
        }
        if (h && this.c9 != null) {
            m = this.c9.dk.getHighlightingInfo(this, o, k.z, k.y, true);
            if (m == null && this.bl != null) {
                m = this.c9.dk.getHighlightingInfo(this.bl, this.bl.dl, k.z, k.y, true);
            }
            if (this.c9.dk.isCrossContextHighlight(this)) {
                q = this.c9.dk.getHighlightingInfo(this, o, k.z, k.y, true);
            }
            k.d = m;
        }
        if (i && this.c9 != null) {
            n = this.c9.di.getHighlightingInfo(this, o, k.z, k.y, true);
            if (this.c9.di.isCrossContextHighlight(this)) {
                r = this.c9.di.getHighlightingInfo(this, o, k.z, k.y, true);
            }
            k.b = n;
        }
        k.h = f;
        this.aa0(k);
        this.y7.y(this, l, m, n, f, g, h, i, k.v, this.c9.dj.totalHighWaterMark, k.x, this.c9.dk.totalHighWaterMark, k.t, this.c9.di.totalHighWaterMark);
    };
    AnchoredRadialSeries.prototype.act = function (a, b, c, d, e, f) {
        var g = this.bv != 1;
        var h = this.cn != 1;
        var i = this.cn != 1;
        var j = this.d0;
        this.y7.a3(this.y7.b, d.cn, a, b, c, d, e, f, false);
        this.y7.ab(this.h9);
        var k = this.y7.ay;
        var l = null;
        var m = null;
        var n = null;
        var o = this.dl;
        if (j && this.c9 != null && !k.e) {
            var p = this.vh(k.z);
            var q = this.vk(k.z);
            this.y7.ag = p;
            this.y7.ah = q;
            k.aa = p;
            k.ab = q;
        }
        if (g && this.c9 != null) {
            l = this.c9.dj.getHighlightingInfo(this, o, k.z, k.y, false);
            k.c = l;
        }
        if (h && this.c9 != null) {
            m = this.c9.dk.getHighlightingInfo(this, o, k.z, k.y, false);
            if (m == null && this.bl != null) {
                m = this.c9.dk.getHighlightingInfo(this.bl, this.bl.dl, k.z, k.y, false);
            }
            k.d = m;
        }
        k.h = f;
        this.aa1(k);
        this.y7.z(this, l, m, n, f, g, h, i, b < 0);
    };
    AnchoredRadialSeries.prototype.acp = function (a, b) {
        a.b7 = true;
        this.y7.a1(this, this.zn(), runOn(this, this.yf), this.zx(a), this.zy(a));
        var c = this.y7.d;
        var d = c != null;
        var e = this.yr;
        if (e == null) {
            return;
        }
        var f = this.getEffectiveViewport1(a);
        var g = new ScalerParams(0, a.by, a.bx, e.ch, f);
        var h = this.dl == null ? 0 : this.dl.count;
        var i = a;
        var j = b.f;
        var k = i.cx.c;
        var l = i.cx.d;
        var m = i.cx.b;
        var n = k * m;
        for (var o = 0; o < a.cy.count; o++) {
            var p = a.cy.item(o);
            var q = p.content;
            if (d) {
                var r = p.al;
                this.acs(j, r, h, e, g, a.q);
            }
            this.y7.ac(p, q);
        }
    };
    AnchoredRadialSeries.prototype.aco = function (a, b, c, d, e) {
        e.c3(a, b, c, d);
    };
    AnchoredRadialSeries.prototype.sb = function () {
        _super.prototype.sb.call(this);
        if (this.index < 0) {
            return;
        }
        this.abr.c4();
    };
    AnchoredRadialSeries.prototype.kv = function (a, b) {
        if (a == this.abr.c2.g$j) {
            return null;
        }
        return _super.prototype.kv.call(this, a, b);
    };
    AnchoredRadialSeries.prototype.gb = function (a) {
        var b = this.ct.by;
        b = b.copy();
        var c = this.ct.bx;
        var d = !b.isEmpty && !c.isEmpty && this.dl != null ? this.dl.indexOf(a) : -1;
        if (this.yr == null || this.abx == null || this.yw == null) {
            return false;
        }
        if (d < 0 || d > this.abx.count - 1) {
            return false;
        }
        var e = this.yr.getScaledAngle(d);
        var f = this.yw.nv(this.abx.item(d));
        if (isNaN_(f)) {
            f = (this.yw.no + this.yw.np) / 2;
        }
        var g = 0.5 + (Math.cos(e) * f);
        var h = 0.5 + (Math.sin(e) * f);
        if (!isNaN_(g)) {
            if (g < b.left + 0.1 * b.width) {
                g = g + 0.4 * b.width;
                b.x = g - 0.5 * b.width;
            }
            if (g > b.right - 0.1 * b.width) {
                g = g - 0.4 * b.width;
                b.x = g - 0.5 * b.width;
            }
        }
        if (!isNaN_(h)) {
            if (h < b.top + 0.1 * b.height) {
                h = h + 0.4 * b.height;
                b.y = h - 0.5 * b.height;
            }
            if (h > b.bottom - 0.1 * b.height) {
                h = h - 0.4 * b.height;
                b.y = h - 0.5 * b.height;
            }
        }
        if (this.c1 != null) {
            this.c1.au(this.c9, b, true);
        }
        return d >= 0;
    };
    AnchoredRadialSeries.prototype.rp = function (a, b) {
        _super.prototype.rp.call(this, a, b);
        if (!this.gy) {
            this.ct.a4(b);
            return;
        }
        this.ct.a4(b);
        var c = typeCast(AnchoredRadialSeriesView.$, this.cs);
        c.cx.e(this.ib);
        if (this.d3(this.cs)) {
            return;
        }
        if (!this.gq) {
            this.abu = new RadialFrame(3);
            this.aaz(this.abu, c);
        }
        this.gq = false;
        this.aa2(this.abu, c);
        this.gy = false;
    };
    AnchoredRadialSeries.prototype.rm = function (a, b, c, d, e) {
        _super.prototype.rm.call(this, a, b, c, d, e);
        var f = this.a9.a$j.item(d);
        var g = f;
        g.cx.e(this.ib);
        f.a3(c);
        if (this.d3(g)) {
            return;
        }
        if (this.abt == null) {
            this.abt = new RadialFrame(3);
        }
        this.abt.v();
        this.aaz(this.abt, g);
        this.aa2(this.abt, g);
    };
    AnchoredRadialSeries.prototype.pv = function (a) {
        _super.prototype.pv.call(this, a);
        this.bb.exportTrendlineData(this, a, this.abr.c2.g$j);
    };
    AnchoredRadialSeries.$t = markType(AnchoredRadialSeries, 'AnchoredRadialSeries', RadialBase.$);
    AnchoredRadialSeries.acv = DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredRadialSeries.$, new PropertyMetadata(2, null, function (a, b) { return a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue); }));
    AnchoredRadialSeries.$$p = markDep(DependencyProperty, PropertyMetadata, AnchoredRadialSeries, 'raisePropertyChanged', ['HighlightedValueMemberPath:ace:acw', [2, null], 'UseCategoryNormalizedValues:ab6:ac4', [0, false], 'ValueMemberAsLegendLabel:aci:ac5', [2, null], 'ValueMemberAsLegendUnit:ack:ac6', [2, null], 'ValueMemberPath:acm:ac7', [2, null], 'TrendLineType:abv:ac2', [TrendLineType_$type, enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness:acb:ac1', [1, 1.5], 'TrendLinePeriod:acc:ac0', [1, 7], 'TrendLineZIndex:acd:ac3', [1, 1], 'TrendLineBrush:ac9:acx', [Brush.$, null], 'TrendLineDashArray:ada:acy', [DoubleCollection.$], 'TrendLineDashCap:adb:acz', [PenLineCap_$type, enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredRadialSeries;
}(RadialBase));
export { AnchoredRadialSeries };
/**
 * @hidden
 */
var AnchoredRadialSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnchoredRadialSeriesView, _super);
    function AnchoredRadialSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c1 = null;
        _this.c2 = null;
        _this.cx = new AnchoredRadialBucketCalculator(_this);
        _this.c1 = a;
        _this.c2 = new RadialTrendLineManager();
        return _this;
    }
    AnchoredRadialSeriesView.prototype.c3 = function (a, b, c, d) {
    };
    AnchoredRadialSeriesView.prototype.c4 = function () {
        this.c1.ac8 = null;
        if (this.c1.ac9 != null) {
            this.c1.ac8 = this.c1.ac9;
        }
        else {
            this.c1.ac8 = this.c1.u3;
        }
    };
    AnchoredRadialSeriesView.prototype.a7 = function (a, b) {
        if (a.d) {
            if (!b) {
            }
            if (this.c1.abv != 0 && !b) {
                var c = this.c2.g$j;
                c.ad = this.c1.acb;
                c._stroke = this.c1.ac8;
                c.ai = this.c1.ada;
                c.aj = this.c1.adb;
                a.v(c);
            }
        }
        _super.prototype.a7.call(this, a, b);
    };
    AnchoredRadialSeriesView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'>";
        if (this.c1.yr.f1 != null) {
            a += "<span>${item." + this.c1.yr.f1 + "}</span><br/>";
        }
        a += "<span";
        var b = this.e.a9.a$u(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.c1.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.c1.acm + "}</span></div>";
        return a;
    };
    AnchoredRadialSeriesView.$t = markType(AnchoredRadialSeriesView, 'AnchoredRadialSeriesView', RadialBaseView.$);
    return AnchoredRadialSeriesView;
}(RadialBaseView));
export { AnchoredRadialSeriesView };
