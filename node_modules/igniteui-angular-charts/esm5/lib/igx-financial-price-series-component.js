import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { TrendLineType_$type } from "igniteui-angular-core";
import { PriceDisplayType_$type } from "./PriceDisplayType";
import { IgxFinancialSeriesComponent } from "./igx-financial-series-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { FinancialPriceSeries } from "./FinancialPriceSeries";
import { ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromRect, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
 * Default required members: Open, Low, High, Close
*
* The `FinancialPriceSeries` class represents a IgxDataChartComponent financial price series that renders as Candlestick or OHLC representations.
*
* ```html
*  <igx-data-chart
*     #chart
*         [dataSource]="data" >
*  <igx-ordinal-time-x-axis
*     dateTimeMemberPath="TimeStamp"
*     #xAxis >
*     </igx-ordinal-time-x-axis>
*  <igx-numeric-y-axis
*         minimumValue="0"
*         #yAxis>
* </igx-numeric-y-axis>
* <igx-financial-price-series
*     [xAxis]="xAxis"
*       [yAxis]="yAxis"
*       openMemberPath="open"
*       highMemberPath="high"
*       lowMemberPath="low"
*       closeMemberPath="close"
*       volumeMemberPath="volume"
*       >
* </igx-financial-price-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxFinancialPriceSeriesComponent();
*    series.xAxis = this.xAxis;
*    series.yAxis = this.yAxis;
*    series.openMemberPath = "open";
*    series.highMemberPath = "high";
*    series.lowMemberPath = "low";
*    series.closeMemberPath = "close";
*    series.volumeMemberPath="volume";
*    this.chart.series.add(series);
* ```
*/
var IgxFinancialPriceSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxFinancialPriceSeriesComponent, _super);
    function IgxFinancialPriceSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxFinancialPriceSeriesComponent.prototype.createImplementation = function () {
        return new FinancialPriceSeries();
    };
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "isFinancialSeries", {
        /**
         * Gets whether the series has financial OHLC/candlestick visuals
        */
        get: function () {
            return this.i.e7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "trendLineType", {
        /**
         * Gets or sets the trend type for the current financial series.
        *
        * Use the `TrendLineType` property for the trend type of the current financial series.
        *
        * ```ts
        * series.trendLineType= "CubicFit";
        * ```
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *       trendLineType="CubicFit">
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.trendLineType;
        },
        set: function (v) {
            this.i.trendLineType = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "trendLineBrush", {
        /**
         * Gets or sets the brush to use to draw the trend line.
        *
        * Use the `TrendLineBrush` property to brush the the trend line.
        *
        * ```ts
        * series.trendLineBrush="red";
        * ```
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *      trendLineBrush="red" >
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.trendLineBrush);
        },
        set: function (v) {
            this.i.trendLineBrush = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "actualTrendLineBrush", {
        /**
         * Gets the effective TrendLineBrush for this FinancialPriceSeries.
        *
        * Use the `ActualTrendLineBrush` property to Gets the effective TrendLineBrush for the FinancialIndicator.
        */
        get: function () {
            return brushToString(this.i.ab5);
        },
        set: function (v) {
            this.i.ab5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the current FinancialPriceSeries object's trend line.
        *
        * Use the `TrendLineThickness` property for the thickness of the current FinancialPriceSeries object's trend line.
        *
        * ```ts
        * series.trendLineThickness=5;
        * ```
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *       trendLineThickness="3">
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.trendLineThickness;
        },
        set: function (v) {
            this.i.trendLineThickness = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "trendLineDashArray", {
        /**
         * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
         * is used to draw the trend line for the current FinancialPriceSeries object.
        */
        get: function () {
            return fromDoubleCollection(this.i.ab7);
        },
        set: function (v) {
            this.i.ab7 = toDoubleCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "trendLinePeriod", {
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for trend line period is 7.
        *
        * Use the `TrendLinePeriod` property for the periodo the the current series.
        *
        * ```ts
        * series.trendLinePeriod= 7;
        * ```
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *       trendLinePeriod="7">
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return this.i.trendLinePeriod;
        },
        set: function (v) {
            this.i.trendLinePeriod = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "displayType", {
        /**
         * Gets or sets the display type for the current FinancialPriceSeries object.
        *
        * Use the `DisplayType` property for the display type of the current FinancialPriceSeries object.
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *       displayType="Candlestick">
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * series.displayType=PriceDisplayType.Candlestick;
        * ```
        */
        get: function () {
            return this.i.aau;
        },
        set: function (v) {
            this.i.aau = ensureEnum(PriceDisplayType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "negativeOutline", {
        /**
         * Brush to use for outlining negative elements in the series.
        *
        * Use the `NegativeOutline` property to brush the outline negative elements in the series.
        *
        * ```ts
        * series.negativeOutline="red";
        * ```
        *
        * ```html
        *  <igx-data-chart
        *     #chart
        *         [dataSource]="data" >
        *  <igx-ordinal-time-x-axis
        *     dateTimeMemberPath="TimeStamp"
        *     #xAxis >
        *     </igx-ordinal-time-x-axis>
        *  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        * </igx-numeric-y-axis>
        * <igx-financial-price-series
        *     [xAxis]="xAxis"
        *       [yAxis]="yAxis"
        *       openMemberPath="open"
        *       highMemberPath="high"
        *       lowMemberPath="low"
        *       closeMemberPath="close"
        *       volumeMemberPath="volume"
        *       negativeOutline="Red" >
        * </igx-financial-price-series>
        * </igx-data-chart>
        * ```
        */
        get: function () {
            return brushToString(this.i.ab6);
        },
        set: function (v) {
            this.i.ab6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "lowMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' Low value in the Data Legend.
        */
        get: function () {
            return this.i.aba;
        },
        set: function (v) {
            this.i.aba = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "highMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' High value in the Data Legend.
        */
        get: function () {
            return this.i.aa6;
        },
        set: function (v) {
            this.i.aa6 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "closeMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' Close value in the Data Legend.
        */
        get: function () {
            return this.i.aa1;
        },
        set: function (v) {
            this.i.aa1 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "openMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series' Open value in the Data Legend.
        */
        get: function () {
            return this.i.abf;
        },
        set: function (v) {
            this.i.abf = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "lowMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' Low value in the Data Legend.
        */
        get: function () {
            return this.i.abc;
        },
        set: function (v) {
            this.i.abc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "highMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' High value in the Data Legend.
        */
        get: function () {
            return this.i.aa8;
        },
        set: function (v) {
            this.i.aa8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "closeMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' Close value in the Data Legend.
        */
        get: function () {
            return this.i.aa3;
        },
        set: function (v) {
            this.i.aa3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxFinancialPriceSeriesComponent.prototype, "openMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series' Open value in the Data Legend.
        */
        get: function () {
            return this.i.abh;
        },
        set: function (v) {
            this.i.abh = v;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * If possible, will return the best available value bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinate for which to get a value bounding box for
    *
    * The `GetSeriesValueBoundingBox` method return the best available value bounding box within the series that has the best value match for the world position provided.
    */
    IgxFinancialPriceSeriesComponent.prototype.getSeriesValueBoundingBox = function (world) {
        var iv = this.i.wh(toPoint(world));
        return fromRect(iv);
    };
    /**
     * Scrolls the series to display the item for the specified data item.
     * The categorySeries is scrolled by the minimum amount required to place the specified data item within
     * the central 80% of the visible axis.
    
    * @param item  * The data item (item) to scroll to.
    *
    * The `ScrollIntoView` methos scrolls the series to display the item for the specified data item.
    */
    IgxFinancialPriceSeriesComponent.prototype.scrollIntoView = function (item) {
        var iv = this.i.gb(item);
        return (iv);
    };
    /**
     * For a category plotted series, returns the current width of the items within the categories. This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned.
    
    *
    * The `GetItemSpan` method is used For a category plotted series, returns the current width of the items within the categories.
    *
    * This only returns a value if the items have some form of width (e.g. columns, bars, etc.) otherwise 0 is returned
    */
    IgxFinancialPriceSeriesComponent.prototype.getItemSpan = function () {
        var iv = this.i.iu();
        return (iv);
    };
    IgxFinancialPriceSeriesComponent.prototype.setNegativeColors = function (negativeBrush, negativeOutline) {
        this.i.rx(stringToBrush(negativeBrush), stringToBrush(negativeOutline));
    };
    /**
     * Gets a numeric value from the numeric axis associated with this series that matches the desired
     * value mode.
    
    * @param mode  * The type of value desired from the series numeric axis.
    */
    IgxFinancialPriceSeriesComponent.prototype.getSeriesValueType = function (mode) {
        var iv = this.i.ap((mode == null ? null : mode));
        return (iv);
    };
    IgxFinancialPriceSeriesComponent.prototype.getSeriesValueTypePosition = function (mode) {
        var iv = this.i.v9((mode == null ? null : mode));
        return fromPoint(iv);
    };
    IgxFinancialPriceSeriesComponent.prototype.getSeriesValueTypePositionFromValue = function (values) {
        var iv = this.i.wa(values);
        return fromPoint(iv);
    };
    IgxFinancialPriceSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxFinancialPriceSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxFinancialPriceSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxFinancialPriceSeriesComponent, selector: "igx-financial-price-series", inputs: { trendLineType: "trendLineType", trendLineBrush: "trendLineBrush", actualTrendLineBrush: "actualTrendLineBrush", trendLineThickness: "trendLineThickness", trendLineDashArray: "trendLineDashArray", trendLinePeriod: "trendLinePeriod", displayType: "displayType", negativeOutline: "negativeOutline", lowMemberAsLegendLabel: "lowMemberAsLegendLabel", highMemberAsLegendLabel: "highMemberAsLegendLabel", closeMemberAsLegendLabel: "closeMemberAsLegendLabel", openMemberAsLegendLabel: "openMemberAsLegendLabel", lowMemberAsLegendUnit: "lowMemberAsLegendUnit", highMemberAsLegendUnit: "highMemberAsLegendUnit", closeMemberAsLegendUnit: "closeMemberAsLegendUnit", openMemberAsLegendUnit: "openMemberAsLegendUnit" }, providers: [{ provide: IgxFinancialSeriesComponent, useExisting: forwardRef(function () { return IgxFinancialPriceSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxFinancialPriceSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxFinancialPriceSeriesComponent;
}(IgxFinancialSeriesComponent));
export { IgxFinancialPriceSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxFinancialPriceSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-financial-price-series',
                    template: "",
                    providers: [{ provide: IgxFinancialSeriesComponent, useExisting: forwardRef(function () { return IgxFinancialPriceSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxFinancialPriceSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { trendLineType: [{
                type: Input
            }], trendLineBrush: [{
                type: Input
            }], actualTrendLineBrush: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], trendLineDashArray: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], displayType: [{
                type: Input
            }], negativeOutline: [{
                type: Input
            }], lowMemberAsLegendLabel: [{
                type: Input
            }], highMemberAsLegendLabel: [{
                type: Input
            }], closeMemberAsLegendLabel: [{
                type: Input
            }], openMemberAsLegendLabel: [{
                type: Input
            }], lowMemberAsLegendUnit: [{
                type: Input
            }], highMemberAsLegendUnit: [{
                type: Input
            }], closeMemberAsLegendUnit: [{
                type: Input
            }], openMemberAsLegendUnit: [{
                type: Input
            }] } });
