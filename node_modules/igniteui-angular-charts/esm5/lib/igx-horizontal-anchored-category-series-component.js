import { __extends } from "tslib";
import { Component, Input } from '@angular/core';
import { IgxCategoryAxisBaseComponent } from "./igx-category-axis-base-component";
import { IgxNumericYAxisComponent } from "./igx-numeric-y-axis-component";
import { IgxAnchoredCategorySeriesComponent } from "./igx-anchored-category-series-component";
import { toPoint, fromRect, fromPoint } from "igniteui-angular-core";
import * as i0 from "@angular/core";
/**
 * Base class for anchored category series with a category x-axis and a numeric y-axis.
*
* Instantiate HorizontalAnchoredCategorySeries
*
* ```html
*  <igx-data-chart
*       [dataSource]="data"  >
* 	 <igx-column-series
*         #series
*         [xAxis]="xAxis"
*         [yAxis]="yAxis"
*         valueMemberPath="value"
*           >
*       </igx-column-series>
* </igx-data-chart>
* ```
*
* ```ts
* let series = new IgxColumnSeriesComponent();
* series.xAxis = this.xAxis;
* series.yAxis = this.yAxis;
* series.valueMemberPath="value";
* this.chart.series.add(series);
* ```
*/
var IgxHorizontalAnchoredCategorySeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxHorizontalAnchoredCategorySeriesComponent, _super);
    function IgxHorizontalAnchoredCategorySeriesComponent() {
        return _super.call(this) || this;
    }
    Object.defineProperty(IgxHorizontalAnchoredCategorySeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxHorizontalAnchoredCategorySeriesComponent.prototype, "xAxis", {
        /**
         * Gets or sets the effective x-axis for this series.
        *
        * Instantiate xAxis
        *
        * <!-- Angular -->
        *
        * ```js
        *  <igx-data-chart
        *       [dataSource]="data"  >
        * 	  <igx-category-x-axis
        *         label="label"
        *         #xAxis
        *         >
        *       </igx-category-x-axis>
        * 	 <igx-column-series
        *     ...
        *         [xAxis]="xAxis"
        *     ...
        *           >
        *       </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * let series = new IgxColumnSeriesComponent();
        * series.xAxis = this.xAxis;
        * series.yAxis = this.yAxis;
        * series.valueMemberPath="value";
        * this.chart.series.add(series);
        * ```
        */
        get: function () {
            var r = this.i.xAxis;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxCategoryAxisBaseComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.xAxis = null : this.i.xAxis = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxHorizontalAnchoredCategorySeriesComponent.prototype, "yAxis", {
        /**
         * Gets or sets the effective y-axis for this series.
        *
        * Instantiate yAxis
        *
        * <!-- Angular -->
        *
        * ```js
        *  <igx-data-chart
        *       [dataSource]="data"  >
        * 	  <igx-numeric-y-axis
        *         minimumValue="0"
        *         #yAxis>
        *       </igx-numeric-y-axis>
        * 	 <igx-column-series
        *     ...
        *         [yAxis]="yAxis"
        *     ...
        *           >
        *       </igx-column-series>
        * </igx-data-chart>
        * ```
        *
        * ```ts
        * let series = new IgxColumnSeriesComponent();
        * series.xAxis = this.xAxis;
        * series.yAxis = this.yAxis;
        * series.valueMemberPath="value";
        * this.chart.series.add(series);
        * ```
        */
        get: function () {
            var r = this.i.yAxis;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgxNumericYAxisComponent._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.yAxis = null : this.i.yAxis = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.xAxis && this.xAxis.name && this.xAxis.name == name) {
            return this.xAxis;
        }
        if (this.yAxis && this.yAxis.name && this.yAxis.name == name) {
            return this.yAxis;
        }
        return null;
    };
    IgxHorizontalAnchoredCategorySeriesComponent.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.xAxis && this.xAxis._styling) {
            this.xAxis._styling(container, component, this);
        }
        if (this.yAxis && this.yAxis._styling) {
            this.yAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * If possible, will return the best available value marker bounding box within the series that has the best value match for the world position provided.
    
    * @param world  * The world coordinates for which to get a value marker bounding box for
    *
    * You can use the `GetCategoryWidth` to get the width of the category grouping a series is in.
    *
    * <!-- Angular JS -->
    *
    *     var x = financialSeries.GetSeriesValueMarkerBoundingBox(new IgxPoint());
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getSeriesValueMarkerBoundingBox = function (world) {
        var iv = this.i.wj(toPoint(world));
        return fromRect(iv);
    };
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    *
    * You can use the `GetOffsetValue` to get the offset value for this series if grouped on a category axis.
    *
    * <!-- Angular JS -->
    *
    *       var g = series.getOffsetValue();
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getOffsetValue = function () {
        var iv = this.i.getOffsetValue();
        return (iv);
    };
    /**
     * Returns the width of the category grouping this series is in.
    
    *
    * You can use the `GetCategoryWidth` to get the width of the category grouping a series is in.
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getCategoryWidth = function () {
        var iv = this.i.getCategoryWidth();
        return (iv);
    };
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.i3(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.j8(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getNextOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.j6(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.v6(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    /**
     * Determine if object can be used as XAxis
    
    * @param axis  * The object to check
    *
    * You can use the `CanUseAsXAxis` method to determine if object can be used as XAxis
    *
    * <!-- Angular JS -->
    *
    *      var x = this.financialSeries.CanUseAsXAxis(this.xAxis);
    */
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.canUseAsXAxis = function (axis) {
        var iv = this.i.ab2(axis);
        return (iv);
    };
    /**
     * Determine if object can be used as YAxis
    
    * @param axis  * The object to check
    *
    * You can use the `CanUseAsYAxis` method to determine if object can be used as YAxis
    *
    * <!-- Ignite JS -->
    *
    *      N/A
    */
    IgxHorizontalAnchoredCategorySeriesComponent.prototype.canUseAsYAxis = function (axis) {
        var iv = this.i.ab3(axis);
        return (iv);
    };
    IgxHorizontalAnchoredCategorySeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxHorizontalAnchoredCategorySeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxHorizontalAnchoredCategorySeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxHorizontalAnchoredCategorySeriesComponent, selector: "ng-component", inputs: { xAxis: "xAxis", yAxis: "yAxis" }, usesInheritance: true, ngImport: i0, template: "", isInline: true });
    return IgxHorizontalAnchoredCategorySeriesComponent;
}(IgxAnchoredCategorySeriesComponent));
export { IgxHorizontalAnchoredCategorySeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxHorizontalAnchoredCategorySeriesComponent, decorators: [{
            type: Component,
            args: [{
                    template: "",
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }] } });
