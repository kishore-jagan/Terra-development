/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { IUnknownValuePlotting_$type } from "igniteui-angular-core";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { DependencyProperty } from "igniteui-angular-core";
import { typeCast, runOn, enumGetBox, markType, markDep } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { PropertyMetadata } from "igniteui-angular-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
import { Color } from "igniteui-angular-core";
/**
 * @hidden
 */
var LineSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LineSeries, _super);
    function LineSeries() {
        var _this = _super.call(this) || this;
        _this.acd = null;
        _this.acd = new CategoryLineRasterizer();
        _this.ab = LineSeries.$;
        _this.abx = 0;
        return _this;
    }
    LineSeries.prototype.bi = function () {
        return new LineSeries();
    };
    LineSeries.prototype.get_fi = function () {
        return true;
    };
    LineSeries.prototype.cq = function () {
        return new LineSeriesView(this);
    };
    LineSeries.prototype.qx = function (a) {
        _super.prototype.qx.call(this, a);
        this.ace = a;
    };
    LineSeries.prototype.zf = function () {
        return true;
    };
    LineSeries.prototype.get_et = function () {
        return true;
    };
    LineSeries.prototype.preferredCategoryMode = function (a) {
        return this.abx;
    };
    LineSeries.prototype.o3 = function (a, b) {
        _super.prototype.o3.call(this, a, b);
        var c = b;
        c.dg();
    };
    LineSeries.prototype.z4 = function (a, b) {
        _super.prototype.z4.call(this, a, b);
        var c = b.cw.d;
        var d = typeCast(LineSeriesView.$, b);
        var e = a.f;
        var f = this.getEffectiveViewport1(b);
        this.yt.a2(this, this.zd(), runOn(this, this.ye), this.zm(b), this.zn(b));
        var g = false;
        var h = this.yt.b;
        if (h != null) {
            g = true;
        }
        if (g) {
            var i = new ScalerParams(0, b.by, b.bx, this.abu.ch, f);
            this.z0(e, -1, this.valueColumn.count, this.abu, i, b.q, -1);
        }
        var j = d.dm;
        var k = d.dn;
        var l = d.dl;
        this.yt.ad(j, true, false, true, false);
        this.yt.ad(k, true, false, true, false);
        this.yt.ad(l, false, true, false, false);
        l._opacity = 0.75 * this.yt.j;
        if (b.c0(a)) {
            d.dh(e.count, e, true, this.unknownValuePlotting, this.aac(e, e.count - 1, b.bx, b.by), c, this.ib);
            b.c3(a);
        }
    };
    LineSeries.prototype.q5 = function (a, b, c, d) {
        _super.prototype.q5.call(this, a, b, c, d);
        switch (b) {
            case LineSeries.$$p[0]:
                this.yq.m = this.unknownValuePlotting == 0;
                this.rn(false);
                this.qh();
                break;
        }
    };
    Object.defineProperty(LineSeries.prototype, "useHighMarkerFidelity", {
        get: function () {
            return this.zh;
        },
        enumerable: false,
        configurable: true
    });
    LineSeries.$t = markType(LineSeries, 'LineSeries', HorizontalAnchoredCategorySeries.$, [IUnknownValuePlotting_$type]);
    LineSeries.$$p = markDep(DependencyProperty, PropertyMetadata, LineSeries, 'raisePropertyChanged', ['UnknownValuePlotting::acg', [UnknownValuePlotting_$type, enumGetBox(UnknownValuePlotting_$type, 1)]]);
    return LineSeries;
}(HorizontalAnchoredCategorySeries));
export { LineSeries };
/**
 * @hidden
 */
var LineSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(LineSeriesView, _super);
    function LineSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.df = null;
        _this.dq = new Path();
        _this.dp = new Path();
        _this.dr = new Path();
        _this.dk = new Path();
        _this.dj = new Path();
        _this.di = new Path();
        _this.df = a;
        return _this;
    }
    LineSeriesView.prototype.au = function () {
        _super.prototype.au.call(this);
        if (!this.q) {
            this.df.w2 = Defaults.e;
        }
    };
    Object.defineProperty(LineSeriesView.prototype, "dm", {
        get: function () {
            return this.dq;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LineSeriesView.prototype, "dn", {
        get: function () {
            return this.dr;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(LineSeriesView.prototype, "dl", {
        get: function () {
            return this.dp;
        },
        enumerable: false,
        configurable: true
    });
    LineSeriesView.prototype.dg = function () {
        this.dp.an = null;
        this.dq.an = null;
        this.dr.an = null;
        this.as();
    };
    LineSeriesView.prototype.dh = function (a, b, c, d, e, f, g) {
        this.df.acd.a = typeCast(ISortingAxis_$type, this.cy.fetchXAxis()) !== null ? true : false;
        this.df.acd.m(this.dq, this.dp, this.dr, a, b, c, d, e, f, g);
        this.as();
    };
    LineSeriesView.prototype.bd = function () {
        _super.prototype.bd.call(this);
    };
    LineSeriesView.prototype.be = function () {
        _super.prototype.be.call(this);
        this.dj.an = this.dq.an;
        this.dk.an = this.dr.an;
        this.di.an = this.dp.an;
        var a = this.br();
        this.dj._stroke = a;
        this.dj.ad = this.e.ic + 3;
        this.dk._stroke = a;
        this.dk.ad = this.e.ic + 3;
        this.di._fill = a;
        this.di._opacity = 1;
    };
    LineSeriesView.prototype.a8 = function (a, b) {
        _super.prototype.a8.call(this, a, b);
        if (a.d) {
            if (b) {
                a.t(this.di);
                a.t(this.dj);
                a.t(this.dk);
            }
            else {
                a.t(this.dp);
                a.t(this.dq);
                a.t(this.dr);
            }
        }
    };
    LineSeriesView.prototype.an = function (a) {
        _super.prototype.an.call(this, a);
        this.e.bb.exportPathData(a, this.dq, "lowerShape", ["Lower", "Main"]);
        this.e.bb.exportPathData(a, this.dr, "upperShape", ["Upper"]);
        this.e.bb.exportPathData(a, this.dp, "translucentShape", ["Translucent"]);
    };
    LineSeriesView.prototype.af = function () {
        var a = new Color();
        a.colorString = "rgba(95,95,95,0.5)";
        this.e.vv = a;
        this.e.jk = 3;
        this.e.jl = 1;
        this.e.jm = 4;
        this.e.ha = false;
    };
    LineSeriesView.$t = markType(LineSeriesView, 'LineSeriesView', AnchoredCategorySeriesView.$);
    return LineSeriesView;
}(AnchoredCategorySeriesView));
export { LineSeriesView };
