import { Component, EventEmitter, Output, Input } from '@angular/core';
import { HorizontalAlignment_$type } from "igniteui-angular-core";
import { UnknownValuePlotting_$type } from "igniteui-angular-core";
import { TrendLineType_$type } from "igniteui-angular-core";
import { IgxChartSeriesEventArgs } from './igx-chart-series-event-args';
import { arrayFindByName, brushToString, stringToBrush, toBrushCollection, fromBrushCollection, fromRect, toRect, ensureBool, ensureEnum, toSpinal, initializePropertiesFromCss, NamePatcher } from "igniteui-angular-core";
import { MarkerType_$type } from "./MarkerType";
import { delegateCombine } from "igniteui-angular-core";
import { IgxDomainChartSeriesPointerEventArgs } from './igx-domain-chart-series-pointer-event-args';
import { MarkerTypeCollection as MarkerTypeCollection_internal } from './MarkerTypeCollection';
import { IgxMarkerTypeCollection } from './igx-marker-type-collection';
import { SyncableObservableCollection$1 } from "igniteui-angular-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { IgxCalloutStyleUpdatingEventArgs } from "./igx-callout-style-updating-event-args";
import { ComputedPlotAreaMarginMode_$type } from './ComputedPlotAreaMarginMode';
import { SeriesHighlightingMode_$type } from './SeriesHighlightingMode';
import { SeriesHighlightingBehavior_$type } from './SeriesHighlightingBehavior';
import { LegendHighlightingMode_$type } from './LegendHighlightingMode';
import { SeriesOutlineMode_$type } from './SeriesOutlineMode';
import { MarkerOutlineMode_$type } from './MarkerOutlineMode';
import { MarkerFillMode_$type } from './MarkerFillMode';
import { MarkerAutomaticBehavior_$type } from './MarkerAutomaticBehavior';
import { LegendItemBadgeMode_$type } from "igniteui-angular-core";
import { LegendItemBadgeShape_$type } from "igniteui-angular-core";
import { DataAbbreviationMode_$type } from "igniteui-angular-core";
import { DataLegendValueMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-angular-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-angular-core";
import { DataLegendUnitsMode_$type } from "igniteui-angular-core";
import { DataLegendLabelMode_$type } from "igniteui-angular-core";
import { DataLegendSummaryType_$type } from "igniteui-angular-core";
import { Thickness } from "igniteui-angular-core";
import { FontInfo } from "igniteui-angular-core";
import { SeriesPlotAreaMarginHorizontalMode_$type } from './SeriesPlotAreaMarginHorizontalMode';
import { SeriesPlotAreaMarginVerticalMode_$type } from './SeriesPlotAreaMarginVerticalMode';
import { IgxCalloutPlacementPositionsCollection } from './igx-callout-placement-positions-collection';
import { CalloutPlacementPositions_$type } from './CalloutPlacementPositions';
import { SeriesViewerScrollbarMode_$type } from './SeriesViewerScrollbarMode';
import { SeriesViewerHorizontalScrollbarPosition_$type } from './SeriesViewerHorizontalScrollbarPosition';
import { SeriesViewerVerticalScrollbarPosition_$type } from './SeriesViewerVerticalScrollbarPosition';
import { IgxCalloutRenderStyleUpdatingEventArgs } from './igx-callout-render-style-updating-event-args';
import { CalloutPlacementPositionsCollection as CalloutPlacementPositionsCollection_internal } from './CalloutPlacementPositionsCollection';
import { DataToolTipLayerGroupingMode_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-angular-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-angular-core";
import { IgxChartSummaryDescriptionCollection } from './igx-chart-summary-description-collection';
import { IgxChartSortDescriptionCollection } from './igx-chart-sort-description-collection';
import { IgxFilterExpressionCollection } from "igniteui-angular-core";
import { ValueModeCollection as ValueModeCollection_internal } from './ValueModeCollection';
import { IgxValueModeCollection } from './igx-value-mode-collection';
import { ValueLayerValueMode_$type } from './ValueLayerValueMode';
import { IgxFilterStringErrorsParsingEventArgs } from './igx-filter-string-errors-parsing-event-args';
import { SeriesHighlightedValuesDisplayMode_$type } from './SeriesHighlightedValuesDisplayMode';
import { SeriesSelectionMode_$type } from './SeriesSelectionMode';
import { SeriesSelectionBehavior_$type } from './SeriesSelectionBehavior';
import { ChartSelectedItemCollection as ChartSelectedItemCollection_internal } from "./ChartSelectedItemCollection";
import { ChartSelection } from "./ChartSelection";
import { IgxSeriesViewerSelectedSeriesItemsChangedEventArgs } from "./igx-series-viewer-selected-series-items-changed-event-args";
import { IgxChartSelectedItemCollection } from "./igx-chart-selected-item-collection";
import { CalloutCollisionMode_$type } from "igniteui-angular-core";
import { Visibility_$type } from "igniteui-angular-core";
import { IgxDomainChartPlotAreaPointerEventArgs } from './igx-domain-chart-plot-area-pointer-event-args';
import * as i0 from "@angular/core";
/**
 * Represents a base class for all domain charts that can plot scatter data and shapefiles
*
* ```html
* <igx-category-chart
*       yAxisMinimumValue="0"
*       [dataSource]="data"
*       bottomMargin= 20>
*     </igx-category-chart>
* ```
*/
var IgxDomainChartComponent = /** @class */ /*@__PURE__*/ (function () {
    function IgxDomainChartComponent() {
        this._calloutsDataSource = null;
        this._selectedSeriesItems = null;
        this._focusedSeriesItems = null;
        this._markerTypes = null;
        this._calloutsAllowedPositions = null;
        this._valueLines = null;
        this.__p = null;
        this._hasUserValues = new Set();
        this._stylingContainer = null;
        this._stylingParent = null;
        this._inStyling = false;
        this._seriesAdded = null;
        this._seriesRemoved = null;
        this._seriesPointerEnter = null;
        this._seriesPointerLeave = null;
        this._seriesPointerMove = null;
        this._seriesPointerDown = null;
        this._seriesPointerUp = null;
        this._seriesClick = null;
        this._plotAreaPointerEnter = null;
        this._plotAreaPointerLeave = null;
        this._plotAreaPointerMove = null;
        this._plotAreaPointerDown = null;
        this._plotAreaPointerUp = null;
        this._calloutStyleUpdating = null;
        this._calloutRenderStyleUpdating = null;
        this._selectedSeriesItemsChanged = null;
        this._focusedSeriesItemsChanged = null;
        this._filterStringErrorsParsing = null;
        this._zoneRunner = null;
        if (this._styling) {
            NamePatcher.ensureStylablePatched(Object.getPrototypeOf(this));
        }
        this._implementation = this.createImplementation();
        this._implementation.externalObject = this;
        this.onImplementationCreated();
    }
    IgxDomainChartComponent.prototype.createImplementation = function () {
        return null;
    };
    IgxDomainChartComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "i", {
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.onImplementationCreated = function () {
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "tooltipTemplate", {
        /**
        * Sets or gets the template reference to use for tooltips for all the series.
        *
        *
        */
        get: function () {
            return this.i.tooltipTemplate;
        },
        set: function (v) {
            this.i.tooltipTemplate = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "tooltipTemplates", {
        /**
        * Sets or gets the template references to use for tooltips for all the series, in order.
        *
        *
        */
        get: function () {
            var ret = [];
            if (this.i.tooltipTemplates) {
                for (var ii = 0; ii < this.i.tooltipTemplates.count; ii++) {
                    ret.push(this.i.tooltipTemplates.item(ii));
                }
            }
            return ret;
        },
        set: function (v) {
            this.i.tooltipTemplates.clear();
            if (v) {
                for (var ii = 0; ii < v.length; ii++) {
                    this.i.tooltipTemplates.add(v[ii]);
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "legend", {
        get: function () {
            if (this.i.legend != null)
                return this.i.legend.externalObject;
        },
        set: function (v) {
            if (v != undefined && v != null)
                this.i.legend = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsDataSource", {
        get: function () {
            return this._calloutsDataSource;
        },
        set: function (value) {
            this._calloutsDataSource = value;
            this.bindCalloutsData();
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.bindCalloutsData = function () {
        if (this.i != null && this.i !== undefined) {
            this.i.calloutsItemsSource = this._calloutsDataSource;
        }
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "pixelScalingRatio", {
        /**
     * Gets or sets the scaling value used to affect the pixel density of the control.
     * A higher scaling ratio will produce crisper visuals at the expense of memory.  Lower values will cause the control
     * to appear blurry.
    */
        get: function () {
            return this.i.j1;
        },
        set: function (v) {
            this.i.j1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleLeftMargin", {
        /**
         * Gets or sets the left margin of chart title
        *
        *  Use `titleLeftMargin` property for the left margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        * 	titleLeftMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleLeftMargin = 10;
        * ```
        */
        get: function () {
            return this.i.ke;
        },
        set: function (v) {
            this.i.ke = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleRightMargin", {
        /**
         * Gets or sets the right margin of chart title
        *
        *  Use `titleLeftMargin` property for the right margin of chart title.
        *
        * ```html
        * <igx-category-chart
        * 		yAxisMinimumValue="0"
        * 		[dataSource]="data"
        * 		titleRightMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleRightMargin = 10;
        * ```
        */
        get: function () {
            return this.i.kf;
        },
        set: function (v) {
            this.i.kf = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleTopMargin", {
        /**
         * Gets or sets the top margin of chart title
        *
        *  Use `titleTopMargin` property for the top margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *      yAxisMinimumValue="0"
        *      [dataSource]="data"
        *      title="Countries"
        *      titleTopMargin=10 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleTopMargin = 10;
        * ```
        */
        get: function () {
            return this.i.kg;
        },
        set: function (v) {
            this.i.kg = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleBottomMargin", {
        /**
         * Gets or sets the bottom margin of chart title
        *
        *  Use `titleBottomMargin` property for the bottom margin of chart title.
        *
        * ```html
        * <igx-category-chart
        *    yAxisMinimumValue="0"
        *    [dataSource]="data"
        *    titleBottomMargin= 10 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.titleBottomMargin = 5;
        * ```
        */
        get: function () {
            return this.i.kd;
        },
        set: function (v) {
            this.i.kd = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleLeftMargin", {
        /**
         * Gets or sets the left margin of chart subtitle
        *
        * Use `subtitleLeftMargin` property for the left margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleLeftMargin= 20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleLeftMargin = 20 ;
        * ```
        */
        get: function () {
            return this.i.j9;
        },
        set: function (v) {
            this.i.j9 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleTopMargin", {
        /**
         * Gets or sets the top margin of chart subtitle
        *
        * Use `subtitleTopMargin` property for the top margin of chart subtitle.
        *
        * ```html
        *    <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTopMargin=10>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTopMargin = 10;
        * ```
        */
        get: function () {
            return this.i.kb;
        },
        set: function (v) {
            this.i.kb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleRightMargin", {
        /**
         * Gets or sets the right margin of chart subtitle
        *
        * Use `subtitleRightMargin` property for the right margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleRightMargin= 10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.subtitleRightMargin = 20 ;
        * ```
        */
        get: function () {
            return this.i.ka;
        },
        set: function (v) {
            this.i.ka = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleBottomMargin", {
        /**
         * Gets or sets the bottom margin of chart subtitle
        *
        * Use `subtitleBottomMargin` property for the bottom margin of chart subtitle.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        * 	subtitleBottomMargin=10>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleBottomMargin = 10 ;
        * ```
        */
        get: function () {
            return this.i.j8;
        },
        set: function (v) {
            this.i.j8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleTextColor", {
        /**
         * Gets or sets color of chart subtitle
        *
        * Use `subtitleTextColor` property to color the subtitle.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTextColor= 'blue'>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTextColor = "#ff0000" ;
        * ```
        */
        get: function () {
            return brushToString(this.i.yi);
        },
        set: function (v) {
            this.i.yi = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleTextColor", {
        /**
         * Gets or sets color of chart title
        *
        *  Use `titleTextColor` property to color the chart title
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       titleTextColor= "red">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.titleTextColor="red" ;
        * ```
        */
        get: function () {
            return brushToString(this.i.yj);
        },
        set: function (v) {
            this.i.yj = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "leftMargin", {
        /**
         * Gets or sets the left margin of the chart content.
        *
        * Use the 'leftMargin' property for the left margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       leftMargin=20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.leftMargin = 20;
        * ```
        */
        get: function () {
            return this.i.jy;
        },
        set: function (v) {
            this.i.jy = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "topMargin", {
        /**
         * Gets or sets the top margin of the chart content.
        *
        * Use `topMargin` property for the margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     topMargin= 20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.topMargin=20;
        * ```
        */
        get: function () {
            return this.i.kh;
        },
        set: function (v) {
            this.i.kh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "rightMargin", {
        /**
         * Gets or sets the right margin of the chart content.
        *
        * Use `rightMargin` property for the right margin of the chart content.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     rightMargin=20>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *   this.chart.rightMargin = 20 ;
        * ```
        */
        get: function () {
            return this.i.j7;
        },
        set: function (v) {
            this.i.j7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "bottomMargin", {
        /**
         * Gets or sets the bottom margin around the chart content.
        *
        * Use the `bottomMargin` property for the bottom margin around the chart content.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       bottomMargin= 20>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.bottomMargin=20;
        * ```
        */
        get: function () {
            return this.i.jk;
        },
        set: function (v) {
            this.i.jk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "transitionDuration", {
        /**
         * Gets or sets the duration used for animating series plots when the data is changing
        *
        * Use the `TransitionDuration` property to animating between data values.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     transitionDuration="500">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.transitionDuratio= 500;
        * ```
        */
        get: function () {
            return this.i.lk;
        },
        set: function (v) {
            this.i.lk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "transitionEasingFunction", {
        /**
         * Gets or sets the easing function used for animating series plots when the data is changing.
         * This can be set to one of the known values "linear" or "cubic," or it can be set to an easing function which takes a single numeric parameter and returns a number.
        *
        * The 'transitionInEasingFunction' property used for easing function for animating series plots when the chart is loading into view.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     transitionInEasingFunction= "cubic">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.transitionInEasingFunction=  this.cubicFunc;
        *
        * cubicFunc(time: number) : number
        *   {
        *     return time;
        *   }
        * ```
        */
        get: function () {
            return this.i.ex;
        },
        set: function (v) {
            this.i.ex = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightingTransitionDuration", {
        /**
         * Gets or sets the duration used for animating highlighting changes
        */
        get: function () {
            return this.i.lh;
        },
        set: function (v) {
            this.i.lh = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectionTransitionDuration", {
        /**
         * Gets or sets the duration used for animating Selection changes
        */
        get: function () {
            return this.i.lj;
        },
        set: function (v) {
            this.i.lj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "focusTransitionDuration", {
        /**
         * Gets or sets the duration used for animating Focus changes
        */
        get: function () {
            return this.i.lg;
        },
        set: function (v) {
            this.i.lg = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleTextStyle", {
        /**
         * Gets or sets CSS font property for the chart subtitle
        *
        * Use `subtitleTextStyle` property for the CSS font of the chart subtitle.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       subtitle= "This is a subtitle"
        *       subtitleTextStyle ="16pt Verdona">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleTextStyle= "16pt Verdona";
        * ```
        */
        get: function () {
            return this.i.sp;
        },
        set: function (v) {
            this.i.sp = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleTextStyle", {
        /**
         * Gets or sets CSS font property for the chart title
        *
        * Use `titleTextStyle` property for the CSS font property of the chart title
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       titleTextStyle= "24pt Verdona">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.xAxisTitleTextStyle = "24pt Verdona";
        * ```
        */
        get: function () {
            return this.i.s0;
        },
        set: function (v) {
            this.i.s0 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "isDetached", {
        get: function () {
            return this.i.isDetached;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupingMode", {
        get: function () {
            return this.i.b3;
        },
        set: function (v) {
            this.i.b3 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipPositionOffsetX", {
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.jp;
        },
        set: function (v) {
            this.i.jp = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipPositionOffsetY", {
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.jq;
        },
        set: function (v) {
            this.i.jq = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipDefaultPositionOffsetX", {
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.jn;
        },
        set: function (v) {
            this.i.jn = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipDefaultPositionOffsetY", {
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.jo;
        },
        set: function (v) {
            this.i.jo = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupedPositionModeX", {
        /**
         * Gets or sets the tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.bz;
        },
        set: function (v) {
            this.i.bz = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupedPositionModeY", {
        /**
         * Gets or sets the tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.b1;
        },
        set: function (v) {
            this.i.b1 = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipShouldUpdateWhenSeriesDataChanges", {
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get: function () {
            return this.i.gs;
        },
        set: function (v) {
            this.i.gs = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipIncludedSeries", {
        /**
         * Gets or sets indexes, titles, or names of series to include in displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
        */
        get: function () {
            return this.i.m;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.m = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipExcludedSeries", {
        /**
         * Gets or sets indexes, titles, or names of series to exclude from displaying in the data tooltip, e.g. "0, 1" or "Series1 Title, Series2 Title"
         * The DataToolTipExcludedSeries property takes precedence over values of DataToolTipIncludedSeries property
        */
        get: function () {
            return this.i.j;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.j = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipIncludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
         * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
        */
        get: function () {
            return this.i.l;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.l = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipExcludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
         * The DataToolTipExcludedColumns property takes precedence over values of DataToolTipIncludedColumns property
        */
        get: function () {
            return this.i.i;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.i = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatAbbreviation", {
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.bh;
        },
        set: function (v) {
            this.i.bh = ensureEnum(DataAbbreviationMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatMaxFractions", {
        /**
         * Gets or sets maximum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.ld;
        },
        set: function (v) {
            this.i.ld = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatMinFractions", {
        /**
         * Gets or sets minimum digits for formatting numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.le;
        },
        set: function (v) {
            this.i.le = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatMode", {
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get: function () {
            return this.i.bx;
        },
        set: function (v) {
            this.i.bx = ensureEnum(DataLegendValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.pu;
        },
        set: function (v) {
            this.i.pu = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatUseGrouping", {
        /**
         * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.gt;
        },
        set: function (v) {
            this.i.gt = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatString", {
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get: function () {
            return this.i.p0;
        },
        set: function (v) {
            this.i.p0 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get: function () {
            return this.i.n;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.n = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueRowMarginBottom", {
        get: function () {
            return this.i.zc ? this.i.zc.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.bottom = +v;
            this.i.zc = this.i.zc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueRowMarginLeft", {
        get: function () {
            return this.i.zc ? this.i.zc.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.left = +v;
            this.i.zc = this.i.zc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueRowMarginRight", {
        get: function () {
            return this.i.zc ? this.i.zc.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.right = +v;
            this.i.zc = this.i.zc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueRowMarginTop", {
        get: function () {
            return this.i.zc ? this.i.zc.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueRowMargin();
            this.i.zc.top = +v;
            this.i.zc = this.i.zc;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipValueRowMargin = function () {
        if (this.i.zc) {
            return;
        }
        this.i.zc = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueRowVisible", {
        /**
         * Gets or sets whether to show series rows.
        */
        get: function () {
            return this.i.gu;
        },
        set: function (v) {
            this.i.gu = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextWhenMissingData", {
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get: function () {
            return this.i.p9;
        },
        set: function (v) {
            this.i.p9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextUseSeriesColors", {
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get: function () {
            return this.i.gv;
        },
        set: function (v) {
            this.i.gv = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextMarginBottom", {
        get: function () {
            return this.i.zd ? this.i.zd.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.bottom = +v;
            this.i.zd = this.i.zd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextMarginLeft", {
        get: function () {
            return this.i.zd ? this.i.zd.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.left = +v;
            this.i.zd = this.i.zd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextMarginRight", {
        get: function () {
            return this.i.zd ? this.i.zd.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.right = +v;
            this.i.zd = this.i.zd;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextMarginTop", {
        get: function () {
            return this.i.zd ? this.i.zd.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipValueTextMargin();
            this.i.zd.top = +v;
            this.i.zd = this.i.zd;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipValueTextMargin = function () {
        if (this.i.zd) {
            return;
        }
        this.i.zd = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x6);
        },
        set: function (v) {
            this.i.x6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fh == null) {
                return null;
            }
            return this.i.fh.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fh = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderFormatString", {
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get: function () {
            return this.i.ok;
        },
        set: function (v) {
            this.i.ok = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get: function () {
            return this.i.k;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.k = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying header as date time
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.og;
        },
        set: function (v) {
            this.i.og = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderFormatDate", {
        /**
         * Gets or sets date format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.bn;
        },
        set: function (v) {
            this.i.bn = ensureEnum(DataLegendHeaderDateMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderFormatTime", {
        /**
         * Gets or sets time format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.bp;
        },
        set: function (v) {
            this.i.bp = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderText", {
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get: function () {
            return this.i.op;
        },
        set: function (v) {
            this.i.op = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextColor", {
        /**
         * Gets or sets the header text color.
        */
        get: function () {
            return brushToString(this.i.xy);
        },
        set: function (v) {
            this.i.xy = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextMarginBottom", {
        get: function () {
            return this.i.y6 ? this.i.y6.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.bottom = +v;
            this.i.y6 = this.i.y6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextMarginLeft", {
        get: function () {
            return this.i.y6 ? this.i.y6.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.left = +v;
            this.i.y6 = this.i.y6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextMarginRight", {
        get: function () {
            return this.i.y6 ? this.i.y6.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.right = +v;
            this.i.y6 = this.i.y6;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextMarginTop", {
        get: function () {
            return this.i.y6 ? this.i.y6.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderTextMargin();
            this.i.y6.top = +v;
            this.i.y6 = this.i.y6;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipHeaderTextMargin = function () {
        if (this.i.y6) {
            return;
        }
        this.i.y6 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderRowMarginBottom", {
        get: function () {
            return this.i.y5 ? this.i.y5.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.bottom = +v;
            this.i.y5 = this.i.y5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderRowMarginLeft", {
        get: function () {
            return this.i.y5 ? this.i.y5.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.left = +v;
            this.i.y5 = this.i.y5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderRowMarginRight", {
        get: function () {
            return this.i.y5 ? this.i.y5.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.right = +v;
            this.i.y5 = this.i.y5;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderRowMarginTop", {
        get: function () {
            return this.i.y5 ? this.i.y5.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipHeaderRowMargin();
            this.i.y5.top = +v;
            this.i.y5 = this.i.y5;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipHeaderRowMargin = function () {
        if (this.i.y5) {
            return;
        }
        this.i.y5 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.gr;
        },
        set: function (v) {
            this.i.gr = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipHeaderTextStyle", {
        /**
         * Gets or Sets the style to use for the header text.
        */
        get: function () {
            if (this.i.e9 == null) {
                return null;
            }
            return this.i.e9.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.e9 = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextColor", {
        /**
         * Gets or sets the Group text color.
        */
        get: function () {
            return brushToString(this.i.xx);
        },
        set: function (v) {
            this.i.xx = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextMarginBottom", {
        get: function () {
            return this.i.y4 ? this.i.y4.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.bottom = +v;
            this.i.y4 = this.i.y4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextMarginLeft", {
        get: function () {
            return this.i.y4 ? this.i.y4.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.left = +v;
            this.i.y4 = this.i.y4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextMarginRight", {
        get: function () {
            return this.i.y4 ? this.i.y4.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.right = +v;
            this.i.y4 = this.i.y4;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextMarginTop", {
        get: function () {
            return this.i.y4 ? this.i.y4.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupTextMargin();
            this.i.y4.top = +v;
            this.i.y4 = this.i.y4;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipGroupTextMargin = function () {
        if (this.i.y4) {
            return;
        }
        this.i.y4 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupRowMarginBottom", {
        get: function () {
            return this.i.y3 ? this.i.y3.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.bottom = +v;
            this.i.y3 = this.i.y3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupRowMarginLeft", {
        get: function () {
            return this.i.y3 ? this.i.y3.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.left = +v;
            this.i.y3 = this.i.y3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupRowMarginRight", {
        get: function () {
            return this.i.y3 ? this.i.y3.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.right = +v;
            this.i.y3 = this.i.y3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupRowMarginTop", {
        get: function () {
            return this.i.y3 ? this.i.y3.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipGroupRowMargin();
            this.i.y3.top = +v;
            this.i.y3 = this.i.y3;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipGroupRowMargin = function () {
        if (this.i.y3) {
            return;
        }
        this.i.y3 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupRowVisible", {
        /**
         * Gets or sets whether to show Group row.
        */
        get: function () {
            return this.i.gq;
        },
        set: function (v) {
            this.i.gq = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipGroupTextStyle", {
        /**
         * Gets or Sets the style to use for the Group text.
        */
        get: function () {
            if (this.i.e8 == null) {
                return null;
            }
            return this.i.e8.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.e8 = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextColor", {
        /**
         * Gets or sets the summary text color.
        */
        get: function () {
            return brushToString(this.i.x1);
        },
        set: function (v) {
            this.i.x1 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get: function () {
            if (this.i.fc == null) {
                return null;
            }
            return this.i.fc.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fc = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryType", {
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get: function () {
            return this.i.bt;
        },
        set: function (v) {
            this.i.bt = ensureEnum(DataLegendSummaryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleText", {
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get: function () {
            return this.i.o8;
        },
        set: function (v) {
            this.i.o8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextMarginBottom", {
        get: function () {
            return this.i.y9 ? this.i.y9.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.bottom = +v;
            this.i.y9 = this.i.y9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextMarginLeft", {
        get: function () {
            return this.i.y9 ? this.i.y9.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.left = +v;
            this.i.y9 = this.i.y9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextMarginRight", {
        get: function () {
            return this.i.y9 ? this.i.y9.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.right = +v;
            this.i.y9 = this.i.y9;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryTitleTextMarginTop", {
        get: function () {
            return this.i.y9 ? this.i.y9.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryTitleTextMargin();
            this.i.y9.top = +v;
            this.i.y9 = this.i.y9;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipSummaryTitleTextMargin = function () {
        if (this.i.y9) {
            return;
        }
        this.i.y9 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryRowMarginBottom", {
        get: function () {
            return this.i.y8 ? this.i.y8.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.bottom = +v;
            this.i.y8 = this.i.y8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryRowMarginLeft", {
        get: function () {
            return this.i.y8 ? this.i.y8.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.left = +v;
            this.i.y8 = this.i.y8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryRowMarginRight", {
        get: function () {
            return this.i.y8 ? this.i.y8.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.right = +v;
            this.i.y8 = this.i.y8;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryRowMarginTop", {
        get: function () {
            return this.i.y8 ? this.i.y8.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipSummaryRowMargin();
            this.i.y8.top = +v;
            this.i.y8 = this.i.y8;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipSummaryRowMargin = function () {
        if (this.i.y8) {
            return;
        }
        this.i.y8 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x3);
        },
        set: function (v) {
            this.i.x3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fe == null) {
                return null;
            }
            return this.i.fe.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fe = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryLabelText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.o3;
        },
        set: function (v) {
            this.i.o3 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x0);
        },
        set: function (v) {
            this.i.x0 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fb == null) {
                return null;
            }
            return this.i.fb.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fb = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.pe;
        },
        set: function (v) {
            this.i.pe = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x2);
        },
        set: function (v) {
            this.i.x2 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipSummaryUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fd == null) {
                return null;
            }
            return this.i.fd.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fd = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipBadgeMarginBottom", {
        get: function () {
            return this.i.y2 ? this.i.y2.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.bottom = +v;
            this.i.y2 = this.i.y2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipBadgeMarginLeft", {
        get: function () {
            return this.i.y2 ? this.i.y2.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.left = +v;
            this.i.y2 = this.i.y2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipBadgeMarginRight", {
        get: function () {
            return this.i.y2 ? this.i.y2.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.right = +v;
            this.i.y2 = this.i.y2;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipBadgeMarginTop", {
        get: function () {
            return this.i.y2 ? this.i.y2.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipBadgeMargin();
            this.i.y2.top = +v;
            this.i.y2 = this.i.y2;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipBadgeMargin = function () {
        if (this.i.y2) {
            return;
        }
        this.i.y2 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipBadgeShape", {
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get: function () {
            return this.i.cw;
        },
        set: function (v) {
            this.i.cw = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsDisplayMode", {
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get: function () {
            return this.i.bv;
        },
        set: function (v) {
            this.i.bv = ensureEnum(DataLegendUnitsMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.po;
        },
        set: function (v) {
            this.i.po = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.x5);
        },
        set: function (v) {
            this.i.x5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextMarginBottom", {
        get: function () {
            return this.i.zb ? this.i.zb.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.bottom = +v;
            this.i.zb = this.i.zb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextMarginLeft", {
        get: function () {
            return this.i.zb ? this.i.zb.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.left = +v;
            this.i.zb = this.i.zb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextMarginRight", {
        get: function () {
            return this.i.zb ? this.i.zb.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.right = +v;
            this.i.zb = this.i.zb;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextMarginTop", {
        get: function () {
            return this.i.zb ? this.i.zb.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipUnitsTextMargin();
            this.i.zb.top = +v;
            this.i.zb = this.i.zb;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipUnitsTextMargin = function () {
        if (this.i.zb) {
            return;
        }
        this.i.zb = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fg == null) {
                return null;
            }
            return this.i.fg.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fg = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextMarginBottom", {
        get: function () {
            return this.i.za ? this.i.za.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.bottom = +v;
            this.i.za = this.i.za;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextMarginLeft", {
        get: function () {
            return this.i.za ? this.i.za.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.left = +v;
            this.i.za = this.i.za;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextMarginRight", {
        get: function () {
            return this.i.za ? this.i.za.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.right = +v;
            this.i.za = this.i.za;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextMarginTop", {
        get: function () {
            return this.i.za ? this.i.za.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipTitleTextMargin();
            this.i.za.top = +v;
            this.i.za = this.i.za;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipTitleTextMargin = function () {
        if (this.i.za) {
            return;
        }
        this.i.za = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextColor", {
        /**
         * Gets or sets the display text color.
        */
        get: function () {
            return brushToString(this.i.x4);
        },
        set: function (v) {
            this.i.x4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the display text.
        */
        get: function () {
            if (this.i.ff == null) {
                return null;
            }
            return this.i.ff.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ff = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelDisplayMode", {
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get: function () {
            return this.i.br;
        },
        set: function (v) {
            this.i.br = ensureEnum(DataLegendLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.xz);
        },
        set: function (v) {
            this.i.xz = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextMarginBottom", {
        get: function () {
            return this.i.y7 ? this.i.y7.bottom : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.bottom = +v;
            this.i.y7 = this.i.y7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextMarginLeft", {
        get: function () {
            return this.i.y7 ? this.i.y7.left : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.left = +v;
            this.i.y7 = this.i.y7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextMarginRight", {
        get: function () {
            return this.i.y7 ? this.i.y7.right : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.right = +v;
            this.i.y7 = this.i.y7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextMarginTop", {
        get: function () {
            return this.i.y7 ? this.i.y7.top : NaN;
        },
        set: function (v) {
            this.ensureDataToolTipLabelTextMargin();
            this.i.y7.top = +v;
            this.i.y7 = this.i.y7;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.ensureDataToolTipLabelTextMargin = function () {
        if (this.i.y7) {
            return;
        }
        this.i.y7 = new Thickness(2);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "dataToolTipLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.fa == null) {
                return null;
            }
            return this.i.fa.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.fa = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "domainType", {
        /**
         * Gets the domain type of this chart
        */
        get: function () {
            return this.i.cf;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "sortDescriptions", {
        /**
         * Gets the current sort that is applied to the grid. Collection can be updated to modify the sort for the grid. Once sort descriptions are in this collection, the grid will no longer listen for changes on their properties.
        */
        get: function () {
            var r = this.i.a6;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "groupSortDescriptions", {
        get: function () {
            var r = this.i.a2;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "groupDescriptions", {
        /**
         * Gets the current grouping that is applied to the grid. Collection can be updated to modify the grouping for the grid. Once grouping descriptions are in this collection, the grid will no longer listen for changes on their properties.
        */
        get: function () {
            var r = this.i.a1;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "filterExpressions", {
        /**
         * Gets the current filter that is applied to the chart. Collection can be updated to modify the filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
        */
        get: function () {
            var r = this.i.eq;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightFilterExpressions", {
        /**
         * Gets the current highlight filter that is applied to the chart. Collection can be updated to modify the highlight filter for the chart. Once filter expressions are in this collection, the chart will no longer listen for changes on their properties.
        */
        get: function () {
            var r = this.i.er;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "summaryDescriptions", {
        /**
         * Gets the current summaries that are applied to the grid.
        */
        get: function () {
            var r = this.i.ba;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSummaryDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectionMode", {
        /**
         * Gets or sets the selection mode to use for the series in the component, when supported.
        */
        get: function () {
            return this.i.d1;
        },
        set: function (v) {
            this.i.d1 = ensureEnum(SeriesSelectionMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "focusMode", {
        /**
         * Gets or sets the focus mode to use for the series in the component, when supported.
        */
        get: function () {
            return this.i.d0;
        },
        set: function (v) {
            this.i.d0 = ensureEnum(SeriesSelectionMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectionBrush", {
        /**
         * Gets or sets the selection brush to use for the series.
        */
        get: function () {
            return brushToString(this.i.yh);
        },
        set: function (v) {
            this.i.yh = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "focusBrush", {
        /**
         * Gets or sets the focus brush to use for the series.
        */
        get: function () {
            return brushToString(this.i.x9);
        },
        set: function (v) {
            this.i.x9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectionBehavior", {
        /**
         * Gets or sets the selection behavior to use for the series in the component, when supported.
        */
        get: function () {
            return this.i.dx;
        },
        set: function (v) {
            this.i.dx = ensureEnum(SeriesSelectionBehavior_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectedSeriesItems", {
        /**
         * Gets the currently selected data items.  Adding or removing data items from this collection will
         * select or deselect the visuals associated with those items.
        */
        get: function () {
            if (this._selectedSeriesItems === null) {
                var coll = new IgxChartSelectedItemCollection();
                var innerColl = this.i.selectedSeriesItems;
                if (!innerColl) {
                    innerColl = new ChartSelectedItemCollection_internal();
                }
                this._selectedSeriesItems = coll._fromInner(innerColl);
            }
            return this._selectedSeriesItems;
        },
        set: function (v) {
            if (this._selectedSeriesItems !== null) {
                this._selectedSeriesItems._setSyncTarget(null);
                this._selectedSeriesItems = null;
            }
            var coll = new IgxChartSelectedItemCollection();
            this._selectedSeriesItems = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(ChartSelection.$type);
            var innerColl = this.i.selectedSeriesItems;
            if (!innerColl) {
                innerColl = new ChartSelectedItemCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._selectedSeriesItems._setSyncTarget(syncColl);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "focusedSeriesItems", {
        /**
         * Gets the currently focused data items.  Adding or removing data items from this collection will
         * focus or blur the visuals associated with those items.
        */
        get: function () {
            if (this._focusedSeriesItems === null) {
                var coll = new IgxChartSelectedItemCollection();
                var innerColl = this.i.focusedSeriesItems;
                if (!innerColl) {
                    innerColl = new ChartSelectedItemCollection_internal();
                }
                this._focusedSeriesItems = coll._fromInner(innerColl);
            }
            return this._focusedSeriesItems;
        },
        set: function (v) {
            if (this._focusedSeriesItems !== null) {
                this._focusedSeriesItems._setSyncTarget(null);
                this._focusedSeriesItems = null;
            }
            var coll = new IgxChartSelectedItemCollection();
            this._focusedSeriesItems = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(ChartSelection.$type);
            var innerColl = this.i.focusedSeriesItems;
            if (!innerColl) {
                innerColl = new ChartSelectedItemCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._focusedSeriesItems._setSyncTarget(syncColl);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialSortDescriptions", {
        /**
         * Gets the initial sorts that are applied to the chart.
        */
        get: function () {
            var r = this.i.a5;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialGroupSortDescriptions", {
        /**
         * Gets the initial sorts that are applied to the chart after groupings and summaries are applied.
        */
        get: function () {
            var r = this.i.a4;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialGroupDescriptions", {
        /**
         * Gets the initial groupings that are applied to the chart.
        */
        get: function () {
            var r = this.i.a3;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSortDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialFilterExpressions", {
        /**
         * Gets the initial filters that are applied to the chart.
        */
        get: function () {
            var r = this.i.es;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialHighlightFilterExpressions", {
        /**
         * Gets the initial highlight filters that are applied to the chart.
        */
        get: function () {
            var r = this.i.et;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxFilterExpressionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialSummaryDescriptions", {
        /**
         * Gets the initial summaries that are applied to the chart.
        */
        get: function () {
            var r = this.i.a9;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxChartSummaryDescriptionCollection();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialSorts", {
        /**
         * Gets or sets the sorts to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get: function () {
            return this.i.rd;
        },
        set: function (v) {
            this.i.rd = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "groupSorts", {
        /**
         * Gets or sets the sorts to apply after grouping has been applied.
        */
        get: function () {
            return this.i.qm;
        },
        set: function (v) {
            this.i.qm = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialGroups", {
        /**
         * Gets or sets the groupings to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get: function () {
            return this.i.q9;
        },
        set: function (v) {
            this.i.q9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialFilter", {
        /**
         * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
        */
        get: function () {
            return this.i.q7;
        },
        set: function (v) {
            this.i.q7 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialHighlightFilter", {
        /**
         * Gets or sets the filter to apply to the chart. This property will become ignored if the filter is changed outside of this property.
        */
        get: function () {
            return this.i.rb;
        },
        set: function (v) {
            this.i.rb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "initialSummaries", {
        /**
         * Gets or sets the summaries to apply to the chart. This property will become ignored if sorts are changed outside of this property.
        */
        get: function () {
            return this.i.rf;
        },
        set: function (v) {
            this.i.rf = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightedDataSource", {
        /**
         * Gets or sets a collection of data items used to generate the chart.
         * The HighlightedItemsSource of this chart can be a list of objects containing one or more numeric properties.
         * Additionally, if the objects in the list implement the IEnumerable interface,
         * the Chart will attempt to delve into the sub-collections when reading through the data source.
         * Data binding can be further configured by attributing the data item classes
         * with the DataSeriesMemberIntentAttribute.
        */
        get: function () {
            return this.i.highlightedItemsSource;
        },
        set: function (v) {
            this.i.highlightedItemsSource = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "includedProperties", {
        /**
         * Gets or sets a set of property paths that should be included for consideration by the category chart, leaving the remainder excluded. If null, all properties will be considered.
        *
        * The `IncludedProperties` property used to include the properties for the consideration of the category chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     includedProperties="ProductName,Cost" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.includedProperties = ["ProductName", "Cost"];
        * ```
        */
        get: function () {
            return this.i.q;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.q = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "excludedProperties", {
        /**
         * Gets or sets a set of property paths that should be excluded from consideration by the category chart.
        *
        * The `ExcludedProperties` property used for the property paths that should be excluded from consideration by the category chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     excludedProperties="ID">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.excludedProperties = ["ID", "Discount"];
        * ```
        */
        get: function () {
            return this.i.o;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.o = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "brushes", {
        /**
         * Gets or sets the palette of brushes to use for coloring the chart series.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        * Use the `Brushes` property to  set the brushes.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       Brushes="#ff0000, #cc0000, #aa0000">
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.brushes = ["#ff0000","#00ff00"];
        * ```
        */
        get: function () {
            return fromBrushCollection(this.i.ab);
        },
        set: function (v) {
            this.i.ab = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "outlines", {
        /**
         * Gets or sets the palette of brushes to use for outlines on the chart series.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        *  Use the `Outlines` property to sets the palette of brushes to use for outlines on the chart series
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     outlines="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        */
        get: function () {
            return fromBrushCollection(this.i.af);
        },
        set: function (v) {
            this.i.af = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "actualBrushes", {
        /**
         * Gets the actual palette of brushes to use for coloring the chart series.
        */
        get: function () {
            return fromBrushCollection(this.i.z);
        },
        set: function (v) {
            this.i.z = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "actualOutlines", {
        /**
         * Gets the actual palette of brushes to use for outlines on the chart series.
        */
        get: function () {
            return fromBrushCollection(this.i.aa);
        },
        set: function (v) {
            this.i.aa = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "isHorizontalZoomEnabled", {
        /**
         * Gets or sets whether the chart can be horizontally zoomed through user interactions.
        *
        * Use the `IsHorizontalZoomEnabled` property to allow chart horizontally zoomed .
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       isHorizontalZoomEnabled=true>
        *   </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.isHorizontalZoomEnabled = true;
        * ```
        */
        get: function () {
            return this.i.g6;
        },
        set: function (v) {
            this.i.g6 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "isVerticalZoomEnabled", {
        /**
         * Gets or sets whether the chart can be vertically zoomed through user interactions.
        *
        * Use the `IsVerticalZoomEnabled` property to allow chart zoom vertically.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       isVerticalZoomEnabled=true>
        *     </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.isVerticalZoomEnabled = true;
        * ```
        */
        get: function () {
            return this.i.he;
        },
        set: function (v) {
            this.i.he = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "shouldDisplayMockData", {
        /**
         * Gets or sets whether the chart should display mock data when the data source has not been provided, if supported for this type of chart.
        */
        get: function () {
            return this.i.hh;
        },
        set: function (v) {
            this.i.hh = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "shouldUseSkeletonStyleForMockData", {
        /**
         * Gets or sets whether the chart should use a faded skeleton style for mock data.
        */
        get: function () {
            return this.i.hk;
        },
        set: function (v) {
            this.i.hk = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightedValuesDisplayMode", {
        /**
         * Gets or sets whether and how to display highlighted values for the series. Note, this is distinct from the highlighting feature that indicates what is closest or under the mouse.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get: function () {
            return this.i.dk;
        },
        set: function (v) {
            this.i.dk = ensureEnum(SeriesHighlightedValuesDisplayMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "isSeriesHighlightingEnabled", {
        /**
         * Gets or sets whether the chart can highlight series through user interactions.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get: function () {
            return this.i.g9;
        },
        set: function (v) {
            this.i.g9 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightedLegendItemVisibility", {
        /**
         * Gets or sets whether the chart can highlight series through user interactions.
         * This property applies to Category Chart and Financial Chart controls.
        */
        get: function () {
            return this.i.zf;
        },
        set: function (v) {
            this.i.zf = ensureEnum(Visibility_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "windowRect", {
        /**
         * Gets or sets the rectangle representing the current scroll and zoom state of the chart.
         * WindowRect is expressed as a Rectangle with coordinates and sizes between 0 and 1.
        *
        * Use `WindowRect` property representing the current scroll and zoom state of the chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       WindowRect=[0,0,1,1]>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.windowRect =[0,0,1,1];
        * ```
        */
        get: function () {
            return fromRect(this.i.yp);
        },
        set: function (v) {
            this.i.yp = toRect(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "viewport", {
        /**
         * Gets a rectangle representing the bounds of the plot area.
        *
        * `viewport` property representing the bounds of the plot area.
        *
        * ```ts
        * let viewport:Rect =  this.chart.viewport;
        * ```
        */
        get: function () {
            return fromRect(this.i.yo);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "chartTitle", {
        /**
         * Gets or sets text to display above the plot area.
        *
        * Use the `Title` property to display the text above the plot area.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     title="This is a Title">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.title= "This is a Title";
        * ```
        */
        get: function () {
            return this.i.st;
        },
        set: function (v) {
            this.i.st = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitle", {
        /**
         * Gets or sets text to display below the Title, above the plot area.
        *
        * Use the `Subtitle` property to display the text below  and above the plot area.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitle= "This is a subtitle">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.subtitle ="CategoryChart Subtitle" ;
        * ```
        */
        get: function () {
            return this.i.si;
        },
        set: function (v) {
            this.i.si = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "titleAlignment", {
        /**
         * Gets or sets horizontal alignment which determines the title position, relative to the left and right edges of the control.
        *
        * Use the `TitleAlignment` property for the horizontal alignment of the title.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     titleAlignment= "center">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.titleAlignment = HorizontalAlignment.Center;
        * ```
        */
        get: function () {
            return this.i.wy;
        },
        set: function (v) {
            this.i.wy = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "subtitleAlignment", {
        /**
         * Gets or sets horizontal alignment which determines the subtitle position, relative to the left and right edges of the control.
        *
        * Use the `SubtitleAlignment` property to Gets or sets horizontal alignment.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     subtitleAlignment= "center">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.subtitleAlignment = HorizontalAlignment.Right;
        * ```
        */
        get: function () {
            return this.i.wx;
        },
        set: function (v) {
            this.i.wx = ensureEnum(HorizontalAlignment_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "unknownValuePlotting", {
        /**
         * Gets or sets the behavior that determines how unknown values will be plotted on the chart.
         * Null and Double.NaN are two examples of unknown values.
        *
        * Use the `UnknownValuePlotting` property to determines the behavior that how unknown values will be plotted on the chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       unknownValuePlotting= "dontPlot">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.unknownValuePlotting =UnknownValuePlotting.DontPlot;
        * ```
        */
        get: function () {
            return this.i.eh;
        },
        set: function (v) {
            this.i.eh = ensureEnum(UnknownValuePlotting_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "resolution", {
        /**
         * Gets or sets the rendering resolution for all series in this chart.
         * Where n = Resolution, for every n horizontal pixels, combine all items into a single data point.  When Resolution = 0, all data points will be rendered as graphical objects.  Charts with a higher resolution will have faster performance.
        *
        * Use the `Resolution` property if the callouts should be display.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     resolution= 2>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *   this.chart.resolution = 2 ;
        * ```
        */
        get: function () {
            return this.i.j6;
        },
        set: function (v) {
            this.i.j6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "thickness", {
        /**
         * Gets or sets the thickness for all series in this chart. Depending on the ChartType, this can be the main brush used, or just the outline.
        *
        * Use the `Thickness` property for the thickness of all the series in this chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     thickness=5>
        * </igx-category-chart>
        * ```
        */
        get: function () {
            return this.i.kc;
        },
        set: function (v) {
            this.i.kc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "outlineMode", {
        /**
         * Gets or sets the OutlineMode for all series in this chart.
        */
        get: function () {
            return this.i.dr;
        },
        set: function (v) {
            this.i.dr = ensureEnum(SeriesOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerOutlineMode", {
        /**
         * Gets or sets the MarkerOutlineMode for all series that support markers in this chart.
        */
        get: function () {
            return this.i.c3;
        },
        set: function (v) {
            this.i.c3 = ensureEnum(MarkerOutlineMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerFillMode", {
        /**
         * Gets or sets the MarkerFillMode for all series that support markers in this chart.
        */
        get: function () {
            return this.i.c1;
        },
        set: function (v) {
            this.i.c1 = ensureEnum(MarkerFillMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerFillOpacity", {
        /**
         * Gets or sets the Marker Fill Opacity for all series that support markers in this chart.
        */
        get: function () {
            return this.i.jz;
        },
        set: function (v) {
            this.i.jz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerThickness", {
        /**
         * Gets or sets the Marker Thickness for all series that support markers in this chart.
        */
        get: function () {
            return this.i.j0;
        },
        set: function (v) {
            this.i.j0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerTypes", {
        /**
         * Gets or sets the marker shapes used for indicating location of data points in this chart.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        */
        get: function () {
            if (this._markerTypes === null) {
                var coll = new IgxMarkerTypeCollection();
                var innerColl = this.i.c9;
                if (!innerColl) {
                    innerColl = new MarkerTypeCollection_internal();
                }
                this._markerTypes = coll._fromInner(innerColl);
                this.i.c9 = innerColl;
            }
            return this._markerTypes;
        },
        set: function (v) {
            if (this._markerTypes !== null) {
                this._markerTypes._setSyncTarget(null);
                this._markerTypes = null;
            }
            var coll = new IgxMarkerTypeCollection();
            this._markerTypes = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(MarkerType_$type);
            var innerColl = this.i.c9;
            if (!innerColl) {
                innerColl = new MarkerTypeCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._markerTypes._setSyncTarget(syncColl);
            this.i.c9 = innerColl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerAutomaticBehavior", {
        /**
         * Gets or sets the default marker type for all series plotted in this chart.
         * This property is ignored when the MarkerTypes property is set
        */
        get: function () {
            return this.i.cz;
        },
        set: function (v) {
            this.i.cz = ensureEnum(MarkerAutomaticBehavior_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerBrushes", {
        /**
         * Gets or sets the palette of brushes used for rendering fill area of data point markers.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        *
        * `MarkerBrushes` property used for rendering fill area of data point markers.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerBrushes="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.markerBrushes=[ "#ff0000", "#ffff00", "#00ffff" ];
        * ```
        */
        get: function () {
            return fromBrushCollection(this.i.ad);
        },
        set: function (v) {
            this.i.ad = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerOutlines", {
        /**
         * Gets or sets the palette of brushes used for rendering outlines of data point markers.
         * This property applies only to these chart types: point, line, spline, bubble, and polygon
        *
        * `MarkerOutlines` property used for rendering outlines of data point markers.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerOutlines="#ff0000, #cc0000, #aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.markerOutlines= ["#ff0000", "#ffff00", "#00ffff"] ;
        * ```
        */
        get: function () {
            return fromBrushCollection(this.i.ae);
        },
        set: function (v) {
            this.i.ae = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "markerMaxCount", {
        /**
         * Gets or sets the maximum number of markers displayed in the plot area of the chart.
        *
        * `markerMaxCount` property used to display maximum number of markers in the plot area of the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     markerMaxCount=100 >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.markerMaxCount = 100 ;
        * ```
        */
        get: function () {
            return this.i.li;
        },
        set: function (v) {
            this.i.li = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "areaFillOpacity", {
        /**
         * Gets or sets the fill opacity for all series that have area visuals in this chart.
         * For example, Area, SplineArea, Column chart types
        */
        get: function () {
            return this.i.jj;
        },
        set: function (v) {
            this.i.jj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "animateSeriesWhenAxisRangeChanges", {
        /**
         * Gets or sets whether the series animations should be allowed when a range change has been detected on an axis.
        */
        get: function () {
            return this.i.gg;
        },
        set: function (v) {
            this.i.gg = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "trendLineBrushes", {
        /**
         * Gets or sets the palette of brushes to used for coloring trend lines in this chart.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        *
        * Use the `TrendLineBrushes` property for coloring trend lines in the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     trendLineBrushes="#ff0000,#aa0000">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineBrushes=["#ff0000", "#ffff00", "#00ffff"]	;
        * ```
        */
        get: function () {
            return fromBrushCollection(this.i.ah);
        },
        set: function (v) {
            this.i.ah = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "trendLineType", {
        /**
         * Gets or sets the formula used for calculating trend lines in this chart.
         * This property applies only to these chart types: point, line, spline, and bubble
        *
        * Use the `TrendLineType` property for calculating trend lines.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       trendLineType= "cubicFit">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineType = TrendLineType.CubicFit;
        * ```
        */
        get: function () {
            return this.i.ef;
        },
        set: function (v) {
            this.i.ef = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the trend lines in this chart.
         * This property applies only to these chart types: point, line, spline, and bubble
        *
        * Use the `TrendLineThickness` property for the thickness of the trend lines in the chart.
        *
        * ```html
        * <igx-category-chart
        *     yAxisMinimumValue="0"
        *     [dataSource]="data"
        *     trendLineThickness= 2>
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * this.chart.trendLineThickness=2;
        * ```
        */
        get: function () {
            return this.i.ki;
        },
        set: function (v) {
            this.i.ki = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "alignsGridLinesToPixels", {
        /**
         * Gets or sets a value indicating whether grid and tick lines are aligned to device pixels.
        *
        * Use `AlignsGridLinesToPixels` propert to indicat whether grid and tick lines are aligned to device pixels.
        *
        * ```html
        * <igx-category-chart
        *     [dataSource]="data"
        *     AlignsGridLinesToPixels="true">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  this.chart.alignsGridLinesToPixels= true;
        * ```
        */
        get: function () {
            return this.i.gf;
        },
        set: function (v) {
            this.i.gf = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaMarginLeft", {
        /**
         * Margin applied to the Left of the plot area.
        */
        get: function () {
            return this.i.j3;
        },
        set: function (v) {
            this.i.j3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaMarginTop", {
        /**
         * Margin applied to the Top of the plot area.
        */
        get: function () {
            return this.i.j5;
        },
        set: function (v) {
            this.i.j5 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaMarginRight", {
        /**
         * Margin applied to the right of the plot area.
        */
        get: function () {
            return this.i.j4;
        },
        set: function (v) {
            this.i.j4 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaMarginBottom", {
        /**
         * Margin applied below the plot area.
        */
        get: function () {
            return this.i.j2;
        },
        set: function (v) {
            this.i.j2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "computedPlotAreaMarginMode", {
        /**
         * Gets or sets mode to use for automatically calculating the plot area margin.
        */
        get: function () {
            return this.i.bc;
        },
        set: function (v) {
            this.i.bc = ensureEnum(ComputedPlotAreaMarginMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPlotAreaMarginHorizontalMode", {
        /**
         * Gets or sets horizontal mode to use for automatically calculating the plot area margin based ont the series.
        */
        get: function () {
            return this.i.dt;
        },
        set: function (v) {
            this.i.dt = ensureEnum(SeriesPlotAreaMarginHorizontalMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPlotAreaMarginVerticalMode", {
        /**
         * Gets or sets vertical mode to use for automatically calculating the plot area margin based ont the series.
        */
        get: function () {
            return this.i.dv;
        },
        set: function (v) {
            this.i.dv = ensureEnum(SeriesPlotAreaMarginVerticalMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightingMode", {
        /**
         * Gets or sets the highlighting mode to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
        */
        get: function () {
            return this.i.dp;
        },
        set: function (v) {
            this.i.dp = ensureEnum(SeriesHighlightingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "highlightingBehavior", {
        /**
         * Gets or sets the highlighting Behavior to use for the series in the component, when supported. This takes precedence over the series level IsHighlightingEnabled.
        */
        get: function () {
            return this.i.dm;
        },
        set: function (v) {
            this.i.dm = ensureEnum(SeriesHighlightingBehavior_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "legendHighlightingMode", {
        /**
         * Gets or sets the highlighting mode to use for the legend linked to the component, when supported.
        */
        get: function () {
            return this.i.cr;
        },
        set: function (v) {
            this.i.cr = ensureEnum(LegendHighlightingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "legendItemBadgeShape", {
        /**
         * Gets or sets the type of legend badges representing all series displayed in a legend linked to this component
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
        */
        get: function () {
            return this.i.cx;
        },
        set: function (v) {
            this.i.cx = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "legendItemBadgeMode", {
        /**
         * Gets or sets the mode of legend badges representing all series displayed in a legend linked to this component.
         * This property will be ignored when the LegendItemTemplate or LegendItemBadgeTemplate property is set on a series
        */
        get: function () {
            return this.i.ct;
        },
        set: function (v) {
            this.i.ct = ensureEnum(LegendItemBadgeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "trendLinePeriod", {
        get: function () {
            return this.i.ll;
        },
        set: function (v) {
            this.i.ll = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "toolTipType", {
        /**
         * Gets or sets the style of tooltip to be displayed.
        */
        get: function () {
            return this.i.ed;
        },
        set: function (v) {
            this.i.ed = ensureEnum(ToolTipType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsDisplayMode", {
        /**
         * Gets or sets the crosshairs to be displayed.
        */
        get: function () {
            return this.i.bf;
        },
        set: function (v) {
            this.i.bf = ensureEnum(CrosshairsDisplayMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsSnapToData", {
        /**
         * Gets or sets whether crosshairs will snap to the nearest data point.
        */
        get: function () {
            return this.i.gp;
        },
        set: function (v) {
            this.i.gp = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsLineVerticalStroke", {
        /**
         * Gets or sets the color to apply to vertical crosshairs line.
        */
        get: function () {
            return brushToString(this.i.xw);
        },
        set: function (v) {
            this.i.xw = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsLineThickness", {
        /**
         * Gets or sets thickness of crosshairs lines.
        */
        get: function () {
            return this.i.jm;
        },
        set: function (v) {
            this.i.jm = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsLineHorizontalStroke", {
        /**
         * Gets or sets the color to apply to horizontal crosshairs line.
        */
        get: function () {
            return brushToString(this.i.xv);
        },
        set: function (v) {
            this.i.xv = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationEnabled", {
        /**
         * Gets or sets whether annotations are shown along the axis for crosshair values
        */
        get: function () {
            return this.i.go;
        },
        set: function (v) {
            this.i.go = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationXAxisBackground", {
        /**
         * Gets or sets the background of crosshair annotation on x-axis.
        */
        get: function () {
            return brushToString(this.i.xr);
        },
        set: function (v) {
            this.i.xr = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationYAxisBackground", {
        /**
         * Gets or sets the background of crosshair annotation on y-axis.
        */
        get: function () {
            return brushToString(this.i.xt);
        },
        set: function (v) {
            this.i.xt = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationXAxisTextColor", {
        /**
         * Gets or sets the text color of crosshair annotation on x-axis.
        */
        get: function () {
            return brushToString(this.i.xs);
        },
        set: function (v) {
            this.i.xs = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationYAxisTextColor", {
        /**
         * Gets or sets the text color of crosshair annotation on y-axis.
        */
        get: function () {
            return brushToString(this.i.xu);
        },
        set: function (v) {
            this.i.xu = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationXAxisPrecision", {
        /**
         * Gets or sets precision on interpolated values of crosshairs on x-axis.
        */
        get: function () {
            return this.i.lb;
        },
        set: function (v) {
            this.i.lb = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "crosshairsAnnotationYAxisPrecision", {
        /**
         * Gets or sets precision on interpolated values of crosshairs on y-axis.
        */
        get: function () {
            return this.i.lc;
        },
        set: function (v) {
            this.i.lc = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "shouldAvoidAxisAnnotationCollisions", {
        /**
         * Gets or sets whether annotations for the final value of each series is displayed on the axis.
        */
        get: function () {
            return this.i.hg;
        },
        set: function (v) {
            this.i.hg = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "shouldPanOnMaximumZoom", {
        /**
         * Gets or sets a whether the chart should pan its content when zoo,ing in passed max zoom level.
        */
        get: function () {
            return this.i.hi;
        },
        set: function (v) {
            this.i.hi = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "finalValueAnnotationsVisible", {
        /**
         * Gets or sets whether annotations for the final value of each series is displayed on the axis.
        */
        get: function () {
            return this.i.gw;
        },
        set: function (v) {
            this.i.gw = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "finalValueAnnotationsBackground", {
        /**
         * Gets or sets the background of final value annotation.
        */
        get: function () {
            return brushToString(this.i.x7);
        },
        set: function (v) {
            this.i.x7 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "finalValueAnnotationsTextColor", {
        /**
         * Gets or sets the text color of final value annotation.
        */
        get: function () {
            return brushToString(this.i.x8);
        },
        set: function (v) {
            this.i.x8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "finalValueAnnotationsPrecision", {
        /**
         * Gets or sets precision on final value annotation.
        */
        get: function () {
            return this.i.lf;
        },
        set: function (v) {
            this.i.lf = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "autoCalloutsVisible", {
        /**
         * Gets or sets if the auto value callouts should be displayed.
        */
        get: function () {
            return this.i.gi;
        },
        set: function (v) {
            this.i.gi = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsVisible", {
        /**
         * Gets or sets if callouts should be displayed.
        */
        get: function () {
            return this.i.gn;
        },
        set: function (v) {
            this.i.gn = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutStyleUpdatingEventEnabled", {
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get: function () {
            return this.i.gj;
        },
        set: function (v) {
            this.i.gj = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "useValueForAutoCalloutLabels", {
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get: function () {
            return this.i.hl;
        },
        set: function (v) {
            this.i.hl = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutCollisionMode", {
        /**
         * Gets or sets if event annotations should be displayed.
        */
        get: function () {
            return this.i.ak;
        },
        set: function (v) {
            this.i.ak = ensureEnum(CalloutCollisionMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsUseItemColorForFill", {
        /**
         * Gets or sets if the series item color should be used for the callout fills.
        */
        get: function () {
            return this.i.gl;
        },
        set: function (v) {
            this.i.gl = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsUseItemColorForOutline", {
        /**
         * Gets or sets if the series item color should be used for the callout outlines.
        */
        get: function () {
            return this.i.gm;
        },
        set: function (v) {
            this.i.gm = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsUseAutoContrastingLabelColors", {
        /**
         * Gets or sets whether to the label color is automatically decided between a light and dark option for contrast.
        */
        get: function () {
            return this.i.gk;
        },
        set: function (v) {
            this.i.gk = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsStrokeThickness", {
        /**
         * Gets or sets if the thickness that should be used for the callout outlines.
        */
        get: function () {
            return this.i.jl;
        },
        set: function (v) {
            this.i.jl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsBackground", {
        /**
         * Gets or sets if the thickness that should be used for the callout outlines.
        */
        get: function () {
            return brushToString(this.i.xq);
        },
        set: function (v) {
            this.i.xq = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsAutoLabelPrecision", {
        /**
         * Gets or sets the amount of precision to apply to the auto callout labels.
        */
        get: function () {
            return this.i.la;
        },
        set: function (v) {
            this.i.la = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsAllowedPositions", {
        /**
         * Gets or sets the allowed positions that the callout layer is allowed to use.
        */
        get: function () {
            if (this._calloutsAllowedPositions === null) {
                var coll = new IgxCalloutPlacementPositionsCollection();
                var innerColl = this.i.am;
                if (!innerColl) {
                    innerColl = new CalloutPlacementPositionsCollection_internal();
                }
                this._calloutsAllowedPositions = coll._fromInner(innerColl);
                this.i.am = innerColl;
            }
            return this._calloutsAllowedPositions;
        },
        set: function (v) {
            if (this._calloutsAllowedPositions !== null) {
                this._calloutsAllowedPositions._setSyncTarget(null);
                this._calloutsAllowedPositions = null;
            }
            var coll = new IgxCalloutPlacementPositionsCollection();
            this._calloutsAllowedPositions = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(CalloutPlacementPositions_$type);
            var innerColl = this.i.am;
            if (!innerColl) {
                innerColl = new CalloutPlacementPositionsCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._calloutsAllowedPositions._setSyncTarget(syncColl);
            this.i.am = innerColl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsXMemberPath", {
        /**
         * Gets or sets the member path of the X data for the callouts.
        */
        get: function () {
            return this.i.nk;
        },
        set: function (v) {
            this.i.nk = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsYMemberPath", {
        /**
         * Gets or sets the member path of the Y data for the callouts.
        */
        get: function () {
            return this.i.nm;
        },
        set: function (v) {
            this.i.nm = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsLabelMemberPath", {
        /**
         * Gets or sets the member path of the label data for the callouts.
        */
        get: function () {
            return this.i.nc;
        },
        set: function (v) {
            this.i.nc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutsContentMemberPath", {
        /**
         * Gets or sets the member path of the content data for the callouts.
        */
        get: function () {
            return this.i.m9;
        },
        set: function (v) {
            this.i.m9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "valueLines", {
        /**
         * Gets or sets what value lines to use in the chart.
        */
        get: function () {
            if (this._valueLines === null) {
                var coll = new IgxValueModeCollection();
                var innerColl = this.i.ej;
                if (!innerColl) {
                    innerColl = new ValueModeCollection_internal();
                }
                this._valueLines = coll._fromInner(innerColl);
                this.i.ej = innerColl;
            }
            return this._valueLines;
        },
        set: function (v) {
            if (this._valueLines !== null) {
                this._valueLines._setSyncTarget(null);
                this._valueLines = null;
            }
            var coll = new IgxValueModeCollection();
            this._valueLines = coll._fromOuter(v);
            var syncColl = new SyncableObservableCollection$1(ValueLayerValueMode_$type);
            var innerColl = this.i.ej;
            if (!innerColl) {
                innerColl = new ValueModeCollection_internal();
            }
            syncColl._inner = innerColl;
            syncColl.clear();
            this._valueLines._setSyncTarget(syncColl);
            this.i.ej = innerColl;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "valueLinesBrushes", {
        /**
         * Gets or sets the palette of brushes to use for coloring the value lines present in the ValueLines property.
         * The value provided should be an array of CSS color strings or JavaScript objects defining gradients. Optionally the first element can be a string reading "RGB" or "HSV" to specify the interpolation mode of the collection
        */
        get: function () {
            return fromBrushCollection(this.i.ai);
        },
        set: function (v) {
            this.i.ai = toBrushCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "valueLinesThickness", {
        /**
         * Gets or sets thickness of value lines.
        */
        get: function () {
            return this.i.kj;
        },
        set: function (v) {
            this.i.kj = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarMode", {
        /**
         * Gets or sets the horizontal scrollbar mode to use for the series viewer.
        */
        get: function () {
            return this.i.d6;
        },
        set: function (v) {
            this.i.d6 = ensureEnum(SeriesViewerScrollbarMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarMode", {
        /**
         * Gets or sets the vertical scrollbar mode to use for the series viewer.
        */
        get: function () {
            return this.i.d7;
        },
        set: function (v) {
            this.i.d7 = ensureEnum(SeriesViewerScrollbarMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarPosition", {
        /**
         * Gets or sets the position to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.d3;
        },
        set: function (v) {
            this.i.d3 = ensureEnum(SeriesViewerHorizontalScrollbarPosition_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarPosition", {
        /**
         * Gets or sets the position to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.eb;
        },
        set: function (v) {
            this.i.eb = ensureEnum(SeriesViewerVerticalScrollbarPosition_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarFill", {
        /**
         * Gets or sets the fill to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return brushToString(this.i.ye);
        },
        set: function (v) {
            this.i.ye = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarOutline", {
        /**
         * Gets or sets the outline to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return brushToString(this.i.yf);
        },
        set: function (v) {
            this.i.yf = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.jv;
        },
        set: function (v) {
            this.i.jv = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarMaxOpacity", {
        /**
         * Gets or sets the max opacity to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.ju;
        },
        set: function (v) {
            this.i.ju = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarCornerRadius", {
        /**
         * Gets or sets the corner radius to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.jr;
        },
        set: function (v) {
            this.i.jr = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarHeight", {
        /**
         * Gets or sets the height to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.js;
        },
        set: function (v) {
            this.i.js = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarInset", {
        /**
         * Gets or sets the inset distance to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.jt;
        },
        set: function (v) {
            this.i.jt = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarTrackStartInset", {
        /**
         * Gets or sets the track start inset to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.jx;
        },
        set: function (v) {
            this.i.jx = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarTrackEndInset", {
        /**
         * Gets or sets the track end inset to use for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.jw;
        },
        set: function (v) {
            this.i.jw = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "horizontalViewScrollbarShouldAddAutoTrackInsets", {
        /**
         * Gets or sets whether to use automatic track insets for the horizontal scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.gz;
        },
        set: function (v) {
            this.i.gz = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarFill", {
        /**
         * Gets or sets the fill to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return brushToString(this.i.yk);
        },
        set: function (v) {
            this.i.yk = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarOutline", {
        /**
         * Gets or sets the outline to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return brushToString(this.i.yl);
        },
        set: function (v) {
            this.i.yl = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarStrokeThickness", {
        /**
         * Gets or sets the stroke thickness to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.kn;
        },
        set: function (v) {
            this.i.kn = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarMaxOpacity", {
        /**
         * Gets or sets the max opacity to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.km;
        },
        set: function (v) {
            this.i.km = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarCornerRadius", {
        /**
         * Gets or sets the corner radius to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.kk;
        },
        set: function (v) {
            this.i.kk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarWidth", {
        /**
         * Gets or sets the width to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.kq;
        },
        set: function (v) {
            this.i.kq = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarInset", {
        /**
         * Gets or sets the inset distance to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.kl;
        },
        set: function (v) {
            this.i.kl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarTrackStartInset", {
        /**
         * Gets or sets the track start inset to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.kp;
        },
        set: function (v) {
            this.i.kp = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarTrackEndInset", {
        /**
         * Gets or sets the track end inset to use for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.ko;
        },
        set: function (v) {
            this.i.ko = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "verticalViewScrollbarShouldAddAutoTrackInsets", {
        /**
         * Gets or sets whether to use automatic track insets for the vertical scrollbar in the component, when enabled.
        */
        get: function () {
            return this.i.hm;
        },
        set: function (v) {
            this.i.hm = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "windowRectMinWidth", {
        /**
         * Sets or gets the minimum width that the window rect is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
        */
        get: function () {
            return this.i.ks;
        },
        set: function (v) {
            this.i.ks = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "windowRectMinHeight", {
        /**
         * Sets or gets the minimum height that the window rect is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property accepts values between 0.0 (max zooming) and 1.0 (no zooming)
        */
        get: function () {
            return this.i.kr;
        },
        set: function (v) {
            this.i.kr = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "windowSizeMinWidth", {
        /**
         * Sets or gets minimum pixel width that the window is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property is overridden by the WindowRectMinWidth property
        */
        get: function () {
            return this.i.ku;
        },
        set: function (v) {
            this.i.ku = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "windowSizeMinHeight", {
        /**
         * Sets or gets minimum pixel height that the window is allowed to reach before being clamped.
         * Decrease this value if you want to allow for further zooming into the viewer.
         * If this value is lowered too much it can cause graphical corruption due to floating point arithmetic inaccuracy.
         * This property is overridden by the WindowRectMinHeight property
        */
        get: function () {
            return this.i.kt;
        },
        set: function (v) {
            this.i.kt = +v;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.findByName = function (name) {
        if (this.findEphemera) {
            if (name && name.indexOf("@@e:") == 0) {
                return this.findEphemera(name);
            }
        }
        if (this.dataToolTipValueFormatSpecifiers != null && arrayFindByName(this.dataToolTipValueFormatSpecifiers, name)) {
            return arrayFindByName(this.dataToolTipValueFormatSpecifiers, name);
        }
        if (this.dataToolTipHeaderFormatSpecifiers != null && arrayFindByName(this.dataToolTipHeaderFormatSpecifiers, name)) {
            return arrayFindByName(this.dataToolTipHeaderFormatSpecifiers, name);
        }
        if (this.sortDescriptions != null && this.sortDescriptions.findByName && this.sortDescriptions.findByName(name)) {
            return this.sortDescriptions.findByName(name);
        }
        if (this.groupSortDescriptions != null && this.groupSortDescriptions.findByName && this.groupSortDescriptions.findByName(name)) {
            return this.groupSortDescriptions.findByName(name);
        }
        if (this.groupDescriptions != null && this.groupDescriptions.findByName && this.groupDescriptions.findByName(name)) {
            return this.groupDescriptions.findByName(name);
        }
        if (this.filterExpressions != null && this.filterExpressions.findByName && this.filterExpressions.findByName(name)) {
            return this.filterExpressions.findByName(name);
        }
        if (this.highlightFilterExpressions != null && this.highlightFilterExpressions.findByName && this.highlightFilterExpressions.findByName(name)) {
            return this.highlightFilterExpressions.findByName(name);
        }
        if (this.summaryDescriptions != null && this.summaryDescriptions.findByName && this.summaryDescriptions.findByName(name)) {
            return this.summaryDescriptions.findByName(name);
        }
        if (this.selectedSeriesItems != null && this.selectedSeriesItems.findByName && this.selectedSeriesItems.findByName(name)) {
            return this.selectedSeriesItems.findByName(name);
        }
        if (this.focusedSeriesItems != null && this.focusedSeriesItems.findByName && this.focusedSeriesItems.findByName(name)) {
            return this.focusedSeriesItems.findByName(name);
        }
        if (this.initialSortDescriptions != null && this.initialSortDescriptions.findByName && this.initialSortDescriptions.findByName(name)) {
            return this.initialSortDescriptions.findByName(name);
        }
        if (this.initialGroupSortDescriptions != null && this.initialGroupSortDescriptions.findByName && this.initialGroupSortDescriptions.findByName(name)) {
            return this.initialGroupSortDescriptions.findByName(name);
        }
        if (this.initialGroupDescriptions != null && this.initialGroupDescriptions.findByName && this.initialGroupDescriptions.findByName(name)) {
            return this.initialGroupDescriptions.findByName(name);
        }
        if (this.initialFilterExpressions != null && this.initialFilterExpressions.findByName && this.initialFilterExpressions.findByName(name)) {
            return this.initialFilterExpressions.findByName(name);
        }
        if (this.initialHighlightFilterExpressions != null && this.initialHighlightFilterExpressions.findByName && this.initialHighlightFilterExpressions.findByName(name)) {
            return this.initialHighlightFilterExpressions.findByName(name);
        }
        if (this.initialSummaryDescriptions != null && this.initialSummaryDescriptions.findByName && this.initialSummaryDescriptions.findByName(name)) {
            return this.initialSummaryDescriptions.findByName(name);
        }
        if (this.legend && this.legend.name && this.legend.name == name) {
            return this.legend;
        }
        if (this.markerTypes != null && this.markerTypes.findByName && this.markerTypes.findByName(name)) {
            return this.markerTypes.findByName(name);
        }
        if (this.calloutsAllowedPositions != null && this.calloutsAllowedPositions.findByName && this.calloutsAllowedPositions.findByName(name)) {
            return this.calloutsAllowedPositions.findByName(name);
        }
        if (this.valueLines != null && this.valueLines.findByName && this.valueLines.findByName(name)) {
            return this.valueLines.findByName(name);
        }
        return null;
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "hasUserValues", {
        get: function () {
            return this._hasUserValues;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype.__m = function (propertyName) {
        if (!this._inStyling) {
            this._hasUserValues.add(propertyName);
        }
    };
    IgxDomainChartComponent.prototype._styling = function (container, component, parent) {
        if (this._inStyling) {
            return;
        }
        this._inStyling = true;
        this._stylingContainer = container;
        this._stylingParent = component;
        var genericPrefix = "";
        var typeName = this.i.$type.name;
        if (typeName.indexOf("Xam") === 0) {
            typeName = typeName.substring(3);
        }
        genericPrefix = toSpinal("DomainChartComponent");
        var additionalPrefixes = [];
        var prefix = toSpinal(typeName);
        additionalPrefixes.push(prefix + "-");
        var b = this.i.$type.baseType;
        while (b && b.name != "Object" &&
            b.name != "Base" &&
            b.name != "Control" &&
            b.Name != "DependencyObject" &&
            b.Name != "FrameworkElement") {
            typeName = b.name;
            if (typeName.indexOf("Xam") === 0) {
                typeName = typeName.substring(3);
            }
            var basePrefix = toSpinal(typeName);
            additionalPrefixes.push(basePrefix + "-");
            b = b.baseType;
        }
        if (parent) {
            var parentTypeName = parent.i.$type.name;
            if (parentTypeName.indexOf("Xam") === 0) {
                parentTypeName = parentTypeName.substring(3);
            }
            var parentPrefix = toSpinal(parentTypeName);
            additionalPrefixes.push(parentPrefix + "-" + genericPrefix + "-");
            additionalPrefixes.push(parentPrefix + "-" + prefix + "-");
        }
        initializePropertiesFromCss(container, this, genericPrefix + "-", this.hasUserValues, false, additionalPrefixes);
        if (this._otherStyling) {
            this._otherStyling(container, component, parent);
        }
        this._inStyling = false;
    };
    /**
 * Provides a container for this control

*
* `provideContainer` method provide container for the control.
*
* ```ts
*     this.chart.provideContainer("Container");
* ```
*/
    IgxDomainChartComponent.prototype.provideContainer = function (container) {
        this.i.provideContainer(container);
    };
    /**
     * Destroy this control
    
    *
    * Use the `destroy` property to destroy the chart.
    *
    * ```ts
    * this.chart.destroy();
    * ```
    */
    IgxDomainChartComponent.prototype.destroy = function () {
        this.i.destroy();
    };
    /**
     * Called when the control has been resized.
    
    *
    * `NotifyResized` method Called when the control has been resized.
    *
    * ```ts
    * this.chart.notifyResized();
    * ```
    */
    IgxDomainChartComponent.prototype.notifyResized = function () {
        this.i.notifyResized();
    };
    IgxDomainChartComponent.prototype.notifyVisualPropertiesChanged = function () {
        this.i.va();
    };
    /**
     * Forces any pending refresh to the chart to be finished.
    
    *
    * Method `flush` used to Forces any pending deferred work to render on the chart before continuing.
    *
    * ```ts
    * this.chart.flush();
    * ```
    */
    IgxDomainChartComponent.prototype.flush = function () {
        this.i.ug();
    };
    /**
     * Hides the active main tooltip, if displayed.
    
    *
    * Use the `HideToolTip` method to hide the active tooltip.
    *
    * ```ts
    * this.chart.hideToolTip();
    * ```
    */
    IgxDomainChartComponent.prototype.hideToolTip = function () {
        this.i.uo();
    };
    /**
     * Replays transition-in animation on all series in the chart.
    
    */
    IgxDomainChartComponent.prototype.replayTransitionIn = function () {
        this.i.wd();
    };
    /**
     * Performs zoom in action on the chart by specified percentage of current window rect
    
    */
    IgxDomainChartComponent.prototype.zoomIn = function (percentage) {
        this.i.wt(percentage);
    };
    /**
     * Performs zoom out action on the chart by specified percentage of current window rect
    
    */
    IgxDomainChartComponent.prototype.zoomOut = function (percentage) {
        this.i.wu(percentage);
    };
    /**
     * Resets the zoom level to default.
    
    */
    IgxDomainChartComponent.prototype.resetZoom = function () {
        this.i.wl();
    };
    IgxDomainChartComponent.prototype.getDesiredToolbarActions = function () {
        var iv = this.i.getDesiredToolbarActions();
        return (iv);
    };
    IgxDomainChartComponent.prototype.addCommandAvailabilityListener = function (listener) {
        this.i.addCommandAvailabilityListener(listener);
    };
    IgxDomainChartComponent.prototype.removeCommandAvailabilityListener = function (listener) {
        this.i.removeCommandAvailabilityListener(listener);
    };
    IgxDomainChartComponent.prototype.addCommandStateChangedListener = function (listener) {
        this.i.addCommandStateChangedListener(listener);
    };
    IgxDomainChartComponent.prototype.removeCommandStateChangedListener = function (listener) {
        this.i.removeCommandStateChangedListener(listener);
    };
    IgxDomainChartComponent.prototype.notifySetItem = function (source_, index, oldItem, newItem) {
        this.i.u9(source_, index, oldItem, newItem);
    };
    /**
     * Used to manually notify the chart that the data source has reset or cleared its items.
    
    *
    * Use `notifyClearItems` method to notifies the chart that the items have been cleared from an associated data source.
    *
    * ```ts
    * this.chart.notifyClearItems(this.data);
    * ```
    */
    IgxDomainChartComponent.prototype.notifyClearItems = function (source_) {
        this.i.u5(source_);
    };
    IgxDomainChartComponent.prototype.notifyInsertItem = function (source_, index, newItem) {
        this.i.u6(source_, index, newItem);
    };
    IgxDomainChartComponent.prototype.notifyRemoveItem = function (source_, index, oldItem) {
        this.i.u7(source_, index, oldItem);
    };
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesAdded", {
        /**
         * Event raised when a series is initialized and added to this chart.
        *
        * `SeriesAdded` event raised when a series is initialized and added to this chart.
        *
        * ```html
        *  <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesAdded)="CategoryChart_SeriesAdded()"
        *      >
        * </igx-category-chart>
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesAdded == null) {
                this._seriesAdded = new EventEmitter();
                this.i.seriesAdded = delegateCombine(this.i.seriesAdded, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxChartSeriesEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesAdded) {
                            _this.beforeSeriesAdded(_this, outerArgs);
                        }
                        _this._seriesAdded.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesAdded;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesRemoved", {
        /**
         * Event raised when a series is removed from this chart.
        *
        * `SeriesRemoved` event raised when a series is removed from this chart.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesRemoved)="CategoryChart_seriesRemoved()">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  CategoryChart_seriesRemoved(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesRemoved == null) {
                this._seriesRemoved = new EventEmitter();
                this.i.seriesRemoved = delegateCombine(this.i.seriesRemoved, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxChartSeriesEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesRemoved) {
                            _this.beforeSeriesRemoved(_this, outerArgs);
                        }
                        _this._seriesRemoved.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesRemoved;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPointerEnter", {
        /**
         * Occurs when the pointer enters a Series.
        *
        * `SeriesPointerEnter` event raised when the pointer enters a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerEnter)="CategoryChart_seriesPointerEnter()" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * CategoryChart_seriesPointerEnter(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesPointerEnter == null) {
                this._seriesPointerEnter = new EventEmitter();
                this.i.seriesPointerEnter = delegateCombine(this.i.seriesPointerEnter, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesPointerEnter) {
                            _this.beforeSeriesPointerEnter(_this, outerArgs);
                        }
                        _this._seriesPointerEnter.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerEnter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPointerLeave", {
        /**
         * Occurs when the pointer leaves a Series.
        *
        * `SeriesPointerLeave` event raised when the pointer leaves a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerLeave)= "CategoryChart_seriesPointerLeave()" >
        * </igx-category-chart>
        * ```
        *
        * ```ts
        * CategoryChart_seriesPointerLeave(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesPointerLeave == null) {
                this._seriesPointerLeave = new EventEmitter();
                this.i.seriesPointerLeave = delegateCombine(this.i.seriesPointerLeave, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesPointerLeave) {
                            _this.beforeSeriesPointerLeave(_this, outerArgs);
                        }
                        _this._seriesPointerLeave.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerLeave;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPointerMove", {
        /**
         * Occurs when the pointer moves over a Series.
        *
        * `SeriesPointerMove` event raised when the pointer moves over a Series.
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *        (seriesPointerMove)="CategoryChart_seriesPointerMove()">
        * </igx-category-chart>
        * ```
        *
        * ```ts
        *  CategoryChart_seriesPointerMove(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesPointerMove == null) {
                this._seriesPointerMove = new EventEmitter();
                this.i.seriesPointerMove = delegateCombine(this.i.seriesPointerMove, function (o, e) {
                    var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeSeriesPointerMove) {
                        _this.beforeSeriesPointerMove(_this, outerArgs);
                    }
                    _this._seriesPointerMove.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._seriesPointerMove;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPointerDown", {
        /**
         * Occurs when the pointer is pressed down over a Series.
        *
        * `SeriesPointerDown` event raised when the pointer is pressed down over a Series
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerDown)="CategoryChart_seriesPointerDown()" >
        * </igx-category-chart>
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesPointerDown == null) {
                this._seriesPointerDown = new EventEmitter();
                this.i.seriesPointerDown = delegateCombine(this.i.seriesPointerDown, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesPointerDown) {
                            _this.beforeSeriesPointerDown(_this, outerArgs);
                        }
                        _this._seriesPointerDown.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerDown;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesPointerUp", {
        /**
         * Occurs when the pointer is released over a Series.
        *
        * `SeriesPointerUp` event raised when the pointer is released over a Series.
        *
        * ```ts
        *  CategoryChart_seriesPointerUp(sender: any , aregs: ChartSeriesEventArgs)
        *   {
        *
        *   }
        * ```
        *
        * ```html
        * <igx-category-chart
        *       yAxisMinimumValue="0"
        *       [dataSource]="data"
        *       (seriesPointerUp)="CategoryChart_seriesPointerUp()" >
        * </igx-category-chart>
        * ```
        */
        get: function () {
            var _this = this;
            if (this._seriesPointerUp == null) {
                this._seriesPointerUp = new EventEmitter();
                this.i.seriesPointerUp = delegateCombine(this.i.seriesPointerUp, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesPointerUp) {
                            _this.beforeSeriesPointerUp(_this, outerArgs);
                        }
                        _this._seriesPointerUp.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesPointerUp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "seriesClick", {
        /**
         * Occurs when the pointer is clicked over a series.
        */
        get: function () {
            var _this = this;
            if (this._seriesClick == null) {
                this._seriesClick = new EventEmitter();
                this.i.seriesClick = delegateCombine(this.i.seriesClick, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartSeriesPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSeriesClick) {
                            _this.beforeSeriesClick(_this, outerArgs);
                        }
                        _this._seriesClick.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._seriesClick;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaPointerEnter", {
        /**
         * Occurs when the pointer enters the plot area.
        */
        get: function () {
            var _this = this;
            if (this._plotAreaPointerEnter == null) {
                this._plotAreaPointerEnter = new EventEmitter();
                this.i.plotAreaPointerEnter = delegateCombine(this.i.plotAreaPointerEnter, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePlotAreaPointerEnter) {
                            _this.beforePlotAreaPointerEnter(_this, outerArgs);
                        }
                        _this._plotAreaPointerEnter.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerEnter;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaPointerLeave", {
        /**
         * Occurs when the pointer leaves the plot area.
        */
        get: function () {
            var _this = this;
            if (this._plotAreaPointerLeave == null) {
                this._plotAreaPointerLeave = new EventEmitter();
                this.i.plotAreaPointerLeave = delegateCombine(this.i.plotAreaPointerLeave, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePlotAreaPointerLeave) {
                            _this.beforePlotAreaPointerLeave(_this, outerArgs);
                        }
                        _this._plotAreaPointerLeave.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerLeave;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaPointerMove", {
        /**
         * Occurs when the pointer is over the plot area.
        */
        get: function () {
            var _this = this;
            if (this._plotAreaPointerMove == null) {
                this._plotAreaPointerMove = new EventEmitter();
                this.i.plotAreaPointerMove = delegateCombine(this.i.plotAreaPointerMove, function (o, e) {
                    var outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforePlotAreaPointerMove) {
                        _this.beforePlotAreaPointerMove(_this, outerArgs);
                    }
                    _this._plotAreaPointerMove.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._plotAreaPointerMove;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaPointerDown", {
        /**
         * Occurs when the pointer is pressed down over the plot area.
        */
        get: function () {
            var _this = this;
            if (this._plotAreaPointerDown == null) {
                this._plotAreaPointerDown = new EventEmitter();
                this.i.plotAreaPointerDown = delegateCombine(this.i.plotAreaPointerDown, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePlotAreaPointerDown) {
                            _this.beforePlotAreaPointerDown(_this, outerArgs);
                        }
                        _this._plotAreaPointerDown.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerDown;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "plotAreaPointerUp", {
        /**
         * Occurs when the pointer is released over the plot area.
        */
        get: function () {
            var _this = this;
            if (this._plotAreaPointerUp == null) {
                this._plotAreaPointerUp = new EventEmitter();
                this.i.plotAreaPointerUp = delegateCombine(this.i.plotAreaPointerUp, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxDomainChartPlotAreaPointerEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforePlotAreaPointerUp) {
                            _this.beforePlotAreaPointerUp(_this, outerArgs);
                        }
                        _this._plotAreaPointerUp.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._plotAreaPointerUp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutStyleUpdating", {
        /**
         * Occurs when the style of a callout is updated.
        */
        get: function () {
            var _this = this;
            if (this._calloutStyleUpdating == null) {
                this._calloutStyleUpdating = new EventEmitter();
                this.i.calloutStyleUpdating = delegateCombine(this.i.calloutStyleUpdating, function (o, e) {
                    var outerArgs = new IgxCalloutStyleUpdatingEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeCalloutStyleUpdating) {
                        _this.beforeCalloutStyleUpdating(_this, outerArgs);
                    }
                    _this._calloutStyleUpdating.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._calloutStyleUpdating;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "calloutRenderStyleUpdating", {
        /**
         * Occurs when the style of a callout is updated.
        */
        get: function () {
            var _this = this;
            if (this._calloutRenderStyleUpdating == null) {
                this._calloutRenderStyleUpdating = new EventEmitter();
                this.i.calloutRenderStyleUpdating = delegateCombine(this.i.calloutRenderStyleUpdating, function (o, e) {
                    var outerArgs = new IgxCalloutRenderStyleUpdatingEventArgs();
                    outerArgs._provideImplementation(e);
                    if (_this.beforeCalloutRenderStyleUpdating) {
                        _this.beforeCalloutRenderStyleUpdating(_this, outerArgs);
                    }
                    _this._calloutRenderStyleUpdating.emit({
                        sender: _this,
                        args: outerArgs
                    });
                });
            }
            return this._calloutRenderStyleUpdating;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "selectedSeriesItemsChanged", {
        get: function () {
            var _this = this;
            if (this._selectedSeriesItemsChanged == null) {
                this._selectedSeriesItemsChanged = new EventEmitter();
                this.i.selectedSeriesItemsChanged = delegateCombine(this.i.selectedSeriesItemsChanged, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxSeriesViewerSelectedSeriesItemsChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeSelectedSeriesItemsChanged) {
                            _this.beforeSelectedSeriesItemsChanged(_this, outerArgs);
                        }
                        _this._selectedSeriesItemsChanged.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._selectedSeriesItemsChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "focusedSeriesItemsChanged", {
        get: function () {
            var _this = this;
            if (this._focusedSeriesItemsChanged == null) {
                this._focusedSeriesItemsChanged = new EventEmitter();
                this.i.focusedSeriesItemsChanged = delegateCombine(this.i.focusedSeriesItemsChanged, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxSeriesViewerSelectedSeriesItemsChangedEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeFocusedSeriesItemsChanged) {
                            _this.beforeFocusedSeriesItemsChanged(_this, outerArgs);
                        }
                        _this._focusedSeriesItemsChanged.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._focusedSeriesItemsChanged;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxDomainChartComponent.prototype, "filterStringErrorsParsing", {
        get: function () {
            var _this = this;
            if (this._filterStringErrorsParsing == null) {
                this._filterStringErrorsParsing = new EventEmitter();
                this.i.filterStringErrorsParsing = delegateCombine(this.i.filterStringErrorsParsing, function (o, e) {
                    _this._runInZone(function () {
                        var outerArgs = new IgxFilterStringErrorsParsingEventArgs();
                        outerArgs._provideImplementation(e);
                        if (_this.beforeFilterStringErrorsParsing) {
                            _this.beforeFilterStringErrorsParsing(_this, outerArgs);
                        }
                        _this._filterStringErrorsParsing.emit({
                            sender: _this,
                            args: outerArgs
                        });
                    });
                });
            }
            return this._filterStringErrorsParsing;
        },
        enumerable: false,
        configurable: true
    });
    IgxDomainChartComponent.prototype._runInZone = function (act) {
        if (this._zoneRunner != null) {
            this._zoneRunner(act);
        }
        else {
            act();
        }
    };
    IgxDomainChartComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxDomainChartComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxDomainChartComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxDomainChartComponent, selector: "ng-component", inputs: { tooltipTemplate: "tooltipTemplate", tooltipTemplates: "tooltipTemplates", legend: "legend", calloutsDataSource: "calloutsDataSource", pixelScalingRatio: "pixelScalingRatio", titleLeftMargin: "titleLeftMargin", titleRightMargin: "titleRightMargin", titleTopMargin: "titleTopMargin", titleBottomMargin: "titleBottomMargin", subtitleLeftMargin: "subtitleLeftMargin", subtitleTopMargin: "subtitleTopMargin", subtitleRightMargin: "subtitleRightMargin", subtitleBottomMargin: "subtitleBottomMargin", subtitleTextColor: "subtitleTextColor", titleTextColor: "titleTextColor", leftMargin: "leftMargin", topMargin: "topMargin", rightMargin: "rightMargin", bottomMargin: "bottomMargin", transitionDuration: "transitionDuration", transitionEasingFunction: "transitionEasingFunction", highlightingTransitionDuration: "highlightingTransitionDuration", selectionTransitionDuration: "selectionTransitionDuration", focusTransitionDuration: "focusTransitionDuration", subtitleTextStyle: "subtitleTextStyle", titleTextStyle: "titleTextStyle", dataToolTipGroupingMode: "dataToolTipGroupingMode", dataToolTipPositionOffsetX: "dataToolTipPositionOffsetX", dataToolTipPositionOffsetY: "dataToolTipPositionOffsetY", dataToolTipDefaultPositionOffsetX: "dataToolTipDefaultPositionOffsetX", dataToolTipDefaultPositionOffsetY: "dataToolTipDefaultPositionOffsetY", dataToolTipGroupedPositionModeX: "dataToolTipGroupedPositionModeX", dataToolTipGroupedPositionModeY: "dataToolTipGroupedPositionModeY", dataToolTipShouldUpdateWhenSeriesDataChanges: "dataToolTipShouldUpdateWhenSeriesDataChanges", dataToolTipIncludedSeries: "dataToolTipIncludedSeries", dataToolTipExcludedSeries: "dataToolTipExcludedSeries", dataToolTipIncludedColumns: "dataToolTipIncludedColumns", dataToolTipExcludedColumns: "dataToolTipExcludedColumns", dataToolTipValueFormatAbbreviation: "dataToolTipValueFormatAbbreviation", dataToolTipValueFormatMaxFractions: "dataToolTipValueFormatMaxFractions", dataToolTipValueFormatMinFractions: "dataToolTipValueFormatMinFractions", dataToolTipValueFormatMode: "dataToolTipValueFormatMode", dataToolTipValueFormatCulture: "dataToolTipValueFormatCulture", dataToolTipValueFormatUseGrouping: "dataToolTipValueFormatUseGrouping", dataToolTipValueFormatString: "dataToolTipValueFormatString", dataToolTipValueFormatSpecifiers: "dataToolTipValueFormatSpecifiers", dataToolTipValueRowMarginBottom: "dataToolTipValueRowMarginBottom", dataToolTipValueRowMarginLeft: "dataToolTipValueRowMarginLeft", dataToolTipValueRowMarginRight: "dataToolTipValueRowMarginRight", dataToolTipValueRowMarginTop: "dataToolTipValueRowMarginTop", dataToolTipValueRowVisible: "dataToolTipValueRowVisible", dataToolTipValueTextWhenMissingData: "dataToolTipValueTextWhenMissingData", dataToolTipValueTextUseSeriesColors: "dataToolTipValueTextUseSeriesColors", dataToolTipValueTextMarginBottom: "dataToolTipValueTextMarginBottom", dataToolTipValueTextMarginLeft: "dataToolTipValueTextMarginLeft", dataToolTipValueTextMarginRight: "dataToolTipValueTextMarginRight", dataToolTipValueTextMarginTop: "dataToolTipValueTextMarginTop", dataToolTipValueTextColor: "dataToolTipValueTextColor", dataToolTipValueTextStyle: "dataToolTipValueTextStyle", dataToolTipHeaderFormatString: "dataToolTipHeaderFormatString", dataToolTipHeaderFormatSpecifiers: "dataToolTipHeaderFormatSpecifiers", dataToolTipHeaderFormatCulture: "dataToolTipHeaderFormatCulture", dataToolTipHeaderFormatDate: "dataToolTipHeaderFormatDate", dataToolTipHeaderFormatTime: "dataToolTipHeaderFormatTime", dataToolTipHeaderText: "dataToolTipHeaderText", dataToolTipHeaderTextColor: "dataToolTipHeaderTextColor", dataToolTipHeaderTextMarginBottom: "dataToolTipHeaderTextMarginBottom", dataToolTipHeaderTextMarginLeft: "dataToolTipHeaderTextMarginLeft", dataToolTipHeaderTextMarginRight: "dataToolTipHeaderTextMarginRight", dataToolTipHeaderTextMarginTop: "dataToolTipHeaderTextMarginTop", dataToolTipHeaderRowMarginBottom: "dataToolTipHeaderRowMarginBottom", dataToolTipHeaderRowMarginLeft: "dataToolTipHeaderRowMarginLeft", dataToolTipHeaderRowMarginRight: "dataToolTipHeaderRowMarginRight", dataToolTipHeaderRowMarginTop: "dataToolTipHeaderRowMarginTop", dataToolTipHeaderRowVisible: "dataToolTipHeaderRowVisible", dataToolTipHeaderTextStyle: "dataToolTipHeaderTextStyle", dataToolTipGroupTextColor: "dataToolTipGroupTextColor", dataToolTipGroupTextMarginBottom: "dataToolTipGroupTextMarginBottom", dataToolTipGroupTextMarginLeft: "dataToolTipGroupTextMarginLeft", dataToolTipGroupTextMarginRight: "dataToolTipGroupTextMarginRight", dataToolTipGroupTextMarginTop: "dataToolTipGroupTextMarginTop", dataToolTipGroupRowMarginBottom: "dataToolTipGroupRowMarginBottom", dataToolTipGroupRowMarginLeft: "dataToolTipGroupRowMarginLeft", dataToolTipGroupRowMarginRight: "dataToolTipGroupRowMarginRight", dataToolTipGroupRowMarginTop: "dataToolTipGroupRowMarginTop", dataToolTipGroupRowVisible: "dataToolTipGroupRowVisible", dataToolTipGroupTextStyle: "dataToolTipGroupTextStyle", dataToolTipSummaryTitleTextColor: "dataToolTipSummaryTitleTextColor", dataToolTipSummaryTitleTextStyle: "dataToolTipSummaryTitleTextStyle", dataToolTipSummaryType: "dataToolTipSummaryType", dataToolTipSummaryTitleText: "dataToolTipSummaryTitleText", dataToolTipSummaryTitleTextMarginBottom: "dataToolTipSummaryTitleTextMarginBottom", dataToolTipSummaryTitleTextMarginLeft: "dataToolTipSummaryTitleTextMarginLeft", dataToolTipSummaryTitleTextMarginRight: "dataToolTipSummaryTitleTextMarginRight", dataToolTipSummaryTitleTextMarginTop: "dataToolTipSummaryTitleTextMarginTop", dataToolTipSummaryRowMarginBottom: "dataToolTipSummaryRowMarginBottom", dataToolTipSummaryRowMarginLeft: "dataToolTipSummaryRowMarginLeft", dataToolTipSummaryRowMarginRight: "dataToolTipSummaryRowMarginRight", dataToolTipSummaryRowMarginTop: "dataToolTipSummaryRowMarginTop", dataToolTipSummaryValueTextColor: "dataToolTipSummaryValueTextColor", dataToolTipSummaryValueTextStyle: "dataToolTipSummaryValueTextStyle", dataToolTipSummaryLabelText: "dataToolTipSummaryLabelText", dataToolTipSummaryLabelTextColor: "dataToolTipSummaryLabelTextColor", dataToolTipSummaryLabelTextStyle: "dataToolTipSummaryLabelTextStyle", dataToolTipSummaryUnitsText: "dataToolTipSummaryUnitsText", dataToolTipSummaryUnitsTextColor: "dataToolTipSummaryUnitsTextColor", dataToolTipSummaryUnitsTextStyle: "dataToolTipSummaryUnitsTextStyle", dataToolTipBadgeMarginBottom: "dataToolTipBadgeMarginBottom", dataToolTipBadgeMarginLeft: "dataToolTipBadgeMarginLeft", dataToolTipBadgeMarginRight: "dataToolTipBadgeMarginRight", dataToolTipBadgeMarginTop: "dataToolTipBadgeMarginTop", dataToolTipBadgeShape: "dataToolTipBadgeShape", dataToolTipUnitsDisplayMode: "dataToolTipUnitsDisplayMode", dataToolTipUnitsText: "dataToolTipUnitsText", dataToolTipUnitsTextColor: "dataToolTipUnitsTextColor", dataToolTipUnitsTextMarginBottom: "dataToolTipUnitsTextMarginBottom", dataToolTipUnitsTextMarginLeft: "dataToolTipUnitsTextMarginLeft", dataToolTipUnitsTextMarginRight: "dataToolTipUnitsTextMarginRight", dataToolTipUnitsTextMarginTop: "dataToolTipUnitsTextMarginTop", dataToolTipUnitsTextStyle: "dataToolTipUnitsTextStyle", dataToolTipTitleTextMarginBottom: "dataToolTipTitleTextMarginBottom", dataToolTipTitleTextMarginLeft: "dataToolTipTitleTextMarginLeft", dataToolTipTitleTextMarginRight: "dataToolTipTitleTextMarginRight", dataToolTipTitleTextMarginTop: "dataToolTipTitleTextMarginTop", dataToolTipTitleTextColor: "dataToolTipTitleTextColor", dataToolTipTitleTextStyle: "dataToolTipTitleTextStyle", dataToolTipLabelDisplayMode: "dataToolTipLabelDisplayMode", dataToolTipLabelTextColor: "dataToolTipLabelTextColor", dataToolTipLabelTextMarginBottom: "dataToolTipLabelTextMarginBottom", dataToolTipLabelTextMarginLeft: "dataToolTipLabelTextMarginLeft", dataToolTipLabelTextMarginRight: "dataToolTipLabelTextMarginRight", dataToolTipLabelTextMarginTop: "dataToolTipLabelTextMarginTop", dataToolTipLabelTextStyle: "dataToolTipLabelTextStyle", selectionMode: "selectionMode", focusMode: "focusMode", selectionBrush: "selectionBrush", focusBrush: "focusBrush", selectionBehavior: "selectionBehavior", selectedSeriesItems: "selectedSeriesItems", focusedSeriesItems: "focusedSeriesItems", initialSorts: "initialSorts", groupSorts: "groupSorts", initialGroups: "initialGroups", initialFilter: "initialFilter", initialHighlightFilter: "initialHighlightFilter", initialSummaries: "initialSummaries", highlightedDataSource: "highlightedDataSource", includedProperties: "includedProperties", excludedProperties: "excludedProperties", brushes: "brushes", outlines: "outlines", actualBrushes: "actualBrushes", actualOutlines: "actualOutlines", isHorizontalZoomEnabled: "isHorizontalZoomEnabled", isVerticalZoomEnabled: "isVerticalZoomEnabled", shouldDisplayMockData: "shouldDisplayMockData", shouldUseSkeletonStyleForMockData: "shouldUseSkeletonStyleForMockData", highlightedValuesDisplayMode: "highlightedValuesDisplayMode", isSeriesHighlightingEnabled: "isSeriesHighlightingEnabled", highlightedLegendItemVisibility: "highlightedLegendItemVisibility", windowRect: "windowRect", chartTitle: "chartTitle", subtitle: "subtitle", titleAlignment: "titleAlignment", subtitleAlignment: "subtitleAlignment", unknownValuePlotting: "unknownValuePlotting", resolution: "resolution", thickness: "thickness", outlineMode: "outlineMode", markerOutlineMode: "markerOutlineMode", markerFillMode: "markerFillMode", markerFillOpacity: "markerFillOpacity", markerThickness: "markerThickness", markerTypes: "markerTypes", markerAutomaticBehavior: "markerAutomaticBehavior", markerBrushes: "markerBrushes", markerOutlines: "markerOutlines", markerMaxCount: "markerMaxCount", areaFillOpacity: "areaFillOpacity", animateSeriesWhenAxisRangeChanges: "animateSeriesWhenAxisRangeChanges", trendLineBrushes: "trendLineBrushes", trendLineType: "trendLineType", trendLineThickness: "trendLineThickness", alignsGridLinesToPixels: "alignsGridLinesToPixels", plotAreaMarginLeft: "plotAreaMarginLeft", plotAreaMarginTop: "plotAreaMarginTop", plotAreaMarginRight: "plotAreaMarginRight", plotAreaMarginBottom: "plotAreaMarginBottom", computedPlotAreaMarginMode: "computedPlotAreaMarginMode", seriesPlotAreaMarginHorizontalMode: "seriesPlotAreaMarginHorizontalMode", seriesPlotAreaMarginVerticalMode: "seriesPlotAreaMarginVerticalMode", highlightingMode: "highlightingMode", highlightingBehavior: "highlightingBehavior", legendHighlightingMode: "legendHighlightingMode", legendItemBadgeShape: "legendItemBadgeShape", legendItemBadgeMode: "legendItemBadgeMode", trendLinePeriod: "trendLinePeriod", toolTipType: "toolTipType", crosshairsDisplayMode: "crosshairsDisplayMode", crosshairsSnapToData: "crosshairsSnapToData", crosshairsLineVerticalStroke: "crosshairsLineVerticalStroke", crosshairsLineThickness: "crosshairsLineThickness", crosshairsLineHorizontalStroke: "crosshairsLineHorizontalStroke", crosshairsAnnotationEnabled: "crosshairsAnnotationEnabled", crosshairsAnnotationXAxisBackground: "crosshairsAnnotationXAxisBackground", crosshairsAnnotationYAxisBackground: "crosshairsAnnotationYAxisBackground", crosshairsAnnotationXAxisTextColor: "crosshairsAnnotationXAxisTextColor", crosshairsAnnotationYAxisTextColor: "crosshairsAnnotationYAxisTextColor", crosshairsAnnotationXAxisPrecision: "crosshairsAnnotationXAxisPrecision", crosshairsAnnotationYAxisPrecision: "crosshairsAnnotationYAxisPrecision", shouldAvoidAxisAnnotationCollisions: "shouldAvoidAxisAnnotationCollisions", shouldPanOnMaximumZoom: "shouldPanOnMaximumZoom", finalValueAnnotationsVisible: "finalValueAnnotationsVisible", finalValueAnnotationsBackground: "finalValueAnnotationsBackground", finalValueAnnotationsTextColor: "finalValueAnnotationsTextColor", finalValueAnnotationsPrecision: "finalValueAnnotationsPrecision", autoCalloutsVisible: "autoCalloutsVisible", calloutsVisible: "calloutsVisible", calloutStyleUpdatingEventEnabled: "calloutStyleUpdatingEventEnabled", useValueForAutoCalloutLabels: "useValueForAutoCalloutLabels", calloutCollisionMode: "calloutCollisionMode", calloutsUseItemColorForFill: "calloutsUseItemColorForFill", calloutsUseItemColorForOutline: "calloutsUseItemColorForOutline", calloutsUseAutoContrastingLabelColors: "calloutsUseAutoContrastingLabelColors", calloutsStrokeThickness: "calloutsStrokeThickness", calloutsBackground: "calloutsBackground", calloutsAutoLabelPrecision: "calloutsAutoLabelPrecision", calloutsAllowedPositions: "calloutsAllowedPositions", calloutsXMemberPath: "calloutsXMemberPath", calloutsYMemberPath: "calloutsYMemberPath", calloutsLabelMemberPath: "calloutsLabelMemberPath", calloutsContentMemberPath: "calloutsContentMemberPath", valueLines: "valueLines", valueLinesBrushes: "valueLinesBrushes", valueLinesThickness: "valueLinesThickness", horizontalViewScrollbarMode: "horizontalViewScrollbarMode", verticalViewScrollbarMode: "verticalViewScrollbarMode", horizontalViewScrollbarPosition: "horizontalViewScrollbarPosition", verticalViewScrollbarPosition: "verticalViewScrollbarPosition", horizontalViewScrollbarFill: "horizontalViewScrollbarFill", horizontalViewScrollbarOutline: "horizontalViewScrollbarOutline", horizontalViewScrollbarStrokeThickness: "horizontalViewScrollbarStrokeThickness", horizontalViewScrollbarMaxOpacity: "horizontalViewScrollbarMaxOpacity", horizontalViewScrollbarCornerRadius: "horizontalViewScrollbarCornerRadius", horizontalViewScrollbarHeight: "horizontalViewScrollbarHeight", horizontalViewScrollbarInset: "horizontalViewScrollbarInset", horizontalViewScrollbarTrackStartInset: "horizontalViewScrollbarTrackStartInset", horizontalViewScrollbarTrackEndInset: "horizontalViewScrollbarTrackEndInset", horizontalViewScrollbarShouldAddAutoTrackInsets: "horizontalViewScrollbarShouldAddAutoTrackInsets", verticalViewScrollbarFill: "verticalViewScrollbarFill", verticalViewScrollbarOutline: "verticalViewScrollbarOutline", verticalViewScrollbarStrokeThickness: "verticalViewScrollbarStrokeThickness", verticalViewScrollbarMaxOpacity: "verticalViewScrollbarMaxOpacity", verticalViewScrollbarCornerRadius: "verticalViewScrollbarCornerRadius", verticalViewScrollbarWidth: "verticalViewScrollbarWidth", verticalViewScrollbarInset: "verticalViewScrollbarInset", verticalViewScrollbarTrackStartInset: "verticalViewScrollbarTrackStartInset", verticalViewScrollbarTrackEndInset: "verticalViewScrollbarTrackEndInset", verticalViewScrollbarShouldAddAutoTrackInsets: "verticalViewScrollbarShouldAddAutoTrackInsets", windowRectMinWidth: "windowRectMinWidth", windowRectMinHeight: "windowRectMinHeight", windowSizeMinWidth: "windowSizeMinWidth", windowSizeMinHeight: "windowSizeMinHeight" }, outputs: { seriesAdded: "seriesAdded", seriesRemoved: "seriesRemoved", seriesPointerEnter: "seriesPointerEnter", seriesPointerLeave: "seriesPointerLeave", seriesPointerMove: "seriesPointerMove", seriesPointerDown: "seriesPointerDown", seriesPointerUp: "seriesPointerUp", seriesClick: "seriesClick", plotAreaPointerEnter: "plotAreaPointerEnter", plotAreaPointerLeave: "plotAreaPointerLeave", plotAreaPointerMove: "plotAreaPointerMove", plotAreaPointerDown: "plotAreaPointerDown", plotAreaPointerUp: "plotAreaPointerUp", calloutStyleUpdating: "calloutStyleUpdating", calloutRenderStyleUpdating: "calloutRenderStyleUpdating", selectedSeriesItemsChanged: "selectedSeriesItemsChanged", focusedSeriesItemsChanged: "focusedSeriesItemsChanged", filterStringErrorsParsing: "filterStringErrorsParsing" }, ngImport: i0, template: "", isInline: true });
    return IgxDomainChartComponent;
}());
export { IgxDomainChartComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxDomainChartComponent, decorators: [{
            type: Component,
            args: [{
                    template: "",
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { tooltipTemplate: [{
                type: Input
            }], tooltipTemplates: [{
                type: Input
            }], legend: [{
                type: Input
            }], calloutsDataSource: [{
                type: Input
            }], pixelScalingRatio: [{
                type: Input
            }], titleLeftMargin: [{
                type: Input
            }], titleRightMargin: [{
                type: Input
            }], titleTopMargin: [{
                type: Input
            }], titleBottomMargin: [{
                type: Input
            }], subtitleLeftMargin: [{
                type: Input
            }], subtitleTopMargin: [{
                type: Input
            }], subtitleRightMargin: [{
                type: Input
            }], subtitleBottomMargin: [{
                type: Input
            }], subtitleTextColor: [{
                type: Input
            }], titleTextColor: [{
                type: Input
            }], leftMargin: [{
                type: Input
            }], topMargin: [{
                type: Input
            }], rightMargin: [{
                type: Input
            }], bottomMargin: [{
                type: Input
            }], transitionDuration: [{
                type: Input
            }], transitionEasingFunction: [{
                type: Input
            }], highlightingTransitionDuration: [{
                type: Input
            }], selectionTransitionDuration: [{
                type: Input
            }], focusTransitionDuration: [{
                type: Input
            }], subtitleTextStyle: [{
                type: Input
            }], titleTextStyle: [{
                type: Input
            }], dataToolTipGroupingMode: [{
                type: Input
            }], dataToolTipPositionOffsetX: [{
                type: Input
            }], dataToolTipPositionOffsetY: [{
                type: Input
            }], dataToolTipDefaultPositionOffsetX: [{
                type: Input
            }], dataToolTipDefaultPositionOffsetY: [{
                type: Input
            }], dataToolTipGroupedPositionModeX: [{
                type: Input
            }], dataToolTipGroupedPositionModeY: [{
                type: Input
            }], dataToolTipShouldUpdateWhenSeriesDataChanges: [{
                type: Input
            }], dataToolTipIncludedSeries: [{
                type: Input
            }], dataToolTipExcludedSeries: [{
                type: Input
            }], dataToolTipIncludedColumns: [{
                type: Input
            }], dataToolTipExcludedColumns: [{
                type: Input
            }], dataToolTipValueFormatAbbreviation: [{
                type: Input
            }], dataToolTipValueFormatMaxFractions: [{
                type: Input
            }], dataToolTipValueFormatMinFractions: [{
                type: Input
            }], dataToolTipValueFormatMode: [{
                type: Input
            }], dataToolTipValueFormatCulture: [{
                type: Input
            }], dataToolTipValueFormatUseGrouping: [{
                type: Input
            }], dataToolTipValueFormatString: [{
                type: Input
            }], dataToolTipValueFormatSpecifiers: [{
                type: Input
            }], dataToolTipValueRowMarginBottom: [{
                type: Input
            }], dataToolTipValueRowMarginLeft: [{
                type: Input
            }], dataToolTipValueRowMarginRight: [{
                type: Input
            }], dataToolTipValueRowMarginTop: [{
                type: Input
            }], dataToolTipValueRowVisible: [{
                type: Input
            }], dataToolTipValueTextWhenMissingData: [{
                type: Input
            }], dataToolTipValueTextUseSeriesColors: [{
                type: Input
            }], dataToolTipValueTextMarginBottom: [{
                type: Input
            }], dataToolTipValueTextMarginLeft: [{
                type: Input
            }], dataToolTipValueTextMarginRight: [{
                type: Input
            }], dataToolTipValueTextMarginTop: [{
                type: Input
            }], dataToolTipValueTextColor: [{
                type: Input
            }], dataToolTipValueTextStyle: [{
                type: Input
            }], dataToolTipHeaderFormatString: [{
                type: Input
            }], dataToolTipHeaderFormatSpecifiers: [{
                type: Input
            }], dataToolTipHeaderFormatCulture: [{
                type: Input
            }], dataToolTipHeaderFormatDate: [{
                type: Input
            }], dataToolTipHeaderFormatTime: [{
                type: Input
            }], dataToolTipHeaderText: [{
                type: Input
            }], dataToolTipHeaderTextColor: [{
                type: Input
            }], dataToolTipHeaderTextMarginBottom: [{
                type: Input
            }], dataToolTipHeaderTextMarginLeft: [{
                type: Input
            }], dataToolTipHeaderTextMarginRight: [{
                type: Input
            }], dataToolTipHeaderTextMarginTop: [{
                type: Input
            }], dataToolTipHeaderRowMarginBottom: [{
                type: Input
            }], dataToolTipHeaderRowMarginLeft: [{
                type: Input
            }], dataToolTipHeaderRowMarginRight: [{
                type: Input
            }], dataToolTipHeaderRowMarginTop: [{
                type: Input
            }], dataToolTipHeaderRowVisible: [{
                type: Input
            }], dataToolTipHeaderTextStyle: [{
                type: Input
            }], dataToolTipGroupTextColor: [{
                type: Input
            }], dataToolTipGroupTextMarginBottom: [{
                type: Input
            }], dataToolTipGroupTextMarginLeft: [{
                type: Input
            }], dataToolTipGroupTextMarginRight: [{
                type: Input
            }], dataToolTipGroupTextMarginTop: [{
                type: Input
            }], dataToolTipGroupRowMarginBottom: [{
                type: Input
            }], dataToolTipGroupRowMarginLeft: [{
                type: Input
            }], dataToolTipGroupRowMarginRight: [{
                type: Input
            }], dataToolTipGroupRowMarginTop: [{
                type: Input
            }], dataToolTipGroupRowVisible: [{
                type: Input
            }], dataToolTipGroupTextStyle: [{
                type: Input
            }], dataToolTipSummaryTitleTextColor: [{
                type: Input
            }], dataToolTipSummaryTitleTextStyle: [{
                type: Input
            }], dataToolTipSummaryType: [{
                type: Input
            }], dataToolTipSummaryTitleText: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginBottom: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginLeft: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginRight: [{
                type: Input
            }], dataToolTipSummaryTitleTextMarginTop: [{
                type: Input
            }], dataToolTipSummaryRowMarginBottom: [{
                type: Input
            }], dataToolTipSummaryRowMarginLeft: [{
                type: Input
            }], dataToolTipSummaryRowMarginRight: [{
                type: Input
            }], dataToolTipSummaryRowMarginTop: [{
                type: Input
            }], dataToolTipSummaryValueTextColor: [{
                type: Input
            }], dataToolTipSummaryValueTextStyle: [{
                type: Input
            }], dataToolTipSummaryLabelText: [{
                type: Input
            }], dataToolTipSummaryLabelTextColor: [{
                type: Input
            }], dataToolTipSummaryLabelTextStyle: [{
                type: Input
            }], dataToolTipSummaryUnitsText: [{
                type: Input
            }], dataToolTipSummaryUnitsTextColor: [{
                type: Input
            }], dataToolTipSummaryUnitsTextStyle: [{
                type: Input
            }], dataToolTipBadgeMarginBottom: [{
                type: Input
            }], dataToolTipBadgeMarginLeft: [{
                type: Input
            }], dataToolTipBadgeMarginRight: [{
                type: Input
            }], dataToolTipBadgeMarginTop: [{
                type: Input
            }], dataToolTipBadgeShape: [{
                type: Input
            }], dataToolTipUnitsDisplayMode: [{
                type: Input
            }], dataToolTipUnitsText: [{
                type: Input
            }], dataToolTipUnitsTextColor: [{
                type: Input
            }], dataToolTipUnitsTextMarginBottom: [{
                type: Input
            }], dataToolTipUnitsTextMarginLeft: [{
                type: Input
            }], dataToolTipUnitsTextMarginRight: [{
                type: Input
            }], dataToolTipUnitsTextMarginTop: [{
                type: Input
            }], dataToolTipUnitsTextStyle: [{
                type: Input
            }], dataToolTipTitleTextMarginBottom: [{
                type: Input
            }], dataToolTipTitleTextMarginLeft: [{
                type: Input
            }], dataToolTipTitleTextMarginRight: [{
                type: Input
            }], dataToolTipTitleTextMarginTop: [{
                type: Input
            }], dataToolTipTitleTextColor: [{
                type: Input
            }], dataToolTipTitleTextStyle: [{
                type: Input
            }], dataToolTipLabelDisplayMode: [{
                type: Input
            }], dataToolTipLabelTextColor: [{
                type: Input
            }], dataToolTipLabelTextMarginBottom: [{
                type: Input
            }], dataToolTipLabelTextMarginLeft: [{
                type: Input
            }], dataToolTipLabelTextMarginRight: [{
                type: Input
            }], dataToolTipLabelTextMarginTop: [{
                type: Input
            }], dataToolTipLabelTextStyle: [{
                type: Input
            }], selectionMode: [{
                type: Input
            }], focusMode: [{
                type: Input
            }], selectionBrush: [{
                type: Input
            }], focusBrush: [{
                type: Input
            }], selectionBehavior: [{
                type: Input
            }], selectedSeriesItems: [{
                type: Input
            }], focusedSeriesItems: [{
                type: Input
            }], initialSorts: [{
                type: Input
            }], groupSorts: [{
                type: Input
            }], initialGroups: [{
                type: Input
            }], initialFilter: [{
                type: Input
            }], initialHighlightFilter: [{
                type: Input
            }], initialSummaries: [{
                type: Input
            }], highlightedDataSource: [{
                type: Input
            }], includedProperties: [{
                type: Input
            }], excludedProperties: [{
                type: Input
            }], brushes: [{
                type: Input
            }], outlines: [{
                type: Input
            }], actualBrushes: [{
                type: Input
            }], actualOutlines: [{
                type: Input
            }], isHorizontalZoomEnabled: [{
                type: Input
            }], isVerticalZoomEnabled: [{
                type: Input
            }], shouldDisplayMockData: [{
                type: Input
            }], shouldUseSkeletonStyleForMockData: [{
                type: Input
            }], highlightedValuesDisplayMode: [{
                type: Input
            }], isSeriesHighlightingEnabled: [{
                type: Input
            }], highlightedLegendItemVisibility: [{
                type: Input
            }], windowRect: [{
                type: Input
            }], chartTitle: [{
                type: Input
            }], subtitle: [{
                type: Input
            }], titleAlignment: [{
                type: Input
            }], subtitleAlignment: [{
                type: Input
            }], unknownValuePlotting: [{
                type: Input
            }], resolution: [{
                type: Input
            }], thickness: [{
                type: Input
            }], outlineMode: [{
                type: Input
            }], markerOutlineMode: [{
                type: Input
            }], markerFillMode: [{
                type: Input
            }], markerFillOpacity: [{
                type: Input
            }], markerThickness: [{
                type: Input
            }], markerTypes: [{
                type: Input
            }], markerAutomaticBehavior: [{
                type: Input
            }], markerBrushes: [{
                type: Input
            }], markerOutlines: [{
                type: Input
            }], markerMaxCount: [{
                type: Input
            }], areaFillOpacity: [{
                type: Input
            }], animateSeriesWhenAxisRangeChanges: [{
                type: Input
            }], trendLineBrushes: [{
                type: Input
            }], trendLineType: [{
                type: Input
            }], trendLineThickness: [{
                type: Input
            }], alignsGridLinesToPixels: [{
                type: Input
            }], plotAreaMarginLeft: [{
                type: Input
            }], plotAreaMarginTop: [{
                type: Input
            }], plotAreaMarginRight: [{
                type: Input
            }], plotAreaMarginBottom: [{
                type: Input
            }], computedPlotAreaMarginMode: [{
                type: Input
            }], seriesPlotAreaMarginHorizontalMode: [{
                type: Input
            }], seriesPlotAreaMarginVerticalMode: [{
                type: Input
            }], highlightingMode: [{
                type: Input
            }], highlightingBehavior: [{
                type: Input
            }], legendHighlightingMode: [{
                type: Input
            }], legendItemBadgeShape: [{
                type: Input
            }], legendItemBadgeMode: [{
                type: Input
            }], trendLinePeriod: [{
                type: Input
            }], toolTipType: [{
                type: Input
            }], crosshairsDisplayMode: [{
                type: Input
            }], crosshairsSnapToData: [{
                type: Input
            }], crosshairsLineVerticalStroke: [{
                type: Input
            }], crosshairsLineThickness: [{
                type: Input
            }], crosshairsLineHorizontalStroke: [{
                type: Input
            }], crosshairsAnnotationEnabled: [{
                type: Input
            }], crosshairsAnnotationXAxisBackground: [{
                type: Input
            }], crosshairsAnnotationYAxisBackground: [{
                type: Input
            }], crosshairsAnnotationXAxisTextColor: [{
                type: Input
            }], crosshairsAnnotationYAxisTextColor: [{
                type: Input
            }], crosshairsAnnotationXAxisPrecision: [{
                type: Input
            }], crosshairsAnnotationYAxisPrecision: [{
                type: Input
            }], shouldAvoidAxisAnnotationCollisions: [{
                type: Input
            }], shouldPanOnMaximumZoom: [{
                type: Input
            }], finalValueAnnotationsVisible: [{
                type: Input
            }], finalValueAnnotationsBackground: [{
                type: Input
            }], finalValueAnnotationsTextColor: [{
                type: Input
            }], finalValueAnnotationsPrecision: [{
                type: Input
            }], autoCalloutsVisible: [{
                type: Input
            }], calloutsVisible: [{
                type: Input
            }], calloutStyleUpdatingEventEnabled: [{
                type: Input
            }], useValueForAutoCalloutLabels: [{
                type: Input
            }], calloutCollisionMode: [{
                type: Input
            }], calloutsUseItemColorForFill: [{
                type: Input
            }], calloutsUseItemColorForOutline: [{
                type: Input
            }], calloutsUseAutoContrastingLabelColors: [{
                type: Input
            }], calloutsStrokeThickness: [{
                type: Input
            }], calloutsBackground: [{
                type: Input
            }], calloutsAutoLabelPrecision: [{
                type: Input
            }], calloutsAllowedPositions: [{
                type: Input
            }], calloutsXMemberPath: [{
                type: Input
            }], calloutsYMemberPath: [{
                type: Input
            }], calloutsLabelMemberPath: [{
                type: Input
            }], calloutsContentMemberPath: [{
                type: Input
            }], valueLines: [{
                type: Input
            }], valueLinesBrushes: [{
                type: Input
            }], valueLinesThickness: [{
                type: Input
            }], horizontalViewScrollbarMode: [{
                type: Input
            }], verticalViewScrollbarMode: [{
                type: Input
            }], horizontalViewScrollbarPosition: [{
                type: Input
            }], verticalViewScrollbarPosition: [{
                type: Input
            }], horizontalViewScrollbarFill: [{
                type: Input
            }], horizontalViewScrollbarOutline: [{
                type: Input
            }], horizontalViewScrollbarStrokeThickness: [{
                type: Input
            }], horizontalViewScrollbarMaxOpacity: [{
                type: Input
            }], horizontalViewScrollbarCornerRadius: [{
                type: Input
            }], horizontalViewScrollbarHeight: [{
                type: Input
            }], horizontalViewScrollbarInset: [{
                type: Input
            }], horizontalViewScrollbarTrackStartInset: [{
                type: Input
            }], horizontalViewScrollbarTrackEndInset: [{
                type: Input
            }], horizontalViewScrollbarShouldAddAutoTrackInsets: [{
                type: Input
            }], verticalViewScrollbarFill: [{
                type: Input
            }], verticalViewScrollbarOutline: [{
                type: Input
            }], verticalViewScrollbarStrokeThickness: [{
                type: Input
            }], verticalViewScrollbarMaxOpacity: [{
                type: Input
            }], verticalViewScrollbarCornerRadius: [{
                type: Input
            }], verticalViewScrollbarWidth: [{
                type: Input
            }], verticalViewScrollbarInset: [{
                type: Input
            }], verticalViewScrollbarTrackStartInset: [{
                type: Input
            }], verticalViewScrollbarTrackEndInset: [{
                type: Input
            }], verticalViewScrollbarShouldAddAutoTrackInsets: [{
                type: Input
            }], windowRectMinWidth: [{
                type: Input
            }], windowRectMinHeight: [{
                type: Input
            }], windowSizeMinWidth: [{
                type: Input
            }], windowSizeMinHeight: [{
                type: Input
            }], seriesAdded: [{
                type: Output
            }], seriesRemoved: [{
                type: Output
            }], seriesPointerEnter: [{
                type: Output
            }], seriesPointerLeave: [{
                type: Output
            }], seriesPointerMove: [{
                type: Output
            }], seriesPointerDown: [{
                type: Output
            }], seriesPointerUp: [{
                type: Output
            }], seriesClick: [{
                type: Output
            }], plotAreaPointerEnter: [{
                type: Output
            }], plotAreaPointerLeave: [{
                type: Output
            }], plotAreaPointerMove: [{
                type: Output
            }], plotAreaPointerDown: [{
                type: Output
            }], plotAreaPointerUp: [{
                type: Output
            }], calloutStyleUpdating: [{
                type: Output
            }], calloutRenderStyleUpdating: [{
                type: Output
            }], selectedSeriesItemsChanged: [{
                type: Output
            }], focusedSeriesItemsChanged: [{
                type: Output
            }], filterStringErrorsParsing: [{
                type: Output
            }] } });
