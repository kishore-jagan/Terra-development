import { __extends } from "tslib";
import { Component, forwardRef, Input, ChangeDetectionStrategy } from '@angular/core';
import { IgxStyle } from "igniteui-angular-core";
import { IgxShapeSeriesBaseComponent } from "./igx-shape-series-base-component";
import { IgxSeriesComponent } from "./igx-series-component";
import { ScatterPolylineSeries } from "./ScatterPolylineSeries";
import * as i0 from "@angular/core";
/**
 * Series class used for displaying multiple polylines for datasources which contain multiple lists of points.
*/
var IgxScatterPolylineSeriesComponent = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgxScatterPolylineSeriesComponent, _super);
    function IgxScatterPolylineSeriesComponent() {
        return _super.call(this) || this;
    }
    IgxScatterPolylineSeriesComponent.prototype.createImplementation = function () {
        return new ScatterPolylineSeries();
    };
    Object.defineProperty(IgxScatterPolylineSeriesComponent.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolylineSeriesComponent.prototype, "isPolyline", {
        /**
         * Gets whether the current series shows a polyline shape.
        */
        get: function () {
            return this.i.fp;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgxScatterPolylineSeriesComponent.prototype, "shapeStyle", {
        /**
         * The default style to apply to all Shapes in the series.
        */
        get: function () {
            var r = this.i.zn;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = new IgxStyle();
                if (r.$type) {
                    e._implementation = r;
                }
                else {
                    if (e.i.setNativeElement) {
                        e.i.setNativeElement(r);
                    }
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            v == null ? this.i.zn = null : this.i.zn = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgxScatterPolylineSeriesComponent.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.shapeStyle && this.shapeStyle.name && this.shapeStyle.name == name) {
            return this.shapeStyle;
        }
        return null;
    };
    IgxScatterPolylineSeriesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolylineSeriesComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    IgxScatterPolylineSeriesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: IgxScatterPolylineSeriesComponent, selector: "igx-scatter-polyline-series", inputs: { shapeStyle: "shapeStyle" }, providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(function () { return IgxScatterPolylineSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterPolylineSeriesComponent; }) }], usesInheritance: true, ngImport: i0, template: "", isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });
    return IgxScatterPolylineSeriesComponent;
}(IgxShapeSeriesBaseComponent));
export { IgxScatterPolylineSeriesComponent };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: IgxScatterPolylineSeriesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-scatter-polyline-series',
                    template: "",
                    providers: [{ provide: IgxShapeSeriesBaseComponent, useExisting: forwardRef(function () { return IgxScatterPolylineSeriesComponent; }) }, { provide: IgxSeriesComponent, useExisting: forwardRef(function () { return IgxScatterPolylineSeriesComponent; }) }],
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { shapeStyle: [{
                type: Input
            }] } });
