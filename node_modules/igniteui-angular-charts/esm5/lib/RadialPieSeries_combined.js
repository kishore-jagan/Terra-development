/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { AnchoredRadialSeries } from "./AnchoredRadialSeries";
import { DependencyProperty } from "igniteui-angular-core";
import { Point_$type, runOn, markType, markDep, fromEnum } from "igniteui-angular-core";
import { Defaults } from "./Defaults";
import { Pool$1 } from "igniteui-angular-core";
import { Path } from "igniteui-angular-core";
import { List$1 } from "igniteui-angular-core";
import { Rect } from "igniteui-angular-core";
import { ScalerParams } from "./ScalerParams";
import { PathGeometry } from "igniteui-angular-core";
import { ViewportUtils } from "./ViewportUtils";
import { SliceCoords } from "./SliceCoords";
import { PathFigure } from "igniteui-angular-core";
import { LineSegment } from "igniteui-angular-core";
import { ArcSegment } from "igniteui-angular-core";
import { PieSliceCollisionGeometry } from "igniteui-angular-core";
import { Size } from "igniteui-angular-core";
import { GeometryUtil } from "igniteui-angular-core";
import { MathUtil } from "igniteui-angular-core";
import { PropertyMetadata } from "igniteui-angular-core";
import { intDivide, isNaN_ } from "igniteui-angular-core";
import { AnchoredRadialSeriesView } from "./AnchoredRadialSeriesView";
import { DataContext } from "igniteui-angular-core";
/**
 * @hidden
 */
var RadialPieSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialPieSeries, _super);
    function RadialPieSeries() {
        var _this = _super.call(this) || this;
        _this.ade = null;
        _this.adj = null;
        _this.ab = RadialPieSeries.$;
        return _this;
    }
    RadialPieSeries.prototype.bi = function () {
        return new RadialPieSeries();
    };
    RadialPieSeries.prototype.get_fl = function () {
        return true;
    };
    RadialPieSeries.prototype.get_fj = function () {
        return true;
    };
    RadialPieSeries.prototype.ji = function () {
        if (!isNaN_(this.jh)) {
            return _super.prototype.ji.call(this);
        }
        return Defaults.h;
    };
    RadialPieSeries.prototype.cq = function () {
        return new RadialPieSeriesView(this);
    };
    RadialPieSeries.prototype.qx = function (a) {
        _super.prototype.qx.call(this, a);
        this.add = a;
    };
    Object.defineProperty(RadialPieSeries.prototype, "adf", {
        get: function () {
            return this.ade;
        },
        set: function (a) {
            if (this.ade != a) {
                var b = this.adf;
                this.ade = a;
                this.raisePropertyChanged("LegendLabelColumn", b, this.adf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RadialPieSeries.prototype, "adl", {
        get: function () {
            return this.adj;
        },
        set: function (a) {
            if (this.adj != a) {
                var b = this.adj;
                this.adj = a;
                this.raisePropertyChanged("LegendLabelMemberPath", b, this.adj);
            }
        },
        enumerable: false,
        configurable: true
    });
    RadialPieSeries.prototype.preferredCategoryMode = function (a) {
        return a != null && a == this.yr ? 2 : 0;
    };
    RadialPieSeries.prototype.o3 = function (a, b) {
        _super.prototype.o3.call(this, a, b);
        var c = b;
        if (a && c.c6 != null) {
            c.c6.count = 0;
        }
    };
    RadialPieSeries.prototype.iu = function () {
        return this.yr.k5(this.ct.by, this.ct.bx, this.getEffectiveViewport1(this.ct));
    };
    RadialPieSeries.prototype.aq = function (a, b) {
        var c = new List$1(Rect.$, 0);
        var d = this.ct.by;
        var e = this.ct.bx;
        var f = this.getEffectiveViewport1(this.ct);
        var g = this.wd(this.ct);
        var h = this.yw.k2(e, d, f, g);
        var i = { $type: Point_$type, x: 0.5, y: 0.5 };
        var j = this.yw;
        var k = Math.max(0, 0.5 * j.no);
        var l = k;
        l = Math.max(l, h.minLength);
        var m = this.yr.k5(d, e, f);
        var n = this.yr != null && this.yr.cl;
        var o = this.y1;
        if (this.d1()) {
            o = this.y4;
        }
        {
            if (n) {
                m = this.zr(a, d, e, f);
            }
            if (b < 0 || b > o.f.count - 1) {
                return null;
            }
            var p = o.f._inner[b][0];
            var q = Math.min(o.f._inner[b][2], h.maxLength);
            return this.adg(d, e, f, p - (m * 0.5), p + (m * 0.5), l, q, i);
        }
    };
    RadialPieSeries.prototype.get_eb = function () {
        return true;
    };
    RadialPieSeries.prototype.get_ab5 = function () {
        return true;
    };
    RadialPieSeries.prototype.get_abz = function () {
        return true;
    };
    RadialPieSeries.prototype.aa2 = function (a, b) {
        _super.prototype.aa2.call(this, a, b);
        var c = b;
        var d = b.by;
        var e = b.bx;
        var f = this.getEffectiveViewport1(b);
        var g = this.wd(b);
        var h = this.yw.k2(e, d, f, g);
        var i = a.f;
        var j = this.yw;
        var k = Math.max(0, 0.5 * j.no);
        var l = k;
        l = Math.max(l, h.minLength);
        var m = this.yr.k5(d, e, f);
        var n = this.yr.cl;
        var o = { $type: Point_$type, x: 0.5, y: 0.5 };
        var p = this.adh;
        var q = this.adi;
        var r = (p > 0 && q > 0);
        var s = this.abx.count;
        this.y7.a2(this, this.zo(), runOn(this, this.yf), this.zx(b), this.zy(b));
        this.y7.r = this.adh;
        this.y7.s = this.adi;
        this.y7.k = this.adh;
        this.y7.l = this.adi;
        var t = false;
        var u = this.y7.b;
        if (u != null) {
            t = true;
        }
        var v = this.yr;
        var w = new ScalerParams(1, b.by, b.bx, v.ch);
        w.c = this.getEffectiveViewport();
        var x = 0;
        var y = 0;
        for (var z = 0; z < i.count; ++z) {
            var aa = i._inner[z][0];
            var ab = Math.min(i._inner[z][2], h.maxLength);
            var ac = i._inner[z][1];
            var ad = i._inner[z][2];
            var ae = i._inner[z][3];
            if (t) {
                this.act(i, z, s, v, w, b.q);
            }
            if (n) {
                if (isNaN_(aa) || isNaN_(ac) || isNaN_(ad)) {
                    continue;
                }
                var af = (b.cx.c + z) * b.cx.b;
                if ((b.cx.c + z) * b.cx.b > this.yr.lh - 1) {
                    if ((af) * b.cx.b >= this.yr.lg) {
                        af = (af) - (intDivide((this.yr.lg), b.cx.b));
                    }
                }
                m = ae;
                if (isNaN_(m)) {
                    continue;
                }
            }
            var ag = c.c6.item(x);
            x++;
            var ah = this.y7.k;
            var ai = this.y7.l;
            r = (ah > 0 && ai > 0);
            var aj = null;
            if (r) {
                aj = this.adr(d, e, f, aa - (m * 0.5), aa + (m * 0.5), l, ab, o, ah, ai);
            }
            else {
                aj = this.ads(d, e, f, aa - (m * 0.5), aa + (m * 0.5), l, ab, o);
            }
            ag.an = aj;
            this.y7.ad(ag, false, false, false, false);
            var ak = i._inner[z][2];
            if (ak > y) {
                y = ak;
            }
        }
        c.cz = ViewportUtils.f(y, d, e);
        c.c0 = { $type: Point_$type, x: ViewportUtils.e(o.x, d, e, f), y: ViewportUtils.i(o.y, d, e, f) };
        c.c6.count = x;
        c.db();
    };
    RadialPieSeries.prototype.ads = function (a, b, c, d, e, f, g, h) {
        var i = SliceCoords.b(a, b, c, d, e, f, g, h);
        var j = new PathFigure();
        j._startPoint = i.d;
        j._isClosed = true;
        j._segments.add(((function () {
            var $ret = new LineSegment(1);
            $ret.c = i.f;
            return $ret;
        })()));
        j._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = i.h;
            $ret.f = i.n;
            $ret.d = 1;
            $ret.b = i.c;
            return $ret;
        })()));
        j._segments.add(((function () {
            var $ret = new LineSegment(1);
            $ret.c = i.j;
            return $ret;
        })()));
        j._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = i.d;
            $ret.f = i.m;
            $ret.d = 0;
            $ret.b = i.c;
            return $ret;
        })()));
        var k = new PathGeometry();
        k.c.add(j);
        return k;
    };
    RadialPieSeries.prototype.adg = function (a, b, c, d, e, f, g, h) {
        var i = SliceCoords.b(a, b, c, d, e, f, g, h);
        if (isNaN_(i.n.width) || isNaN_(d) || isNaN_(e)) {
            return null;
        }
        var j = ViewportUtils.e(0.5, a, b, c);
        var k = ViewportUtils.i(0.5, a, b, c);
        return new PieSliceCollisionGeometry(j, k, i.n.width, i.m.width, d, e);
    };
    RadialPieSeries.prototype.adr = function (a, b, c, d, e, f, g, h, i, j) {
        var k = SliceCoords.a(a, b, c, d, e, f, g, h, i, j);
        if (k == null) {
            return this.ads(a, b, c, d, e, f, g, h);
        }
        var l = new PathFigure();
        l._startPoint = k.d;
        l._isClosed = true;
        var m = ((d + ((e - d) * 0.5)) * 180 / Math.PI) + 90;
        var n = new Size(1, k.l.width * (f / g), k.l.height * (f / g));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.e;
            $ret.f = n;
            $ret.c = m;
            $ret.d = 1;
            $ret.b = false;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new LineSegment(1);
            $ret.c = k.f;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.g;
            $ret.f = k.l;
            $ret.c = m;
            $ret.d = 1;
            $ret.b = false;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.h;
            $ret.f = k.n;
            $ret.d = 1;
            $ret.b = k.c;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.i;
            $ret.f = k.l;
            $ret.c = m;
            $ret.d = 1;
            $ret.b = false;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new LineSegment(1);
            $ret.c = k.j;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.k;
            $ret.f = n;
            $ret.c = m;
            $ret.d = 1;
            $ret.b = false;
            return $ret;
        })()));
        l._segments.add(((function () {
            var $ret = new ArcSegment();
            $ret.e = k.d;
            $ret.f = k.m;
            $ret.d = 0;
            $ret.b = k.c;
            return $ret;
        })()));
        var o = new PathGeometry();
        o.c.add(l);
        return o;
    };
    RadialPieSeries.prototype.q5 = function (a, b, c, d) {
        _super.prototype.q5.call(this, a, b, c, d);
        switch (b) {
            case RadialPieSeries.$$p[0]:
            case RadialPieSeries.$$p[1]:
                this.qz();
                break;
            case "FastItemsSource":
                if (c != null) {
                    if (this.adf != null) {
                        c.deregisterColumn(this.adf);
                    }
                }
                if (d != null) {
                    if (this.adl != null) {
                        this.adf = this.dk(this.adl);
                    }
                }
                break;
            case "LegendLabelMemberPath":
                if (this.dl != null) {
                    this.dl.deregisterColumn(this.adf);
                    this.adf = this.dk(this.adl);
                    this.pc();
                    this.pq();
                }
                break;
        }
    };
    RadialPieSeries.prototype.wh = function (a) {
        var b = this.add.by;
        var c = this.add.bx;
        var d = this.getEffectiveViewport1(this.add);
        var e = this.wd(this.add);
        var f = this.yw.k2(c, b, d, e);
        var g = { $type: Point_$type, x: 0.5, y: 0.5 };
        var h = GeometryUtil.i(g, a);
        var i = this.y1.f;
        for (var j = 0; j < i.count; j++) {
            var k = i._inner[j][0];
            var l = Math.min(i._inner[j][2], f.maxLength);
            var m = i._inner[j][3];
            if (h >= k - (m * 0.5) && h <= k + (m * 0.5)) {
                var n = Math.max(0, 0.5 * this.yw.no);
                var o = n;
                o = Math.max(o, f.minLength);
                var p = SliceCoords.b(b, c, d, k - (m * 0.5), k + (m * 0.5), o, l, g);
                var q = GeometryUtil.q({ $type: Point_$type, x: ViewportUtils.e(g.x, b, c, d), y: ViewportUtils.i(g.y, b, c, d) }, MathUtil.f(k), p.n.width);
                var r = 1.7976931348623157E+308;
                var s = 1.7976931348623157E+308;
                var t = -1.7976931348623157E+308;
                var u = -1.7976931348623157E+308;
                r = Math.min(r, p.d.x);
                r = Math.min(r, p.f.x);
                r = Math.min(r, p.h.x);
                r = Math.min(r, p.j.x);
                r = Math.min(r, q.x);
                s = Math.min(s, p.d.y);
                s = Math.min(s, p.f.y);
                s = Math.min(s, p.h.y);
                s = Math.min(s, p.j.y);
                s = Math.min(s, q.y);
                t = Math.max(t, p.d.x);
                t = Math.max(t, p.f.x);
                t = Math.max(t, p.h.x);
                t = Math.max(t, p.j.x);
                t = Math.max(t, q.x);
                u = Math.max(u, p.d.y);
                u = Math.max(u, p.f.y);
                u = Math.max(u, p.h.y);
                u = Math.max(u, p.j.y);
                u = Math.max(u, q.y);
                return new Rect(0, r, s, t - r, u - s);
            }
        }
        return new Rect(0, 0, 0, 0, 0);
    };
    RadialPieSeries.prototype.ks = function (a) {
        if (this.adf != null) {
            return this.adf.item(a);
        }
        return null;
    };
    RadialPieSeries.$t = markType(RadialPieSeries, 'RadialPieSeries', AnchoredRadialSeries.$);
    RadialPieSeries.$$p = markDep(DependencyProperty, PropertyMetadata, RadialPieSeries, 'raisePropertyChanged', ['RadiusX:adh:adp', [1, 2], 'RadiusY:adi:adq', [1, 2]]);
    return RadialPieSeries;
}(AnchoredRadialSeries));
export { RadialPieSeries };
/**
 * @hidden
 */
var RadialPieSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(RadialPieSeriesView, _super);
    function RadialPieSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.c5 = null;
        _this.c6 = null;
        _this.c7 = null;
        _this.dc = new Path();
        _this.c5 = a;
        _this.c6 = ((function () {
            var $ret = new Pool$1(Path.$);
            $ret.create = runOn(_this, _this.dd);
            $ret.activate = runOn(_this, _this.c8);
            $ret.disactivate = runOn(_this, _this.da);
            $ret.destroy = runOn(_this, _this.c9);
            return $ret;
        })());
        return _this;
    }
    RadialPieSeriesView.prototype.au = function () {
        _super.prototype.au.call(this);
        this.c7 = new List$1(Path.$, 0);
        if (!this.q) {
            this.cw.w2 = Defaults.c;
            this.cw.jn = Defaults.i;
        }
    };
    RadialPieSeriesView.prototype.dd = function () {
        var _this = this;
        var a = ((function () {
            var $ret = new Path();
            $ret.dataContext = ((function () {
                var $ret = new DataContext();
                $ret.series = _this.e;
                return $ret;
            })());
            return $ret;
        })());
        this.c7.add(a);
        a._visibility = 1;
        return a;
    };
    RadialPieSeriesView.prototype.c8 = function (a) {
        a._visibility = 0;
    };
    RadialPieSeriesView.prototype.da = function (a) {
        a._visibility = 1;
    };
    RadialPieSeriesView.prototype.c9 = function (a) {
        this.c7.remove(a);
    };
    RadialPieSeriesView.prototype.bg = function (a, b) {
        _super.prototype.bg.call(this, a, b);
        var c = a;
    };
    RadialPieSeriesView.prototype.ac = function (a) {
        return this.c7._inner[a];
    };
    RadialPieSeriesView.prototype.ab = function (a) {
        var b = this.c7._inner[a];
        this.dc._visibility = b._visibility;
        this.dc.an = b.an;
        var c = this.bs(a);
        this.dc._fill = c;
        this.dc._stroke = c;
        this.dc.ad = this.e.ic;
        return this.dc;
    };
    RadialPieSeriesView.prototype.a8 = function (a, b) {
        _super.prototype.a8.call(this, a, b);
        if (a.d) {
            for (var c = 0; c < this.c7.count; c++) {
                var d = this.aa(c, b);
                a.t(d);
            }
        }
    };
    RadialPieSeriesView.prototype.db = function () {
        this.as();
    };
    RadialPieSeriesView.prototype.an = function (a) {
        var e_1, _a;
        _super.prototype.an.call(this, a);
        var b = 0;
        try {
            for (var _b = __values(fromEnum(this.c6.a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                this.e.bb.exportPathData(a, c, "slice" + b, ["Main", "Fill"]);
                b++;
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
    };
    RadialPieSeriesView.$t = markType(RadialPieSeriesView, 'RadialPieSeriesView', AnchoredRadialSeriesView.$);
    return RadialPieSeriesView;
}(AnchoredRadialSeriesView));
export { RadialPieSeriesView };
