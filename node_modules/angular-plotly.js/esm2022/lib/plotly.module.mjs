import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { PlotlyService } from './plotly.service';
import { PlotlySharedModule } from './plotly-shared.module';
import * as i0 from "@angular/core";
export class PlotlyModule {
    static { this.plotlyjs = {}; }
    constructor() {
        if (!this.isValid()) {
            const msg = 'Invalid PlotlyJS object. Please check https://github.com/plotly/angular-plotly.js#quick-start'
                + ' to see how to add PlotlyJS to your project.';
            throw new Error(msg);
        }
        PlotlyService.setPlotly(PlotlyModule.plotlyjs);
    }
    isValid() {
        return PlotlyModule.plotlyjs !== undefined
            && (typeof PlotlyModule.plotlyjs.plot === 'function'
                || typeof PlotlyModule.plotlyjs.newPlot === 'function');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PlotlyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.12", ngImport: i0, type: PlotlyModule, imports: [CommonModule, PlotlySharedModule], exports: [PlotlySharedModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PlotlyModule, providers: [PlotlyService], imports: [CommonModule, PlotlySharedModule, PlotlySharedModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: PlotlyModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [CommonModule, PlotlySharedModule],
                    providers: [PlotlyService],
                    exports: [PlotlySharedModule],
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGxvdGx5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Bsb3RseS9zcmMvbGliL3Bsb3RseS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOztBQVU1RCxNQUFNLE9BQU8sWUFBWTthQUNQLGFBQVEsR0FBUSxFQUFFLENBQUM7SUFFakM7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ2pCLE1BQU0sR0FBRyxHQUFHLCtGQUErRjtrQkFDckcsOENBQThDLENBQUM7WUFDckQsTUFBTSxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtRQUVELGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFTyxPQUFPO1FBQ1gsT0FBTyxZQUFZLENBQUMsUUFBUSxLQUFLLFNBQVM7ZUFDbkMsQ0FBQyxPQUFPLFlBQVksQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLFVBQVU7bUJBQzdDLE9BQU8sWUFBWSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUM7SUFDcEUsQ0FBQzsrR0FqQlEsWUFBWTtnSEFBWixZQUFZLFlBSlgsWUFBWSxFQUFFLGtCQUFrQixhQUVoQyxrQkFBa0I7Z0hBRW5CLFlBQVksYUFIVixDQUFDLGFBQWEsQ0FBQyxZQURoQixZQUFZLEVBQUUsa0JBQWtCLEVBRWhDLGtCQUFrQjs7NEZBRW5CLFlBQVk7a0JBTnhCLFFBQVE7bUJBQUM7b0JBQ04sWUFBWSxFQUFFLEVBQUU7b0JBQ2hCLE9BQU8sRUFBRSxDQUFDLFlBQVksRUFBRSxrQkFBa0IsQ0FBQztvQkFDM0MsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUMxQixPQUFPLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDaEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgUGxvdGx5U2VydmljZSB9IGZyb20gJy4vcGxvdGx5LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBQbG90bHlTaGFyZWRNb2R1bGUgfSBmcm9tICcuL3Bsb3RseS1zaGFyZWQubW9kdWxlJztcclxuXHJcblxyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogW10sXHJcbiAgICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlLCBQbG90bHlTaGFyZWRNb2R1bGVdLFxyXG4gICAgcHJvdmlkZXJzOiBbUGxvdGx5U2VydmljZV0sXHJcbiAgICBleHBvcnRzOiBbUGxvdGx5U2hhcmVkTW9kdWxlXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFBsb3RseU1vZHVsZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHBsb3RseWpzOiBhbnkgPSB7fTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG1zZyA9ICdJbnZhbGlkIFBsb3RseUpTIG9iamVjdC4gUGxlYXNlIGNoZWNrIGh0dHBzOi8vZ2l0aHViLmNvbS9wbG90bHkvYW5ndWxhci1wbG90bHkuanMjcXVpY2stc3RhcnQnXHJcbiAgICAgICAgICAgICAgICArICcgdG8gc2VlIGhvdyB0byBhZGQgUGxvdGx5SlMgdG8geW91ciBwcm9qZWN0Lic7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgUGxvdGx5U2VydmljZS5zZXRQbG90bHkoUGxvdGx5TW9kdWxlLnBsb3RseWpzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzVmFsaWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIFBsb3RseU1vZHVsZS5wbG90bHlqcyAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICYmICh0eXBlb2YgUGxvdGx5TW9kdWxlLnBsb3RseWpzLnBsb3QgPT09ICdmdW5jdGlvbidcclxuICAgICAgICAgICAgICAgIHx8IHR5cGVvZiBQbG90bHlNb2R1bGUucGxvdGx5anMubmV3UGxvdCA9PT0gJ2Z1bmN0aW9uJyk7XHJcbiAgICB9XHJcbn1cclxuIl19